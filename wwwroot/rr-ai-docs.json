{
  "utilityPatterns": {
    "mixins": {
      "text-truncate": {
        "aiHint": "Use @include text-truncate for consistent styling",
        "pattern": "@include text-truncate",
        "description": "SCSS mixin for reusable styles"
      },
      "responsive-min": {
        "aiHint": "Use @include responsive-min for consistent styling",
        "pattern": "@include responsive-min",
        "description": "SCSS mixin for reusable styles"
      },
      "loading-skeleton": {
        "aiHint": "Use @include loading-skeleton for consistent styling",
        "pattern": "@include loading-skeleton",
        "description": "SCSS mixin for reusable styles"
      },
      "hover-lift-enhanced": {
        "aiHint": "Use @include hover-lift-enhanced for consistent styling",
        "pattern": "@include hover-lift-enhanced",
        "description": "SCSS mixin for reusable styles"
      },
      "button-reset": {
        "aiHint": "Use @include button-reset for consistent styling",
        "pattern": "@include button-reset",
        "description": "SCSS mixin for reusable styles"
      },
      "form-control": {
        "aiHint": "Use @include form-control for consistent styling",
        "pattern": "@include form-control",
        "description": "SCSS mixin for reusable styles"
      },
      "text-heading-2xl": {
        "aiHint": "Use @include text-heading-2xl for consistent styling",
        "pattern": "@include text-heading-2xl",
        "description": "SCSS mixin for reusable styles"
      },
      "text-body": {
        "aiHint": "Use @include text-body for consistent styling",
        "pattern": "@include text-body",
        "description": "SCSS mixin for reusable styles"
      },
      "flex-between": {
        "aiHint": "Use @include flex-between for consistent styling",
        "pattern": "@include flex-between",
        "description": "SCSS mixin for reusable styles"
      },
      "container-base": {
        "aiHint": "Use @include container-base for consistent styling",
        "pattern": "@include container-base",
        "description": "SCSS mixin for reusable styles"
      },
      "container-responsive": {
        "aiHint": "Use @include container-responsive for consistent styling",
        "pattern": "@include container-responsive",
        "description": "SCSS mixin for reusable styles"
      },
      "flex-center": {
        "aiHint": "Use @include flex-center for consistent styling",
        "pattern": "@include flex-center",
        "description": "SCSS mixin for reusable styles"
      },
      "heading-base": {
        "aiHint": "Use @include heading-base for consistent styling",
        "pattern": "@include heading-base",
        "description": "SCSS mixin for reusable styles"
      },
      "card-styles": {
        "aiHint": "Use @include card-styles for consistent styling",
        "pattern": "@include card-styles",
        "description": "SCSS mixin for reusable styles"
      },
      "fixed-full": {
        "aiHint": "Use @include fixed-full for consistent styling",
        "pattern": "@include fixed-full",
        "description": "SCSS mixin for reusable styles"
      },
      "grid-auto-fill": {
        "aiHint": "Use @include grid-auto-fill for consistent styling",
        "pattern": "@include grid-auto-fill",
        "description": "SCSS mixin for reusable styles"
      },
      "text-heading-md": {
        "aiHint": "Use @include text-heading-md for consistent styling",
        "pattern": "@include text-heading-md",
        "description": "SCSS mixin for reusable styles"
      },
      "text-body-lg": {
        "aiHint": "Use @include text-body-lg for consistent styling",
        "pattern": "@include text-body-lg",
        "description": "SCSS mixin for reusable styles"
      },
      "responsive-grid": {
        "aiHint": "Use @include responsive-grid for consistent styling",
        "pattern": "@include responsive-grid",
        "description": "SCSS mixin for reusable styles"
      },
      "touch-friendly": {
        "aiHint": "Use @include touch-friendly for consistent styling",
        "pattern": "@include touch-friendly",
        "description": "SCSS mixin for reusable styles"
      },
      "absolute-fill": {
        "aiHint": "Use @include absolute-fill for consistent styling",
        "pattern": "@include absolute-fill",
        "description": "SCSS mixin for reusable styles"
      },
      "container": {
        "aiHint": "Use @include container for consistent styling",
        "pattern": "@include container",
        "description": "SCSS mixin for reusable styles"
      },
      "container-fluid-base": {
        "aiHint": "Use @include container-fluid-base for consistent styling",
        "pattern": "@include container-fluid-base",
        "description": "SCSS mixin for reusable styles"
      },
      "hover-lift": {
        "aiHint": "Use @include hover-lift for consistent styling",
        "pattern": "@include hover-lift",
        "description": "SCSS mixin for reusable styles"
      },
      "text-heading-xl": {
        "aiHint": "Use @include text-heading-xl for consistent styling",
        "pattern": "@include text-heading-xl",
        "description": "SCSS mixin for reusable styles"
      },
      "grid-cards": {
        "aiHint": "Use @include grid-cards for consistent styling",
        "pattern": "@include grid-cards",
        "description": "SCSS mixin for reusable styles"
      },
      "text-clamp": {
        "aiHint": "Use @include text-clamp for consistent styling",
        "pattern": "@include text-clamp",
        "description": "SCSS mixin for reusable styles"
      },
      "responsive": {
        "aiHint": "Use @include responsive for consistent styling",
        "pattern": "@include responsive",
        "description": "SCSS mixin for reusable styles"
      },
      "empty-container-styles": {
        "aiHint": "Use @include empty-container-styles for consistent styling",
        "pattern": "@include empty-container-styles",
        "description": "SCSS mixin for reusable styles"
      },
      "glass-base": {
        "aiHint": "Use @include glass-base for consistent styling",
        "pattern": "@include glass-base",
        "description": "SCSS mixin for reusable styles"
      },
      "status-variant": {
        "aiHint": "Use @include status-variant for consistent styling",
        "pattern": "@include status-variant",
        "description": "SCSS mixin for reusable styles"
      },
      "card-hover": {
        "aiHint": "Use @include card-hover for consistent styling",
        "pattern": "@include card-hover",
        "description": "SCSS mixin for reusable styles"
      },
      "hover-animation": {
        "aiHint": "Use @include hover-animation for consistent styling",
        "pattern": "@include hover-animation",
        "description": "SCSS mixin for reusable styles"
      },
      "responsive-max": {
        "aiHint": "Use @include responsive-max for consistent styling",
        "pattern": "@include responsive-max",
        "description": "SCSS mixin for reusable styles"
      },
      "loading-spinner": {
        "aiHint": "Use @include loading-spinner for consistent styling",
        "pattern": "@include loading-spinner",
        "description": "SCSS mixin for reusable styles"
      },
      "responsive-between": {
        "aiHint": "Use @include responsive-between for consistent styling",
        "pattern": "@include responsive-between",
        "description": "SCSS mixin for reusable styles"
      },
      "close-button": {
        "aiHint": "Use @include close-button for consistent styling",
        "pattern": "@include close-button",
        "description": "SCSS mixin for reusable styles"
      },
      "flex-start": {
        "aiHint": "Use @include flex-start for consistent styling",
        "pattern": "@include flex-start",
        "description": "SCSS mixin for reusable styles"
      },
      "text-sm": {
        "aiHint": "Use @include text-sm for consistent styling",
        "pattern": "@include text-sm",
        "description": "SCSS mixin for reusable styles"
      },
      "button-hover": {
        "aiHint": "Use @include button-hover for consistent styling",
        "pattern": "@include button-hover",
        "description": "SCSS mixin for reusable styles"
      },
      "flex-end": {
        "aiHint": "Use @include flex-end for consistent styling",
        "pattern": "@include flex-end",
        "description": "SCSS mixin for reusable styles"
      },
      "card-base": {
        "aiHint": "Use @include card-base for consistent styling",
        "pattern": "@include card-base",
        "description": "SCSS mixin for reusable styles"
      },
      "text-caption": {
        "aiHint": "Use @include text-caption for consistent styling",
        "pattern": "@include text-caption",
        "description": "SCSS mixin for reusable styles"
      },
      "inline-flex-center": {
        "aiHint": "Use @include inline-flex-center for consistent styling",
        "pattern": "@include inline-flex-center",
        "description": "SCSS mixin for reusable styles"
      },
      "element": {
        "aiHint": "Use @include element for consistent styling",
        "pattern": "@include element",
        "description": "SCSS mixin for reusable styles"
      },
      "breakpoint": {
        "aiHint": "Use @include breakpoint for consistent styling",
        "pattern": "@include breakpoint",
        "description": "SCSS mixin for reusable styles"
      },
      "modifier": {
        "aiHint": "Use @include modifier for consistent styling",
        "pattern": "@include modifier",
        "description": "SCSS mixin for reusable styles"
      },
      "flex-column": {
        "aiHint": "Use @include flex-column for consistent styling",
        "pattern": "@include flex-column",
        "description": "SCSS mixin for reusable styles"
      },
      "grid-auto-fit": {
        "aiHint": "Use @include grid-auto-fit for consistent styling",
        "pattern": "@include grid-auto-fit",
        "description": "SCSS mixin for reusable styles"
      },
      "text-heading-lg": {
        "aiHint": "Use @include text-heading-lg for consistent styling",
        "pattern": "@include text-heading-lg",
        "description": "SCSS mixin for reusable styles"
      },
      "focus-ring": {
        "aiHint": "Use @include focus-ring for consistent styling",
        "pattern": "@include focus-ring",
        "description": "SCSS mixin for reusable styles"
      },
      "component-base": {
        "aiHint": "Use @include component-base for consistent styling",
        "pattern": "@include component-base",
        "description": "SCSS mixin for reusable styles"
      },
      "text-heading-sm": {
        "aiHint": "Use @include text-heading-sm for consistent styling",
        "pattern": "@include text-heading-sm",
        "description": "SCSS mixin for reusable styles"
      }
    }
  },
  "aiPatterns": [
    {
      "name": "Executive Dashboard Widget",
      "useCase": "dashboards, analytics, metrics display",
      "prompt": "Create a professional metrics card for executive dashboard",
      "category": "Business",
      "code": "<RCard Title=\"Revenue\" Elevation=\"4\" class=\"glass-light\"><div class=\"pa-6\"><div class=\"d-flex justify-between align-center\"><span class=\"text-2xl font-bold\">$42,580</span><RBadge Text=\"+12%\" Variant=\"Success\" /></div></div></RCard>"
    },
    {
      "name": "Form Section Layout",
      "useCase": "forms, data entry, user management",
      "prompt": "Create organized form section with validation",
      "category": "Forms",
      "code": "<RForm TModel=\"AccountSetupModel\" ValidationMode=\"Hybrid\"><FormFields><RFormField FieldType=\"Email\" Label=\"Email\" Size=\"Large\" Variant=\"FloatingLabel\" StartIcon=\"email\" /></FormFields></RForm>"
    },
    {
      "name": "Data Management Interface",
      "useCase": "CRUD operations, data tables, management interfaces",
      "prompt": "Create table with search and actions",
      "category": "Data",
      "code": "<div class=\"d-flex justify-between mb-4\"><RFormField Type=\"Search\" class=\"flex-grow-1\" /><RButton Text=\"Add\" Variant=\"Primary\" /></div><RDataTable Items=\"@data\" class=\"elevation-2\" />"
    },
    {
      "name": "Professional Card with Glass Effect",
      "useCase": "account setup, login forms, professional cards",
      "prompt": "Create elevated card with glassmorphism for account setup",
      "category": "Layout",
      "code": "<RCard Elevation=\"8\" Class=\"glass-frost backdrop-blur-xl\"><div class=\"pa-2\"><h5 class=\"text-h6 font-semibold mb-0\">Title</h5><p class=\"text-caption text--secondary\">Description</p></div></RCard>"
    },
    {
      "name": "Form Field with Icons",
      "useCase": "password fields, secure inputs, icon interactions",
      "prompt": "Create password field with visibility toggle",
      "category": "Forms",
      "code": "<RFormField Label=\"Password\" FieldType=\"@(showPassword ? FieldType.Text : FieldType.Password)\" StartIcon=\"lock\" EndIcon=\"@(showPassword ? \\\"visibility_off\\\" : \\\"visibility\\\")\" OnEndIconClick=\"ToggleVisibility\" Size=\"Medium\" Required />"
    },
    {
      "name": "Section Divider with Icon",
      "useCase": "form sections, content organization, visual hierarchy",
      "prompt": "Create section divider for form organization",
      "category": "Layout",
      "code": "<RSectionDivider Title=\"Security Setup\" Icon=\"security\" Variant=\"Primary\" Size=\"Compact\" ShowLine=\"true\" />"
    },
    {
      "name": "Responsive Grid Layout",
      "useCase": "responsive forms, multi-column layouts, mobile-first design",
      "prompt": "Create responsive two-column form grid",
      "category": "Layout",
      "code": "<div class=\"d-grid gap-1 grid-cols-1 grid-cols-md-2\"><RFormField Label=\"First Name\" StartIcon=\"person\" /><RFormField Label=\"Last Name\" StartIcon=\"person\" /></div>"
    },
    {
      "name": "Loading Button State",
      "useCase": "form submission, async operations, loading states",
      "prompt": "Create button with loading state",
      "category": "Interaction",
      "code": "<RButton Text=\"@(isProcessing ? \\\"Processing...\\\" : \\\"Submit\\\")\" Icon=\"@(isProcessing ? \\\"progress_activity\\\" : \\\"check\\\")\" Variant=\"Primary\" Elevation=\"4\" Loading=\"@isProcessing\" Disabled=\"@isProcessing\" Class=\"w-full\" />"
    }
  ],
  "cssVariables": {
    "--shadow-{variants}": {
      "aiHint": "Elevation shadow system",
      "pattern": "--shadow-{level}",
      "variants": [
        "2xl",
        "lg",
        "md",
        "sm",
        "xl"
      ]
    },
    "--radius-{variants}": {
      "aiHint": "Border radius scale",
      "pattern": "--radius-{size}",
      "variants": [
        "2xl",
        "full",
        "lg",
        "md",
        "none",
        "sm",
        "xl"
      ]
    },
    "--space-{sizes}": {
      "aiHint": "Standard spacing scale for consistent layouts",
      "sizes": [
        "0",
        "0-5",
        "1",
        "1-5",
        "10",
        "11",
        "12",
        "14",
        "16",
        "2",
        "2-5",
        "20",
        "24",
        "28",
        "3",
        "3-5",
        "32",
        "36",
        "4",
        "40",
        "44",
        "48",
        "5",
        "52",
        "56",
        "6",
        "60",
        "64",
        "7",
        "72",
        "8",
        "80",
        "9",
        "96",
        "px"
      ],
      "pattern": "--space-{size}"
    },
    "--color-{status}": {
      "aiHint": "Use for status colors like --color-error, --color-success",
      "values": [
        "error",
        "info",
        "neutral",
        "success",
        "warning"
      ],
      "pattern": "--color-{status}"
    },
    "--color-{category}-{variant}": {
      "categories": [
        "accent",
        "background",
        "border",
        "error",
        "focus",
        "glass",
        "info",
        "interactive",
        "neutral",
        "overlay",
        "success",
        "text",
        "warning"
      ],
      "aiHint": "Use --color-text-primary for main text, --color-background-elevated for cards",
      "pattern": "--color-{category}-{variant}",
      "variants": {
        "border": [
          "light",
          "medium",
          "strong"
        ],
        "accent": [
          "cyan",
          "purple"
        ],
        "info": "bg",
        "overlay": [
          "dark",
          "light",
          "medium"
        ],
        "neutral": "bg",
        "background": [
          "elevated",
          "glass",
          "modal",
          "overlay",
          "primary",
          "secondary"
        ],
        "warning": "bg",
        "success": "bg",
        "interactive": [
          "focus",
          "ghost",
          "ghost-hover",
          "hover",
          "light",
          "primary",
          "primary-active",
          "primary-hover",
          "secondary",
          "secondary-hover"
        ],
        "focus": "primary",
        "error": "bg",
        "glass": [
          "heavy",
          "light",
          "medium"
        ],
        "text": [
          "accent",
          "inverse",
          "on-error",
          "on-info",
          "on-primary",
          "on-secondary",
          "on-success",
          "on-warning",
          "primary",
          "quaternary",
          "secondary",
          "tertiary"
        ]
      }
    },
    "--font-family-{type}": {
      "aiHint": "Font family types (primary, secondary, mono)",
      "pattern": "--font-family-{type}",
      "types": [
        "mono",
        "primary",
        "secondary"
      ]
    },
    "--font-{weight}": {
      "weights": [
        "black",
        "bold",
        "extrabold",
        "extralight",
        "light",
        "medium",
        "normal",
        "semibold",
        "thin"
      ],
      "aiHint": "Font weight scale from thin to black",
      "pattern": "--font-{weight}"
    }
  },
  "components": {
    "RChip": {
      "patterns": {
        "removable-chip": "Closeable=\"true\" OnClose=\"RemoveChip\" for deletable tags",
        "filter-chip": "Clickable=\"true\" OnClick=\"ToggleFilter\" for interactive filters",
        "selected-chip": "Selected=\"true\" for active state indication"
      },
      "commonUse": "filter chips, tag lists, multi-select indicators, status tags",
      "aiPrompt": "Create a chip/tag for filters, selections, or labels",
      "description": "Professional chip component for tags, filters, and selections with interactive states. Supports removable chips, selection indicators, icons, and multiple variants.",
      "category": "Core",
      "avoidUsage": "Don't use for buttons - use RButton. Avoid for large content blocks.",
      "parameters": {
        "Text": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Text",
          "aiHint": ""
        },
        "Size": {
          "isRequired": true,
          "type": "ChipSize",
          "description": "",
          "name": "Size",
          "aiHint": ""
        },
        "OnClick": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "",
          "name": "OnClick",
          "aiHint": ""
        },
        "OnClose": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "",
          "name": "OnClose",
          "aiHint": ""
        },
        "Selected": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "Selected",
          "aiHint": ""
        },
        "Disabled": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "Disabled",
          "aiHint": ""
        },
        "Closeable": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "Closeable",
          "aiHint": ""
        },
        "Icon": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Icon",
          "aiHint": ""
        },
        "IconPosition": {
          "isRequired": true,
          "type": "IconPosition",
          "description": "",
          "name": "IconPosition",
          "aiHint": ""
        },
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Class",
          "aiHint": ""
        },
        "Variant": {
          "isRequired": true,
          "type": "ChipVariant",
          "description": "",
          "name": "Variant",
          "aiHint": ""
        },
        "Clickable": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "Clickable",
          "aiHint": ""
        }
      },
      "name": "RChip",
      "complexity": "Simple",
      "filePath": "/Components/Core/RChip.razor"
    },
    "RButton": {
      "patterns": {
        "secondary-action": "Variant=\"ButtonVariant.Secondary\" for supporting actions like Cancel, Back",
        "icon-button": "Icon=\"icon_name\" IconPosition=\"IconPosition.Start\" for buttons with icons",
        "destructive-action": "Variant=\"ButtonVariant.Danger\" for destructive actions like Delete, Remove",
        "loading-button": "Loading=\"true\" LoadingText=\"Processing...\" for async operations",
        "primary-action": "Variant=\"ButtonVariant.Primary\" for main actions like Save, Submit, Create"
      },
      "commonUse": "forms, navigation, actions, toolbars, dashboards",
      "aiPrompt": "Create a professional button for user actions",
      "description": "Professional button component with enterprise variants, AI-optimized for rapid development. Supports 9 variants, 5 sizes, loading states, elevation effects, and comprehensive accessibility.",
      "category": "Core",
      "avoidUsage": "Don't use for navigation links - use RLink instead. Avoid for simple text without actions.",
      "parameters": {
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "Additional CSS classes",
          "name": "Class",
          "aiHint": ""
        },
        "AriaLabel": {
          "isRequired": true,
          "type": "string",
          "description": "Accessibility label",
          "name": "AriaLabel",
          "aiHint": ""
        },
        "FullWidth": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether button spans full width",
          "name": "FullWidth",
          "aiHint": ""
        },
        "Disabled": {
          "isRequired": true,
          "type": "bool",
          "description": "Button variant style - determines visual appearance and behavior</summary>\r\n    /// <ai-hint>Primary for main actions, Secondary for supporting actions, Danger for destructive actions</ai-hint>\r\n    [Parameter] \r\n    [AIParameter(Hint = \"Primary for main actions, Secondary for supporting, Danger for destructive\", \r\n                 SuggestedValues = new[] { \"Primary\", \"Secondary\", \"Danger\", \"Ghost\", \"Outline\" }, \r\n                 IsRequired = false)]\r\n    public ButtonVariant Variant { get; set; } = ButtonVariant.Primary;\r\n    \r\n    /// <summary>Button size - affects padding, text size, and overall dimensions</summary>\r\n    /// <ai-hint>Medium is default, Large for prominent actions, Small for compact layouts</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Medium is default, Large for prominent actions, Small for compact\", \r\n                 SuggestedValues = new[] { \"Small\", \"Medium\", \"Large\" })]\r\n    public ButtonSize Size { get; set; } = ButtonSize.Medium;\r\n    \r\n    /// <summary>Button type attribute for form interaction</summary>\r\n    /// <ai-hint>Use Submit for form submission buttons, Button for regular actions</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Submit for forms, Button for regular actions\", \r\n                 SuggestedValues = new[] { \"Button\", \"Submit\", \"Reset\" })]\r\n    public ButtonType Type { get; set; } = ButtonType.Button;\r\n    \r\n    /// <summary>Button text content - the main label displayed on the button</summary>\r\n    /// <ai-hint>Use action verbs like Save, Delete, Create, Cancel. Keep concise.</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Use action verbs like Save, Delete, Create. Keep concise.\", IsRequired = false)]\r\n    public string Text { get; set; }\r\n    \r\n    /// <summary>Material icon name to display alongside text</summary>\r\n    /// <ai-hint>Common icons: save, delete, edit, add, search, settings, home, arrow_forward</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Common icons: save, delete, edit, add, search, settings\", \r\n                 SuggestedValues = new[] { \"save\", \"delete\", \"edit\", \"add\", \"search\", \"settings\" })]\r\n    public string Icon { get; set; }\r\n    \r\n    /// <summary>Position of icon relative to text content</summary>\r\n    /// <ai-hint>Start is most common, End for arrows/navigation, Top for stacked layouts</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Start is most common, End for arrows, Top for stacked layouts\", \r\n                 SuggestedValues = new[] { \"Start\", \"End\", \"Top\", \"Bottom\" })]\r\n    public IconPosition IconPosition { get; set; } = IconPosition.Start;\r\n    \r\n    /// <summary>Whether button is disabled",
          "name": "Disabled",
          "aiHint": ""
        },
        "HasShadow": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether button should have shadow",
          "name": "HasShadow",
          "aiHint": ""
        },
        "Loading": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether button is in loading state",
          "name": "Loading",
          "aiHint": ""
        },
        "SuccessTimeout": {
          "isRequired": true,
          "type": "int",
          "description": "Auto-hide timeout for success message (milliseconds)",
          "name": "SuccessTimeout",
          "aiHint": ""
        },
        "LoadingText": {
          "isRequired": true,
          "type": "string",
          "description": "Custom loading text override",
          "name": "LoadingText",
          "aiHint": ""
        },
        "ShowBadge": {
          "isRequired": true,
          "type": "bool",
          "description": "Show notification badge",
          "name": "ShowBadge",
          "aiHint": ""
        },
        "Title": {
          "isRequired": true,
          "type": "string",
          "description": "Title attribute",
          "name": "Title",
          "aiHint": ""
        },
        "Rounded": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether button should have rounded corners",
          "name": "Rounded",
          "aiHint": ""
        },
        "Shortcut": {
          "isRequired": true,
          "type": "string",
          "description": "Keyboard shortcut hint (display only)",
          "name": "Shortcut",
          "aiHint": ""
        },
        "BadgeCount": {
          "isRequired": true,
          "type": "int",
          "description": "Badge count number",
          "name": "BadgeCount",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Click event handler</summary>\r\n    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }\r\n    \r\n    /// <summary>Mouse down event handler</summary>\r\n    [Parameter] public EventCallback<MouseEventArgs> OnMouseDown { get; set; }\r\n    \r\n    /// <summary>Mouse up event handler</summary>\r\n    [Parameter] public EventCallback<MouseEventArgs> OnMouseUp { get; set; }\r\n    \r\n    /// <summary>Focus event handler</summary>\r\n    [Parameter] public EventCallback<FocusEventArgs> OnFocus { get; set; }\r\n    \r\n    /// <summary>Blur event handler</summary>\r\n    [Parameter] public EventCallback<FocusEventArgs> OnBlur { get; set; }\r\n    \r\n    /// <summary>Child content for custom button content",
          "name": "ChildContent",
          "aiHint": ""
        },
        "SuccessMessage": {
          "isRequired": true,
          "type": "string",
          "description": "Success message after action completion",
          "name": "SuccessMessage",
          "aiHint": ""
        },
        "StopPropagation": {
          "isRequired": true,
          "type": "bool",
          "description": "Stop click propagation",
          "name": "StopPropagation",
          "aiHint": ""
        },
        "Progress": {
          "isRequired": true,
          "type": "int",
          "description": "Progress percentage for progress button (0-100)",
          "name": "Progress",
          "aiHint": ""
        },
        "Elevation": {
          "isRequired": true,
          "type": "int",
          "description": "Elevation level (0-24)",
          "name": "Elevation",
          "aiHint": ""
        },
        "Tooltip": {
          "isRequired": true,
          "type": "string",
          "description": "Whether to show tooltip on hover",
          "name": "Tooltip",
          "aiHint": ""
        },
        "TabIndex": {
          "isRequired": true,
          "type": "int",
          "description": "Tab index",
          "name": "TabIndex",
          "aiHint": ""
        },
        "ConfirmMessage": {
          "isRequired": true,
          "type": "string",
          "description": "Confirmation message before action execution",
          "name": "ConfirmMessage",
          "aiHint": ""
        },
        "PreventDefault": {
          "isRequired": true,
          "type": "bool",
          "description": "Prevent default click behavior",
          "name": "PreventDefault",
          "aiHint": ""
        },
        "RequiresConfirmation": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether button requires special permissions",
          "name": "RequiresConfirmation",
          "aiHint": ""
        },
        "ConfirmTitle": {
          "isRequired": true,
          "type": "string",
          "description": "Confirmation dialog title",
          "name": "ConfirmTitle",
          "aiHint": ""
        }
      },
      "name": "RButton",
      "complexity": "Simple",
      "filePath": "/Components/Core/RButton.razor"
    },
    "RProgressBar": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "Size": {
          "isRequired": true,
          "type": "ProgressSize",
          "description": "",
          "name": "Size",
          "aiHint": ""
        },
        "LabelFormat": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "LabelFormat",
          "aiHint": ""
        },
        "LabelInside": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "LabelInside",
          "aiHint": ""
        },
        "Animated": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "Animated",
          "aiHint": ""
        },
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Class",
          "aiHint": ""
        },
        "Value": {
          "isRequired": true,
          "type": "double",
          "description": "",
          "name": "Value",
          "aiHint": ""
        },
        "Variant": {
          "isRequired": true,
          "type": "ProgressVariant",
          "description": "",
          "name": "Variant",
          "aiHint": ""
        },
        "ShowLabel": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowLabel",
          "aiHint": ""
        },
        "Label": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Label",
          "aiHint": ""
        },
        "Indeterminate": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "Indeterminate",
          "aiHint": ""
        },
        "Striped": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "Striped",
          "aiHint": ""
        }
      },
      "name": "RProgressBar",
      "complexity": "Simple",
      "filePath": "/Components/Display/RProgressBar.razor"
    },
    "RDatePickerBasic": {
      "patterns": {
        "basic-date": "@bind-Value=\"date\" Label=\"Select Date\"",
        "future-date": "@bind-Value=\"futureDate\" MinDate=\"@DateTime.Today\"",
        "required-date": "@bind-Value=\"requiredDate\" Required=\"true\" HasError=\"@(!date.HasValue)\"",
        "datetime-input": "@bind-Value=\"dateTime\" ShowTime=\"true\""
      },
      "commonUse": "simple date input, forms, basic date selection",
      "aiPrompt": "Create a simple HTML5 date picker input",
      "description": "Simplified HTML5 date picker for basic date input scenarios",
      "category": "Form",
      "avoidUsage": "Don't use for complex date ranges or when calendar popup is needed",
      "parameters": {
        "Size": {
          "isRequired": true,
          "type": "FieldSize",
          "description": "",
          "name": "Size",
          "aiHint": ""
        },
        "ErrorMessage": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "ErrorMessage",
          "aiHint": ""
        },
        "InputId": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "InputId",
          "aiHint": ""
        },
        "Icon": {
          "isRequired": true,
          "type": "string",
          "description": "Icon for the component",
          "name": "Icon",
          "aiHint": ""
        },
        "IconPosition": {
          "isRequired": true,
          "type": "IconPosition",
          "description": "Position of the icon",
          "name": "IconPosition",
          "aiHint": ""
        },
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Class",
          "aiHint": ""
        },
        "StartIcon": {
          "isRequired": true,
          "type": "string",
          "description": "Start icon (deprecated - use Icon + IconPosition)",
          "name": "StartIcon",
          "aiHint": ""
        },
        "HasError": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "HasError",
          "aiHint": ""
        }
      },
      "name": "RDatePickerBasic",
      "complexity": "Simple",
      "filePath": "/Components/Form/RDatePickerBasic.razor"
    },
    "RAppShell": {
      "patterns": {
        "responsive-shell": "Auto-responsive sidebar and mobile-friendly behavior",
        "dashboard-layout": "NavigationItems + CurrentUser for admin dashboards",
        "zero-config": "Title only for minimal app setup",
        "full-enterprise": "All parameters for complete enterprise application"
      },
      "commonUse": "main app layout, admin dashboards, enterprise applications, SaaS platforms",
      "aiPrompt": "Create complete app layout with header and sidebar",
      "description": "Complete application shell with header, sidebar, navigation, search, and theme support. Zero-config setup for enterprise Blazor applications with professional styling and full responsiveness.",
      "category": "Layout",
      "avoidUsage": "Don't use for simple pages without navigation. Use RSection for content organization instead.",
      "parameters": {
        "Logo": {
          "isRequired": true,
          "type": "string",
          "description": "App title (required)</summary>\r\n    [Parameter, AIParameter(\"Application name displayed in header\", \"Your App Name or company brand\")] \r\n    public string Title { get; set; } = \"RR.Blazor App\";\r\n    \r\n    /// <summary>Logo image source",
          "name": "Logo",
          "aiHint": ""
        },
        "PageSubtitle": {
          "isRequired": true,
          "type": "string",
          "description": "Page subtitle for header",
          "name": "PageSubtitle",
          "aiHint": ""
        },
        "ShowSidebarToggle": {
          "isRequired": true,
          "type": "bool",
          "description": "Show/hide sidebar toggle button",
          "name": "ShowSidebarToggle",
          "aiHint": ""
        },
        "SidebarFooter": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Sidebar footer content",
          "name": "SidebarFooter",
          "aiHint": ""
        },
        "ShowThemeToggle": {
          "isRequired": true,
          "type": "bool",
          "description": "Show/hide theme toggle",
          "name": "ShowThemeToggle",
          "aiHint": ""
        },
        "ShowQuickActions": {
          "isRequired": true,
          "type": "bool",
          "description": "Show/hide quick actions",
          "name": "ShowQuickActions",
          "aiHint": ""
        },
        "ShowNotifications": {
          "isRequired": true,
          "type": "bool",
          "description": "Show/hide notifications button",
          "name": "ShowNotifications",
          "aiHint": ""
        },
        "UserMenu": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "User menu dropdown content",
          "name": "UserMenu",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Main content",
          "name": "ChildContent",
          "aiHint": ""
        },
        "HeaderLeft": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Left side header content",
          "name": "HeaderLeft",
          "aiHint": ""
        },
        "PageTitle": {
          "isRequired": true,
          "type": "string",
          "description": "Page title for header",
          "name": "PageTitle",
          "aiHint": ""
        },
        "LogoContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "User permissions for nav filtering</summary>\r\n    [Parameter] public string[] UserPermissions { get; set; }\r\n    \r\n    // === RENDER FRAGMENTS ===\r\n    \r\n    /// <summary>Custom logo content",
          "name": "LogoContent",
          "aiHint": ""
        },
        "ShowUserMenu": {
          "isRequired": true,
          "type": "bool",
          "description": "Show/hide user menu",
          "name": "ShowUserMenu",
          "aiHint": ""
        },
        "QuickActionsFloating": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Floating quick actions",
          "name": "QuickActionsFloating",
          "aiHint": ""
        },
        "ContentCentered": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether content should be centered when max width is applied",
          "name": "ContentCentered",
          "aiHint": ""
        },
        "SearchCollapsible": {
          "isRequired": true,
          "type": "bool",
          "description": "Show/hide search functionality</summary>\r\n    [Parameter, AIParameter(\"Enable global search in header\", \"true for content-rich applications\")] \r\n    public bool ShowSearch { get; set; } = true;\r\n    \r\n    /// <summary>Make search collapsible on the right side",
          "name": "SearchCollapsible",
          "aiHint": ""
        },
        "ShowToasts": {
          "isRequired": true,
          "type": "bool",
          "description": "Show/hide toast container",
          "name": "ShowToasts",
          "aiHint": ""
        },
        "ShowStatusBar": {
          "isRequired": true,
          "type": "bool",
          "description": "Show/hide status bar",
          "name": "ShowStatusBar",
          "aiHint": ""
        },
        "StatusBar": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Status bar content",
          "name": "StatusBar",
          "aiHint": ""
        },
        "QuickActions": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Quick actions in header",
          "name": "QuickActions",
          "aiHint": ""
        },
        "ContentMaxWidth": {
          "isRequired": true,
          "type": "string",
          "description": "Content maximum width (e.g., \"1200px\", \"90%\"). Default is no constraint.",
          "name": "ContentMaxWidth",
          "aiHint": ""
        },
        "HeaderRight": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Right side header content",
          "name": "HeaderRight",
          "aiHint": ""
        },
        "ShowHeader": {
          "isRequired": true,
          "type": "bool",
          "description": "Current user for user menu and permissions</summary>\r\n    [Parameter, AIParameter(\"Current logged-in user object\", \"AppUser with Name, Email, Avatar, Role properties\")] \r\n    public AppUser CurrentUser { get; set; }\r\n    \r\n    /// <summary>Theme mode (light/dark/system)</summary>\r\n    [Parameter, AIParameter(\"Theme preference\", \"light, dark, or system for auto-detection\")] \r\n    public string Theme { get; set; } = \"system\";\r\n    \r\n    // === LAYOUT CONTROL ===\r\n    \r\n    /// <summary>Show/hide sidebar</summary>\r\n    [Parameter, AIParameter(\"Display left navigation sidebar\", \"true for apps with navigation menus\")] \r\n    public bool ShowSidebar { get; set; } = true;\r\n    \r\n    /// <summary>Show/hide header",
          "name": "ShowHeader",
          "aiHint": ""
        },
        "Navigation": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Custom navigation content",
          "name": "Navigation",
          "aiHint": ""
        },
        "NotificationsClicked": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "Theme changed callback</summary>\r\n    [Parameter] public EventCallback<string> ThemeChanged { get; set; }\r\n    \r\n    /// <summary>Sidebar state changed callback</summary>\r\n    [Parameter] public EventCallback<bool> SidebarCollapsedChanged { get; set; }\r\n    \r\n    /// <summary>Search query changed callback</summary>\r\n    [Parameter] public EventCallback<string> SearchChanged { get; set; }\r\n    \r\n    /// <summary>Notification button clicked callback",
          "name": "NotificationsClicked",
          "aiHint": ""
        },
        "NotificationCount": {
          "isRequired": true,
          "type": "int",
          "description": "Navigation items (smart default)</summary>\r\n    [Parameter, AIParameter(\"Main navigation menu items\", \"List of AppNavItem with Text, Href, Icon properties\")] \r\n    public List<AppNavItem> NavigationItems { get; set; }\r\n    \r\n    /// <summary>Breadcrumb items</summary>\r\n    [Parameter] public List<AppNavItem> Breadcrumbs { get; set; }\r\n    \r\n    /// <summary>Notification count for badge",
          "name": "NotificationCount",
          "aiHint": ""
        },
        "ShowBreadcrumbs": {
          "isRequired": true,
          "type": "bool",
          "description": "Show/hide breadcrumbs",
          "name": "ShowBreadcrumbs",
          "aiHint": ""
        }
      },
      "name": "RAppShell",
      "complexity": "Complex",
      "filePath": "/Components/Layout/RAppShell.razor"
    },
    "RSectionDivider": {
      "patterns": {
        "compact-divider": "Size=\"SectionDividerSize.Compact\" for tight layouts",
        "titled-section": "Title=\"User Settings\" Icon=\"settings\" for labeled content sections",
        "prominent-section": "Size=\"SectionDividerSize.Large\" Variant=\"SectionDividerVariant.Primary\" for important sections",
        "centered-section": "Alignment=\"SectionDividerAlignment.Center\" for balanced layouts"
      },
      "commonUse": "page sections, form organization, content separation, feature grouping",
      "aiPrompt": "Create a professional section divider for content organization",
      "description": "Professional section divider component for organizing content areas with titles, icons, and visual separation. Supports multiple sizes, alignments, and semantic variants with enterprise-grade styling.",
      "category": "Core",
      "avoidUsage": "Don't overuse - only for logical section breaks. Avoid for simple line separation.",
      "parameters": {
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "Section title - main heading for the divided content area</summary>\r\n    /// <ai-hint>Use descriptive section names like \"Personal Information\", \"Security Settings\", \"Billing Details\"</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Use descriptive section names like Personal Information, Security Settings\", IsRequired = false)]\r\n    public string Title { get; set; }\r\n    /// <summary>Section subtitle - additional context or description for the section</summary>\r\n    /// <ai-hint>Use for helpful descriptions like \"Update your profile information\" or instructions</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Use for helpful descriptions like Update your profile information\", IsRequired = false)]\r\n    public string Subtitle { get; set; }\r\n    /// <summary>Material icon name displayed alongside the section title</summary>\r\n    /// <ai-hint>Common icons: settings, person, security, payment, work, home, info</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Common icons: settings, person, security, payment, work, home\", \r\n                 SuggestedValues = new[] { \"settings\", \"person\", \"security\", \"payment\", \"work\", \"home\", \"info\" })]\r\n    public string Icon { get; set; }\r\n    /// <summary>Whether to show the dividing line extending from the content</summary>\r\n    /// <ai-hint>True for visual separation, false for text-only section headers</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"True for visual separation, false for text-only headers\")]\r\n    public bool ShowLine { get; set; } = true;\r\n    /// <summary>Section divider variant - determines color scheme and semantic meaning</summary>\r\n    /// <ai-hint>Primary for important sections, Success for completed areas, Warning for attention needed</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Primary for important sections, Success for completed, Warning for attention\", \r\n                 SuggestedValues = new[] { \"Default\", \"Primary\", \"Secondary\", \"Success\", \"Warning\", \"Error\", \"Info\" }, \r\n                 IsRequired = false)]\r\n    public SectionDividerVariant Variant { get; set; } = SectionDividerVariant.Default;\r\n    /// <summary>Section divider size - affects spacing, text size, and icon dimensions</summary>\r\n    /// <ai-hint>Default for most sections, Compact for tight layouts, Large for prominent sections</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Default for most sections, Compact for tight layouts, Large for prominence\", \r\n                 SuggestedValues = new[] { \"Compact\", \"Default\", \"Large\" }, \r\n                 IsRequired = false)]\r\n    public SectionDividerSize Size { get; set; } = SectionDividerSize.Default;\r\n    /// <summary>Section divider alignment - controls content positioning and line placement</summary>\r\n    /// <ai-hint>Left for standard sections, Center for balanced layouts, Right for special cases</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Left for standard sections, Center for balanced layouts, Right for special cases\", \r\n                 SuggestedValues = new[] { \"Left\", \"Center\", \"Right\" }, \r\n                 IsRequired = false)]\r\n    public SectionDividerAlignment Alignment { get; set; } = SectionDividerAlignment.Left;\r\n    /// <summary>Additional CSS classes",
          "name": "Class",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Child content for custom section content",
          "name": "ChildContent",
          "aiHint": ""
        }
      },
      "name": "RSectionDivider",
      "complexity": "Simple",
      "filePath": "/Components/Core/RSectionDivider.razor"
    },
    "RActionGroup": {
      "patterns": {
        "toolbar-actions": "Direction=\"ActionGroupDirection.Horizontal\" Spacing=\"ActionGroupSpacing.Small\" for compact toolbars",
        "space-between": "Alignment=\"ActionGroupAlignment.SpaceBetween\" for opposing actions",
        "vertical-menu": "Direction=\"ActionGroupDirection.Vertical\" FullWidth=\"true\" for dropdown menus",
        "form-actions": "Alignment=\"ActionGroupAlignment.End\" for form Save/Cancel buttons"
      },
      "commonUse": "form actions, toolbar buttons, navigation controls, modal actions",
      "aiPrompt": "Create a professional action group for organizing buttons",
      "description": "Professional action group component for organizing multiple buttons with consistent spacing and alignment. Supports horizontal/vertical layouts, responsive behavior, and flexible alignment options.",
      "category": "Core",
      "avoidUsage": "Don't use for single buttons - use RButton directly. Avoid for non-action content.",
      "parameters": {
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "Layout direction for the action group - horizontal or vertical arrangement</summary>\r\n    /// <ai-hint>Horizontal for most forms and toolbars, Vertical for dropdown menus and mobile layouts</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Horizontal for forms/toolbars, Vertical for dropdowns/mobile layouts\", \r\n                 SuggestedValues = new[] { \"Horizontal\", \"Vertical\" }, \r\n                 IsRequired = false)]\r\n    public ActionGroupDirection Direction { get; set; } = ActionGroupDirection.Horizontal;\r\n    \r\n    /// <summary>Alignment for the action group - determines button positioning</summary>\r\n    /// <ai-hint>End for form actions (Save/Cancel), SpaceBetween for opposing actions, Center for balanced layouts</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"End for form actions, SpaceBetween for opposing actions, Center for balanced\", \r\n                 SuggestedValues = new[] { \"Start\", \"Center\", \"End\", \"SpaceBetween\", \"SpaceAround\", \"SpaceEvenly\" }, \r\n                 IsRequired = false)]\r\n    public ActionGroupAlignment Alignment { get; set; } = ActionGroupAlignment.Start;\r\n    \r\n    /// <summary>Spacing between actions - controls gap between buttons</summary>\r\n    /// <ai-hint>Medium for most cases, Small for compact toolbars, Large for prominent spacing</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Medium for most cases, Small for compact toolbars, Large for prominence\", \r\n                 SuggestedValues = new[] { \"None\", \"Small\", \"Medium\", \"Large\", \"ExtraLarge\" }, \r\n                 IsRequired = false)]\r\n    public ActionGroupSpacing Spacing { get; set; } = ActionGroupSpacing.Medium;\r\n    \r\n    /// <summary>Whether buttons should be full width in vertical layout</summary>\r\n    /// <ai-hint>Use for vertical menus and mobile layouts where buttons should span full width</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Use for vertical menus and mobile layouts for full-width buttons\")]\r\n    public bool FullWidth { get; set; }\r\n    \r\n    /// <summary>Whether to wrap on small screens for responsive behavior</summary>\r\n    /// <ai-hint>True for responsive layouts that adapt to mobile, false for fixed layouts</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"True for responsive mobile layouts, false for fixed layouts\")]\r\n    public bool Responsive { get; set; } = true;\r\n    \r\n    /// <summary>Additional CSS classes",
          "name": "Class",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Child content (buttons/actions)",
          "name": "ChildContent",
          "aiHint": ""
        }
      },
      "name": "RActionGroup",
      "complexity": "Simple",
      "filePath": "/Components/Core/RActionGroup.razor"
    },
    "RConfirmModal": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "Details": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Details",
          "aiHint": ""
        },
        "Icon": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Icon",
          "aiHint": ""
        },
        "IsDestructive": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "IsDestructive",
          "aiHint": ""
        },
        "ShowWarning": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowWarning",
          "aiHint": ""
        },
        "Message": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Message",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "",
          "name": "ChildContent",
          "aiHint": ""
        }
      },
      "name": "RConfirmModal",
      "complexity": "Simple",
      "filePath": "/Components/Feedback/RConfirmModal.razor"
    },
    "RAccordionItem": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "HeaderContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Additional header content",
          "name": "HeaderContent",
          "aiHint": ""
        },
        "Disabled": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether the item is disabled",
          "name": "Disabled",
          "aiHint": ""
        },
        "Icon": {
          "isRequired": true,
          "type": "string",
          "description": "Icon to display in header",
          "name": "Icon",
          "aiHint": ""
        },
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "Additional CSS classes",
          "name": "Class",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Item content",
          "name": "ChildContent",
          "aiHint": ""
        },
        "Expanded": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether the item is expanded initially",
          "name": "Expanded",
          "aiHint": ""
        },
        "Title": {
          "isRequired": true,
          "type": "string",
          "description": "Accordion item title",
          "name": "Title",
          "aiHint": ""
        },
        "Id": {
          "isRequired": true,
          "type": "string",
          "description": "Unique identifier for the item",
          "name": "Id",
          "aiHint": ""
        },
        "Subtitle": {
          "isRequired": true,
          "type": "string",
          "description": "Accordion item subtitle",
          "name": "Subtitle",
          "aiHint": ""
        }
      },
      "name": "RAccordionItem",
      "complexity": "Simple",
      "filePath": "/Components/Display/RAccordionItem.razor"
    },
    "RFileUpload": {
      "patterns": {
        "inline-mode": "DisplayMode=\"RFileUploadDisplayMode.Inline\" ShowPreview=\"false\"",
        "image-upload": "AllowedTypes=\"new[] { \\\".jpg\\\", \\\".png\\\" }\" GenerateThumbnails=\"true\"",
        "multiple-files": "Multiple=\"true\" MaxFiles=\"5\" ShowPreview=\"true\"",
        "button-mode": "DisplayMode=\"RFileUploadDisplayMode.Button\" ButtonText=\"Upload Files\"",
        "document-upload": "AllowedTypes=\"new[] { \\\".pdf\\\", \\\".docx\\\" }\" MaxSize=\"10MB\""
      },
      "commonUse": "document upload, image upload, file attachments, media upload",
      "aiPrompt": "Create a file upload component with drag-drop and file validation",
      "description": "Professional file upload component with drag-drop, validation, and preview",
      "category": "Form",
      "avoidUsage": "Don't use for simple text input or when files are not needed",
      "parameters": {
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "Additional CSS classes",
          "name": "Class",
          "aiHint": ""
        },
        "ShowPreview": {
          "isRequired": true,
          "type": "bool",
          "description": "Show file preview/list",
          "name": "ShowPreview",
          "aiHint": ""
        },
        "IsDisabled": {
          "isRequired": true,
          "type": "bool",
          "description": "Display mode for the upload component</summary>\r\n    [Parameter] [AIParameter(\"Visual style mode (DropZone, Button, Inline, Minimal)\", Example = \"RFileUploadDisplayMode.DropZone\")] public RFileUploadDisplayMode DisplayMode { get; set; } = RFileUploadDisplayMode.DropZone;\r\n    \r\n    /// <summary>Whether component is disabled",
          "name": "IsDisabled",
          "aiHint": "Visual style mode (DropZone, Button, Inline, Minimal)"
        },
        "DragDrop": {
          "isRequired": true,
          "type": "bool",
          "description": "Enable drag and drop",
          "name": "DragDrop",
          "aiHint": ""
        },
        "HelpText": {
          "isRequired": true,
          "type": "string",
          "description": "Help text below component",
          "name": "HelpText",
          "aiHint": ""
        },
        "UploadText": {
          "isRequired": true,
          "type": "string",
          "description": "Upload area title text",
          "name": "UploadText",
          "aiHint": ""
        },
        "Icon": {
          "isRequired": true,
          "type": "string",
          "description": "Icon for the component",
          "name": "Icon",
          "aiHint": ""
        },
        "MaxFiles": {
          "isRequired": true,
          "type": "int",
          "description": "Allowed file types (extensions like .pdf, .jpg or MIME types)</summary>\r\n    [Parameter] [AIParameter(\"Array of allowed file extensions or MIME types\", Example = \"new[] { \\\".pdf\\\", \\\".jpg\\\", \\\".png\\\" }\")] public string[] AllowedTypes { get; set; }\r\n    \r\n    /// <summary>Maximum file size in bytes</summary>\r\n    [Parameter] [AIParameter(\"Maximum file size in bytes\", Example = \"10 * 1024 * 1024 // 10MB\")] public long MaxSize { get; set; } = 10 * 1024 * 1024; // 10MB\r\n    \r\n    /// <summary>Maximum number of files",
          "name": "MaxFiles",
          "aiHint": "Array of allowed file extensions or MIME types"
        },
        "ShowProgress": {
          "isRequired": true,
          "type": "bool",
          "description": "Show upload progress",
          "name": "ShowProgress",
          "aiHint": ""
        },
        "ButtonText": {
          "isRequired": true,
          "type": "string",
          "description": "Button text for button mode",
          "name": "ButtonText",
          "aiHint": ""
        },
        "IconPosition": {
          "isRequired": true,
          "type": "IconPosition",
          "description": "Position of the icon",
          "name": "IconPosition",
          "aiHint": ""
        },
        "GenerateThumbnails": {
          "isRequired": true,
          "type": "bool",
          "description": "Generate thumbnails for images",
          "name": "GenerateThumbnails",
          "aiHint": ""
        },
        "HintText": {
          "isRequired": true,
          "type": "string",
          "description": "Upload area hint text",
          "name": "HintText",
          "aiHint": ""
        },
        "InputId": {
          "isRequired": true,
          "type": "string",
          "description": "Component identifier</summary>\r\n    [Parameter] [AIParameter(\"Unique identifier for the file upload component\", Example = \"document-upload\")] public string ComponentId { get; set; } = $\"file-upload-{Guid.NewGuid().ToString(\"N\")[..8]}\";\r\n    \r\n    /// <summary>Input element identifier",
          "name": "InputId",
          "aiHint": "Unique identifier for the file upload component"
        },
        "AllowRemove": {
          "isRequired": true,
          "type": "bool",
          "description": "Allow file removal",
          "name": "AllowRemove",
          "aiHint": ""
        },
        "ShowBrowseButton": {
          "isRequired": true,
          "type": "bool",
          "description": "Show browse button in drop zone",
          "name": "ShowBrowseButton",
          "aiHint": ""
        },
        "UploadIcon": {
          "isRequired": true,
          "type": "string",
          "description": "Icon for upload area",
          "name": "UploadIcon",
          "aiHint": ""
        },
        "BrowseButtonText": {
          "isRequired": true,
          "type": "string",
          "description": "Browse button text in drop zone",
          "name": "BrowseButtonText",
          "aiHint": ""
        },
        "AllowDuplicates": {
          "isRequired": true,
          "type": "bool",
          "description": "Allow multiple file selection</summary>\r\n    [Parameter] [AIParameter(\"Allow selecting multiple files at once\", Example = \"true\")] public bool Multiple { get; set; } = true;\r\n    \r\n    /// <summary>Allow duplicate files",
          "name": "AllowDuplicates",
          "aiHint": "Allow selecting multiple files at once"
        },
        "StartIcon": {
          "isRequired": true,
          "type": "string",
          "description": "Start icon for button mode (deprecated - use Icon + IconPosition)",
          "name": "StartIcon",
          "aiHint": ""
        }
      },
      "name": "RFileUpload",
      "complexity": "Complex",
      "filePath": "/Components/Form/RFileUpload.razor"
    },
    "RDatePicker": {
      "patterns": {
        "restricted-dates": "MinDate=\"@DateTime.Today\" MaxDate=\"@futureDate\"",
        "datetime": "@bind-Value=\"dateTime\" ShowTime=\"true\" Use24HourFormat=\"false\"",
        "date-range": "@bind-Value=\"startDate\" @bind-EndValue=\"endDate\" Range=\"true\"",
        "date-only": "@bind-Value=\"selectedDate\" ShowTime=\"false\"",
        "business-days": "DisabledDaysOfWeek=\"@weekends\" MinDate=\"@DateTime.Today\""
      },
      "commonUse": "date selection, appointment scheduling, event planning, form dates",
      "aiPrompt": "Create a date/time picker with calendar popup and validation",
      "description": "Professional date and time picker with calendar popup and time selection",
      "category": "Form",
      "avoidUsage": "Don't use for simple date input - use RDatePickerBasic instead",
      "parameters": {
        "ShowWeekNumbers": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowWeekNumbers",
          "aiHint": ""
        },
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Class",
          "aiHint": ""
        },
        "HelperText": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "HelperText",
          "aiHint": ""
        },
        "Disabled": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "Disabled",
          "aiHint": ""
        },
        "IconPosition": {
          "isRequired": true,
          "type": "IconPosition",
          "description": "Position of the icon",
          "name": "IconPosition",
          "aiHint": ""
        },
        "OnCalendarOpen": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "",
          "name": "OnCalendarOpen",
          "aiHint": ""
        },
        "Required": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "Required",
          "aiHint": ""
        },
        "ErrorMessage": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "ErrorMessage",
          "aiHint": ""
        },
        "InputId": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "InputId",
          "aiHint": ""
        },
        "ShowTodayButton": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowTodayButton",
          "aiHint": ""
        },
        "ReadOnly": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ReadOnly",
          "aiHint": ""
        },
        "OnCalendarClose": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "",
          "name": "OnCalendarClose",
          "aiHint": ""
        },
        "Icon": {
          "isRequired": true,
          "type": "string",
          "description": "Icon for the component",
          "name": "Icon",
          "aiHint": ""
        },
        "ShowClearButton": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowClearButton",
          "aiHint": ""
        },
        "HasError": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "HasError",
          "aiHint": ""
        },
        "StartIcon": {
          "isRequired": true,
          "type": "string",
          "description": "Start icon (deprecated - use Icon + IconPosition)",
          "name": "StartIcon",
          "aiHint": ""
        }
      },
      "name": "RDatePicker",
      "complexity": "Complex",
      "filePath": "/Components/Form/RDatePicker.razor"
    },
    "RInfoItem": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "IsRequired": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether this field is required",
          "name": "IsRequired",
          "aiHint": ""
        },
        "Size": {
          "isRequired": true,
          "type": "InfoItemSize",
          "description": "Size variant",
          "name": "Size",
          "aiHint": ""
        },
        "Layout": {
          "isRequired": true,
          "type": "InfoItemLayout",
          "description": "Layout variant",
          "name": "Layout",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Custom content for the value area",
          "name": "ChildContent",
          "aiHint": ""
        },
        "Icon": {
          "isRequired": true,
          "type": "string",
          "description": "Material icon name",
          "name": "Icon",
          "aiHint": ""
        },
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "Additional CSS classes",
          "name": "Class",
          "aiHint": ""
        },
        "Value": {
          "isRequired": true,
          "type": "string",
          "description": "Value text for the info item",
          "name": "Value",
          "aiHint": ""
        },
        "Label": {
          "isRequired": true,
          "type": "string",
          "description": "Label text for the info item",
          "name": "Label",
          "aiHint": ""
        },
        "EmphasizeValue": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether to emphasize the value",
          "name": "EmphasizeValue",
          "aiHint": ""
        }
      },
      "name": "RInfoItem",
      "complexity": "Simple",
      "filePath": "/Components/Display/RInfoItem.razor"
    },
    "RAccordion": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "Multiple": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether multiple items can be expanded at once",
          "name": "Multiple",
          "aiHint": ""
        },
        "ExpandIcon": {
          "isRequired": true,
          "type": "string",
          "description": "Expand icon",
          "name": "ExpandIcon",
          "aiHint": ""
        },
        "CollapseIcon": {
          "isRequired": true,
          "type": "string",
          "description": "Collapse icon",
          "name": "CollapseIcon",
          "aiHint": ""
        },
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "Additional CSS classes",
          "name": "Class",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Accordion items content",
          "name": "ChildContent",
          "aiHint": ""
        },
        "IconPosition": {
          "isRequired": true,
          "type": "AccordionIconPosition",
          "description": "Icon position",
          "name": "IconPosition",
          "aiHint": ""
        },
        "Variant": {
          "isRequired": true,
          "type": "AccordionVariant",
          "description": "Accordion style variant",
          "name": "Variant",
          "aiHint": ""
        },
        "Bordered": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether to show borders between items",
          "name": "Bordered",
          "aiHint": ""
        },
        "Separated": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether to show separators between items",
          "name": "Separated",
          "aiHint": ""
        }
      },
      "name": "RAccordion",
      "complexity": "Simple",
      "filePath": "/Components/Display/RAccordion.razor"
    },
    "RMessageModal": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "Message": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Message",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "",
          "name": "ChildContent",
          "aiHint": ""
        },
        "Variant": {
          "isRequired": true,
          "type": "ModalVariant",
          "description": "",
          "name": "Variant",
          "aiHint": ""
        },
        "Icon": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Icon",
          "aiHint": ""
        }
      },
      "name": "RMessageModal",
      "complexity": "Simple",
      "filePath": "/Components/Feedback/RMessageModal.razor"
    },
    "RMetric": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "Additional CSS classes",
          "name": "Class",
          "aiHint": ""
        },
        "IsClickable": {
          "isRequired": true,
          "type": "bool",
          "description": "Click handler for interactive metrics</summary>\r\n    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }\r\n    \r\n    /// <summary>Whether metric is clickable",
          "name": "IsClickable",
          "aiHint": ""
        },
        "Subtitle": {
          "isRequired": true,
          "type": "string",
          "description": "Subtitle or description",
          "name": "Subtitle",
          "aiHint": ""
        },
        "ChangeIsCurrency": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether change is currency",
          "name": "ChangeIsCurrency",
          "aiHint": ""
        },
        "ChangeSuffix": {
          "isRequired": true,
          "type": "string",
          "description": "Change suffix (e.g., \"%\", \"pts\")",
          "name": "ChangeSuffix",
          "aiHint": ""
        },
        "Format": {
          "isRequired": true,
          "type": "string",
          "description": "Format string for value display",
          "name": "Format",
          "aiHint": ""
        },
        "Size": {
          "isRequired": true,
          "type": "string",
          "description": "Metric size",
          "name": "Size",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Custom content area",
          "name": "ChildContent",
          "aiHint": ""
        },
        "Change": {
          "name": "Change",
          "aiHint": "",
          "isRequired": false,
          "description": "Change value (positive/negative)",
          "type": "decimal?"
        },
        "IsLoading": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether metric is loading",
          "name": "IsLoading",
          "aiHint": ""
        },
        "ShowChange": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether to show change indicator",
          "name": "ShowChange",
          "aiHint": ""
        },
        "Icon": {
          "isRequired": true,
          "type": "string",
          "description": "Icon to display",
          "name": "Icon",
          "aiHint": ""
        },
        "Value": {
          "isRequired": true,
          "type": "object",
          "description": "Metric value to display",
          "name": "Value",
          "aiHint": ""
        },
        "Label": {
          "isRequired": true,
          "type": "string",
          "description": "Metric label/title",
          "name": "Label",
          "aiHint": ""
        },
        "Prefix": {
          "isRequired": true,
          "type": "string",
          "description": "Value prefix (e.g., \"$\", \"+\")",
          "name": "Prefix",
          "aiHint": ""
        },
        "Suffix": {
          "isRequired": true,
          "type": "string",
          "description": "Value suffix (e.g., \"%\", \"units\")",
          "name": "Suffix",
          "aiHint": ""
        },
        "Variant": {
          "isRequired": true,
          "type": "string",
          "description": "Metric variant for styling",
          "name": "Variant",
          "aiHint": ""
        }
      },
      "name": "RMetric",
      "complexity": "Simple",
      "filePath": "/Components/Display/RMetric.razor"
    },
    "RFormModal": {
      "patterns": {
        "auto-form": "InitialData=\"@model\" OnSave=\"HandleSave\"",
        "custom-form": "FormComponent=\"@typeof(MyFormComponent)\"",
        "validation-form": "OnValidate=\"ValidateModel\" ShowValidationSummary=\"true\""
      },
      "commonUse": "quick edit modals, auto-generated forms, dynamic data entry",
      "aiPrompt": "Create a modal with auto-generated form fields from a model",
      "description": "Generic form modal component for dynamic form generation and validation",
      "category": "Form",
      "avoidUsage": "Don't use for complex custom forms - create dedicated form components instead",
      "parameters": {},
      "name": "RFormModal",
      "complexity": "Complex",
      "filePath": "/Components/Feedback/RFormModal.razor"
    },
    "RTabItem": {
      "patterns": {
        "closable-tab": "Closable=\"true\" for removable tabs",
        "badge-tab": "BadgeCount for notification indicators",
        "basic-tab": "Text and ChildContent for simple tab item",
        "icon-tab": "Icon=\"icon_name\" for tab with icon"
      },
      "commonUse": "tab content organization, document tabs, settings sections",
      "aiPrompt": "Create individual tab item for RTabs container",
      "description": "Individual tab item component for RTabs container with icon, badge, and content support. Supports closable tabs, disabled states, and badge notifications for professional tab experiences.",
      "category": "Navigation",
      "avoidUsage": "Don't use outside RTabs container. Use RButton for standalone buttons.",
      "parameters": {
        "IconPosition": {
          "isRequired": true,
          "type": "IconPosition",
          "description": "Unique identifier for this tab</summary>\r\n    [Parameter, AIParameter(\"Unique tab identifier\", \"Auto-generated if not provided\")] \r\n    public string Id { get; set; } = Guid.NewGuid().ToString();\r\n    \r\n    /// <summary>Tab text/title</summary>\r\n    [Parameter, AIParameter(\"Tab display text\", \"Shown in tab header\")] \r\n    public string Text { get; set; }\r\n    \r\n    /// <summary>Icon for tab</summary>\r\n    [Parameter, AIParameter(\"Material icon name\", \"dashboard, settings, person, etc.\")] \r\n    public string Icon { get; set; }\r\n    \r\n    /// <summary>Icon position",
          "name": "IconPosition",
          "aiHint": ""
        },
        "BadgeVariant": {
          "isRequired": true,
          "type": "string",
          "description": "Whether tab can be closed</summary>\r\n    [Parameter, AIParameter(\"Allow tab to be closed\", \"true for document-style tabs\")] \r\n    public bool Closable { get; set; }\r\n    \r\n    /// <summary>Badge count to display</summary>\r\n    [Parameter, AIParameter(\"Notification badge count\", \"0 to hide badge, >0 to show\")] \r\n    public int BadgeCount { get; set; }\r\n    \r\n    /// <summary>Badge variant (danger, warning, success)",
          "name": "BadgeVariant",
          "aiHint": ""
        },
        "Disabled": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether tab is disabled",
          "name": "Disabled",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Tab content",
          "name": "ChildContent",
          "aiHint": ""
        }
      },
      "name": "RTabItem",
      "complexity": "Simple",
      "filePath": "/Components/Navigation/RTabItem.razor"
    },
    "RFormSection": {
      "patterns": {
        "collapsible-section": "Title=\"Advanced Settings\" IsCollapsible=\"true\"",
        "basic-section": "Title=\"Personal Information\" FieldColumns=\"2\"",
        "icon-section": "Title=\"Contact Info\" Icon=\"contact_mail\"",
        "elevated-section": "Title=\"Important Details\" Elevation=\"SectionElevation.Medium\""
      },
      "commonUse": "form organization, grouped fields, collapsible sections, multi-step forms",
      "aiPrompt": "Create a form section with header and organized field layout",
      "description": "Professional form section container with collapsible header and grid layout",
      "category": "Form",
      "avoidUsage": "Don't use for single fields or when no grouping is needed",
      "parameters": {
        "HeaderActions": {
          "name": "HeaderActions",
          "aiHint": "",
          "isRequired": false,
          "description": "",
          "type": "RenderFragment?"
        },
        "ChildContent": {
          "name": "ChildContent",
          "aiHint": "",
          "isRequired": false,
          "description": "",
          "type": "RenderFragment?"
        },
        "CssClass": {
          "name": "CssClass",
          "aiHint": "",
          "isRequired": false,
          "description": "",
          "type": "string?"
        }
      },
      "name": "RFormSection",
      "complexity": "Intermediate",
      "filePath": "/Components/Form/RFormSection.razor"
    },
    "RToastContainer": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {},
      "name": "RToastContainer",
      "complexity": "Simple",
      "filePath": "/Components/Feedback/RToastContainer.razor"
    },
    "RForm": {
      "patterns": {
        "basic-form": "Model=\"@myModel\" OnValidSubmit=\"HandleSubmit\"",
        "registration-form": "Title=\"Sign Up\" ValidationMode=\"ValidationMode.DataAnnotations\"",
        "dense-form": "Density=\"FormDensity.Dense\" for compact layouts",
        "modal-form": "Layout=\"FormLayout.Modal\" ShowDefaultActions=\"true\"",
        "settings-form": "Layout=\"FormLayout.Executive\" ShowFormHeader=\"true\""
      },
      "commonUse": "user registration, data entry, settings forms, contact forms",
      "aiPrompt": "Create a professional form container with validation and submission handling",
      "description": "Professional form component with validation, state management, and accessibility",
      "category": "Form",
      "avoidUsage": "Don't use for simple single-field inputs or display-only content",
      "parameters": {
        "AriaLabel": {
          "name": "AriaLabel",
          "aiHint": "",
          "isRequired": false,
          "description": "",
          "type": "string?"
        },
        "FormFields": {
          "name": "FormFields",
          "aiHint": "",
          "isRequired": false,
          "description": "",
          "type": "RenderFragment?"
        },
        "SubmitButtonFullWidth": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "SubmitButtonFullWidth",
          "aiHint": ""
        },
        "ChildContent": {
          "name": "ChildContent",
          "aiHint": "",
          "isRequired": false,
          "description": "",
          "type": "RenderFragment?"
        },
        "Class": {
          "name": "Class",
          "aiHint": "",
          "isRequired": false,
          "description": "",
          "type": "string?"
        },
        "OnCancel": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "",
          "name": "OnCancel",
          "aiHint": ""
        },
        "FormActions": {
          "name": "FormActions",
          "aiHint": "",
          "isRequired": false,
          "description": "",
          "type": "RenderFragment?"
        }
      },
      "name": "RForm",
      "complexity": "Complex",
      "filePath": "/Components/Form/RForm.razor"
    },
    "RFormField": {
      "patterns": {
        "required-field": "Required=\"true\" ShowRequiredIndicator=\"true\"",
        "floating-label": "Variant=\"FieldVariant.FloatingLabel\" for modern forms",
        "text-input": "FieldType=\"FieldType.Text\" for basic text input",
        "password-field": "FieldType=\"FieldType.Password\" with strength indicators",
        "checkbox-field": "FieldType=\"FieldType.Checkbox\" with CheckboxText",
        "email-field": "FieldType=\"FieldType.Email\" Required=\"true\" for email validation",
        "select-dropdown": "FieldType=\"FieldType.Select\" with SelectOptions",
        "file-upload": "FieldType=\"FieldType.File\" with AcceptTypes"
      },
      "commonUse": "text input, email validation, password fields, dropdowns, checkboxes, file uploads",
      "aiPrompt": "Create a professional form field for user input with validation",
      "description": "Universal form field component with professional validation and utility-first CSS",
      "category": "Form",
      "avoidUsage": "Don't use for display-only data or readonly content",
      "parameters": {
        "ShowRequiredIndicator": {
          "isRequired": true,
          "type": "bool",
          "description": "Cascading validation context from parent form</summary>\r\n    [CascadingParameter] public FormValidationContext? ValidationContext { get; set; }\r\n    \r\n    /// <summary>Whether field is required</summary>\r\n    [Parameter] [AIParameter(\"Mark field as required for form validation\", Example = \"true\")] public bool Required { get; set; }\r\n    \r\n    /// <summary>Whether to show required indicator (*)",
          "name": "ShowRequiredIndicator",
          "aiHint": "Mark field as required for form validation"
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Custom input content for FieldType.Custom",
          "name": "ChildContent",
          "aiHint": ""
        },
        "FieldName": {
          "isRequired": true,
          "type": "string",
          "description": "Field name for binding to validation context (auto-derived from Label if not set)",
          "name": "FieldName",
          "aiHint": ""
        },
        "AutoComplete": {
          "isRequired": true,
          "type": "string",
          "description": "Autocomplete attribute",
          "name": "AutoComplete",
          "aiHint": ""
        },
        "SelectPlaceholder": {
          "isRequired": true,
          "type": "string",
          "description": "Select placeholder option",
          "name": "SelectPlaceholder",
          "aiHint": ""
        },
        "CheckboxText": {
          "isRequired": true,
          "type": "string",
          "description": "Checkbox text/label",
          "name": "CheckboxText",
          "aiHint": ""
        },
        "Rows": {
          "isRequired": true,
          "type": "int",
          "description": "Number of textarea rows",
          "name": "Rows",
          "aiHint": ""
        },
        "ShowRangeValue": {
          "isRequired": true,
          "type": "bool",
          "description": "Show current value for range input",
          "name": "ShowRangeValue",
          "aiHint": ""
        },
        "InputClass": {
          "isRequired": true,
          "type": "string",
          "description": "Additional CSS classes for the input element",
          "name": "InputClass",
          "aiHint": ""
        },
        "ErrorMessage": {
          "isRequired": true,
          "type": "string",
          "description": "Error message to display",
          "name": "ErrorMessage",
          "aiHint": ""
        },
        "Loading": {
          "isRequired": true,
          "type": "bool",
          "description": "Computed property that returns true if there's an error message or HasError is explicitly set, but only after user interaction or form submission attempt</summary>\r\n    private bool IsInErrorState \r\n    {\r\n        get\r\n        {\r\n            // If HasError is explicitly set, show it\r\n            if (HasError) return true;\r\n            \r\n            // If we have validation context, use its logic\r\n            if (ValidationContext != null && !string.IsNullOrEmpty(GetEffectiveFieldName()))\r\n            {\r\n                return ValidationContext.ShouldShowFieldErrors(GetEffectiveFieldName(), hasUserInteracted);\r\n            }\r\n            \r\n            // Fallback: only show explicit ErrorMessage after user interaction\r\n            return !string.IsNullOrEmpty(ErrorMessage) && hasUserInteracted;\r\n        }\r\n    }\r\n    \r\n    /// <summary>Gets the effective error message from parameter or validation context</summary>\r\n    private string GetEffectiveErrorMessage()\r\n    {\r\n        // Use explicit ErrorMessage if provided\r\n        if (!string.IsNullOrEmpty(ErrorMessage))\r\n            return ErrorMessage;\r\n            \r\n        // Auto-detect from validation context if available\r\n        if (ValidationContext != null && !string.IsNullOrEmpty(GetEffectiveFieldName()))\r\n        {\r\n            return ValidationContext.GetFieldErrorMessage(GetEffectiveFieldName()) ?? \"\";\r\n        }\r\n        \r\n        return \"\";\r\n    }\r\n    \r\n    /// <summary>Gets the effective field name (from parameter or auto-derived from Label)</summary>\r\n    private string GetEffectiveFieldName()\r\n    {\r\n        if (!string.IsNullOrEmpty(FieldName))\r\n            return FieldName;\r\n            \r\n        // Auto-derive field name from Label by removing spaces and making camelCase\r\n        if (!string.IsNullOrEmpty(Label))\r\n        {\r\n            var fieldName = Label.Replace(\" \", \"\").Replace(\":\", \"\");\r\n            if (!string.IsNullOrEmpty(fieldName))\r\n            {\r\n                return char.ToLowerInvariant(fieldName[0]) + fieldName[1..];\r\n            }\r\n        }\r\n        \r\n        return \"\";\r\n    }\r\n    \r\n    /// <summary>Whether field is in loading state",
          "name": "Loading",
          "aiHint": ""
        },
        "Density": {
          "isRequired": true,
          "type": "FormDensity",
          "description": "Field style variant (Default, Clean, Outlined, Filled)</summary>\r\n    [Parameter] [AIParameter(\"Visual style variant of the field\", Example = \"FieldVariant.FloatingLabel\")] public FieldVariant Variant { get; set; } = FieldVariant.Default;\r\n    \r\n    /// <summary>Field density for spacing control",
          "name": "Density",
          "aiHint": "Visual style variant of the field"
        },
        "StartIcon": {
          "isRequired": true,
          "type": "string",
          "description": "Icon on the left side of the input",
          "name": "StartIcon",
          "aiHint": ""
        },
        "OnEndIconClick": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "Called when end icon is clicked",
          "name": "OnEndIconClick",
          "aiHint": ""
        },
        "OnStartIconClick": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "Called on input event (real-time)</summary>\r\n    [Parameter] public EventCallback<string> OnInput { get; set; }\r\n    \r\n    /// <summary>Called on focus</summary>\r\n    [Parameter] public EventCallback<FocusEventArgs> OnFocus { get; set; }\r\n    \r\n    /// <summary>Called on blur</summary>\r\n    [Parameter] public EventCallback<FocusEventArgs> OnBlur { get; set; }\r\n    \r\n    /// <summary>Called on key down</summary>\r\n    [Parameter] public EventCallback<KeyboardEventArgs> OnKeyDown { get; set; }\r\n    \r\n    /// <summary>Called on key up</summary>\r\n    [Parameter] public EventCallback<KeyboardEventArgs> OnKeyUp { get; set; }\r\n    \r\n    /// <summary>Called when start icon is clicked",
          "name": "OnStartIconClick",
          "aiHint": ""
        },
        "Disabled": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether field is disabled",
          "name": "Disabled",
          "aiHint": ""
        },
        "MaxValue": {
          "isRequired": true,
          "type": "string",
          "description": "Maximum value for number/range inputs",
          "name": "MaxValue",
          "aiHint": ""
        },
        "SelectOptions": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Select options content",
          "name": "SelectOptions",
          "aiHint": ""
        },
        "AllowMultiple": {
          "isRequired": true,
          "type": "bool",
          "description": "Allow multiple file selection",
          "name": "AllowMultiple",
          "aiHint": ""
        },
        "IsChecked": {
          "isRequired": true,
          "type": "bool",
          "description": "Checkbox checked state",
          "name": "IsChecked",
          "aiHint": ""
        },
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "Additional CSS classes for the field group",
          "name": "Class",
          "aiHint": ""
        },
        "HasError": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether field has validation error (auto-calculated from ErrorMessage)",
          "name": "HasError",
          "aiHint": ""
        },
        "RadioOptions": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Callback when checkbox changes</summary>\r\n    [Parameter] public EventCallback<bool> CheckedChanged { get; set; }\r\n    \r\n    // Radio specific\r\n    /// <summary>Radio options content",
          "name": "RadioOptions",
          "aiHint": ""
        },
        "HelpText": {
          "isRequired": true,
          "type": "string",
          "description": "Field label text</summary>\r\n    [Parameter] [AIParameter(\"Label text displayed above the field\", Example = \"Email Address\")] public string Label { get; set; }\r\n    \r\n    /// <summary>Input field value</summary>\r\n    [Parameter] [AIParameter(\"Current value of the input field\", Example = \"user@example.com\")] public string Value { get; set; }\r\n    \r\n    /// <summary>Callback when value changes</summary>\r\n    [Parameter] public EventCallback<string> ValueChanged { get; set; }\r\n    \r\n    /// <summary>Placeholder text</summary>\r\n    [Parameter] [AIParameter(\"Placeholder text shown when field is empty\", Example = \"Enter your email address\")] public string Placeholder { get; set; }\r\n    \r\n    /// <summary>Help text below the input",
          "name": "HelpText",
          "aiHint": "Label text displayed above the field"
        },
        "EndIcon": {
          "isRequired": true,
          "type": "string",
          "description": "Icon on the right side of the input",
          "name": "EndIcon",
          "aiHint": ""
        },
        "Size": {
          "isRequired": true,
          "type": "FieldSize",
          "description": "Input field identifier</summary>\r\n    [Parameter] [AIParameter(\"Unique identifier for the input field\", Example = \"email-input\")] public string InputId { get; set; } = Guid.NewGuid().ToString(\"N\")[..8];\r\n    \r\n    /// <summary>Field type</summary>\r\n    [Parameter] [AIParameter(\"Type of input field (Text, Email, Password, Select, etc.)\", Example = \"FieldType.Email\")] public FieldType FieldType { get; set; } = FieldType.Text;\r\n    \r\n    /// <summary>Field size variant",
          "name": "Size",
          "aiHint": "Unique identifier for the input field"
        },
        "Step": {
          "isRequired": true,
          "type": "string",
          "description": "Step value for number/range inputs",
          "name": "Step",
          "aiHint": ""
        },
        "AcceptTypes": {
          "isRequired": true,
          "type": "string",
          "description": "Accepted file types",
          "name": "AcceptTypes",
          "aiHint": ""
        },
        "MinValue": {
          "isRequired": true,
          "type": "string",
          "description": "Minimum value for number/range inputs",
          "name": "MinValue",
          "aiHint": ""
        },
        "ReadOnly": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether field is readonly",
          "name": "ReadOnly",
          "aiHint": ""
        },
        "MaxLength": {
          "isRequired": true,
          "type": "int",
          "description": "Maximum character length",
          "name": "MaxLength",
          "aiHint": ""
        },
        "FullWidth": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether input spans full width",
          "name": "FullWidth",
          "aiHint": ""
        },
        "AutoResize": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether textarea auto-resizes",
          "name": "AutoResize",
          "aiHint": ""
        },
        "ShowCharacterCount": {
          "isRequired": true,
          "type": "bool",
          "description": "File change callback</summary>\r\n    [Parameter] public EventCallback<InputFileChangeEventArgs> FileChanged { get; set; }\r\n    \r\n    // Character count\r\n    /// <summary>Whether to show character count",
          "name": "ShowCharacterCount",
          "aiHint": ""
        },
        "RangeValueSuffix": {
          "isRequired": true,
          "type": "string",
          "description": "Suffix for range value display",
          "name": "RangeValueSuffix",
          "aiHint": ""
        }
      },
      "name": "RFormField",
      "complexity": "Complex",
      "filePath": "/Components/Form/RFormField.razor"
    },
    "RModal": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "OnCancel": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "",
          "name": "OnCancel",
          "aiHint": ""
        },
        "PrimaryIcon": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "PrimaryIcon",
          "aiHint": ""
        },
        "CancelIcon": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "CancelIcon",
          "aiHint": ""
        },
        "IsProcessing": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "IsProcessing",
          "aiHint": ""
        },
        "HasUnsavedChanges": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "HasUnsavedChanges",
          "aiHint": ""
        },
        "ShowProcessingOverlay": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowProcessingOverlay",
          "aiHint": ""
        },
        "PrimaryButtonClass": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "PrimaryButtonClass",
          "aiHint": ""
        },
        "Icon": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Icon",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "",
          "name": "ChildContent",
          "aiHint": ""
        },
        "ShowUnsavedIndicator": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowUnsavedIndicator",
          "aiHint": ""
        },
        "CloseOnBackdrop": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "CloseOnBackdrop",
          "aiHint": ""
        },
        "ShowCloseButton": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowCloseButton",
          "aiHint": ""
        },
        "CancelButtonClass": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "CancelButtonClass",
          "aiHint": ""
        },
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Class",
          "aiHint": ""
        },
        "FooterContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "",
          "name": "FooterContent",
          "aiHint": ""
        },
        "OnPrimaryAction": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "",
          "name": "OnPrimaryAction",
          "aiHint": ""
        },
        "ShowCancelButton": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowCancelButton",
          "aiHint": ""
        },
        "CloseOnEscape": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "CloseOnEscape",
          "aiHint": ""
        },
        "PrimaryButtonDisabled": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "PrimaryButtonDisabled",
          "aiHint": ""
        },
        "PrimaryText": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "PrimaryText",
          "aiHint": ""
        },
        "HeaderContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "",
          "name": "HeaderContent",
          "aiHint": ""
        },
        "ProcessingMessage": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "ProcessingMessage",
          "aiHint": ""
        },
        "Size": {
          "isRequired": true,
          "type": "ModalSize",
          "description": "",
          "name": "Size",
          "aiHint": ""
        },
        "Subtitle": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Subtitle",
          "aiHint": ""
        },
        "Variant": {
          "isRequired": true,
          "type": "ModalVariant",
          "description": "",
          "name": "Variant",
          "aiHint": ""
        },
        "ProcessingButtonText": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "ProcessingButtonText",
          "aiHint": ""
        },
        "ShowPrimaryButtonSpinner": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowPrimaryButtonSpinner",
          "aiHint": ""
        },
        "Title": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Title",
          "aiHint": ""
        },
        "CancelText": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "CancelText",
          "aiHint": ""
        },
        "ShowPrimaryButton": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowPrimaryButton",
          "aiHint": ""
        },
        "ShowFooter": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowFooter",
          "aiHint": ""
        },
        "ShowHeader": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowHeader",
          "aiHint": ""
        },
        "IsVisible": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "IsVisible",
          "aiHint": ""
        },
        "ButtonSize": {
          "isRequired": true,
          "type": "ButtonSize",
          "description": "",
          "name": "ButtonSize",
          "aiHint": ""
        },
        "OnClose": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "",
          "name": "OnClose",
          "aiHint": ""
        }
      },
      "name": "RModal",
      "complexity": "Simple",
      "filePath": "/Components/Feedback/RModal.razor"
    },
    "RList": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "Size": {
          "isRequired": true,
          "type": "ListSize",
          "description": "List size variant",
          "name": "Size",
          "aiHint": ""
        },
        "Layout": {
          "isRequired": true,
          "type": "ListLayout",
          "description": "List layout variant",
          "name": "Layout",
          "aiHint": ""
        },
        "Divided": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether to show dividers between items",
          "name": "Divided",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Child content",
          "name": "ChildContent",
          "aiHint": ""
        },
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "Additional CSS classes",
          "name": "Class",
          "aiHint": ""
        },
        "Variant": {
          "isRequired": true,
          "type": "ListVariant",
          "description": "List style variant",
          "name": "Variant",
          "aiHint": ""
        },
        "Title": {
          "isRequired": true,
          "type": "string",
          "description": "List title (for menu variant)",
          "name": "Title",
          "aiHint": ""
        }
      },
      "name": "RList",
      "complexity": "Simple",
      "filePath": "/Components/Data/RList.razor"
    },
    "RThemeProvider": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "InitialTheme": {
          "isRequired": true,
          "type": "ThemeConfiguration",
          "description": "",
          "name": "InitialTheme",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "",
          "name": "ChildContent",
          "aiHint": ""
        }
      },
      "name": "RThemeProvider",
      "complexity": "Simple",
      "filePath": "/Components/Core/RThemeProvider.razor"
    },
    "RDataTableColumn": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "MinWidth": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "MinWidth",
          "aiHint": ""
        },
        "HeaderClass": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "HeaderClass",
          "aiHint": ""
        },
        "CellClass": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "CellClass",
          "aiHint": ""
        },
        "Width": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Width",
          "aiHint": ""
        },
        "Key": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Key",
          "aiHint": ""
        },
        "Sortable": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "Sortable",
          "aiHint": ""
        },
        "MaxWidth": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "MaxWidth",
          "aiHint": ""
        },
        "HeaderTemplate": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "",
          "name": "HeaderTemplate",
          "aiHint": ""
        },
        "Header": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Header",
          "aiHint": ""
        }
      },
      "name": "RDataTableColumn",
      "complexity": "Simple",
      "filePath": "/Components/Data/RDataTableColumn.razor"
    },
    "REmptyState": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "ButtonIcon": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "ButtonIcon",
          "aiHint": ""
        },
        "Description": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Description",
          "aiHint": ""
        },
        "Image": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Image",
          "aiHint": ""
        },
        "Icon": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Icon",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "",
          "name": "ChildContent",
          "aiHint": ""
        },
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Class",
          "aiHint": ""
        },
        "ActionText": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "ActionText",
          "aiHint": ""
        },
        "Title": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Title",
          "aiHint": ""
        },
        "OnAction": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "",
          "name": "OnAction",
          "aiHint": ""
        }
      },
      "name": "REmptyState",
      "complexity": "Simple",
      "filePath": "/Components/Display/REmptyState.razor"
    },
    "RDataTable": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "CurrentPage": {
          "isRequired": true,
          "type": "int",
          "description": "",
          "name": "CurrentPage",
          "aiHint": ""
        },
        "ShowFilters": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowFilters",
          "aiHint": ""
        },
        "SelectedItem": {
          "isRequired": true,
          "type": "TItem",
          "description": "",
          "name": "SelectedItem",
          "aiHint": ""
        },
        "ItemSize": {
          "isRequired": true,
          "type": "float",
          "description": "",
          "name": "ItemSize",
          "aiHint": ""
        },
        "LoadingMessage": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "LoadingMessage",
          "aiHint": ""
        },
        "Icon": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Icon",
          "aiHint": ""
        },
        "Striped": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "Striped",
          "aiHint": ""
        },
        "Elevation": {
          "isRequired": true,
          "type": "int",
          "description": "",
          "name": "Elevation",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "",
          "name": "ChildContent",
          "aiHint": ""
        },
        "PageSize": {
          "isRequired": true,
          "type": "int",
          "description": "",
          "name": "PageSize",
          "aiHint": ""
        },
        "ShowPagination": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowPagination",
          "aiHint": ""
        },
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Class",
          "aiHint": ""
        },
        "ShowTableHeader": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowTableHeader",
          "aiHint": ""
        },
        "FooterContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "",
          "name": "FooterContent",
          "aiHint": ""
        },
        "SingleSelection": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "SingleSelection",
          "aiHint": ""
        },
        "IsLoading": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "IsLoading",
          "aiHint": ""
        },
        "Hoverable": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "Hoverable",
          "aiHint": ""
        },
        "MultiSelection": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "MultiSelection",
          "aiHint": ""
        },
        "HeaderContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "",
          "name": "HeaderContent",
          "aiHint": ""
        },
        "Subtitle": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Subtitle",
          "aiHint": ""
        },
        "TotalItems": {
          "isRequired": true,
          "type": "int",
          "description": "",
          "name": "TotalItems",
          "aiHint": ""
        },
        "Virtualize": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "Virtualize",
          "aiHint": ""
        },
        "IsRowClickable": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "IsRowClickable",
          "aiHint": ""
        },
        "FixedHeader": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "FixedHeader",
          "aiHint": ""
        },
        "SortColumn": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "SortColumn",
          "aiHint": ""
        },
        "Filters": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "",
          "name": "Filters",
          "aiHint": ""
        },
        "SortDescending": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "SortDescending",
          "aiHint": ""
        },
        "Title": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Title",
          "aiHint": ""
        },
        "EmptyMessage": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "EmptyMessage",
          "aiHint": ""
        },
        "EmptyStateContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "",
          "name": "EmptyStateContent",
          "aiHint": ""
        },
        "RowClass": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "RowClass",
          "aiHint": ""
        },
        "TableHeader": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "",
          "name": "TableHeader",
          "aiHint": ""
        },
        "ColumnsContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "",
          "name": "ColumnsContent",
          "aiHint": ""
        },
        "Dense": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "Dense",
          "aiHint": ""
        },
        "ShowHeader": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowHeader",
          "aiHint": ""
        },
        "AllowUnsorted": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "AllowUnsorted",
          "aiHint": ""
        },
        "Height": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Height",
          "aiHint": ""
        }
      },
      "name": "RDataTable",
      "complexity": "Simple",
      "filePath": "/Components/Data/RDataTable.razor"
    },
    "RFilterBar": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "DateFrom": {
          "name": "DateFrom",
          "aiHint": "",
          "isRequired": false,
          "description": "Date from value",
          "type": "DateTime?"
        },
        "SearchPlaceholder": {
          "isRequired": true,
          "type": "string",
          "description": "Search value changed callback</summary>\r\n    [Parameter] public EventCallback<string> SearchValueChanged { get; set; }\r\n    \r\n    /// <summary>Search input placeholder text",
          "name": "SearchPlaceholder",
          "aiHint": ""
        },
        "ShowSearch": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether to show search input",
          "name": "ShowSearch",
          "aiHint": ""
        },
        "StatusFilter": {
          "isRequired": true,
          "type": "string",
          "description": "Status filter value",
          "name": "StatusFilter",
          "aiHint": ""
        },
        "SearchValue": {
          "isRequired": true,
          "type": "string",
          "description": "Search input value",
          "name": "SearchValue",
          "aiHint": ""
        },
        "FiltersCleared": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "All filters cleared callback",
          "name": "FiltersCleared",
          "aiHint": ""
        },
        "CustomFilters": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Status filter options</summary>\r\n    [Parameter] public Dictionary<string, string> StatusOptions { get; set; } = new();\r\n    \r\n    /// <summary>Status filter changed callback</summary>\r\n    [Parameter] public EventCallback<string> StatusFilterChanged { get; set; }\r\n    \r\n    /// <summary>Custom filter content",
          "name": "CustomFilters",
          "aiHint": ""
        },
        "ShowDateRange": {
          "isRequired": true,
          "type": "bool",
          "description": "Dynamic filter definitions</summary>\r\n    [Parameter] public List<FilterDefinition> Filters { get; set; } = new();\r\n    \r\n    /// <summary>Filter changed callback</summary>\r\n    [Parameter] public EventCallback<FilterChangedEventArgs> FilterChanged { get; set; }\r\n    \r\n    /// <summary>Whether to show date range filter",
          "name": "ShowDateRange",
          "aiHint": ""
        },
        "ShowStatus": {
          "isRequired": true,
          "type": "bool",
          "description": "Date range changed callback</summary>\r\n    [Parameter] public EventCallback<DateRangeChangedEventArgs> DateRangeChanged { get; set; }\r\n    \r\n    /// <summary>Quick filter button definitions</summary>\r\n    [Parameter] public List<QuickFilterDefinition> QuickFilters { get; set; } = new();\r\n    \r\n    /// <summary>Active quick filter keys</summary>\r\n    [Parameter] public HashSet<string> ActiveQuickFilters { get; set; } = new();\r\n    \r\n    /// <summary>Quick filter toggled callback</summary>\r\n    [Parameter] public EventCallback<QuickFilterToggledEventArgs> QuickFilterToggled { get; set; }\r\n    \r\n    /// <summary>Whether to show status filter",
          "name": "ShowStatus",
          "aiHint": ""
        },
        "DateTo": {
          "name": "DateTo",
          "aiHint": "",
          "isRequired": false,
          "description": "Date to value",
          "type": "DateTime?"
        },
        "ShowClearButton": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether to show clear all button",
          "name": "ShowClearButton",
          "aiHint": ""
        },
        "ShowFilterCount": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether to show active filter count",
          "name": "ShowFilterCount",
          "aiHint": ""
        }
      },
      "name": "RFilterBar",
      "complexity": "Simple",
      "filePath": "/Components/Data/RFilterBar.razor"
    },
    "RAvatar": {
      "patterns": {
        "initials-avatar": "Text=\"JD\" Variant=\"AvatarVariant.Primary\" for text-based avatars",
        "clickable-avatar": "IsClickable=\"true\" OnClick=\"HandleClick\" for interactive avatars",
        "notification-avatar": "ShowBadge=\"true\" BadgeCount=\"3\" for unread counts",
        "status-avatar": "ShowStatus=\"true\" Status=\"AvatarStatus.Online\" for presence indicators",
        "user-avatar": "ImageSrc=\"/avatar.jpg\" Alt=\"User Name\" for profile pictures"
      },
      "commonUse": "user profiles, team members, contact lists, navigation headers",
      "aiPrompt": "Create a professional avatar for user representation",
      "description": "Professional avatar component for user representation with status indicators and interactive features. Supports images, initials, icons, status badges, and notification counts with responsive sizing.",
      "category": "Core",
      "avoidUsage": "Don't use for decorative icons - use Icon component instead. Avoid for non-user content.",
      "parameters": {
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "Avatar size variant - determines dimensions and icon/text sizing</summary>\r\n    /// <ai-hint>Medium is default, Large for prominent display, Small for compact layouts</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Medium is default, Large for prominent display, Small for compact layouts\", \r\n                 SuggestedValues = new[] { \"ExtraSmall\", \"Small\", \"Medium\", \"Large\", \"ExtraLarge\" })]\r\n    public AvatarSize Size { get; set; } = AvatarSize.Medium;\r\n    \r\n    /// <summary>Avatar variant style - determines color scheme and background</summary>\r\n    /// <ai-hint>Default for neutral, Primary for branded, Success/Warning/Error for status-based styling</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Default for neutral, Primary for branded, Success/Warning/Error for status\", \r\n                 SuggestedValues = new[] { \"Default\", \"Primary\", \"Success\", \"Warning\", \"Error\", \"Gradient\" }, \r\n                 IsRequired = false)]\r\n    public AvatarVariant Variant { get; set; } = AvatarVariant.Default;\r\n    \r\n    /// <summary>Image source URL for profile picture</summary>\r\n    /// <ai-hint>Use high-quality square images for best results. Falls back to text/icon if not provided</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Use high-quality square images. Falls back to text/icon if not provided\", IsRequired = false)]\r\n    public string ImageSrc { get; set; }\r\n    \r\n    /// <summary>Image alt text for accessibility</summary>\r\n    /// <ai-hint>Use descriptive text like \"John Doe's profile picture\" for screen readers</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Use descriptive text like 'John Doe profile picture' for screen readers\", IsRequired = false)]\r\n    public string Alt { get; set; }\r\n    \r\n    /// <summary>Text content (typically initials) when no image is available</summary>\r\n    /// <ai-hint>Use 1-2 character initials like \"JD\", \"AB\". Automatically uppercase</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Use 1-2 character initials like JD, AB. Automatically uppercase\", IsRequired = false)]\r\n    public string Text { get; set; }\r\n    \r\n    /// <summary>Material icon name as fallback when no image or text provided</summary>\r\n    /// <ai-hint>Common icons: person, account_circle, face, group. Defaults to \"person\"</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Common icons: person, account_circle, face, group. Defaults to person\", \r\n                 SuggestedValues = new[] { \"person\", \"account_circle\", \"face\", \"group\" })]\r\n    public string Icon { get; set; }\r\n    \r\n    /// <summary>Whether to show status indicator dot</summary>\r\n    /// <ai-hint>Use for presence indicators in chat, team lists, or user directories</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Use for presence indicators in chat, team lists, user directories\")]\r\n    public bool ShowStatus { get; set; }\r\n    \r\n    /// <summary>Status state for presence indicator</summary>\r\n    /// <ai-hint>Online for active users, Away for inactive, Busy for do-not-disturb, Offline for unavailable</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Online for active, Away for inactive, Busy for do-not-disturb, Offline for unavailable\", \r\n                 SuggestedValues = new[] { \"Online\", \"Away\", \"Busy\", \"Offline\" })]\r\n    public AvatarStatus Status { get; set; } = AvatarStatus.None;\r\n    \r\n    /// <summary>Whether to show notification badge with count</summary>\r\n    /// <ai-hint>Use for unread message counts, notification indicators, or pending items</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Use for unread message counts, notification indicators, pending items\")]\r\n    public bool ShowBadge { get; set; }\r\n    \r\n    /// <summary>Badge count number displayed in notification badge</summary>\r\n    /// <ai-hint>Shows actual count, displays \"99+\" for values over 99</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Shows actual count, displays 99+ for values over 99\")]\r\n    public int BadgeCount { get; set; }\r\n    \r\n    /// <summary>Whether avatar is clickable - adds hover effects and cursor pointer</summary>\r\n    /// <ai-hint>Set to true for interactive avatars that open profiles, menus, or perform actions</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Set to true for interactive avatars that open profiles or menus\")]\r\n    public bool IsClickable { get; set; }\r\n    \r\n    /// <summary>Additional CSS classes",
          "name": "Class",
          "aiHint": ""
        }
      },
      "name": "RAvatar",
      "complexity": "Simple",
      "filePath": "/Components/Core/RAvatar.razor"
    },
    "RStatsCard": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "/// Additional CSS classes\r\n    ///",
          "name": "Class",
          "aiHint": ""
        },
        "Elevation": {
          "isRequired": true,
          "type": "int",
          "description": "/// Card elevation level\r\n    ///",
          "name": "Elevation",
          "aiHint": ""
        },
        "Subtitle": {
          "isRequired": true,
          "type": "string",
          "description": "/// Optional subtitle text (displayed below the value)\r\n    ///",
          "name": "Subtitle",
          "aiHint": ""
        },
        "OnClick": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "/// Click event handler\r\n    ///",
          "name": "OnClick",
          "aiHint": ""
        },
        "IconSize": {
          "isRequired": true,
          "type": "int",
          "description": "/// Icon size in pixels\r\n    ///",
          "name": "IconSize",
          "aiHint": ""
        },
        "ValueColor": {
          "isRequired": true,
          "type": "string",
          "description": "/// Value text color (semantic color name without var prefix)\r\n    ///",
          "name": "ValueColor",
          "aiHint": ""
        },
        "BadgeSize": {
          "isRequired": true,
          "type": "BadgeSize",
          "description": "/// Badge size\r\n    ///",
          "name": "BadgeSize",
          "aiHint": ""
        },
        "Style": {
          "isRequired": true,
          "type": "string",
          "description": "/// Additional inline styles\r\n    ///",
          "name": "Style",
          "aiHint": ""
        },
        "Icon": {
          "isRequired": true,
          "type": "string",
          "description": "/// Material Icons icon name\r\n    ///",
          "name": "Icon",
          "aiHint": ""
        },
        "Value": {
          "isRequired": true,
          "type": "string",
          "description": "/// Main value to display\r\n    ///",
          "name": "Value",
          "aiHint": ""
        },
        "Label": {
          "isRequired": true,
          "type": "string",
          "description": "/// Card label text (displayed above the value)\r\n    ///",
          "name": "Label",
          "aiHint": ""
        },
        "BadgeVariant": {
          "isRequired": true,
          "type": "BadgeVariant",
          "description": "/// Badge variant\r\n    ///",
          "name": "BadgeVariant",
          "aiHint": ""
        },
        "BadgeText": {
          "isRequired": true,
          "type": "string",
          "description": "/// Badge text to display next to the value\r\n    ///",
          "name": "BadgeText",
          "aiHint": ""
        },
        "IsClickable": {
          "isRequired": true,
          "type": "bool",
          "description": "/// Whether the card is clickable\r\n    ///",
          "name": "IsClickable",
          "aiHint": ""
        },
        "IconColor": {
          "isRequired": true,
          "type": "string",
          "description": "/// Icon background color (semantic color name without var prefix)\r\n    ///",
          "name": "IconColor",
          "aiHint": ""
        }
      },
      "name": "RStatsCard",
      "complexity": "Simple",
      "filePath": "/Components/Display/RStatsCard.razor"
    },
    "RTimeline": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "Variant": {
          "isRequired": true,
          "type": "TimelineVariant",
          "description": "Timeline items to display</summary>\r\n    [Parameter] public List<TimelineItem> Items { get; set; } = new();\r\n    \r\n    /// <summary>Timeline variant",
          "name": "Variant",
          "aiHint": ""
        },
        "Orientation": {
          "isRequired": true,
          "type": "string",
          "description": "Timeline orientation",
          "name": "Orientation",
          "aiHint": ""
        },
        "IsCompact": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether timeline is compact",
          "name": "IsCompact",
          "aiHint": ""
        },
        "DateFormat": {
          "isRequired": true,
          "type": "string",
          "description": "Date format for timestamps",
          "name": "DateFormat",
          "aiHint": ""
        },
        "ShowRelativeTime": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether to show relative times (e.g., \"2 hours ago\")",
          "name": "ShowRelativeTime",
          "aiHint": ""
        },
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "Additional CSS classes",
          "name": "Class",
          "aiHint": ""
        },
        "LoadingItemCount": {
          "isRequired": true,
          "type": "int",
          "description": "Number of skeleton items to show when loading",
          "name": "LoadingItemCount",
          "aiHint": ""
        },
        "IsLoading": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether timeline is loading",
          "name": "IsLoading",
          "aiHint": ""
        }
      },
      "name": "RTimeline",
      "complexity": "Simple",
      "filePath": "/Components/Display/RTimeline.razor"
    },
    "RNavMenu": {
      "patterns": {
        "hierarchical-nav": "NavMenuItem with Children for nested menu structure",
        "basic-nav": "Items list with NavMenuItem objects for simple navigation",
        "collapsible-nav": "Responsive to SidebarCollapsed cascading parameter",
        "badge-nav": "NavMenuItem with Badge for notifications and counts"
      },
      "commonUse": "sidebar navigation, main menu, hierarchical navigation, app structure",
      "aiPrompt": "Create navigation menu for app sidebar",
      "description": "Professional navigation menu component for sidebar and main navigation with hierarchical support. Supports collapsible groups, badges, icons, and responsive behavior for enterprise applications.",
      "category": "Navigation",
      "avoidUsage": "Don't use for breadcrumbs - use RBreadcrumbs instead. Avoid for action menus - use RDropdown.",
      "parameters": {
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Navigation items</summary>\r\n    [Parameter, AIParameter(\"List of navigation menu items\", \"NavMenuItem with Text, Href, Icon, and optional Children\")] \r\n    public List<NavMenuItem> Items { get; set; }\r\n    \r\n    /// <summary>Custom navigation content",
          "name": "ChildContent",
          "aiHint": ""
        }
      },
      "name": "RNavMenu",
      "complexity": "Complex",
      "filePath": "/Components/Navigation/RNavMenu.razor"
    },
    "RDropdown": {
      "patterns": {
        "action-dropdown": "Button trigger with action items for context menus",
        "loading-dropdown": "IsLoading=\"true\" for async data loading",
        "basic-dropdown": "Items list with TriggerContent for basic selection",
        "searchable-dropdown": "Filterable items with search functionality"
      },
      "commonUse": "select menus, action menus, option lists, context menus",
      "aiPrompt": "Create dropdown menu for item selection",
      "description": "Professional dropdown component for item selection with keyboard navigation and accessibility. Supports custom triggers, loading states, search filtering, and flexible item rendering.",
      "category": "Navigation",
      "avoidUsage": "Don't use for simple text inputs - use RFormField instead. Avoid for navigation - use RNavMenu.",
      "parameters": {
        "EmptyContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "",
          "name": "EmptyContent",
          "aiHint": ""
        },
        "AriaLabel": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "AriaLabel",
          "aiHint": ""
        },
        "OnOpened": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "",
          "name": "OnOpened",
          "aiHint": ""
        },
        "Disabled": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "Disabled",
          "aiHint": ""
        },
        "EmptyText": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "EmptyText",
          "aiHint": ""
        },
        "TriggerContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "",
          "name": "TriggerContent",
          "aiHint": ""
        },
        "OnClosed": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "",
          "name": "OnClosed",
          "aiHint": ""
        },
        "LoadingText": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "LoadingText",
          "aiHint": ""
        },
        "AdditionalClass": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "AdditionalClass",
          "aiHint": ""
        },
        "Footer": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Footer",
          "aiHint": ""
        },
        "Header": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Header",
          "aiHint": ""
        }
      },
      "name": "RDropdown",
      "complexity": "Complex",
      "filePath": "/Components/Navigation/RDropdown.razor"
    },
    "RListItem": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "Additional CSS classes",
          "name": "Class",
          "aiHint": ""
        },
        "Subtitle": {
          "isRequired": true,
          "type": "string",
          "description": "Item subtitle",
          "name": "Subtitle",
          "aiHint": ""
        },
        "IsDisabled": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether item is disabled",
          "name": "IsDisabled",
          "aiHint": ""
        },
        "Description": {
          "isRequired": true,
          "type": "string",
          "description": "Item description",
          "name": "Description",
          "aiHint": ""
        },
        "IconPosition": {
          "isRequired": true,
          "type": "IconPosition",
          "description": "Icon position",
          "name": "IconPosition",
          "aiHint": ""
        },
        "ItemVariant": {
          "isRequired": true,
          "type": "ListItemVariant",
          "description": "Item style variant",
          "name": "ItemVariant",
          "aiHint": ""
        },
        "AvatarContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Avatar content",
          "name": "AvatarContent",
          "aiHint": ""
        },
        "MetaText": {
          "isRequired": true,
          "type": "string",
          "description": "Meta text",
          "name": "MetaText",
          "aiHint": ""
        },
        "IconSize": {
          "isRequired": true,
          "type": "IconSize",
          "description": "Icon size",
          "name": "IconSize",
          "aiHint": ""
        },
        "Title": {
          "isRequired": true,
          "type": "string",
          "description": "Item title",
          "name": "Title",
          "aiHint": ""
        },
        "MetaContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Meta content",
          "name": "MetaContent",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Main content",
          "name": "ChildContent",
          "aiHint": ""
        },
        "BadgeContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Badge content",
          "name": "BadgeContent",
          "aiHint": ""
        },
        "Icon": {
          "isRequired": true,
          "type": "string",
          "description": "Icon",
          "name": "Icon",
          "aiHint": ""
        },
        "IsActive": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether item is active/selected",
          "name": "IsActive",
          "aiHint": ""
        },
        "BadgeVariant": {
          "isRequired": true,
          "type": "BadgeVariant",
          "description": "Badge variant",
          "name": "BadgeVariant",
          "aiHint": ""
        },
        "Actions": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Action buttons",
          "name": "Actions",
          "aiHint": ""
        },
        "BadgeText": {
          "isRequired": true,
          "type": "string",
          "description": "Badge text",
          "name": "BadgeText",
          "aiHint": ""
        },
        "AvatarText": {
          "isRequired": true,
          "type": "string",
          "description": "Avatar text (for avatar lists)",
          "name": "AvatarText",
          "aiHint": ""
        },
        "IsClickable": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether item is clickable",
          "name": "IsClickable",
          "aiHint": ""
        },
        "IconVariant": {
          "isRequired": true,
          "type": "string",
          "description": "Icon color variant",
          "name": "IconVariant",
          "aiHint": ""
        }
      },
      "name": "RListItem",
      "complexity": "Simple",
      "filePath": "/Components/Data/RListItem.razor"
    },
    "RCard": {
      "patterns": {
        "clickable-card": "Clickable=\"true\" OnClick=\"HandleClick\" for interactive cards",
        "media-card": "ImageSrc=\"/image.jpg\" ImageAlt=\"Description\" for cards with images",
        "basic-card": "Title=\"Card Title\" Content=\"Card content\" for simple content cards",
        "loading-card": "Loading=\"true\" LoadingText=\"Processing...\" for async operations",
        "elevated-card": "Elevation=\"4\" for cards that need prominence"
      },
      "commonUse": "dashboards, data display, content organization, information panels",
      "aiPrompt": "Create a professional card for content display",
      "description": "Professional card component for content containers with business-grade variants. Supports header, media, content areas, loading states, elevation effects, and comprehensive interaction patterns.",
      "category": "Core",
      "avoidUsage": "Don't use for navigation - use RLink instead. Avoid for simple text without structure.",
      "parameters": {
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "Additional CSS classes",
          "name": "Class",
          "aiHint": ""
        },
        "AriaLabel": {
          "isRequired": true,
          "type": "string",
          "description": "Accessibility label",
          "name": "AriaLabel",
          "aiHint": ""
        },
        "HeaderContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Header content area",
          "name": "HeaderContent",
          "aiHint": ""
        },
        "Disabled": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether card is disabled",
          "name": "Disabled",
          "aiHint": ""
        },
        "RibbonText": {
          "isRequired": true,
          "type": "string",
          "description": "Ribbon/badge text",
          "name": "RibbonText",
          "aiHint": ""
        },
        "RibbonVariant": {
          "isRequired": true,
          "type": "RibbonVariant",
          "description": "Ribbon variant",
          "name": "RibbonVariant",
          "aiHint": ""
        },
        "FooterContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Footer content area",
          "name": "FooterContent",
          "aiHint": ""
        },
        "Selected": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether card is selected/active",
          "name": "Selected",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Main content",
          "name": "ChildContent",
          "aiHint": ""
        },
        "LoadingText": {
          "isRequired": true,
          "type": "string",
          "description": "Whether card is clickable - adds hover effects and cursor pointer</summary>\r\n    /// <ai-hint>Set to true for interactive cards that perform actions when clicked</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Set to true for interactive cards that perform actions\")]\r\n    public bool Clickable { get; set; }\r\n    \r\n    /// <summary>Whether card is in loading state - shows overlay with spinner</summary>\r\n    /// <ai-hint>Use during async operations to indicate processing state</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Use during async operations to show processing state\")]\r\n    public bool Loading { get; set; }\r\n    \r\n    /// <summary>Loading text to display",
          "name": "LoadingText",
          "aiHint": ""
        },
        "StopPropagation": {
          "isRequired": true,
          "type": "bool",
          "description": "Click event handler</summary>\r\n    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }\r\n    \r\n    /// <summary>Mouse enter event handler</summary>\r\n    [Parameter] public EventCallback<MouseEventArgs> OnMouseEnter { get; set; }\r\n    \r\n    /// <summary>Mouse leave event handler</summary>\r\n    [Parameter] public EventCallback<MouseEventArgs> OnMouseLeave { get; set; }\r\n    \r\n    /// <summary>Stop click propagation",
          "name": "StopPropagation",
          "aiHint": ""
        },
        "MediaContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Media content area",
          "name": "MediaContent",
          "aiHint": ""
        },
        "NoPadding": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether to remove padding from content",
          "name": "NoPadding",
          "aiHint": ""
        },
        "ImageAlt": {
          "isRequired": true,
          "type": "string",
          "description": "Card variant style - determines visual appearance and behavior</summary>\r\n    /// <ai-hint>Default for standard cards, Elevated for prominent cards, Glass for modern overlay effect</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Default for standard cards, Elevated for prominence, Glass for modern overlays\", \r\n                 SuggestedValues = new[] { \"Default\", \"Outlined\", \"Elevated\", \"Glass\", \"Flat\" }, \r\n                 IsRequired = false)]\r\n    public CardVariant Variant { get; set; } = CardVariant.Default;\r\n    \r\n    /// <summary>Card title - main heading displayed in header area</summary>\r\n    /// <ai-hint>Use descriptive titles like \"Employee Details\", \"Payment Summary\", \"Settings\"</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Use descriptive titles like Employee Details, Payment Summary\", IsRequired = false)]\r\n    public string Title { get; set; }\r\n    \r\n    /// <summary>Card subtitle - secondary text displayed below title</summary>\r\n    /// <ai-hint>Use for additional context like dates, categories, or descriptions</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Use for additional context like dates, categories, descriptions\", IsRequired = false)]\r\n    public string Subtitle { get; set; }\r\n    \r\n    /// <summary>Card content text - simple text content for the card body</summary>\r\n    /// <ai-hint>Use for simple text content, or use ChildContent for complex layouts</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Use for simple text, or ChildContent for complex layouts\", IsRequired = false)]\r\n    public string Content { get; set; }\r\n    \r\n    /// <summary>Material icon name displayed in header area</summary>\r\n    /// <ai-hint>Common icons: dashboard, person, settings, analytics, payment, work</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Common icons: dashboard, person, settings, analytics, payment\", \r\n                 SuggestedValues = new[] { \"dashboard\", \"person\", \"settings\", \"analytics\", \"payment\", \"work\" })]\r\n    public string Icon { get; set; }\r\n    \r\n    /// <summary>Image source URL for media content</summary>\r\n    /// <ai-hint>Use for hero images, thumbnails, or visual content in cards</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Use for hero images, thumbnails, or visual content\", IsRequired = false)]\r\n    public string ImageSrc { get; set; }\r\n    \r\n    /// <summary>Image alt text",
          "name": "ImageAlt",
          "aiHint": ""
        },
        "FullBleedImage": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether image should be full bleed",
          "name": "FullBleedImage",
          "aiHint": ""
        }
      },
      "name": "RCard",
      "complexity": "Simple",
      "filePath": "/Components/Core/RCard.razor"
    },
    "RDetailModal": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "ShowPropertyGrid": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowPropertyGrid",
          "aiHint": ""
        },
        "Data": {
          "isRequired": true,
          "type": "T",
          "description": "",
          "name": "Data",
          "aiHint": ""
        },
        "ShowMetadata": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowMetadata",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "",
          "name": "ChildContent",
          "aiHint": ""
        }
      },
      "name": "RDetailModal",
      "complexity": "Simple",
      "filePath": "/Components/Feedback/RDetailModal.razor"
    },
    "RBadge": {
      "patterns": {
        "warning-badge": "Text=\"Pending\" Variant=\"BadgeVariant.Warning\" for attention states",
        "clickable-badge": "Clickable=\"true\" OnClick=\"HandleClick\" for interactive badges",
        "status-badge": "Text=\"Active\" Variant=\"BadgeVariant.Success\" for status indicators",
        "count-badge": "Text=\"5\" Variant=\"BadgeVariant.Primary\" for notification counts"
      },
      "commonUse": "status indicators, counts, labels, notifications, tags",
      "aiPrompt": "Create a professional badge for status or count display",
      "description": "Professional badge component for status indicators, counts, and labels. Supports multiple variants, sizes, and interactive states with enterprise-grade styling.",
      "category": "Core",
      "avoidUsage": "Don't use for navigation buttons - use RButton instead. Avoid for large text content.",
      "parameters": {
        "OnClick": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "Badge text content - typically short labels, counts, or status indicators</summary>\r\n    /// <ai-hint>Keep text short: \"Active\", \"5\", \"New\", \"Pending\". Use 1-10 characters max</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Keep text short: Active, 5, New, Pending. Use 1-10 characters max\", IsRequired = false)]\r\n    public string Text { get; set; }\r\n    /// <summary>Badge variant - determines color scheme and semantic meaning</summary>\r\n    /// <ai-hint>Primary for emphasis, Success for positive states, Warning for attention, Danger for errors</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Primary for emphasis, Success for positive, Warning for attention, Danger for errors\", \r\n                 SuggestedValues = new[] { \"Primary\", \"Secondary\", \"Success\", \"Warning\", \"Danger\", \"Info\" }, \r\n                 IsRequired = false)]\r\n    public BadgeVariant Variant { get; set; } = RR.Blazor.Enums.BadgeVariant.Secondary;\r\n    /// <summary>Badge size - affects padding, text size, and overall dimensions</summary>\r\n    /// <ai-hint>Medium is default, Small for compact layouts, Large for prominence</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Medium is default, Small for compact layouts, Large for prominence\", \r\n                 SuggestedValues = new[] { \"Small\", \"Medium\", \"Large\" })]\r\n    public BadgeSize Size { get; set; } = RR.Blazor.Enums.BadgeSize.Medium;\r\n    /// <summary>Material icon name to display alongside text</summary>\r\n    /// <ai-hint>Common icons: check_circle, warning, error, info, star, notifications</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Common icons: check_circle, warning, error, info, star, notifications\", \r\n                 SuggestedValues = new[] { \"check_circle\", \"warning\", \"error\", \"info\", \"star\", \"notifications\" })]\r\n    public string Icon { get; set; }\r\n    /// <summary>Whether badge is clickable - adds hover effects and cursor pointer</summary>\r\n    /// <ai-hint>Set to true for interactive badges that perform actions when clicked</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Set to true for interactive badges that perform actions\")]\r\n    public bool Clickable { get; set; }\r\n    /// <summary>Click event handler for interactive badges",
          "name": "OnClick",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Child content for custom badge content",
          "name": "ChildContent",
          "aiHint": ""
        },
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "Additional CSS classes",
          "name": "Class",
          "aiHint": ""
        }
      },
      "name": "RBadge",
      "complexity": "Simple",
      "filePath": "/Components/Core/RBadge.razor"
    },
    "RSwitcher": {
      "patterns": {
        "button-group": "Items=\"@actions\" Variant=\"SwitcherVariant.Buttons\"",
        "tab-switcher": "Items=\"@tabItems\" ShowLabels=\"true\" Variant=\"SwitcherVariant.Tabs\"",
        "pill-switcher": "Items=\"@options\" Variant=\"SwitcherVariant.Pills\"",
        "compact-switcher": "Items=\"@items\" Variant=\"SwitcherVariant.Compact\" Size=\"SwitcherSize.Small\""
      },
      "commonUse": "tab switching, view toggles, option selection, filters",
      "aiPrompt": "Create a switcher for selecting between multiple options or states",
      "description": "Professional switcher component for toggling between multiple options",
      "category": "Form",
      "avoidUsage": "Don't use for simple on/off toggles - use checkbox instead",
      "parameters": {
        "ShowActiveIndicator": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowActiveIndicator",
          "aiHint": ""
        },
        "ShowLabels": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowLabels",
          "aiHint": ""
        }
      },
      "name": "RSwitcher",
      "complexity": "Intermediate",
      "filePath": "/Components/Form/RSwitcher.razor"
    },
    "RBreadcrumbs": {
      "patterns": {
        "basic-breadcrumbs": "Items list with BreadcrumbItem objects",
        "icon-breadcrumbs": "BreadcrumbItem with Icon property for visual hierarchy",
        "responsive-breadcrumbs": "CollapsibleOnMobile for mobile-friendly navigation",
        "custom-separator": "Separator or SeparatorIcon for custom dividers"
      },
      "commonUse": "page navigation, hierarchy display, user location indication",
      "aiPrompt": "Create breadcrumb navigation for page hierarchy",
      "description": "Professional breadcrumb navigation component for showing page hierarchy and navigation paths. Supports icons, custom separators, responsive collapsing, and accessibility features.",
      "category": "Navigation",
      "avoidUsage": "Don't use for primary navigation - use RNavMenu instead. Avoid for single-level pages.",
      "parameters": {
        "SeparatorIcon": {
          "isRequired": true,
          "type": "string",
          "description": "Breadcrumb items</summary>\r\n    [Parameter, AIParameter(\"List of breadcrumb navigation items\", \"BreadcrumbItem with Text, Href, and optional Icon\")] \r\n    public List<BreadcrumbItem> Items { get; set; }\r\n    \r\n    /// <summary>Size variant</summary>\r\n    [Parameter, AIParameter(\"Size of breadcrumb text\", \"BreadcrumbSize.Small, BreadcrumbSize.Default, BreadcrumbSize.Large\")] \r\n    public BreadcrumbSize Size { get; set; } = BreadcrumbSize.Default;\r\n    \r\n    /// <summary>Custom separator text (default: chevron icon)</summary>\r\n    [Parameter, AIParameter(\"Text separator between breadcrumbs\", \"/ or > or custom text\")] \r\n    public string Separator { get; set; }\r\n    \r\n    /// <summary>Custom separator icon",
          "name": "SeparatorIcon",
          "aiHint": ""
        },
        "MaxVisibleItems": {
          "isRequired": true,
          "type": "int",
          "description": "Whether to collapse items on mobile</summary>\r\n    [Parameter, AIParameter(\"Responsive behavior on mobile\", \"true to auto-collapse on small screens\")] \r\n    public bool CollapsibleOnMobile { get; set; } = true;\r\n    \r\n    /// <summary>Max items to show before collapsing",
          "name": "MaxVisibleItems",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Custom content",
          "name": "ChildContent",
          "aiHint": ""
        },
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "Additional CSS classes",
          "name": "Class",
          "aiHint": ""
        }
      },
      "name": "RBreadcrumbs",
      "complexity": "Simple",
      "filePath": "/Components/Navigation/RBreadcrumbs.razor"
    },
    "RThemeSwitcher": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Class",
          "aiHint": ""
        }
      },
      "name": "RThemeSwitcher",
      "complexity": "Simple",
      "filePath": "/Components/Core/RThemeSwitcher.razor"
    },
    "RVirtualList": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "EmptyTemplate": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Template for empty state",
          "name": "EmptyTemplate",
          "aiHint": ""
        },
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "Additional CSS classes",
          "name": "Class",
          "aiHint": ""
        },
        "LoadingMoreTemplate": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Template for loading more items",
          "name": "LoadingMoreTemplate",
          "aiHint": ""
        },
        "BufferSize": {
          "isRequired": true,
          "type": "int",
          "description": "Buffer size for items outside visible area",
          "name": "BufferSize",
          "aiHint": ""
        },
        "LoadMoreTemplate": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Template for load more button",
          "name": "LoadMoreTemplate",
          "aiHint": ""
        },
        "Size": {
          "isRequired": true,
          "type": "string",
          "description": "Size variant for spacing",
          "name": "Size",
          "aiHint": ""
        },
        "HasMoreItems": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether there are more items to load",
          "name": "HasMoreItems",
          "aiHint": ""
        },
        "SkeletonCount": {
          "isRequired": true,
          "type": "int",
          "description": "Number of skeleton items to show when loading",
          "name": "SkeletonCount",
          "aiHint": ""
        },
        "IsLoading": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether currently loading initial items",
          "name": "IsLoading",
          "aiHint": ""
        },
        "SkeletonHeight": {
          "isRequired": true,
          "type": "string",
          "description": "Height of skeleton items",
          "name": "SkeletonHeight",
          "aiHint": ""
        },
        "OnLoadMore": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "Callback when more items need to be loaded",
          "name": "OnLoadMore",
          "aiHint": ""
        },
        "LoadingTemplate": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Items to display in the virtual list</summary>\r\n    [Parameter] public List<T> Items { get; set; } = new();\r\n    \r\n    /// <summary>Template for rendering each item</summary>\r\n    [Parameter] public RenderFragment<T> ItemTemplate { get; set; }\r\n    \r\n    /// <summary>Template for loading state",
          "name": "LoadingTemplate",
          "aiHint": ""
        },
        "AutoLoadMore": {
          "isRequired": true,
          "type": "bool",
          "description": "Auto-load more when scrolling near bottom",
          "name": "AutoLoadMore",
          "aiHint": ""
        },
        "ContainerHeight": {
          "isRequired": true,
          "type": "int",
          "description": "Height of the container in pixels",
          "name": "ContainerHeight",
          "aiHint": ""
        },
        "ItemHeight": {
          "isRequired": true,
          "type": "int",
          "description": "Height of each item in pixels",
          "name": "ItemHeight",
          "aiHint": ""
        }
      },
      "name": "RVirtualList",
      "complexity": "Simple",
      "filePath": "/Components/Data/RVirtualList.razor"
    },
    "RDivider": {
      "patterns": {
        "simple-divider": "No parameters for basic horizontal line",
        "section-divider": "Text=\"Settings\" for labeled sections",
        "vertical-divider": "Variant=\"DividerVariant.Vertical\" for inline separation",
        "styled-divider": "Style=\"DividerStyle.Dashed\" for different visual styles"
      },
      "commonUse": "section separation, menu dividers, form sections, content organization",
      "aiPrompt": "Create a professional divider for visual separation",
      "description": "Professional divider component for visual separation with text support and multiple styles. Supports horizontal/vertical orientation, customizable styling, and automatic menu integration.",
      "category": "Core",
      "avoidUsage": "Don't overuse - only for logical content separation. Avoid decorative usage.",
      "parameters": {
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "Divider text (optional) - displays label within the divider line</summary>\r\n    /// <ai-hint>Use for section labels like \"Settings\", \"Advanced Options\", \"OR\". Keep short</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Use for section labels like Settings, Advanced Options, OR. Keep short\", IsRequired = false)]\r\n    public string Text { get; set; }\r\n    \r\n    /// <summary>Divider variant - orientation of the divider line</summary>\r\n    /// <ai-hint>Horizontal for section breaks, Vertical for inline separation between elements</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Horizontal for section breaks, Vertical for inline separation\", \r\n                 SuggestedValues = new[] { \"Horizontal\", \"Vertical\" }, \r\n                 IsRequired = false)]\r\n    public DividerVariant Variant { get; set; } = DividerVariant.Horizontal;\r\n    \r\n    /// <summary>Divider style - visual appearance of the divider line</summary>\r\n    /// <ai-hint>Solid for standard dividers, Dashed for softer separation, Dotted for subtle breaks</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Solid for standard, Dashed for softer, Dotted for subtle separation\", \r\n                 SuggestedValues = new[] { \"Solid\", \"Dashed\", \"Dotted\" }, \r\n                 IsRequired = false)]\r\n    public DividerStyle Style { get; set; } = DividerStyle.Solid;\r\n    \r\n    /// <summary>Text alignment for dividers with text content</summary>\r\n    /// <ai-hint>Center for balanced labels, Left for section headers, Right for special cases</ai-hint>\r\n    [Parameter]\r\n    [AIParameter(Hint = \"Center for balanced labels, Left for section headers, Right for special cases\", \r\n                 SuggestedValues = new[] { \"Left\", \"Center\", \"Right\" }, \r\n                 IsRequired = false)]\r\n    public DividerTextAlign TextAlign { get; set; } = DividerTextAlign.Center;\r\n    \r\n    /// <summary>Additional CSS classes",
          "name": "Class",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Child content",
          "name": "ChildContent",
          "aiHint": ""
        }
      },
      "name": "RDivider",
      "complexity": "Simple",
      "filePath": "/Components/Core/RDivider.razor"
    },
    "RPreviewModal": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "ShowWordCount": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowWordCount",
          "aiHint": ""
        },
        "AllowDownload": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "AllowDownload",
          "aiHint": ""
        },
        "FileName": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "FileName",
          "aiHint": ""
        },
        "OnCopy": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "",
          "name": "OnCopy",
          "aiHint": ""
        },
        "ShowMetadata": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowMetadata",
          "aiHint": ""
        },
        "OnDownload": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "",
          "name": "OnDownload",
          "aiHint": ""
        },
        "Content": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Content",
          "aiHint": ""
        },
        "AllowCopy": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "AllowCopy",
          "aiHint": ""
        },
        "ContentType": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "ContentType",
          "aiHint": ""
        }
      },
      "name": "RPreviewModal",
      "complexity": "Simple",
      "filePath": "/Components/Feedback/RPreviewModal.razor"
    },
    "RConfirmationModal": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "Variant": {
          "isRequired": true,
          "type": "ModalVariant",
          "description": "",
          "name": "Variant",
          "aiHint": ""
        },
        "OnCancel": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "",
          "name": "OnCancel",
          "aiHint": ""
        },
        "Title": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Title",
          "aiHint": ""
        },
        "OnConfirm": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "",
          "name": "OnConfirm",
          "aiHint": ""
        },
        "IsVisible": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "IsVisible",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "",
          "name": "ChildContent",
          "aiHint": ""
        },
        "ConfirmText": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "ConfirmText",
          "aiHint": ""
        },
        "Message": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Message",
          "aiHint": ""
        },
        "IconName": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "IconName",
          "aiHint": ""
        },
        "CancelText": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "CancelText",
          "aiHint": ""
        },
        "IsProcessing": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "IsProcessing",
          "aiHint": ""
        }
      },
      "name": "RConfirmationModal",
      "complexity": "Simple",
      "filePath": "/Components/Feedback/RConfirmationModal.razor"
    },
    "RSelectModal": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "ShowSelectedItems": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowSelectedItems",
          "aiHint": ""
        },
        "ShowItemActions": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "ShowItemActions",
          "aiHint": ""
        },
        "SearchPlaceholder": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "SearchPlaceholder",
          "aiHint": ""
        },
        "AllowMultiple": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "AllowMultiple",
          "aiHint": ""
        }
      },
      "name": "RSelectModal",
      "complexity": "Simple",
      "filePath": "/Components/Feedback/RSelectModal.razor"
    },
    "RSkeleton": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "Height": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Height",
          "aiHint": ""
        },
        "Type": {
          "isRequired": true,
          "type": "SkeletonType",
          "description": "",
          "name": "Type",
          "aiHint": ""
        },
        "Width": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Width",
          "aiHint": ""
        },
        "Animated": {
          "isRequired": true,
          "type": "bool",
          "description": "",
          "name": "Animated",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "",
          "name": "ChildContent",
          "aiHint": ""
        },
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "",
          "name": "Class",
          "aiHint": ""
        },
        "Count": {
          "isRequired": true,
          "type": "int",
          "description": "",
          "name": "Count",
          "aiHint": ""
        }
      },
      "name": "RSkeleton",
      "complexity": "Simple",
      "filePath": "/Components/Display/RSkeleton.razor"
    },
    "RModalProvider": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {},
      "name": "RModalProvider",
      "complexity": "Simple",
      "filePath": "/Components/Feedback/RModalProvider.razor"
    },
    "RGrid": {
      "patterns": {
        "stats-grid": "<RGrid Type=\"GridType.Stats\" Variant=\"GridVariant.Compact\">\r\n    <RCard Title=\"Metric 1\" />\r\n    <RCard Title=\"Metric 2\" />\r\n</RGrid>"
      },
      "commonUse": "Dashboard grids, stats cards, responsive layouts, card containers",
      "aiPrompt": "grid, layout, responsive, stats, cards",
      "description": "Professional responsive grid component with RR.Blazor patterns",
      "category": "Layout",
      "avoidUsage": "",
      "parameters": {
        "MinColumnWidth": {
          "name": "MinColumnWidth",
          "aiHint": "",
          "isRequired": false,
          "description": "",
          "type": "int?"
        },
        "Gap": {
          "name": "Gap",
          "aiHint": "",
          "isRequired": false,
          "description": "",
          "type": "string?"
        },
        "Type": {
          "isRequired": true,
          "type": "GridType",
          "description": "",
          "name": "Type",
          "aiHint": ""
        },
        "ChildContent": {
          "name": "ChildContent",
          "aiHint": "",
          "isRequired": false,
          "description": "",
          "type": "RenderFragment?"
        },
        "Class": {
          "name": "Class",
          "aiHint": "",
          "isRequired": false,
          "description": "",
          "type": "string?"
        },
        "Variant": {
          "isRequired": true,
          "type": "GridVariant",
          "description": "",
          "name": "Variant",
          "aiHint": ""
        }
      },
      "name": "RGrid",
      "complexity": "Simple",
      "filePath": "/Components/Layout/RGrid.razor"
    },
    "RSection": {
      "patterns": {
        "collapsible-section": "IsCollapsible=\"true\" for expandable content panels",
        "basic-section": "Title and ChildContent for simple content sections",
        "icon-section": "Icon and Title for branded section headers",
        "action-section": "TitleContent for sections with header actions"
      },
      "commonUse": "page sections, content organization, collapsible panels, form groups",
      "aiPrompt": "Create content section with header and body",
      "description": "Professional content section component with header, collapsible content, and footer areas. Ideal for organizing page content with consistent styling and optional interactive features.",
      "category": "Layout",
      "avoidUsage": "Don't use for main app layout - use RAppShell instead. Avoid for simple content without headers.",
      "parameters": {
        "SectionId": {
          "isRequired": true,
          "type": "string",
          "description": "Section identifier",
          "name": "SectionId",
          "aiHint": ""
        },
        "FooterContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Footer content area",
          "name": "FooterContent",
          "aiHint": ""
        },
        "NoFooterBorder": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether to remove footer border",
          "name": "NoFooterBorder",
          "aiHint": ""
        },
        "IsCollapsed": {
          "isRequired": true,
          "type": "bool",
          "description": "Section title</summary>\r\n    [Parameter, AIParameter(\"Section header title\", \"Display name for the content section\")] \r\n    public string Title { get; set; }\r\n    \r\n    /// <summary>Section subtitle</summary>\r\n    [Parameter, AIParameter(\"Optional subtitle text\", \"Additional description below title\")] \r\n    public string Subtitle { get; set; }\r\n    \r\n    /// <summary>Icon for header</summary>\r\n    [Parameter, AIParameter(\"Material icon for section\", \"settings, dashboard, people, etc.\")] \r\n    public string Icon { get; set; }\r\n    \r\n    /// <summary>Whether section is collapsible</summary>\r\n    [Parameter, AIParameter(\"Enable expand/collapse functionality\", \"true for interactive sections\")] \r\n    public bool IsCollapsible { get; set; }\r\n    \r\n    /// <summary>Whether section is collapsed (if collapsible)",
          "name": "IsCollapsed",
          "aiHint": ""
        },
        "TitleContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Title content area",
          "name": "TitleContent",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Main content",
          "name": "ChildContent",
          "aiHint": ""
        },
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "Whether to remove content padding</summary>\r\n    [Parameter, AIParameter(\"Remove inner content padding\", \"true for full-width content like tables\")] \r\n    public bool NoPadding { get; set; }\r\n    \r\n    /// <summary>Additional CSS classes",
          "name": "Class",
          "aiHint": ""
        },
        "NoHeaderBorder": {
          "isRequired": true,
          "type": "bool",
          "description": "Callback when collapsed state changes</summary>\r\n    [Parameter] public EventCallback<bool> IsCollapsedChanged { get; set; }\r\n    \r\n    \r\n    /// <summary>Whether to remove header border",
          "name": "NoHeaderBorder",
          "aiHint": ""
        }
      },
      "name": "RSection",
      "complexity": "Simple",
      "filePath": "/Components/Layout/RSection.razor"
    },
    "RTabs": {
      "patterns": {
        "badge-tabs": "BadgeCount on RTabItem for notification indicators",
        "closable-tabs": "IsClosable=\"true\" on RTabItem for document-style tabs",
        "pills-tabs": "Variant=\"TabsVariant.Pills\" for compact tab layouts",
        "card-tabs": "Variant=\"TabsVariant.Card\" for separated tab sections",
        "basic-tabs": "RTabs with RTabItem children for content organization"
      },
      "commonUse": "dashboards, forms, data views, settings panels, multi-step workflows",
      "aiPrompt": "Create professional tabs for content organization",
      "description": "Professional tab container for organizing content with smooth animations and enterprise styling. Supports multiple variants, badges, closable tabs, keyboard navigation, and accessibility.",
      "category": "Navigation",
      "avoidUsage": "Don't use for navigation breadcrumbs - use RBreadcrumbs instead. Avoid for simple toggles.",
      "parameters": {
        "OnAddTab": {
          "isRequired": true,
          "type": "EventCallback",
          "description": "Called when tab selection changes</summary>\r\n    [Parameter] public EventCallback<TabChangedEventArgs> OnTabChanged { get; set; }\r\n    \r\n    /// <summary>Called when add tab button is clicked",
          "name": "OnAddTab",
          "aiHint": ""
        },
        "FadeOnly": {
          "isRequired": true,
          "type": "bool",
          "description": "Tab variant style</summary>\r\n    [Parameter, AIParameter(\"Visual style of tabs\", \"TabsVariant.Default, TabsVariant.Pills, TabsVariant.Card\")] \r\n    public TabsVariant Variant { get; set; } = TabsVariant.Default;\r\n    \r\n    /// <summary>Size of tabs</summary>\r\n    [Parameter, AIParameter(\"Size of tab items\", \"ButtonSize.Small, ButtonSize.Medium, ButtonSize.Large\")] \r\n    public ButtonSize Size { get; set; } = ButtonSize.Medium;\r\n    \r\n    /// <summary>Active tab ID</summary>\r\n    [Parameter, AIParameter(\"ID of currently active tab\", \"Use with @bind-ActiveTabId for two-way binding\")] \r\n    public string ActiveTabId { get; set; }\r\n    \r\n    /// <summary>Callback when active tab changes</summary>\r\n    [Parameter] public EventCallback<string> ActiveTabIdChanged { get; set; }\r\n    \r\n    /// <summary>Whether to show add tab button</summary>\r\n    [Parameter, AIParameter(\"Show + button for adding new tabs\", \"true for dynamic tab creation\")] \r\n    public bool ShowAddButton { get; set; }\r\n    \r\n    /// <summary>Whether tab content has no padding</summary>\r\n    [Parameter, AIParameter(\"Remove padding from tab content area\", \"true for full-width content like tables\")] \r\n    public bool NoPadding { get; set; }\r\n    \r\n    /// <summary>Use fade only animation (no slide)",
          "name": "FadeOnly",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Child content containing RTabItem components",
          "name": "ChildContent",
          "aiHint": ""
        },
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "Additional CSS classes",
          "name": "Class",
          "aiHint": ""
        }
      },
      "name": "RTabs",
      "complexity": "Complex",
      "filePath": "/Components/Navigation/RTabs.razor"
    },
    "RSummaryItem": {
      "patterns": {},
      "commonUse": "",
      "aiPrompt": "",
      "description": "",
      "category": "Unknown",
      "avoidUsage": "",
      "parameters": {
        "ShowSeparator": {
          "isRequired": true,
          "type": "bool",
          "description": "Whether to show separator line",
          "name": "ShowSeparator",
          "aiHint": ""
        },
        "Size": {
          "isRequired": true,
          "type": "SummaryItemSize",
          "description": "Size variant",
          "name": "Size",
          "aiHint": ""
        },
        "Layout": {
          "isRequired": true,
          "type": "SummaryItemLayout",
          "description": "Layout variant",
          "name": "Layout",
          "aiHint": ""
        },
        "ChildContent": {
          "isRequired": true,
          "type": "RenderFragment",
          "description": "Custom content for the value area",
          "name": "ChildContent",
          "aiHint": ""
        },
        "Icon": {
          "isRequired": true,
          "type": "string",
          "description": "Material icon name",
          "name": "Icon",
          "aiHint": ""
        },
        "Class": {
          "isRequired": true,
          "type": "string",
          "description": "Additional CSS classes",
          "name": "Class",
          "aiHint": ""
        },
        "Value": {
          "isRequired": true,
          "type": "string",
          "description": "Value text for the summary item",
          "name": "Value",
          "aiHint": ""
        },
        "Label": {
          "isRequired": true,
          "type": "string",
          "description": "Label text for the summary item",
          "name": "Label",
          "aiHint": ""
        },
        "Emphasis": {
          "isRequired": true,
          "type": "SummaryItemEmphasis",
          "description": "Value emphasis style",
          "name": "Emphasis",
          "aiHint": ""
        }
      },
      "name": "RSummaryItem",
      "complexity": "Simple",
      "filePath": "/Components/Display/RSummaryItem.razor"
    }
  },
  "bestPractices": {
    "accessibility": {
      "touchTargets": "Minimum 44px touch targets for mobile",
      "focus": "Focus rings automatically applied to interactive elements",
      "colors": "All color combinations meet WCAG AA contrast requirements"
    },
    "layoutPatterns": {
      "headerLayout": "d-flex justify-between align-center py-3 px-4",
      "statsGrid": "stats-grid gap-6 mb-8",
      "formSection": "bg-elevated pa-4 rounded-md border border-light",
      "professionalCard": "elevation-4 glass-light pa-6 rounded-lg"
    },
    "componentUsage": {
      "cards": "Use RCard for content containers, combine with elevation-4 and glass-light for professional appearance",
      "spacing": "Use pa-6 for card content, gap-4 for flex layouts, mb-4 for standard element separation",
      "buttons": "Use ButtonVariant.Primary for main actions, Secondary for supporting actions, Danger for destructive actions",
      "forms": "Use form-grid--2 for dual-column layouts, Required=\"true\" for mandatory fields"
    }
  }
}
