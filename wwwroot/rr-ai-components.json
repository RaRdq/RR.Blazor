{
  "_ai_instructions": {
    "USAGE_DIRECTIVE": "Use <RComponentName Parameter1='value' Parameter2='value' /> in Blazor markup",
    "NAVIGATION": {
      "components": "Lines 16+: Components with structured format and essential parameters",
      "ai_instructions": "Lines 1-15: Read AI instructions first"
    },
    "ESSENTIAL_ONLY": "Only essential parameters with AI hints shown. Standard Blazor parameters available but not documented.",
    "EXTRACTION_INFO": {
      "total_components": 70,
      "extraction_method": "Generic component parsing"
    },
    "UNIVERSAL_TEMPLATE_SYSTEM": "Use RTemplates.Badge(), RTemplates.Currency(), RTemplates.Stack(), RTemplates.Group(), RTemplates.Avatar(), RTemplates.Progress(), RTemplates.Rating() for consistent data display patterns across all components",
    "CRITICAL": "Use exact component format for UI generation",
    "COMPONENT_FORMAT": "Each component has Purpose and Parameters with Type, enum values [brackets], and AI hints"
  },
  "universal_templates": {
    "RTemplates": {
      "Purpose": "Universal template system for consistent data display patterns across all RR.Blazor components",
      "Methods": {
        "Badge": "RTemplates.Badge<T>(textSelector, variantSelector?, iconSelector?, clickable?) - Status indicators and labels",
        "Currency": "RTemplates.Currency<T>(valueSelector, currencyCode?, compact?, showColors?) - Monetary values with formatting",
        "Stack": "RTemplates.Stack<T>(primarySelector, secondarySelector?, iconSelector?, orientation?) - Multi-line information display",
        "Group": "RTemplates.Group<T>(itemsSelector, itemTemplate?, separator?, maxItems?) - Collections with overflow handling",
        "Avatar": "RTemplates.Avatar<T>(nameSelector, imageSelector?, size?, clickable?) - User avatars with initials fallback",
        "Progress": "RTemplates.Progress<T>(valueSelector, max?, showPercentage?, variant?) - Progress bars and completion",
        "Rating": "RTemplates.Rating<T>(valueSelector, maxRating?, icon?, showValue?, size?) - Star ratings and scores"
      },
      "Usage": "Use in ItemTemplate parameters or ColumnDefinition.CustomTemplate for consistent styling",
      "Extensions": "ColumnDefinition<T>.UseBadgeTemplate(), .UseCurrencyTemplate(), etc. for table columns"
    }
  },
  "components": {
    "RFormSection": {
      "Purpose": "Professional form section container with collapsible header and grid layout",
      "Parameters": {
        "Title": "string? - Section title displayed in header",
        "Description": "string? - Section description or instructions",
        "Icon": "string? - Icon displayed next to section title",
        "Elevation": "SectionElevation - Visual elevation level (None, Subtle, Medium, High)",
        "FieldColumns": "int - Number of columns for field layout (1-4)",
        "ShowHeader": "bool - Whether to show the section header",
        "Collapsible": "bool - Allow section to be collapsed/expanded",
        "Expanded": "bool - Whether section is currently expanded",
        "ExpandedChanged": "EventCallback<bool> - Callback when expanded state changes",
        "ChildContent": "RenderFragment?"
      }
    },
    "RAccordionItem": {
      "Purpose": "Primary text content (standardized parameter)",
      "Parameters": {
        "Text": "string",
        "Icon": "string",
        "Disabled": "bool",
        "HeaderContent": "RenderFragment",
        "ChildContent": "RenderFragment"
      }
    },
    "RHeaderCard": {
      "Purpose": "Header card component for page titles and descriptions with consistent styling. Perfect for page headers, section intros, and feature highlights.",
      "Parameters": {
        "Disabled": "bool",
        "ChildContent": "RenderFragment",
        "Title": "string",
        "Icon": "string",
        "Variant": "CardVariant[Default, Gradient, GlassGradient] - Header card variant - Gradient for hero headers, GlassGradient for premium features"
      }
    },
    "RThemeSwitcher": {
      "Purpose": "UI component",
      "Parameters": {
        "Disabled": "bool",
        "ChildContent": "RenderFragment"
      }
    },
    "RChart": {
      "Purpose": "Chart title",
      "Parameters": {
        "OnClick": "EventCallback<MouseEventArgs> - Click event handler",
        "Loading": "bool - Loading state",
        "LoadingText": "string - Loading text to display",
        "AriaLabel": "string - ARIA label for accessibility",
        "TabIndex": "int - Tab index for keyboard navigation",
        "Title": "string - Chart title displayed in header",
        "Icon": "string",
        "Variant": "ChartVariant",
        "Size": "SizeType",
        "HeaderContent": "RenderFragment",
        "FooterContent": "RenderFragment"
      }
    },
    "RTabs": {
      "Purpose": "Tab container for organizing content with smooth animations.",
      "Parameters": {
        "Variant": "TabsVariant",
        "Size": "SizeType",
        "Loading": "bool",
        "ChildContent": "RenderFragment"
      }
    },
    "RFilterBar": {
      "Purpose": "Whether to show search input",
      "Parameters": {
        "ShowSearch": "bool - Display search text input field",
        "SearchValue": "string - Current search text value",
        "SearchValueChanged": "EventCallback<string> - Event fired when search value changes",
        "SearchPlaceholder": "string - Placeholder text shown in search input",
        "Filters": "List<FilterDefinition> - List of filter field definitions with labels, types, and options",
        "FilterChanged": "EventCallback<FilterChangedEventArgs> - Event fired when any filter value changes",
        "ShowDateRange": "bool - Display date range picker with From/To fields",
        "DateFrom": "DateTime? - Start date for date range filter",
        "DateTo": "DateTime? - End date for date range filter",
        "DateRangeChanged": "EventCallback<DateRangeChangedEventArgs> - Event fired when date range values change",
        "QuickFilters": "List<QuickFilterDefinition> - List of toggleable filter buttons for common filters",
        "ActiveQuickFilters": "HashSet<string> - Set of currently active quick filter keys",
        "QuickFilterToggled": "EventCallback<QuickFilterToggledEventArgs> - Event fired when quick filter is toggled on/off",
        "ShowStatus": "bool - Display status dropdown filter",
        "StatusFilter": "string - Currently selected status value",
        "StatusOptions": "Dictionary<string, string> - Dictionary of status values and display labels",
        "StatusFilterChanged": "EventCallback<string> - Event fired when status filter value changes",
        "CustomFilters": "RenderFragment - Custom filter components rendered in the filter bar",
        "ShowClearButton": "bool - Display button to clear all active filters",
        "ShowFilterCount": "bool - Display badge showing number of active filters",
        "FiltersCleared": "EventCallback - Event fired when all filters are cleared"
      }
    },
    "RSelectField": {
      "Purpose": "/// Returns safely filtered HTML attributes using centralized RAttributeForwarder. ///",
      "Parameters": {
        "Label": "string",
        "Required": "bool - Whether the field is required",
        "ReadOnly": "bool - Whether the field is read-only",
        "Loading": "bool - Whether the field is in loading state",
        "Variant": "TextInputVariant",
        "Size": "SizeType",
        "HasError": "bool - Whether the field has validation error",
        "ErrorMessage": "string - Error message to display",
        "MaxLength": "int? - Maximum character length",
        "OnInput": "EventCallback<ChangeEventArgs> - Immediate value changed callback",
        "OnChange": "EventCallback<ChangeEventArgs> - Value changed callback (fired on blur/change)",
        "OnTextInput": "EventCallback<string> - Immediate text value changed callback",
        "OnTextChanged": "EventCallback<string> - Text value changed callback (fired on blur/change)",
        "Value": "string? - Select value",
        "ValueChanged": "EventCallback<string> - Value changed callback"
      }
    },
    "RBadge": {
      "Purpose": "Badge component for status indicators, counts, and labels.",
      "Parameters": {
        "Text": "string - Short text: Active, 5, New",
        "Variant": "VariantType[Primary, Secondary, Success, Warning, Danger, Info] - Color scheme variant",
        "Size": "SizeType[Small, Medium, Large] - Badge size",
        "Density": "DensityType[Normal, Dense, Compact, Spacious] - Normal is default, Compact for ultra-dense, Dense for data-heavy",
        "Icon": "string[check_circle, warning, error, info, star, notifications] - Common icons: check_circle, warning, error, info, star, notifications",
        "Clickable": "bool - Set to true for interactive badges that perform actions",
        "OnClick": "EventCallback - Set to true for interactive badges that perform actions when clicked",
        "ChildContent": "RenderFragment - Set to true for interactive badges that perform actions when clicked",
        "Class": "string - Set to true for interactive badges that perform actions when clicked"
      }
    },
    "RFileUpload": {
      "Purpose": "Professional file upload component with drag-drop, validation, and preview",
      "Parameters": {
        "ComponentId": "string - Unique identifier for the file upload component",
        "DisplayMode": "RFileUploadDisplayMode - Visual style mode (DropZone, Button, Inline, Minimal)",
        "Disabled": "bool",
        "AllowedTypes": "string[] - Array of allowed file extensions or MIME types",
        "MaxSize": "long - Maximum file size in bytes",
        "Multiple": "bool - Allow selecting multiple files at once",
        "Icon": "string"
      }
    },
    "RThemeProvider": {
      "Purpose": "UI component",
      "Parameters": {
        "Disabled": "bool",
        "ChildContent": "RenderFragment"
      }
    },
    "RVirtualListGeneric": {
      "Purpose": "Items to display in the virtual list",
      "Parameters": {
        "Items": "List<T>",
        "Loading": "bool",
        "Size": "string"
      }
    },
    "RMetric": {
      "Purpose": "Metric value to display",
      "Parameters": {
        "OnClick": "EventCallback<MouseEventArgs> - Click event handler",
        "Loading": "bool - Loading state",
        "LoadingText": "string - Loading text to display",
        "AriaLabel": "string - ARIA label for accessibility",
        "TabIndex": "int - Tab index for keyboard navigation",
        "Value": "object - Main numeric or text value to display",
        "Text": "string - Text displayed as metric title",
        "Subtitle": "string - Additional descriptive text shown below the value",
        "Icon": "string[trending_up, attach_money, shopping_cart, analytics, account_balance] - Material Icons name to display with metric",
        "Prefix": "string[$, +, -, €, £] - Text displayed before the value",
        "Suffix": "string[%, units, pts, orders, users] - Text displayed after the value",
        "Variant": "string[default, success, warning, error, info, primary] - Visual style variant for different metric types",
        "Size": "string[small, medium, large] - Size of the metric component",
        "Format": "string[N0, N2, C, P, MMM dd, yyyy] - .NET format string for value formatting",
        "ShowChange": "bool - Display change indicator with trending icon",
        "Change": "decimal? - Numerical change value - positive shows green up arrow, negative shows red down arrow",
        "ChangeSuffix": "string[%, pts, units, $] - Text displayed after change value",
        "ChangeIsCurrency": "bool - Format change value as currency instead of using ChangeSuffix",
        "Clickable": "bool - Makes metric interactive with hover effects and click events"
      }
    },
    "RToggleGeneric": {
      "Purpose": "Professional toggle switch component for boolean states",
      "Parameters": {
        "Value": "bool",
        "OnClick": "EventCallback<bool>",
        "Text": "string?",
        "Icon": "string?",
        "Disabled": "bool",
        "Variant": "ToggleVariant",
        "Size": "SizeType"
      }
    },
    "RColumnGeneric": {
      "Purpose": "UI component",
      "Parameters": {
        "Title": "string"
      }
    },
    "RStatsCard": {
      "Purpose": "/// Card label text (displayed above the value) ///",
      "Parameters": {
        "Text": "string - Text displayed as card title",
        "Value": "string - Primary statistic value to display prominently",
        "Subtitle": "string - Secondary text displayed below the main value",
        "Icon": "string[trending_up, attach_money, people, analytics, shopping_cart] - Material Icons name for visual representation",
        "IconColor": "string[interactive-primary, success, warning, error, info] - Semantic color name for icon background",
        "ValueColor": "string[interactive-primary, success, warning, error, text-primary] - Semantic color name for value text",
        "IconContainerSize": "int - Icon container size in pixels",
        "BadgeText": "string - Optional badge text shown next to value",
        "BadgeVariant": "VariantType[Info, Success, Warning, Error] - Visual style for badge",
        "BadgeSize": "SizeType[Small, Medium, Large] - Size of the badge component",
        "Clickable": "bool - Makes card interactive with hover effects and click events",
        "OnClick": "EventCallback - Event fired when clickable card is clicked",
        "Elevation": "int[0, 1, 2, 3, 4] - Shadow depth level for card elevation",
        "Class": "string - Custom CSS classes for styling overrides",
        "Density": "DensityType[Compact, Dense, Normal, Spacious] - Layout density affecting spacing and sizing"
      }
    },
    "RModal": {
      "Purpose": "/// Animation style for modal appearance ///",
      "Parameters": {
        "HeaderContent": "RenderFragment",
        "FooterContent": "RenderFragment"
      }
    },
    "RTextInput": {
      "Purpose": "/// Returns safely filtered HTML attributes using centralized RAttributeForwarder. ///",
      "Parameters": {
        "Label": "string",
        "Required": "bool - Whether the field is required",
        "ReadOnly": "bool - Whether the field is read-only",
        "Loading": "bool - Whether the field is in loading state",
        "Variant": "TextInputVariant",
        "Size": "SizeType",
        "HasError": "bool - Whether the field has validation error",
        "ErrorMessage": "string - Error message to display",
        "MaxLength": "int? - Maximum character length",
        "OnInput": "EventCallback<ChangeEventArgs> - Immediate value changed callback",
        "OnChange": "EventCallback<ChangeEventArgs> - Value changed callback (fired on blur/change)",
        "OnTextInput": "EventCallback<string> - Immediate text value changed callback",
        "OnTextChanged": "EventCallback<string> - Text value changed callback (fired on blur/change)",
        "Value": "string",
        "Type": "FieldType[Text, Email, Password, Number, Tel, Url, Search] - Input type",
        "Min": "decimal? - Minimum value for number inputs",
        "Max": "decimal? - Maximum value for number inputs",
        "Step": "decimal? - Step value for number inputs",
        "ShowPasswordToggle": "bool - Show password toggle for password fields",
        "IsMultiLine": "bool - Use textarea instead of input (multi-line)",
        "Rows": "int - Number of visible rows for textarea",
        "ShowCharacterCount": "bool - Show character count indicator for textareas",
        "Resize": "string[none, vertical, horizontal, both, auto] - Textarea resize behavior",
        "AutoComplete": "string? - Auto-complete attribute for forms",
        "Name": "string? - Field name for form submission"
      }
    },
    "RLineChart": {
      "Purpose": "Chart data series",
      "Parameters": {
        "OnClick": "EventCallback<MouseEventArgs> - Click event handler",
        "Loading": "bool - Loading state",
        "LoadingText": "string - Loading text to display",
        "AriaLabel": "string - ARIA label for accessibility",
        "TabIndex": "int - Tab index for keyboard navigation",
        "Series": "IEnumerable<ChartSeries> - Array of data series for line chart",
        "Title": "string",
        "Icon": "string",
        "Size": "SizeType",
        "Variant": "ChartVariant",
        "HeaderContent": "RenderFragment",
        "FooterContent": "RenderFragment"
      }
    },
    "RActionGroup": {
      "Purpose": "UI component",
      "Parameters": {
        "Disabled": "bool",
        "ChildContent": "RenderFragment"
      }
    },
    "RToastContainer": {
      "Purpose": "UI component",
      "Parameters": {}
    },
    "RTabItem": {
      "Purpose": "Individual tab item component for RTabs container with icon, badge, and content support. Supports closable tabs, disabled states, and badge notifications for professional tab experiences.",
      "Parameters": {
        "Disabled": "bool",
        "ChildContent": "RenderFragment",
        "Text": "string",
        "Icon": "string"
      }
    },
    "RPreviewModal": {
      "Purpose": "UI component",
      "Parameters": {
        "Content": "string"
      }
    },
    "RBooleanFilter": {
      "Purpose": "UI component",
      "Parameters": {}
    },
    "RTableGeneric": {
      "Purpose": "Gets the filtered and sorted data for chart integration",
      "Parameters": {
        "Items": "IEnumerable<TItem>",
        "Icon": "string",
        "HeaderContent": "RenderFragment",
        "Disabled": "bool"
      }
    },
    "RSelectFilter": {
      "Purpose": "UI component",
      "Parameters": {}
    },
    "RAlert": {
      "Purpose": "Alert component for displaying important messages with different severity levels. Supports info, success, warning, and error states with consistent styling.",
      "Parameters": {
        "Variant": "AlertVariant",
        "Size": "SizeType",
        "Title": "string",
        "Text": "string",
        "Icon": "string",
        "ChildContent": "RenderFragment",
        "OnClick": "EventCallback<MouseEventArgs>"
      }
    },
    "RConfirmationModal": {
      "Purpose": "UI component",
      "Parameters": {
        "Title": "string",
        "Icon": "string",
        "Variant": "ConfirmationVariant",
        "Size": "SizeType"
      }
    },
    "RTooltip": {
      "Purpose": "Professional tooltip component with rich content support for links, buttons, and other R components",
      "Parameters": {
        "Text": "string",
        "Icon": "string",
        "Title": "string - Title attribute for tooltips",
        "Content": "string? - Simple tooltip text content",
        "Position": "TooltipPosition - Position of tooltip relative to trigger",
        "Size": "SizeType - Size variant for tooltip",
        "Variant": "TooltipVariant - Visual style variant",
        "Delay": "int - Delay in milliseconds before showing tooltip",
        "Trigger": "TooltipTrigger - How tooltip is triggered",
        "ContentFragment": "RenderFragment? - Rich HTML content for tooltip"
      }
    },
    "RAppShell": {
      "Purpose": "Enterprise application shell with collapsible sidebar and header",
      "Parameters": {
        "Title": "string",
        "ChildContent": "RenderFragment"
      }
    },
    "RNavMenu": {
      "Purpose": "Professional navigation menu component for sidebar and main navigation with hierarchical support. Supports collapsible groups, badges, icons, and responsive behavior for enterprise applications.",
      "Parameters": {
        "Items": "List<NavMenuItem>",
        "ChildContent": "RenderFragment"
      }
    },
    "RDateFilter": {
      "Purpose": "UI component",
      "Parameters": {}
    },
    "RDataDisplay": {
      "Purpose": "Smart data display component that automatically detects between info and summary modes. Ultra-light unified replacement for RInfoItem and RSummaryItem with 5 distinct visual variants.",
      "Parameters": {
        "Value": "string - Value text to display - John Doe, $1,250.00, Active",
        "Mode": "DataDisplayMode - Display mode - DataDisplayMode.Auto for smart detection",
        "Variant": "DataDisplayVariant - Visual variant - DataDisplayVariant.Standard",
        "Size": "SizeType - Size variant - SizeType.Medium",
        "Layout": "DataDisplayLayout - Layout arrangement - DataDisplayLayout.Vertical",
        "Emphasis": "DataDisplayEmphasis - Value emphasis level - DataDisplayEmphasis.Normal",
        "Required": "bool - Required field indicator - true for required fields",
        "ShowSeparator": "bool - Show separator line - true for visual separation",
        "EmphasizeValue": "bool - Emphasize value text - true for bold value",
        "ValueContent": "RenderFragment - Custom value content - For badges, buttons, or complex value display",
        "AdditionalContent": "RenderFragment - Additional content after value - For secondary information"
      }
    },
    "RContent": {
      "Purpose": "Automatic content wrapper for app shell layouts with smart positioning and responsive behavior. Similar to MudContent but optimized for RR.Blazor patterns.",
      "Parameters": {
        "Disabled": "bool",
        "ChildContent": "RenderFragment"
      }
    },
    "RAreaChart": {
      "Purpose": "UI component",
      "Parameters": {
        "OnClick": "EventCallback<MouseEventArgs> - Click event handler",
        "Loading": "bool - Loading state",
        "LoadingText": "string - Loading text to display",
        "AriaLabel": "string - ARIA label for accessibility",
        "TabIndex": "int - Tab index for keyboard navigation",
        "Title": "string",
        "Icon": "string",
        "Size": "SizeType",
        "Variant": "ChartVariant",
        "HeaderContent": "RenderFragment"
      }
    },
    "RBaseModal": {
      "Purpose": "UI component",
      "Parameters": {
        "OnClick": "EventCallback<MouseEventArgs> - Click event handler",
        "Loading": "bool - Loading state",
        "LoadingText": "string - Loading text to display",
        "AriaLabel": "string - ARIA label for accessibility",
        "TabIndex": "int - Tab index for keyboard navigation",
        "Title": "string",
        "Icon": "string",
        "Size": "SizeType",
        "Variant": "ModalVariant",
        "HeaderContent": "RenderFragment",
        "FooterContent": "RenderFragment"
      }
    },
    "RTextFilter": {
      "Purpose": "UI component",
      "Parameters": {}
    },
    "RFormModal": {
      "Purpose": "Generic form modal component for dynamic form generation and validation",
      "Parameters": {
        "InitialData": "T - Initial data model for the form",
        "FormComponent": "Type - Custom form component type to use instead of auto-generation",
        "FormParameters": "Dictionary<string, object> - Additional parameters passed to custom form component",
        "ShowValidationSummary": "bool - Show validation error summary",
        "OnDataChanged": "EventCallback<T> - Callback when form data changes",
        "ChildContent": "RenderFragment - Custom form content instead of auto-generation"
      }
    },
    "RMessageModal": {
      "Purpose": "UI component",
      "Parameters": {
        "Disabled": "bool",
        "ChildContent": "RenderFragment",
        "Icon": "string",
        "Variant": "ModalVariant"
      }
    },
    "RSection": {
      "Purpose": "Professional content section component with header, collapsible content, and footer areas. Ideal for organizing page content with consistent styling and optional interactive features.",
      "Parameters": {
        "Text": "string",
        "Icon": "string",
        "Title": "string - Title attribute for tooltips",
        "FooterContent": "RenderFragment"
      }
    },
    "RDetailModal": {
      "Purpose": "UI component",
      "Parameters": {
        "Disabled": "bool",
        "ChildContent": "RenderFragment"
      }
    },
    "RSummaryItem": {
      "Purpose": "Professional summary item component for displaying key-value pairs with consistent styling. Supports multiple layouts, sizes, and emphasis variants for data presentation.",
      "Parameters": {
        "Text": "string - Use descriptive labels like Total Revenue, Active Users, Completion Rate",
        "Value": "string",
        "Icon": "string",
        "Size": "SizeType",
        "ChildContent": "RenderFragment"
      }
    },
    "RRadio": {
      "Purpose": "Professional radio button component with enterprise styling and accessibility",
      "Parameters": {
        "Value": "string?",
        "Text": "string?",
        "Icon": "string?",
        "Variant": "RadioVariant",
        "Size": "SizeType",
        "Disabled": "bool",
        "ChildContent": "RenderFragment?",
        "OnClick": "EventCallback<MouseEventArgs>"
      }
    },
    "RTimeline": {
      "Purpose": "Timeline items to display",
      "Parameters": {
        "OnClick": "EventCallback<MouseEventArgs> - Click event handler",
        "Loading": "bool - Loading state",
        "LoadingText": "string - Loading text to display",
        "AriaLabel": "string - ARIA label for accessibility",
        "TabIndex": "int - Tab index for keyboard navigation",
        "Items": "List<TimelineItem> - List of timeline items containing title, description, timestamp, and actions",
        "Variant": "TimelineVariant[Default, Process, Activity, Minimal] - Visual style variant for different timeline purposes",
        "LoadingItemCount": "int - Number of placeholder items displayed during loading state",
        "DateFormat": "string[MMM dd, yyyy HH:mm, MM/dd/yyyy, yyyy-MM-dd, HH:mm] - .NET date format string for timestamp display",
        "ShowRelativeTime": "bool - Display relative time (\\",
        "Compact": "bool - Reduced spacing and smaller elements for dense layouts",
        "Orientation": "string[vertical, horizontal] - Layout direction of timeline items"
      }
    },
    "REmptyState": {
      "Purpose": "/// The primary text content to display. Recommended parameter for all text content. ///",
      "Parameters": {
        "Icon": "string",
        "Text": "string",
        "ChildContent": "RenderFragment"
      }
    },
    "RChoiceGeneric": {
      "Purpose": "Universal choice system - adapts between inline and dropdown modes",
      "Parameters": {
        "Items": "IEnumerable<TValue>"
      }
    },
    "RPieChart": {
      "Purpose": "Pie chart data points",
      "Parameters": {
        "OnClick": "EventCallback<MouseEventArgs> - Click event handler",
        "Loading": "bool - Loading state",
        "LoadingText": "string - Loading text to display",
        "AriaLabel": "string - ARIA label for accessibility",
        "TabIndex": "int - Tab index for keyboard navigation",
        "Data": "IEnumerable<ChartDataPoint> - Array of data points for pie chart",
        "Title": "string",
        "Icon": "string",
        "Size": "SizeType",
        "Variant": "ChartVariant",
        "HeaderContent": "RenderFragment",
        "FooterContent": "RenderFragment"
      }
    },
    "RSkeleton": {
      "Purpose": "UI component",
      "Parameters": {
        "Loading": "bool",
        "ChildContent": "RenderFragment"
      }
    },
    "RProgressBar": {
      "Purpose": "UI component",
      "Parameters": {
        "Value": "double",
        "Text": "string - Progress bar label text",
        "Variant": "ProgressVariant",
        "Size": "SizeType"
      }
    },
    "RSelectModalGeneric": {
      "Purpose": "UI component",
      "Parameters": {
        "Items": "IEnumerable<T>"
      }
    },
    "RFormGeneric": {
      "Purpose": "Form component with validation, state management, and accessibility",
      "Parameters": {
        "Model": "TModel - Data model bound to the form",
        "ModelChanged": "EventCallback<TModel> - Callback when model data changes",
        "OnValidSubmitTyped": "EventCallback<FormSubmissionEventArgs<TModel>> - Called when form is submitted with valid data",
        "OnInvalidSubmitTyped": "EventCallback<FormSubmissionEventArgs<TModel>> - Called when form is submitted with invalid data",
        "OnStateChangedTyped": "EventCallback<FormStateChangedEventArgs> - Called when form state changes (submitting, success, error)"
      }
    },
    "RCalendar": {
      "Purpose": "Ultra-professional, customizable calendar component with modern glassmorphism design. Supports events, custom rendering, responsive layouts, and advanced navigation patterns.",
      "Parameters": {
        "Size": "SizeType"
      }
    },
    "RErrorBoundary": {
      "Purpose": "Error boundary component for isolating component failures and providing graceful fallback UI. Captures unhandled exceptions in child components and displays user-friendly error messages.",
      "Parameters": {}
    },
    "RAccordion": {
      "Purpose": "Accordion items content",
      "Parameters": {
        "ChildContent": "RenderFragment",
        "Variant": "AccordionVariant"
      }
    },
    "RChip": {
      "Purpose": "Chip component for tags, badges, and status indicators with style variants.",
      "Parameters": {
        "Style": "ChipStyle[Badge, Chip, Status] - Badge for counts, Chip for tags/filters, Status for state indicators",
        "Variant": "VariantType[Primary, Secondary, Success, Warning, Error, Info] - Primary for emphasis, Success for positive, Warning for attention, Error for problems",
        "Text": "string - Keep short: Active, 5, New, Pending. Use 1-20 characters max",
        "Icon": "string[check_circle, warning, error, info, star, notifications] - Common icons: check_circle, warning, error, info, star, notifications",
        "Size": "SizeType[Small, Medium, Large] - Small for compact, Medium for standard, Large for prominence",
        "Density": "DensityType[Normal, Dense, Compact, Spacious] - Normal is default, Compact for ultra-dense, Dense for data-heavy",
        "Clickable": "bool - Set to true for interactive chips that perform actions",
        "Closeable": "bool - Set to true for removable tags and filter chips",
        "Selected": "bool - Set to true for removable tags and filter chips",
        "Disabled": "bool - Set to true for removable tags and filter chips",
        "ShowPulse": "bool - Shows pulse animation for processing/loading states",
        "OnClick": "EventCallback - Automatically enabled for Processing variant when Style is Status",
        "OnClose": "EventCallback - Automatically enabled for Processing variant when Style is Status",
        "ChildContent": "RenderFragment - Automatically enabled for Processing variant when Style is Status"
      }
    },
    "RListItem": {
      "Purpose": "Primary text content (standardized parameter)",
      "Parameters": {
        "Text": "string",
        "Icon": "string",
        "Disabled": "bool",
        "ChildContent": "RenderFragment",
        "OnClick": "EventCallback<MouseEventArgs>"
      }
    },
    "RList": {
      "Purpose": "List title (for menu variant)",
      "Parameters": {
        "Title": "string",
        "Size": "SizeType",
        "Variant": "ListVariant",
        "ChildContent": "RenderFragment"
      }
    },
    "RButton": {
      "Purpose": "UI component",
      "Parameters": {
        "Type": "ButtonType[Button, Submit, Reset] - Button type",
        "IconPosition": "IconPosition[Start, End, Top, Bottom] - Icon position",
        "StopPropagation": "bool - Stop event propagation",
        "PreventDefault": "bool - Prevent default behavior"
      }
    },
    "RColumn": {
      "Purpose": "UI component",
      "Parameters": {
        "Title": "string",
        "ChildContent": "RenderFragment"
      }
    },
    "RTableVirtualized": {
      "Purpose": "UI component",
      "Parameters": {
        "Disabled": "bool",
        "ChildContent": "RenderFragment",
        "Items": "IEnumerable<TItem>",
        "Title": "string",
        "Icon": "string",
        "HeaderContent": "RenderFragment",
        "Loading": "bool"
      }
    },
    "RCard": {
      "Purpose": "Card component with header, media, content areas, and loading states.",
      "Parameters": {
        "Disabled": "bool",
        "ChildContent": "RenderFragment",
        "Variant": "CardVariant[Default, Outlined, Elevated, Glass, Flat, Gradient, GlassGradient] - Default for standard, Elevated for prominence, Glass for overlays, Gradient for hero sections, GlassGradient for premium features",
        "Text": "string - Card title text",
        "Subtitle": "string - Secondary text below title",
        "Content": "string - Simple text content",
        "Icon": "string[dashboard, person, settings, analytics, payment, work] - Icon name",
        "ImageSrc": "string - Use for hero images, thumbnails, or visual content",
        "ImageAlt": "string - Use for hero images, thumbnails, or visual content in cards",
        "Clickable": "bool - Set to true for interactive cards that perform actions",
        "Loading": "bool - Use during async operations to show processing state",
        "LoadingText": "string - Use during async operations to indicate processing state",
        "Selected": "bool - Use during async operations to indicate processing state",
        "RibbonText": "string - Use during async operations to indicate processing state",
        "BodyClass": "string - Customize content area styling - padding, layout, spacing. Overrides defaults.",
        "HeaderContent": "RenderFragment - Use to customize padding, layout, spacing of the card content area. Overrides default padding when specified.",
        "MediaContent": "RenderFragment - Use to customize padding, layout, spacing of the card content area. Overrides default padding when specified.",
        "FooterContent": "RenderFragment",
        "OnClick": "EventCallback<MouseEventArgs>"
      }
    },
    "RTableColumnManager": {
      "Purpose": "UI component",
      "Parameters": {}
    },
    "RInfoItem": {
      "Purpose": "Label text for the info item",
      "Parameters": {
        "Text": "string",
        "Value": "string",
        "Icon": "string",
        "Size": "SizeType",
        "ChildContent": "RenderFragment"
      }
    },
    "RAutosuggestGeneric": {
      "Purpose": "Generic autosuggest component with dropdown suggestions and search functionality. Extensible foundation for text search, datepicker autosuggest, and custom implementations.",
      "Parameters": {
        "Label": "string",
        "Required": "bool - Whether the field is required",
        "ReadOnly": "bool - Whether the field is read-only",
        "Loading": "bool - Whether the field is in loading state",
        "Variant": "TextInputVariant",
        "Size": "SizeType",
        "HasError": "bool - Whether the field has validation error",
        "ErrorMessage": "string - Error message to display",
        "MaxLength": "int? - Maximum character length",
        "OnInput": "EventCallback<ChangeEventArgs> - Immediate value changed callback",
        "OnChange": "EventCallback<ChangeEventArgs> - Value changed callback (fired on blur/change)",
        "OnTextInput": "EventCallback<string> - Immediate text value changed callback",
        "OnTextChanged": "EventCallback<string> - Text value changed callback (fired on blur/change)",
        "Value": "TItem",
        "Items": "IEnumerable<TItem>",
        "Icon": "string"
      }
    },
    "RDatePicker": {
      "Purpose": "Professional date picker with calendar popup",
      "Parameters": {
        "Value": "DateTime?",
        "Label": "string",
        "Size": "SizeType",
        "Icon": "string",
        "Disabled": "bool"
      }
    },
    "RChartSmart": {
      "Purpose": "UI component",
      "Parameters": {
        "OnClick": "EventCallback<MouseEventArgs> - Click event handler",
        "Loading": "bool - Loading state",
        "LoadingText": "string - Loading text to display",
        "AriaLabel": "string - ARIA label for accessibility",
        "TabIndex": "int - Tab index for keyboard navigation",
        "Title": "string",
        "Icon": "string",
        "Variant": "ChartVariant",
        "Size": "SizeType",
        "HeaderContent": "RenderFragment?",
        "FooterContent": "RenderFragment?"
      }
    },
    "RBreadcrumbs": {
      "Purpose": "Professional breadcrumb navigation component for showing page hierarchy and navigation paths. Supports icons, custom separators, responsive collapsing, and accessibility features.",
      "Parameters": {
        "Items": "List<BreadcrumbItem>",
        "Size": "SizeType",
        "ChildContent": "RenderFragment"
      }
    },
    "RColumnChart": {
      "Purpose": "Column chart data points",
      "Parameters": {
        "OnClick": "EventCallback<MouseEventArgs> - Click event handler",
        "Loading": "bool - Loading state",
        "LoadingText": "string - Loading text to display",
        "AriaLabel": "string - ARIA label for accessibility",
        "TabIndex": "int - Tab index for keyboard navigation",
        "Data": "IEnumerable<ChartDataPoint> - Array of data points for column chart",
        "Title": "string",
        "Icon": "string",
        "Size": "SizeType",
        "Variant": "ChartVariant",
        "HeaderContent": "RenderFragment",
        "FooterContent": "RenderFragment"
      }
    },
    "RCheckbox": {
      "Purpose": "Professional checkbox component with enterprise styling and accessibility",
      "Parameters": {
        "Text": "string?",
        "Icon": "string?",
        "Variant": "CheckboxVariant",
        "Size": "SizeType"
      }
    },
    "RNumberFilter": {
      "Purpose": "UI component",
      "Parameters": {}
    }
  }
}
