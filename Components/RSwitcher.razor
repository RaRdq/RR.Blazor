@typeparam TValue
@using Microsoft.AspNetCore.Components

<div class="@GetContainerClass()">
    @if (Items != null)
    {
        @foreach (var item in Items)
        {
            <button class="@GetItemClass(item)" 
                    @onclick="() => OnItemSelected(item)"
                    title="@GetItemTitle(item)"
                    aria-label="@GetItemAriaLabel(item)"
                    disabled="@IsItemDisabled(item)">
                @if (!string.IsNullOrEmpty(GetItemIcon(item)))
                {
                    <i class="material-symbols-rounded">@GetItemIcon(item)</i>
                }
                @if (ShowLabels && !string.IsNullOrEmpty(GetItemLabel(item)))
                {
                    <span class="switcher__label">@GetItemLabel(item)</span>
                }
                @if (IsItemActive(item) && ShowActiveIndicator)
                {
                    <i class="material-symbols-rounded switcher__check">check</i>
                }
                @if (IsItemLoading(item))
                {
                    <div class="switcher__loading">
                        <i class="material-symbols-rounded">hourglass_empty</i>
                    </div>
                }
            </button>
        }
    }
</div>

@code {
    [Parameter] public IEnumerable<TValue> Items { get; set; }
    [Parameter] public TValue SelectedValue { get; set; }
    [Parameter] public EventCallback<TValue> SelectedValueChanged { get; set; }
    [Parameter] public Func<TValue, string> ItemLabelSelector { get; set; }
    [Parameter] public Func<TValue, string> ItemIconSelector { get; set; }
    [Parameter] public Func<TValue, string> ItemTitleSelector { get; set; }
    [Parameter] public Func<TValue, string> ItemAriaLabelSelector { get; set; }
    [Parameter] public Func<TValue, bool> ItemDisabledSelector { get; set; }
    [Parameter] public Func<TValue, bool> ItemLoadingSelector { get; set; }
    [Parameter] public bool ShowLabels { get; set; } = true;
    [Parameter] public bool ShowActiveIndicator { get; set; } = false;
    [Parameter] public SwitcherVariant Variant { get; set; } = SwitcherVariant.Standard;
    [Parameter] public SwitcherSize Size { get; set; } = SwitcherSize.Medium;
    [Parameter] public SwitcherDirection Direction { get; set; } = SwitcherDirection.Horizontal;
    [Parameter] public string AdditionalCssClass { get; set; }

    private string GetContainerClass()
    {
        var classes = new List<string> { "switcher" };
        
        classes.Add($"switcher--{Variant.ToString().ToLower()}");
        classes.Add($"switcher--{Size.ToString().ToLower()}");
        classes.Add($"switcher--{Direction.ToString().ToLower()}");
        
        if (!string.IsNullOrEmpty(AdditionalCssClass))
        {
            classes.Add(AdditionalCssClass);
        }
        
        return string.Join(" ", classes);
    }

    private string GetItemClass(TValue item)
    {
        var classes = new List<string> { "switcher__item" };
        
        if (IsItemActive(item))
        {
            classes.Add("switcher__item--active");
        }
        
        if (IsItemDisabled(item))
        {
            classes.Add("switcher__item--disabled");
        }
        
        if (IsItemLoading(item))
        {
            classes.Add("switcher__item--loading");
        }
        
        return string.Join(" ", classes);
    }

    private bool IsItemActive(TValue item)
    {
        return EqualityComparer<TValue>.Default.Equals(item, SelectedValue);
    }

    private bool IsItemDisabled(TValue item)
    {
        return ItemDisabledSelector?.Invoke(item) ?? false;
    }

    private bool IsItemLoading(TValue item)
    {
        return ItemLoadingSelector?.Invoke(item) ?? false;
    }

    private string GetItemLabel(TValue item)
    {
        return ItemLabelSelector?.Invoke(item) ?? item?.ToString() ?? "";
    }

    private string GetItemIcon(TValue item)
    {
        return ItemIconSelector?.Invoke(item) ?? "";
    }

    private string GetItemTitle(TValue item)
    {
        return ItemTitleSelector?.Invoke(item) ?? GetItemLabel(item);
    }

    private string GetItemAriaLabel(TValue item)
    {
        return ItemAriaLabelSelector?.Invoke(item) ?? $"Select {GetItemLabel(item)}";
    }

    private async Task OnItemSelected(TValue item)
    {
        if (IsItemDisabled(item) || IsItemLoading(item))
            return;

        SelectedValue = item;
        await SelectedValueChanged.InvokeAsync(item);
    }
}

@code {
    public enum SwitcherVariant
    {
        Standard,
        Compact,
        Pills,
        Tabs,
        Buttons
    }

    public enum SwitcherSize
    {
        Small,
        Medium,
        Large
    }

    public enum SwitcherDirection
    {
        Horizontal,
        Vertical
    }
}