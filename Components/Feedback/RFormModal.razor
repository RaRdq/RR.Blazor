@** 
<summary>Generic form modal component for dynamic form generation and validation</summary>
<category>Form</category>
<complexity>Complex</complexity>
<ai-prompt>Create a modal with auto-generated form fields from a model</ai-prompt>
<ai-common-use>quick edit modals, auto-generated forms, dynamic data entry</ai-common-use>
<ai-avoid>Don't use for complex custom forms - create dedicated form components instead</ai-avoid>
<ai-pattern name="auto-form">InitialData="@model" OnSave="HandleSave"</ai-pattern>
<ai-pattern name="custom-form">FormComponent="@typeof(MyFormComponent)"</ai-pattern>
<ai-pattern name="validation-form">OnValidate="ValidateModel" ShowValidationSummary="true"</ai-pattern>
**@

@attribute [Component("RFormModal", Category = "Form")]
@attribute [AIOptimized(Prompt = "Create dynamic form modal")]

@typeparam T

<div class="form-modal">
    @if (FormComponent != null)
    {
        <DynamicComponent Type="FormComponent" Parameters="GetFormParameters()" />
    }
    else
    {
        <div class="form-content">
            @if (InitialData != null)
            {
                <div class="form-fields">
                    @foreach (var property in typeof(T).GetProperties())
                    {
                        if (property.CanWrite && IsSimpleType(property.PropertyType))
                        {
                            <div class="form-field">
                                @{
                                    var fieldType = GetFieldType(property.PropertyType);
                                    var fieldValue = GetPropertyValue(property)?.ToString() ?? string.Empty;
                                    var fieldLabel = GetFieldLabel(property.Name);
                                }
                                @if (fieldType == FieldType.Text || fieldType == FieldType.Email || fieldType == FieldType.Password || fieldType == FieldType.Number || fieldType == FieldType.Tel || fieldType == FieldType.Url)
                                {
                                    <RInput Label="@fieldLabel"
                                              Type="fieldType"
                                              Value="@fieldValue"
                                              ValueChanged="@(value => { fieldValue = value?.ToString(); SetPropertyValue(property, value?.ToString()); })" />
                                }
                                else if (fieldType == FieldType.Checkbox)
                                {
                                    <RCheckbox Text="@fieldLabel"
                                             Value="@(GetBoolPropertyValue(property))"
                                             ValueChanged="@((bool value) => SetBoolPropertyValue(property, value))" />
                                }
                                else
                                {
                                    <div>
                                        <label class="d-block text-sm font-medium text-primary mb-2">@fieldLabel</label>
                                        <input type="text" 
                                               value="@fieldValue"
                                               @onchange="@((ChangeEventArgs e) => { fieldValue = e.Value?.ToString() ?? string.Empty; SetPropertyValue(property, fieldValue); })"
                                               class="w-full border border-light rounded-md pa-3 text-primary bg-surface focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" />
                                    </div>
                                }
                            </div>
                        }
                    }
                </div>
            }
            else
            {
                @ChildContent
            }
        </div>
    }
    
    @if (ShowValidationSummary && ValidationErrors.Any())
    {
        <div class="form-validation">
            <div class="alert alert-error">
                <i class="material-symbols-rounded">error</i>
                <div class="alert-content">
                    <div class="text-h6 font-semibold">Please correct the following errors:</div>
                    <ul>
                        @foreach (var error in ValidationErrors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] [AIParameter("Initial data model for the form", Example = "userModel")] public T InitialData { get; set; }
    [Parameter] [AIParameter("Custom form component type to use instead of auto-generation", Example = "typeof(UserFormComponent)")] public Type FormComponent { get; set; }
    [Parameter] [AIParameter("Additional parameters passed to custom form component", Example = "new Dictionary<string, object>()")] public Dictionary<string, object> FormParameters { get; set; } = new();
    [Parameter] [AIParameter("Show validation error summary", Example = "true")] public bool ShowValidationSummary { get; set; } = true;
    [Parameter] [AIParameter("Custom validation function", Example = "ValidateUserModel")] public Func<T, Task<bool>> OnValidate { get; set; }
    [Parameter] [AIParameter("Save function called on form submission", Example = "SaveUserModel")] public Func<T, Task<bool>> OnSave { get; set; }
    [Parameter] [AIParameter("Callback when form data changes", Example = "OnFormDataChanged")] public EventCallback<T> OnDataChanged { get; set; }
    [Parameter] [AIParameter("Custom form content instead of auto-generation", Example = "<RInput />")] public RenderFragment ChildContent { get; set; }

    private T _currentData;
    private List<string> ValidationErrors = new();

    protected override void OnInitialized()
    {
        _currentData = InitialData != null ? DeepCopy(InitialData) : Activator.CreateInstance<T>();
    }

    private Dictionary<string, object> GetFormParameters()
    {
        var parameters = new Dictionary<string, object>
        {
            { "Data", _currentData },
            { "OnDataChanged", EventCallback.Factory.Create<T>(this, OnFormDataChanged) }
        };

        foreach (var param in FormParameters)
        {
            parameters[param.Key] = param.Value;
        }

        return parameters;
    }

    private async Task OnFormDataChanged(T data)
    {
        _currentData = data;
        await OnDataChanged.InvokeAsync(data);
        await ValidateData();
    }

    private async Task ValidateData()
    {
        ValidationErrors.Clear();
        
        if (OnValidate != null)
        {
            try
            {
                var isValid = await OnValidate(_currentData);
                if (!isValid)
                {
                    ValidationErrors.Add("Validation failed");
                }
            }
            catch (Exception ex)
            {
                ValidationErrors.Add(ex.Message);
            }
        }

        StateHasChanged();
    }

    private object GetPropertyValue(System.Reflection.PropertyInfo property)
    {
        return property.GetValue(_currentData);
    }

    private void SetPropertyValue(System.Reflection.PropertyInfo property, object value)
    {
        if (value != null && property.PropertyType != value.GetType())
        {
            value = Convert.ChangeType(value, property.PropertyType);
        }
        
        property.SetValue(_currentData, value);
        OnDataChanged.InvokeAsync(_currentData);
    }

    private string GetFieldLabel(string propertyName)
    {
        return System.Text.RegularExpressions.Regex.Replace(propertyName, "([a-z])([A-Z])", "$1 $2");
    }

    private FieldType GetFieldType(Type propertyType)
    {
        var underlyingType = Nullable.GetUnderlyingType(propertyType) ?? propertyType;

        return underlyingType.Name switch
        {
            nameof(Int32) or nameof(Int64) or nameof(Decimal) or nameof(Double) => FieldType.Number,
            nameof(Boolean) => FieldType.Checkbox,
            nameof(DateTime) => FieldType.Date,
            _ => FieldType.Text
        };
    }

    private bool IsSimpleType(Type type)
    {
        var underlyingType = Nullable.GetUnderlyingType(type) ?? type;
        return underlyingType.IsPrimitive 
            || underlyingType == typeof(string) 
            || underlyingType == typeof(DateTime) 
            || underlyingType == typeof(decimal)
            || underlyingType.IsEnum;
    }

    private string GetInputType(FieldType fieldType)
    {
        return fieldType switch
        {
            FieldType.Email => "email",
            FieldType.Password => "password",
            FieldType.Number => "number",
            FieldType.Tel => "tel",
            FieldType.Url => "url",
            _ => "text"
        };
    }

    private bool GetBoolPropertyValue(System.Reflection.PropertyInfo property)
    {
        var value = property.GetValue(_currentData);
        if (value is bool boolValue)
            return boolValue;
        return false;
    }

    private void SetBoolPropertyValue(System.Reflection.PropertyInfo property, bool value)
    {
        property.SetValue(_currentData, value);
        OnDataChanged.InvokeAsync(_currentData);
    }

    private T DeepCopy(T source)
    {
        if (source == null) return default;
        
        var json = System.Text.Json.JsonSerializer.Serialize(source);
        return System.Text.Json.JsonSerializer.Deserialize<T>(json);
    }
}