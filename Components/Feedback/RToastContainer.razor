@using RR.Blazor.Services
@inject IToastService ToastService
@implements IDisposable

<div class="toast-container toast-container-@GetPositionClass()">
    @foreach (var toast in toasts)
    {
        <div class="toast toast-@(toast.Type.ToString().ToLower()) toast-@GetToastState(toast.Id)" @key="toast.Id">
            <div class="toast-icon">
                <i class="material-symbols-rounded">@GetIcon(toast)</i>
            </div>
            <div class="toast-content">
                @if (!string.IsNullOrEmpty(toast.Title))
                {
                    <h5 class="toast-title">@toast.Title</h5>
                }
                <p class="toast-message">@toast.Message</p>
                @if (!string.IsNullOrEmpty(toast.ActionText) && toast.OnAction != null)
                {
                    <button class="toast-action" @onclick="() => HandleAction(toast)">
                        @toast.ActionText
                    </button>
                }
            </div>
            @if (toast.ShowCloseButton)
            {
                <button class="toast-close" @onclick="() => RemoveToast(toast.Id)" aria-label="Close">
                    <i class="material-symbols-rounded icon-muted">close</i>
                </button>
            }
        </div>
    }
</div>

@code {
    private readonly List<ToastMessage> toasts = new();
    private readonly Dictionary<string, Timer> timers = new();
    private readonly Dictionary<string, string> toastStates = new();
    private bool disposed = false;
    
    protected override void OnInitialized()
    {
        ToastService.OnShow += ShowToast;
        ToastService.OnRemove += RemoveToast;
        ToastService.OnClearAll += ClearAll;
    }
    
    private async void ShowToast(ToastMessage toast)
    {
        if (disposed) return;
        
        while (toasts.Count >= ToastService.Options.MaxToasts)
        {
            var oldest = toasts.First();
            RemoveToast(oldest.Id);
        }
        
        toasts.Add(toast);
        toastStates[toast.Id] = "entering";
        if (!disposed) StateHasChanged();
        
        await Task.Yield(); // Let Blazor render cycle complete
        if (toastStates.ContainsKey(toast.Id) && !disposed)
        {
            toastStates[toast.Id] = "visible";
            StateHasChanged();
        }
        

        if (toast.Duration > 0)
        {
            var timer = new Timer(_ => RemoveToast(toast.Id), null, toast.Duration, Timeout.Infinite);
            timers[toast.Id] = timer;
        }
    }
    
    private async void RemoveToast(string id)
    {
        if (disposed) return;
        
        if (toastStates.ContainsKey(id))
        {
            toastStates[id] = "exiting";
            if (!disposed) StateHasChanged();
            await Task.Yield(); // Let animation complete via CSS
        }
        
        if (disposed) return;
        
        var toast = toasts.FirstOrDefault(t => t.Id == id);
        if (toast != null)
        {
            toasts.Remove(toast);
            toastStates.Remove(id);
            
            if (timers.TryGetValue(id, out var timer))
            {
                timer.Dispose();
                timers.Remove(id);
            }
            
            if (!disposed) StateHasChanged();
        }
    }
    
    private void ClearAll()
    {
        if (disposed) return;
        
        toasts.Clear();
        toastStates.Clear();
        foreach (var timer in timers.Values)
            timer.Dispose();
        timers.Clear();
        StateHasChanged();
    }
    
    private void HandleAction(ToastMessage toast)
    {
        toast.OnAction?.Invoke();
        RemoveToast(toast.Id);
    }
    
    private string GetToastState(string toastId) =>
        toastStates.TryGetValue(toastId, out var state) ? state : "visible";
    
    private string GetPositionClass() => ToastService.Options.Position switch
    {
        ToastPosition.TopLeft => "top-left",
        ToastPosition.TopCenter => "top-center", 
        ToastPosition.TopRight => "top-right",
        ToastPosition.BottomLeft => "bottom-left",
        ToastPosition.BottomCenter => "bottom-center",
        ToastPosition.BottomRight => "bottom-right",
        _ => "top-right"
    };
    
    private string GetIcon(ToastMessage toast) => 
        !string.IsNullOrEmpty(toast.Icon) ? toast.Icon : toast.Type switch
        {
            ToastType.Success => "check_circle",
            ToastType.Error => "error", 
            ToastType.Warning => "warning",
            ToastType.Info => "info",
            _ => "info"
        };
    
    
    public void Dispose()
    {
        disposed = true;
        ToastService.OnShow -= ShowToast;
        ToastService.OnRemove -= RemoveToast;
        ToastService.OnClearAll -= ClearAll;
        
        foreach (var timer in timers.Values)
            timer.Dispose();
    }
}

@* 
Usage Example:


builder.Services.AddRRToast(options =>
{
    options.Position = ToastPosition.TopRight;
    options.MaxToasts = 5;
    options.DefaultDuration = 4000;
});


<RToastContainer />


@inject IToastService ToastService

ToastService.ShowSuccess("Record saved successfully!");
ToastService.ShowError("Failed to save record", "Error");
ToastService.Show(new ToastMessage 
{
    Type = ToastType.Info,
    Title = "New Update",
    Message = "A new version is available",
    ActionText = "Update Now",
    OnAction = () => Navigation.NavigateTo("/update"),
    Duration = 0 // Don't auto-hide
});
*@