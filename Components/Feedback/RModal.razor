@using RR.Blazor.Enums
@using Microsoft.JSInterop
@* RModal - Generic modal component with comprehensive configuration *@

<div class="modal @Class @(Visible ? "modal--visible" : "modal--hidden")" @onclick="HandleBackdropClick" 
     role="dialog" 
     aria-modal="true" 
     aria-labelledby="@ModalTitleId" 
     aria-describedby="@(!string.IsNullOrEmpty(Subtitle) ? ModalDescriptionId : null)"
     @ref="modalElement"
     tabindex="-1">
    <div class="modal-backdrop" aria-hidden="true"></div>
    <div class="modal-content @GetSizeClass()" @onclick:stopPropagation="true">
        @if (ShowHeader)
        {
            <div class="modal-header @GetModalHeaderClasses()">
                <div class="d-flex align-center @GetModalHeaderClasses()">
                    @if (!string.IsNullOrEmpty(Icon))
                    {
                        <i class="material-symbols-rounded text-primary @GetIconSizeClass()" aria-hidden="true">@Icon</i>
                    }
                    <div class="d-flex flex-col">
                        <h3 id="@ModalTitleId" class="modal-title ma-0 @GetTitleClasses()">@Text</h3>
                        @if (!string.IsNullOrEmpty(Subtitle))
                        {
                            <p id="@ModalDescriptionId" class="modal-subtitle ma-0 text-sm text-secondary">@Subtitle</p>
                        }
                    </div>
                </div>
                <div class="header-actions d-flex align-center gap-2">
                    @HeaderContent
                    @if (ShowCloseButton)
                    {
                        <button type="button" 
                                class="modal-close" 
                                @onclick="HandleClose" 
                                disabled="@Processing"
                                aria-label="Close dialog">
                            <i class="material-symbols-rounded" aria-hidden="true">close</i>
                        </button>
                    }
                </div>
            </div>
        }
        
        <div class="modal-body @GetModalBodyClasses()">
            @if (Processing && ShowProcessingOverlay)
            {
                <div class="overlay-full overlay-light d-flex align-center justify-center z-modal">
                    <div class="d-flex flex-col align-center @GetProcessingOverlayClasses() bg-surface-elevated rounded-lg shadow-lg">
                        <div class="spinner-lg"></div>
                        <p class="text-body-2 text-secondary ma-0">@ProcessingMessage</p>
                    </div>
                </div>
            }
            @ChildContent
        </div>
        
        @if (ShowFooter)
        {
            <div class="modal-footer @GetModalFooterClasses()">
                @if (FooterContent != null)
                {
                    @FooterContent
                }
                else
                {
                    <RActionGroup Direction="ActionGroupDirection.Horizontal" 
                                  Alignment="ActionGroupAlignment.End" 
                                  Spacing="ActionGroupSpacing.Medium"
                                  Density="@Density">
                        @if (ShowCancelButton)
                        {
                            <RButton Variant="ButtonVariant.Ghost" 
                                    Size="@ButtonSize" 
                                    Icon="@CancelIcon" IconPosition="IconPosition.Start" 
                                    Class="@CancelButtonClass" 
                                    OnClick="HandleCancel" 
                                    Disabled="@Processing">
                                @CancelText
                            </RButton>
                        }
                        @if (ShowPrimaryButton)
                        {
                            <RButton Variant="ButtonVariant.Primary" 
                                    Size="@ButtonSize" 
                                    Icon="@(Processing && ShowPrimaryButtonSpinner ? null : PrimaryIcon)" IconPosition="IconPosition.Start" 
                                    Class="@PrimaryButtonClass" 
                                    OnClick="HandlePrimaryAction" 
                                    Disabled="@(Processing || PrimaryButtonDisabled)"
                                    Loading="@(Processing && ShowPrimaryButtonSpinner)">
                                @(Processing && !string.IsNullOrEmpty(ProcessingButtonText) ? ProcessingButtonText : PrimaryText)
                            </RButton>
                        }
                    </RActionGroup>
                    @if (ShowUnsavedIndicator && HasUnsavedChanges)
                    {
                        <div class="d-flex align-center gap-2 pa-3 bg-info-light text-info rounded-lg">
                            <i class="material-symbols-rounded">info</i>
                            <span class="text-sm">You have unsaved changes</span>
                        </div>
                    }
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public ModalSize Size { get; set; } = ModalSize.Medium;
    [Parameter] public ModalVariant Variant { get; set; } = ModalVariant.Default;
    [Parameter] public ComponentDensity Density { get; set; } = ComponentDensity.Normal;
    [Parameter] public string Class { get; set; }
    
    // Accessibility properties
    private ElementReference modalElement;
    private ElementReference? previouslyFocusedElement;
    private string ModalTitleId { get; set; } = $"modal-title-{Guid.NewGuid():N}";
    private string ModalDescriptionId { get; set; } = $"modal-desc-{Guid.NewGuid():N}";

    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    
    // Header Configuration
    [Parameter] public bool ShowHeader { get; set; } = true;
    
    /// <summary>
    /// Primary text content displayed in the modal header
    /// </summary>
    [Parameter] public string Text { get; set; } = "";
    
    /// <summary>
    /// Semantic alias for Text - more intuitive for modal titles
    /// </summary>
    [Parameter] public string Title { get => Text; set => Text = value; }
    
    [Parameter] public string Subtitle { get; set; }
    [Parameter] public string Icon { get; set; }
    [Parameter] public RenderFragment HeaderContent { get; set; }
    [Parameter] public bool ShowCloseButton { get; set; } = true;
    
    // Footer Configuration
    [Parameter] public bool ShowFooter { get; set; } = true;
    [Parameter] public RenderFragment FooterContent { get; set; }
    [Parameter] public bool ShowCancelButton { get; set; } = true;
    [Parameter] public string CancelText { get; set; } = "Cancel";
    [Parameter] public string CancelIcon { get; set; }
    [Parameter] public string CancelButtonClass { get; set; }
    [Parameter] public bool ShowPrimaryButton { get; set; } = true;
    [Parameter] public string PrimaryText { get; set; } = "Save";
    [Parameter] public string PrimaryIcon { get; set; }
    [Parameter] public string PrimaryButtonClass { get; set; }
    [Parameter] public bool PrimaryButtonDisabled { get; set; }
    [Parameter] public ButtonSize ButtonSize { get; set; } = ButtonSize.Medium;
    
    // Processing State
    [Parameter] public bool Processing { get; set; }
    [Parameter] public string ProcessingMessage { get; set; } = "Processing...";
    [Parameter] public string ProcessingButtonText { get; set; }
    [Parameter] public bool ShowProcessingOverlay { get; set; } = true;
    [Parameter] public bool ShowPrimaryButtonSpinner { get; set; } = true;
    
    // Unsaved Changes
    [Parameter] public bool ShowUnsavedIndicator { get; set; }
    [Parameter] public bool HasUnsavedChanges { get; set; }
    
    // Behavior Configuration
    [Parameter] public bool CloseOnBackdrop { get; set; } = true;
    [Parameter] public bool CloseOnEscape { get; set; } = true;
    
    // Event Callbacks
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnPrimaryAction { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    private async Task HandleBackdropClick()
    {
        if (CloseOnBackdrop && !Processing && Variant != ModalVariant.Protected)
        {
            await HandleClose();
        }
    }
    
    private async Task HandleClose()
    {
        if (!Processing)
        {
            // Restore focus to previously focused element before closing
            await RestoreFocus();
            
            Visible = false;
            await VisibleChanged.InvokeAsync(false);
            await OnClose.InvokeAsync();
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (Visible)
        {
            await SetupModalFocus();
        }
    }
    
    private async Task SetupModalFocus()
    {
        try
        {
            // Store reference to currently focused element
            await JSRuntime.InvokeVoidAsync("eval", "window._previouslyFocusedElement = document.activeElement");
            
            // Add modal-open class to body for scroll lock and proper positioning
            await JSRuntime.InvokeVoidAsync("eval", "document.body.classList.add('modal-open')");
            
            // Focus the modal after a brief delay to ensure it's rendered
            await Task.Delay(100);
            await modalElement.FocusAsync();
            
            // Set up keyboard event listener for escape key and store modal instance
            await JSRuntime.InvokeVoidAsync("eval", @"
                window._modalKeyHandler = function(e) {
                    if (e.key === 'Escape' && window._modalInstance) {
                        window._modalInstance.invokeMethodAsync('HandleEscapeKey');
                    }
                };
                document.addEventListener('keydown', window._modalKeyHandler);
                
                window.setModalInstance = function(instance) {
                    window._modalInstance = instance;
                };
            ");
            
            await JSRuntime.InvokeVoidAsync("setModalInstance", DotNetObjectReference.Create(this));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting up modal focus: {ex.Message}");
        }
    }
    
    [JSInvokable]
    public async Task HandleEscapeKey()
    {
        if (CloseOnEscape && !Processing)
        {
            await HandleClose();
        }
    }
    
    private async Task RestoreFocus()
    {
        try
        {
            // Remove modal-open class from body to restore scrolling
            await JSRuntime.InvokeVoidAsync("eval", "document.body.classList.remove('modal-open')");
            
            // Remove keyboard event listener and cleanup
            await JSRuntime.InvokeVoidAsync("eval", @"
                if (window._modalKeyHandler) {
                    document.removeEventListener('keydown', window._modalKeyHandler);
                    window._modalKeyHandler = null;
                }
                window._modalInstance = null;
                delete window.setModalInstance;
            ");
            
            // Restore focus to previously focused element
            await JSRuntime.InvokeVoidAsync("eval", @"
                if (window._previouslyFocusedElement && window._previouslyFocusedElement.focus) {
                    window._previouslyFocusedElement.focus();
                }
                window._previouslyFocusedElement = null;
            ");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error restoring focus: {ex.Message}");
        }
    }
    
    private async Task HandleCancel()
    {
        if (!Processing)
        {
            if (OnCancel.HasDelegate)
            {
                await OnCancel.InvokeAsync();
            }
            else
            {
                await HandleClose();
            }
        }
    }
    
    private async Task HandlePrimaryAction()
    {
        if (!Processing && !PrimaryButtonDisabled)
        {
            await OnPrimaryAction.InvokeAsync();
        }
    }
    
    private string GetSizeClass() => Size switch
    {
        ModalSize.Small => "modal-content-small",
        ModalSize.Large => "modal-content-large",
        ModalSize.XLarge => "modal-content-xlarge",
        ModalSize.Wide => "modal-content-wide",
        ModalSize.Full => "modal-content-full",
        _ => "" // default size
    };

    private string GetModalHeaderClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "pa-2 gap-2",
            ComponentDensity.Dense => "pa-3 gap-3",
            ComponentDensity.Normal => "pa-4 gap-3",
            ComponentDensity.Spacious => "pa-6 gap-4",
            _ => "pa-4 gap-3"
        };
    }

    private string GetModalBodyClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "pa-2",
            ComponentDensity.Dense => "pa-3",
            ComponentDensity.Normal => "pa-4",
            ComponentDensity.Spacious => "pa-6",
            _ => "pa-4"
        };
    }

    private string GetModalFooterClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "pa-2 gap-2",
            ComponentDensity.Dense => "pa-3 gap-3",
            ComponentDensity.Normal => "pa-4 gap-3",
            ComponentDensity.Spacious => "pa-6 gap-4",
            _ => "pa-4 gap-3"
        };
    }

    private string GetIconSizeClass()
    {
        return Density switch
        {
            ComponentDensity.Compact => "text-lg",
            ComponentDensity.Dense => "text-xl",
            ComponentDensity.Normal => "text-xl",
            ComponentDensity.Spacious => "text-2xl",
            _ => "text-xl"
        };
    }

    private string GetTitleClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "text-base",
            ComponentDensity.Dense => "text-lg",
            ComponentDensity.Normal => "text-lg",
            ComponentDensity.Spacious => "text-xl",
            _ => "text-lg"
        };
    }

    private string GetProcessingOverlayClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "pa-3 gap-2",
            ComponentDensity.Dense => "pa-4 gap-3",
            ComponentDensity.Normal => "pa-6 gap-3",
            ComponentDensity.Spacious => "pa-8 gap-4",
            _ => "pa-6 gap-3"
        };
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (Visible)
            {
                await RestoreFocus();
            }
            
            // Ensure modal-open class is removed on disposal
            await JSRuntime.InvokeVoidAsync("eval", "document.body.classList.remove('modal-open')");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during modal disposal: {ex.Message}");
        }
    }
}