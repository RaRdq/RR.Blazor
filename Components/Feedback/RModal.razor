@using RR.Blazor.Enums
@using RR.Blazor.Components.Base
@using RR.Blazor.Models
@using RR.Blazor.Interfaces
@using RR.Blazor.Services
@inherits RComponentBase
@inject IJavaScriptInteropService JSInterop
@inject IModalService ModalService

@{
    var contentClass = $"modal-content {GetSizeClass(Size)}";
    var wrapperClass = $"modal {Class}";
    var displayStyle = IsModalVisible ? "" : "display: none !important;";
}

    <div class="@wrapperClass" @ref="modalElement" @attributes="GetSafeAttributes()"
         data-modal-id="@GetModalId()"
         data-close-on-backdrop="@CloseOnBackdrop.ToString().ToLower()"
         data-modal-visible="@IsModalVisible.ToString().ToLower()"
         style="@displayStyle">
        <div class="@contentClass" @onclick:stopPropagation="true">
            @if (ShowHeader)
            {
                <div class="modal-header @GetHeaderDensityClass()">
                    <div class="modal-header-content">
                        @if (!string.IsNullOrEmpty(Icon))
                        {
                            <i class="material-symbols-rounded text-primary text-xl">@Icon</i>
                        }
                        <h3 class="modal-title">@Title</h3>
                        @if (!string.IsNullOrEmpty(Subtitle))
                        {
                            <p class="modal-subtitle">@Subtitle</p>
                        }
                    </div>
                    <div class="modal-header-actions">
                        @HeaderContent
                        @if (ShowCloseButton)
                        {
                            <button type="button" class="modal-close" @onclick="Close" disabled="@Loading">
                                <i class="material-symbols-rounded">close</i>
                            </button>
                        }
                    </div>
                </div>
            }
            
            <div class="modal-body">
                @ChildContent
            </div>
            
            @if (ShowFooter)
            {
                <div class="modal-footer @GetFooterDensityClass()">
                    @if (FooterContent != null)
                    {
                        @FooterContent
                    }
                    else
                    {
                        <div class="modal-footer-buttons">
                            @if (ShowCancelButton)
                            {
                                <RButton Variant="@CancelButtonVariant"
                                        Size="@ButtonSize"
                                        Icon="@CancelIcon" IconPosition="IconPosition.Start"
                                        Class="@CancelButtonClass"
                                        OnClick="HandleCancel"
                                        Disabled="@Loading">
                                    @CancelText
                                </RButton>
                            }
                            @if (ShowPrimaryButton)
                            {
                                <RButton Variant="@PrimaryButtonVariant"
                                        Size="@ButtonSize"
                                        Icon="@(Loading && ShowPrimaryButtonSpinner ? null : PrimaryIcon)" IconPosition="IconPosition.Start"
                                        Class="@PrimaryButtonClass"
                                        OnClick="HandlePrimaryAction"
                                        Disabled="@(Loading || PrimaryButtonDisabled)"
                                        Loading="@(Loading && ShowPrimaryButtonSpinner)">
                                    @(Loading && !string.IsNullOrEmpty(LoadingButtonText) ? LoadingButtonText : PrimaryText)
                                </RButton>
                            }
                        </div>
                        @if (ShowUnsavedIndicator && HasUnsavedChanges)
                        {
                            <div class="modal-unsaved-indicator">
                                <i class="material-symbols-rounded">info</i>
                                <span>You have unsaved changes</span>
                            </div>
                        }
                    }
                </div>
            }
            @if (Loading && ShowLoadingOverlay)
            {
                <div class="modal-loading-overlay">
                    <div class="modal-loading-content">
                        <div class="modal-loading-spinner"></div>
                        <div class="modal-loading-message">@LoadingMessage</div>
                    </div>
                </div>
            }
        </div>
    </div>

@code {
    private ElementReference modalElement;
    private DotNetObjectReference<RModal> dotNetRef;
    private string modalId;
    private bool _jsModalRegistered = false;
    private bool _lastVisibleState = false;
    private bool _isClosing = false;

    private bool IsModalVisible => Visible || (ModalContext != null);
    
    [CascadingParameter] public ModalContext ModalContext { get; set; }

    [Parameter] public string ModalId { get; set; }
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public SizeType Size { get; set; } = SizeType.Medium;
    [Parameter] public VariantType Variant { get; set; } = VariantType.Default;
    [Parameter] public SizeType HeaderSize { get; set; } = SizeType.Medium;
    [Parameter] public SizeType FooterSize { get; set; } = SizeType.Medium;

    [Parameter] public bool ShowHeader { get; set; } = true;
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string Subtitle { get; set; }
    [Parameter] public string Icon { get; set; }
    [Parameter] public RenderFragment HeaderContent { get; set; }
    [Parameter] public bool ShowCloseButton { get; set; } = true;

    [Parameter] public bool ShowFooter { get; set; } = true;
    [Parameter] public RenderFragment FooterContent { get; set; }
    [Parameter] public bool ShowCancelButton { get; set; } = true;
    [Parameter] public string CancelText { get; set; } = "Cancel";
    [Parameter] public string CancelIcon { get; set; }
    [Parameter] public string CancelButtonClass { get; set; }
    [Parameter] public VariantType CancelButtonVariant { get; set; } = VariantType.Secondary;
    [Parameter] public bool ShowPrimaryButton { get; set; } = true;
    [Parameter] public string PrimaryText { get; set; } = "Save";
    [Parameter] public string PrimaryIcon { get; set; }
    [Parameter] public string PrimaryButtonClass { get; set; }
    [Parameter] public bool PrimaryButtonDisabled { get; set; }
    [Parameter] public VariantType PrimaryButtonVariant { get; set; } = VariantType.Primary;
    [Parameter] public SizeType ButtonSize { get; set; } = SizeType.Medium;

    [Parameter] public bool Loading { get; set; }
    [Parameter] public string LoadingMessage { get; set; } = "Loading...";
    [Parameter] public string LoadingButtonText { get; set; }
    [Parameter] public bool ShowLoadingOverlay { get; set; } = true;
    [Parameter] public bool ShowPrimaryButtonSpinner { get; set; } = true;

    [Parameter] public bool ShowUnsavedIndicator { get; set; }
    [Parameter] public bool HasUnsavedChanges { get; set; }

    [Parameter] public bool CloseOnBackdrop { get; set; } = true;
    [Parameter] public bool CloseOnEscape { get; set; } = true;
    [Parameter] public bool DisableBackdrop { get; set; } = false;

    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnPrimaryAction { get; set; }

    protected override void OnInitialized()
    {
        modalId = ModalId ?? ModalContext?.ModalId ?? $"modal-{Guid.NewGuid():N}";
    }

    protected override void OnParametersSet()
    {
        // Parameters updated
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            _lastVisibleState = false;
        }

        if (IsModalVisible != _lastVisibleState)
        {
            _lastVisibleState = IsModalVisible;

            if (IsModalVisible && !_jsModalRegistered && !_isClosing)
            {
                await RegisterWithJS();
            }
            else if (!IsModalVisible && _jsModalRegistered)
            {
                await UnregisterFromJS();
            }
        }
    }
    
    public async Task Close()
    {
        await CloseAsync(Enums.ModalResult.None);
    }
    
    public async Task CloseAsync(Enums.ModalResult result = Enums.ModalResult.None)
    {
        if (_isClosing)
            return;

        _isClosing = true;

        // If this modal was opened via ModalService (has ModalContext), notify the service to close it
        if (ModalContext != null)
        {
            await ModalService.CloseAsync(ModalContext.ModalId, result);
            _isClosing = false;
            return; // The service will handle the rest of the cleanup
        }

        await DispatchParentClosingEvent();
        Visible = false;

        if (_jsModalRegistered)
        {
            await UnregisterFromJS();
        }

        if (VisibleChanged.HasDelegate)
        {
            await VisibleChanged.InvokeAsync(false);
        }

        await OnClose.InvokeAsync();
        StateHasChanged();
        _isClosing = false;
    }
    
    private async Task HandleCancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
            return;
        }

        await Close();
    }
    
    private async Task HandlePrimaryAction()
    {
        if (OnPrimaryAction.HasDelegate)
        {
            await OnPrimaryAction.InvokeAsync();
            return;
        }

        // If no handler specified, close the modal (for simple Ok/Close scenarios)
        await Close();
    }
    
    private async Task HandleBackdropClick()
    {
        if (CloseOnBackdrop)
            await Close();
    }
    
    private string GetModalId() => modalId;
    
    private string GetSizeClass(SizeType size) => size switch
    {
        SizeType.ExtraSmall => "modal-content-xs",
        SizeType.Small => "modal-content-small",
        SizeType.Large => "modal-content-large",
        SizeType.ExtraLarge => "modal-content-xlarge",
        _ => "" // Default size (Medium) - no class needed
    };

    private string GetHeaderDensityClass() => HeaderSize switch
    {
        SizeType.ExtraSmall => "modal-header-xs",
        SizeType.Small => "modal-header-sm",
        SizeType.Large => "modal-header-lg",
        SizeType.ExtraLarge => "modal-header-xl",
        _ => ""
    };

    private string GetFooterDensityClass() => FooterSize switch
    {
        SizeType.ExtraSmall => "modal-footer-xs",
        SizeType.Small => "modal-footer-sm",
        SizeType.Large => "modal-footer-lg",
        SizeType.ExtraLarge => "modal-footer-xl",
        _ => ""
    };
    
    [JSInvokable]
    public async Task OnModalClosedFromJS()
    {
        if (VisibleChanged.HasDelegate)
            await VisibleChanged.InvokeAsync(false);

        await OnClose.InvokeAsync();
        StateHasChanged();
    }
    
    
    private async Task RegisterWithJS()
    {
        if (_isClosing)
            return;

        var id = GetModalId();
        var contentSelector = $"[data-modal-id='{id}']";

        var modalConfig = new
        {
            closeOnBackdrop = CloseOnBackdrop && !DisableBackdrop,
            closeOnEscape = CloseOnEscape,
            backdrop = !DisableBackdrop,
            blur = 8,
            className = "modal-backdrop-dark",
            opacity = 0.6,
            modalId = id,
            dotNetRef = dotNetRef,
            isServiceModal = ModalContext != null
        };

        await JSInterop.TryInvokeVoidAsync("RRBlazor.Modal.show", contentSelector, modalConfig);
        _jsModalRegistered = true;
    }
    
    private async Task UnregisterFromJS()
    {
        await JSInterop.TryInvokeVoidAsync("RRBlazor.Modal.hide", modalId);
        _jsModalRegistered = false;
    }

    private async Task DispatchParentClosingEvent()
    {
        if (ModalContext == null)
            await JSInterop.TryInvokeVoidAsync("RRBlazor.Modal.dispatchParentClosing", GetModalId());
    }

    protected override async ValueTask DisposeAsyncCore()
    {
        if (_jsModalRegistered)
            await UnregisterFromJS();

        dotNetRef?.Dispose();
    }
}