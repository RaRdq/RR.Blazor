@using RR.Blazor.Enums
@* RModal - Generic modal component with comprehensive configuration *@

@if (Visible)
{
<div class="modal @Class" @onclick="HandleBackdropClick">
    <div class="modal-backdrop"></div>
    <div class="modal-content @GetSizeClass()" @onclick:stopPropagation="true">
        @if (ShowHeader)
        {
            <div class="modal-header">
                <div class="modal-header-content flex align-center gap-3">
                    @if (!string.IsNullOrEmpty(Icon))
                    {
                        <i class="material-symbols-rounded text-primary text-xl">@Icon</i>
                    }
                    <div class="flex flex-col">
                        <h3 class="modal-title ma-0">@Title</h3>
                        @if (!string.IsNullOrEmpty(Subtitle))
                        {
                            <p class="modal-subtitle ma-0 text-sm text-secondary">@Subtitle</p>
                        }
                    </div>
                </div>
                <div class="modal-header-actions flex align-center gap-2">
                    @HeaderContent
                    @if (ShowCloseButton)
                    {
                        <button type="button" class="modal-close" @onclick="HandleClose" disabled="@Processing">
                            <i class="material-symbols-rounded">close</i>
                        </button>
                    }
                </div>
            </div>
        }
        
        <div class="modal-body">
            @if (Processing && ShowProcessingOverlay)
            {
                <div class="modal-overlay modal-overlay-processing">
                    <div class="modal-processing">
                        <div class="spinner"></div>
                        <p class="modal-processing-text">@ProcessingMessage</p>
                    </div>
                </div>
            }
            @ChildContent
        </div>
        
        @if (ShowFooter)
        {
            <div class="modal-footer">
                @if (FooterContent != null)
                {
                    @FooterContent
                }
                else
                {
                    <div class="modal-footer-buttons">
                        @if (ShowCancelButton)
                        {
                            <RButton Variant="ButtonVariant.Ghost" 
                                    Size="@ButtonSize" 
                                    Icon="@CancelIcon" IconPosition="IconPosition.Start" 
                                    Class="@CancelButtonClass" 
                                    OnClick="HandleCancel" 
                                    Disabled="@Processing">
                                @CancelText
                            </RButton>
                        }
                        @if (ShowPrimaryButton)
                        {
                            <RButton Variant="ButtonVariant.Primary" 
                                    Size="@ButtonSize" 
                                    Icon="@(Processing && ShowPrimaryButtonSpinner ? null : PrimaryIcon)" IconPosition="IconPosition.Start" 
                                    Class="@PrimaryButtonClass" 
                                    OnClick="HandlePrimaryAction" 
                                    Disabled="@(Processing || PrimaryButtonDisabled)"
                                    Loading="@(Processing && ShowPrimaryButtonSpinner)">
                                @(Processing && !string.IsNullOrEmpty(ProcessingButtonText) ? ProcessingButtonText : PrimaryText)
                            </RButton>
                        }
                    </div>
                    @if (ShowUnsavedIndicator && HasUnsavedChanges)
                    {
                        <div class="modal-unsaved-indicator">
                            <i class="material-symbols-rounded">info</i>
                            <span>You have unsaved changes</span>
                        </div>
                    }
                }
            </div>
        }
    </div>
</div>
}

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public ModalSize Size { get; set; } = ModalSize.Medium;
    [Parameter] public ModalVariant Variant { get; set; } = ModalVariant.Default;
    [Parameter] public string Class { get; set; }
    
    // Header Configuration
    [Parameter] public bool ShowHeader { get; set; } = true;
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string Subtitle { get; set; }
    [Parameter] public string Icon { get; set; }
    [Parameter] public RenderFragment HeaderContent { get; set; }
    [Parameter] public bool ShowCloseButton { get; set; } = true;
    
    // Footer Configuration
    [Parameter] public bool ShowFooter { get; set; } = true;
    [Parameter] public RenderFragment FooterContent { get; set; }
    [Parameter] public bool ShowCancelButton { get; set; } = true;
    [Parameter] public string CancelText { get; set; } = "Cancel";
    [Parameter] public string CancelIcon { get; set; }
    [Parameter] public string CancelButtonClass { get; set; }
    [Parameter] public bool ShowPrimaryButton { get; set; } = true;
    [Parameter] public string PrimaryText { get; set; } = "Save";
    [Parameter] public string PrimaryIcon { get; set; }
    [Parameter] public string PrimaryButtonClass { get; set; }
    [Parameter] public bool PrimaryButtonDisabled { get; set; }
    [Parameter] public ButtonSize ButtonSize { get; set; } = ButtonSize.Medium;
    
    // Processing State
    [Parameter] public bool Processing { get; set; }
    [Parameter] public string ProcessingMessage { get; set; } = "Processing...";
    [Parameter] public string ProcessingButtonText { get; set; }
    [Parameter] public bool ShowProcessingOverlay { get; set; } = true;
    [Parameter] public bool ShowPrimaryButtonSpinner { get; set; } = true;
    
    // Unsaved Changes
    [Parameter] public bool ShowUnsavedIndicator { get; set; }
    [Parameter] public bool HasUnsavedChanges { get; set; }
    
    // Behavior Configuration
    [Parameter] public bool CloseOnBackdrop { get; set; } = true;
    [Parameter] public bool CloseOnEscape { get; set; } = true;
    
    // Event Callbacks
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnPrimaryAction { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    private async Task HandleBackdropClick()
    {
        if (CloseOnBackdrop && !Processing && Variant != ModalVariant.Protected)
        {
            await HandleClose();
        }
    }
    
    private async Task HandleClose()
    {
        if (!Processing)
        {
            Visible = false;
            await VisibleChanged.InvokeAsync(false);
            await OnClose.InvokeAsync();
        }
    }
    
    private async Task HandleCancel()
    {
        if (!Processing)
        {
            if (OnCancel.HasDelegate)
            {
                await OnCancel.InvokeAsync();
            }
            else
            {
                await HandleClose();
            }
        }
    }
    
    private async Task HandlePrimaryAction()
    {
        if (!Processing && !PrimaryButtonDisabled)
        {
            await OnPrimaryAction.InvokeAsync();
        }
    }
    
    private string GetSizeClass() => Size switch
    {
        ModalSize.Small => "modal-content-small",
        ModalSize.Large => "modal-content-large",
        ModalSize.XLarge => "modal-content-xlarge",
        ModalSize.Wide => "modal-content-wide",
        ModalSize.Full => "modal-content-full",
        _ => "" // default size
    };
}