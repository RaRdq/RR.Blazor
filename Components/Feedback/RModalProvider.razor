@using RR.Blazor.Models
@using RR.Blazor.Services
@using RR.Blazor.Enums
@using Microsoft.AspNetCore.Components.Web
@implements IDisposable
@inject IModalService ModalService
@inject IJSRuntime JSRuntime

@if (ModalService.HasVisibleModals)
{
    <div @ref="_modalContainer" style="display: none;">
        <div class="modal-backdrop" @onclick="HandleBackdropClick" @onkeydown="OnKeyDownHandler" @onkeydown:preventDefault="false" tabindex="-1">
            @foreach (var modal in ModalService.ActiveModals)
            {
                <RModal 
                    @key="modal.Id"
                    Visible="@modal.Visible"
                    Text="@modal.Options.Title"
                    Subtitle="@modal.Options.Subtitle"
                    Icon="@modal.Options.Icon"
                    Size="@modal.Options.Size"
                    Variant="@modal.Options.Variant"
                    CloseOnBackdrop="@modal.Options.CloseOnBackdrop"
                    CloseOnEscape="@modal.Options.CloseOnEscape"
                    ShowCloseButton="@modal.Options.ShowCloseButton"
                    ShowHeader="@modal.Options.ShowHeader"
                    ShowFooter="@modal.Options.ShowFooter"
                    OnClose="@(() => HandleModalClose(modal))"
                    OnCancel="@(() => HandleModalCancel(modal))"
                    OnPrimaryAction="@(() => HandlePrimaryAction(modal))"
                    FooterContent="@(modal.Options.Buttons.Any() ? CreateModalFooter(modal) : null)">
                    
                    @if (modal.Options.ComponentType != null)
                    {
                        <DynamicComponent Type="modal.Options.ComponentType" Parameters="GetComponentParameters(modal)" />
                    }
                </RModal>
            }
        </div>
    </div>
}

@code {
    private ElementReference _modalContainer;
    private IJSObjectReference _jsModule;
    private static int _portalCounter = 0;
    private readonly string _portalId = $"modal-{System.Threading.Interlocked.Increment(ref _portalCounter)}";
    private bool _isPortalCreated = false;

    protected override void OnInitialized()
    {
        ModalService.OnModalOpened += OnModalStateChanged;
        ModalService.OnModalClosed += OnModalStateChanged;
        ModalService.OnAllModalsClosed += OnAllModalsClosed;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/portal.js");
            }
            catch
            {
                // Silent fail
            }
        }

        if (ModalService.HasVisibleModals && !_isPortalCreated)
        {
            await CreatePortal();
        }
        else if (!ModalService.HasVisibleModals && _isPortalCreated)
        {
            await CleanupPortal();
        }
    }

    private async Task CreatePortal()
    {
        if (_jsModule != null && !_isPortalCreated)
        {
            try
            {
                await _jsModule.InvokeVoidAsync("createPortal", _modalContainer, "body", _portalId, "", GetFullViewportStyles());
                await JSRuntime.InvokeVoidAsync("document.body.classList.add", "modal-open");
                _isPortalCreated = true;
            }
            catch
            {
                // Silent fail
            }
        }
    }

    private async Task CleanupPortal()
    {
        if (_jsModule != null && _isPortalCreated)
        {
            try
            {
                await _jsModule.InvokeVoidAsync("cleanupPortal", _portalId);
                await JSRuntime.InvokeVoidAsync("document.body.classList.remove", "modal-open");
                _isPortalCreated = false;
            }
            catch
            {
                // Silent fail
            }
        }
    }

    private void OnModalStateChanged(ModalInstance modal)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnAllModalsClosed()
    {
        InvokeAsync(StateHasChanged);
    }

    private Dictionary<string, object> GetComponentParameters(ModalInstance modal)
    {
        var parameters = new Dictionary<string, object>();
        
        foreach (var param in modal.Options.Parameters)
        {
            parameters[param.Key] = param.Value;
        }
        
        if (modal.Options.Data != null)
        {
            parameters["Data"] = modal.Options.Data;
        }

        parameters["OnDataChanged"] = EventCallback.Factory.Create<object>(this, data =>
        {
            modal.Result = data;
            StateHasChanged();
        });

        return parameters;
    }

    private RenderFragment CreateModalFooter(ModalInstance modal)
    {
        return builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "modal-footer-buttons");

            var index = 2;
            foreach (var button in modal.Options.Buttons)
            {
                builder.OpenComponent(index++, typeof(RButton));
                builder.AddAttribute(index++, "Text", button.Text);
                builder.AddAttribute(index++, "Variant", button.Variant);
                builder.AddAttribute(index++, "Icon", button.Icon);
                builder.AddAttribute(index++, "IconPosition", IconPosition.Start);
                builder.AddAttribute(index++, "Class", button.Class);
                builder.AddAttribute(index++, "Disabled", button.IsDisabled);
                builder.AddAttribute(index++, "Loading", button.IsLoading);
                builder.AddAttribute(index++, "OnClick", EventCallback.Factory.Create(this, async () =>
                {
                    await HandleButtonClick(modal, button);
                }));
                builder.CloseComponent();
            }

            builder.CloseElement();
        };
    }

    private async Task HandleModalClose(ModalInstance modal)
    {
        await CloseModal(modal, Enums.ModalResult.Cancel);
    }

    private async Task HandleModalCancel(ModalInstance modal)
    {
        await CloseModal(modal, Enums.ModalResult.Cancel);
    }

    private async Task HandlePrimaryAction(ModalInstance modal)
    {
        var primaryButton = modal.Options.Buttons.FirstOrDefault(b => b.Type == ModalButtonType.Primary);
        if (primaryButton?.OnClick != null)
        {
            var canClose = await primaryButton.OnClick(modal.Result ?? modal.Options.Data);
            if (canClose)
            {
                await CloseModal(modal, primaryButton.Result);
            }
        }
        else
        {
            await CloseModal(modal, Enums.ModalResult.Ok);
        }
    }

    private async Task HandleButtonClick(ModalInstance modal, ModalButton button)
    {
        if (button.OnClick != null)
        {
            var canClose = await button.OnClick(modal.Result ?? modal.Options.Data);
            if (canClose)
            {
                await CloseModal(modal, button.Result);
            }
        }
        else
        {
            await CloseModal(modal, button.Result);
        }
    }

    private async Task CloseModal(ModalInstance modal, Enums.ModalResult result)
    {
        await ModalService.CloseAsync(modal.Id, result);
    }

    private async Task HandleBackdropClick()
    {
        var topModal = ModalService.ActiveModals.LastOrDefault();
        if (topModal?.Options.CloseOnBackdrop == true)
        {
            await HandleModalClose(topModal);
        }
    }

    private async Task OnKeyDownHandler(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
        {
            var topModal = ModalService.ActiveModals.LastOrDefault();
            if (topModal?.Options.CloseOnEscape == true)
            {
                await HandleModalClose(topModal);
            }
        }
    }

    private string GetFullViewportStyles()
    {
        return @"
            position: fixed !important;
            top: 0 !important;
            left: 0 !important;
            right: 0 !important;
            bottom: 0 !important;
            width: 100vw !important;
            height: 100vh !important;
            z-index: var(--z-modal-backdrop, 1040) !important;
            display: flex !important;
            align-items: center !important;
            justify-content: center !important;
            background: rgba(15, 23, 42, 0.7) !important;
            backdrop-filter: blur(8px) !important;
        ";
    }

    public void Dispose()
    {
        ModalService.OnModalOpened -= OnModalStateChanged;
        ModalService.OnModalClosed -= OnModalStateChanged;
        ModalService.OnAllModalsClosed -= OnAllModalsClosed;
    }
}