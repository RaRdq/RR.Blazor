@using RR.Blazor.Models
@using RR.Blazor.Services
@using RR.Blazor.Enums
@using Microsoft.AspNetCore.Components
@implements IDisposable
@inject IModalService ModalService
@inject IJSRuntime JSRuntime
@inject IJavaScriptInteropService JSInterop

@foreach (var modal in _activeModals)
{
    @if (modal.Visible)
    {
        @if (modal.Options.IsRawContent)
        {
            @* Raw content - wrap in RModal *@
            <CascadingValue Value="@(new ModalContext { ModalId = modal.Id })">
                <RModal @key="modal.Id"
                        Visible="@modal.Visible"
                        VisibleChanged="@((bool value) => HandleModalVisibleChanged(modal, value))"
                            Title="@modal.Options.Title"
                            Subtitle="@modal.Options.Subtitle"
                            Icon="@modal.Options.Icon"
                            Size="@modal.Options.Size"
                            Variant="@modal.Options.Variant"
                            CloseOnBackdrop="@modal.Options.CloseOnBackdrop"
                            CloseOnEscape="@modal.Options.CloseOnEscape"
                            ShowCloseButton="@modal.Options.ShowCloseButton"
                            ShowHeader="@modal.Options.ShowHeader"
                            ShowFooter="@modal.Options.ShowFooter"
                            Class="@modal.Options.Class"
                            ModalId="@modal.Id"
                            data-modal-id="@modal.Id"
                            data-portal="true"
                            OnClose="@(() => CloseModal(modal, Enums.ModalResult.Cancel))"
                            OnCancel="@(() => CloseModal(modal, Enums.ModalResult.Cancel))"
                            OnPrimaryAction="@(() => HandlePrimaryAction(modal))"
                            FooterContent="@(modal.Options.Buttons.Any() ? CreateModalFooter(modal) : null)">

                        @if (modal.Options.ComponentType != null)
                        {
                            <DynamicComponent Type="@modal.Options.ComponentType" Parameters="@GetComponentParameters(modal)" />
                        }
                        else if (modal.Options.Data != null)
                        {
                            <div class="modal-simple-content">
                                @if (modal.Options.Data is string message)
                                {
                                    <p>@message</p>
                                }
                                else
                                {
                                    <pre>@System.Text.Json.JsonSerializer.Serialize(modal.Options.Data)</pre>
                                }
                            </div>
                        }
                    </RModal>
                </CascadingValue>
        }
        else
        {
            <CascadingValue Value="@(new ModalContext { ModalId = modal.Id })">
                <div @key="modal.Id">
                    @if (modal.Options.ComponentType != null)
                    {
                        <DynamicComponent Type="@modal.Options.ComponentType" Parameters="@GetComponentParameters(modal)" />
                    }
                    else
                    {
                        <div class="modal-error">
                            <p>Error: ComponentType is null for modal @modal.Id</p>
                        </div>
                    }
                </div>
            </CascadingValue>
        }
    }
}

@code {
    private readonly List<ModalInstance> _activeModals = [];
    private DotNetObjectReference<RModalProvider> _dotNetRef;

    protected override async Task OnInitializedAsync()
    {
        _dotNetRef = DotNetObjectReference.Create(this);
        ModalService.OnModalOpened += OnModalOpened;
        ModalService.OnModalClosed += OnModalClosed;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSInterop.TryInvokeVoidAsync("RRBlazor.Portal.ensureContainer");
            await JSInterop.TryInvokeVoidAsync("RRBlazor.Modal.setProviderRef", _dotNetRef);
        }
    }

    private void OnModalOpened(ModalInstance modal)
    {
        if (_activeModals.Any(m => m.Id == modal.Id))
            return;

        _activeModals.Add(modal);
        modal.Visible = true;

        InvokeAsync(async () =>
        {
            StateHasChanged();
            await Task.Yield();

            if (modal.Options.IsRawContent)
            {
                await CreateModal(modal);
            }
        });
    }

    private void OnModalClosed(ModalInstance modal)
    {
        _activeModals.Remove(modal);
        _ = Task.Run(async () => await DestroyModal(modal));
        InvokeAsync(StateHasChanged);
    }

    private Dictionary<string, object> GetComponentParameters(ModalInstance modal)
    {
        var parameters = new Dictionary<string, object>(modal.Options.Parameters);

        if (modal.Options.Data != null)
            parameters["Data"] = modal.Options.Data;


        return parameters;
    }

    private RenderFragment CreateModalFooter(ModalInstance modal)
    {
        return builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "modal-footer-buttons");

            var index = 2;
            foreach (var button in modal.Options.Buttons)
            {
                var capturedButton = button;
                var capturedModal = modal;

                builder.OpenComponent(index++, typeof(RButton));
                builder.AddAttribute(index++, nameof(RButton.Text), capturedButton.Text);
                builder.AddAttribute(index++, nameof(RButton.Variant), capturedButton.Variant);
                builder.AddAttribute(index++, nameof(RButton.Icon), capturedButton.Icon);
                builder.AddAttribute(index++, nameof(RButton.IconPosition), IconPosition.Start);
                builder.AddAttribute(index++, nameof(RButton.Class), capturedButton.Class);
                builder.AddAttribute(index++, nameof(RButton.Disabled), capturedButton.IsDisabled);
                builder.AddAttribute(index++, nameof(RButton.Loading), capturedButton.IsLoading);
                builder.AddAttribute(index++, nameof(RButton.OnClick), 
                    Microsoft.AspNetCore.Components.EventCallback.Factory.Create<MouseEventArgs>(this, 
                        CreateButtonClickHandler(capturedModal, capturedButton)));
                builder.CloseComponent();
            }

            builder.CloseElement();
        };
    }

    private Func<MouseEventArgs, Task> CreateButtonClickHandler(ModalInstance modal, ModalButton button) => 
        async (MouseEventArgs e) => await HandleButtonClick(modal, button);


    private async Task HandlePrimaryAction(ModalInstance modal)
    {
        var primaryButton = modal.Options.Buttons.FirstOrDefault(b => b.Variant == VariantType.Primary);
        if (primaryButton?.OnClick != null)
        {
            var canClose = await primaryButton.OnClick(modal.Result ?? modal.Options.Data);
            if (canClose)
            {
                await CloseModal(modal, primaryButton.Result);
            }
        }
        else
        {
            await CloseModal(modal, Enums.ModalResult.Ok);
        }
    }

    private async Task HandleButtonClick(ModalInstance modal, ModalButton button)
    {
        if (button.OnClick != null)
        {
            var canClose = await button.OnClick(modal.Result ?? modal.Options.Data);
            if (canClose)
            {
                await CloseModal(modal, button.Result);
            }
        }
        else
        {
            await CloseModal(modal, button.Result);
        }
    }

    private async Task CloseModal(ModalInstance modal, Enums.ModalResult result)
    {
        modal.Visible = false;
        await ModalService.CloseAsync(modal.Id, result);
    }

    private async Task HandleModalVisibleChanged(ModalInstance modal, bool value)
    {
        if (!value && modal.Visible)
        {
            await CloseModal(modal, Enums.ModalResult.Cancel);
        }
    }

    [JSInvokable]
    public async Task HandleBackdropClick(string modalId)
    {
        var modal = _activeModals.FirstOrDefault(m => m.Id == modalId);
        if (modal != null)
            await CloseModal(modal, Enums.ModalResult.Cancel);
    }

    [JSInvokable]
    public async Task OnModalClosedFromJS(string modalId)
    {
        var modal = _activeModals.FirstOrDefault(m => m.Id == modalId);
        if (modal != null)
            await ModalService.CloseAsync(modal.Id, Enums.ModalResult.Cancel);
    }

    [JSInvokable]
    public async Task OnAllModalsClosed()
    {
        var modalsToClose = _activeModals.ToList();
        foreach (var modal in modalsToClose)
        {
            modal.Visible = false;
            await ModalService.CloseAsync(modal.Id, Enums.ModalResult.Cancel);
        }
        _activeModals.Clear();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ModalService.OnModalOpened -= OnModalOpened;
        ModalService.OnModalClosed -= OnModalClosed;

        _ = JSInterop.TryInvokeVoidAsync("RRBlazor.Modal.hideAll");
        _ = JSInterop.TryInvokeVoidAsync("RRBlazor.Modal.setProviderRef", null);
        _dotNetRef?.Dispose();
    }

    private async Task CreateModal(ModalInstance modal)
    {
        var contentSelector = $"[data-modal-id='{modal.Id}']";
        var modalConfig = new
        {
            closeOnBackdrop = modal.Options.CloseOnBackdrop,
            closeOnEscape = modal.Options.CloseOnEscape,
            backdrop = modal.Options.UseBackdrop,
            blur = modal.Options.BackdropBlur,
            className = modal.Options.BackdropClassName,
            opacity = modal.Options.BackdropOpacity,
            modalId = modal.Id,
            dotNetRef = _dotNetRef,
            isServiceModal = true
        };

        await JSInterop.TryInvokeAsync<string>("RRBlazor.Modal.show", contentSelector, modalConfig);
    }

    private async Task DestroyModal(ModalInstance modal)
    {
        await JSInterop.TryInvokeVoidAsync("RRBlazor.Modal.hide", modal.Id);
    }

    private async Task CleanupModal(ModalInstance modal) => await DestroyModal(modal);
}