@* RConfirmationModal - Confirmation modal WITH RModal wrapper built-in *@
@using System.Collections.Generic
@using RR.Blazor.Components.Base
@using RR.Blazor.Components.Core
@using RR.Blazor.Enums
@inherits RComponentBase

<RModal @ref="modalRef"
        @bind-Visible="Visible"
        Title="@Title"
        Icon="@Icon"
        Size="@Size"
        Variant="@Variant"
        CloseOnBackdrop="@CloseOnBackdrop"
        CloseOnEscape="@CloseOnEscape"
        ShowCloseButton="@ShowCloseButton"
        ShowHeader="@ShowHeader"
        ShowFooter="true">
    <ChildContent>
        <div class="r-confirmation-modal-content d-flex flex-column align-center gap-4 text-center">
            <div class="d-flex align-center justify-center square-12 min-w-12 min-h-12 rounded-full flex-shrink-0 @GetIconBackgroundClass()">
                <i class="material-symbols-rounded @GetIconColorClass()">@Icon</i>
            </div>
            <div class="d-flex flex-column gap-3 w-100">
                @if (ChildContent != null)
                {
                    @ChildContent
                }
                else
                {
                    @foreach (var intro in introLines)
                    {
                        <p class="r-confirmation-modal-message text-base @messageAlignmentClass">@intro</p>
                    }

                    @if (bulletLines.Count > 0)
                    {
                        <ul class="r-confirmation-modal-message-list text-left">
                            @foreach (var bullet in bulletLines)
                            {
                                <li>@bullet</li>
                            }
                        </ul>
                    }
                }
            </div>
        </div>
    </ChildContent>
    <FooterContent>
        <RActionGroup Alignment="ActionGroupAlignment.End">
            @if (!string.IsNullOrEmpty(CancelText))
            {
                <RButton Text="@CancelText" 
                         Variant="VariantType.Secondary" 
                         @onclick="@HandleCancel"
                         data-testid="modal-cancel" />
            }
            <RButton Text="@ConfirmText" 
                     Variant="@Variant" 
                     Icon="@GetConfirmIcon()"
                     @onclick="@HandleConfirm"
                     data-testid="modal-confirm" />
        </RActionGroup>
    </FooterContent>
</RModal>

@code {
    private RModal modalRef;

    [Parameter] public string Message { get; set; } = "Are you sure you want to proceed?";
    [Parameter] public string ConfirmText { get; set; } = "Confirm";
    [Parameter] public string CancelText { get; set; } = "Cancel";
    [Parameter] public string Icon { get; set; } = "warning";
    [Parameter] public VariantType Variant { get; set; } = VariantType.Warning;
    [Parameter] public bool IsDestructive { get; set; } = false;
    [Parameter] public bool Visible { get; set; } = true;
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    // Modal parameters
    [Parameter] public string Title { get; set; } = "Confirm";
    [Parameter] public SizeType Size { get; set; } = SizeType.Small;
    [Parameter] public bool CloseOnBackdrop { get; set; } = true;
    [Parameter] public bool CloseOnEscape { get; set; } = true;
    [Parameter] public bool ShowCloseButton { get; set; } = true;
    [Parameter] public bool ShowHeader { get; set; } = true;
    [Parameter] public TextAlignment MessageAlignment { get; set; } = TextAlignment.Auto;

    private List<string> introLines = new();
    private List<string> bulletLines = new();
    private string messageAlignmentClass = "text-center";

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        var segments = Message.Split('\n', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);

        var intros = new List<string>(segments.Length);
        var bullets = new List<string>();

        foreach (var segment in segments)
        {
            if (segment.StartsWith("•", System.StringComparison.Ordinal))
            {
                bullets.Add(segment.TrimStart('•').TrimStart());
                continue;
            }

            intros.Add(segment);
        }

        introLines = intros;
        bulletLines = bullets;

        var requiresLeftAlignment = bulletLines.Count > 0 || introLines.Count > 1;

        messageAlignmentClass = MessageAlignment switch
        {
            TextAlignment.Left => "text-left",
            TextAlignment.Center => "text-center",
            TextAlignment.Right => "text-right",
            TextAlignment.Justify => "text-justify",
            _ => requiresLeftAlignment ? "text-left" : "text-center"
        };
    }

    private async Task HandleConfirm()
    {
        if (OnConfirm.HasDelegate)
            await OnConfirm.InvokeAsync();
    }

    private async Task HandleCancel()
    {
        if (OnCancel.HasDelegate)
            await OnCancel.InvokeAsync();
    }

    private string GetConfirmIcon() => Variant switch
    {
        VariantType.Error => "delete",
        VariantType.Warning => "warning",
        VariantType.Success => "check",
        VariantType.Info => "info",
        _ => "check"
    };

    private string GetIconBackgroundClass() => Variant switch
    {
        VariantType.Error => "bg-danger-light border border-error-border",
        VariantType.Warning => "bg-warning-light border border-warning-border",
        VariantType.Success => "bg-success-light border border-success-border",
        VariantType.Info => "bg-info-light border border-info-border",
        _ => "bg-info-light border border-primary-border"
    };

    private string GetIconColorClass() => Variant switch
    {
        VariantType.Error => "text-error-text",
        VariantType.Warning => "text-warning-text",
        VariantType.Success => "text-success-text",
        VariantType.Info => "text-info-text",
        _ => "text-primary"
    };
}
