@using RR.Blazor.Components
@using RR.Blazor.Components.Base
@using RR.Blazor.Enums
@inherits RComponentBase

@* RConfirmationModal - Ultra-generic, theme-aware confirmation modal component *@
@* Consolidates all confirmation modal functionality into one professional component *@

<RModal Visible="@Visible" 
        Size="@Size" 
        Variant="@GetModalVariant()"
        OnClose="HandleCancel"
        UseBackdrop="true"
        CloseOnBackdrop="@(!IsProcessing)">
    <HeaderContent>
        <div class="flex items-center gap-3">
            @if (!string.IsNullOrEmpty(GetEffectiveIcon()))
            {
                <i class="material-symbols-rounded text-2xl @GetIconClass()">@GetEffectiveIcon()</i>
            }
            <div class="text-h5 font-semibold">@Title</div>
        </div>
    </HeaderContent>
    <ChildContent>
        <div class="pa-6">
            <div class="flex flex-col items-center text-center gap-4">
                @if (ShowCenteredIcon && !string.IsNullOrEmpty(GetEffectiveIcon()))
                {
                    <div class="flex items-center justify-center w-12 h-12 rounded-xl @GetIconBackgroundClass()">
                        <i class="material-symbols-rounded @GetIconColorClass()">@GetEffectiveIcon()</i>
                    </div>
                }
                
                <div class="flex flex-col gap-2">
                    @if (ChildContent != null)
                    {
                        @ChildContent
                    }
                    else if (!string.IsNullOrEmpty(Message))
                    {
                        <p class="text-body-1 text-secondary ma-0">@Message</p>
                    }
                    
                    @if (!string.IsNullOrEmpty(Details))
                    {
                        <div class="mt-3 pa-3 bg-surface-elevated rounded-lg border border-light">
                            <p class="text-sm text-secondary ma-0">@Details</p>
                        </div>
                    }
                </div>
            </div>
            
            @if (ShowDetails && DetailsDictionary.Any())
            {
                <RCard Variant="CardVariant.Outlined" Class="mt-4">
                    <div class="pa-4">
                        <div class="text-h6 font-semibold">Details:</div>
                        <div class="flex flex-col gap-2">
                            @foreach (var detail in DetailsDictionary)
                            {
                                <div class="flex justify-between items-center">
                                    <span class="text-body-2 text-secondary">@detail.Key:</span>
                                    <span class="text-body-2 font-medium">@detail.Value</span>
                                </div>
                            }
                        </div>
                    </div>
                </RCard>
            }
            
            @if (ShowWarning && (Variant == ConfirmationVariant.Danger || Variant == ConfirmationVariant.Destructive))
            {
                <div class="mt-4 flex items-center gap-2 pa-3 bg-error-light text-error rounded-lg">
                    <i class="material-symbols-rounded">warning</i>
                    <span class="text-sm">This action cannot be undone</span>
                </div>
            }
        </div>
    </ChildContent>
    <FooterContent>
        <RActionGroup Direction="ActionGroupDirection.Horizontal" 
                      Alignment="ActionGroupAlignment.End" 
                      Spacing="ActionGroupSpacing.Medium">
            <RButton Text="@CancelText"
                     Variant="ButtonVariant.Ghost"
                     Size="SizeType.Medium"
                     OnClick="@HandleCancel"
                     Disabled="@IsProcessing" />
            <RButton Text="@ConfirmText"
                     Variant="@GetConfirmVariant()"
                     Size="SizeType.Medium"
                     Loading="@IsProcessing"
                     OnClick="@HandleConfirm"
                     Icon="@(IsProcessing ? "" : ConfirmIcon)" />
        </RActionGroup>
    </FooterContent>
</RModal>

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public string Title { get; set; } = "Confirm Action";
    [Parameter] public string Message { get; set; } = "Are you sure you want to proceed?";
    [Parameter] public string Icon { get; set; } = "";
    [Parameter] public string ConfirmText { get; set; } = "Confirm";
    [Parameter] public string CancelText { get; set; } = "Cancel";
    [Parameter] public string ConfirmIcon { get; set; } = "";
    [Parameter] public bool IsProcessing { get; set; }
    [Parameter] public ConfirmationVariant Variant { get; set; } = ConfirmationVariant.Warning;
    [Parameter] public SizeType Size { get; set; } = SizeType.Medium;
    [Parameter] public bool ShowDetails { get; set; }
    [Parameter] public Dictionary<string, string> DetailsDictionary { get; set; } = new();
    [Parameter] public string Details { get; set; } = "";
    [Parameter] public bool ShowWarning { get; set; } = true;
    [Parameter] public bool ShowCenteredIcon { get; set; } = true;
    [Parameter] public EventCallback OnConfirm { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }



    private string GetEffectiveIcon()
    {
        if (!string.IsNullOrEmpty(Icon)) return Icon;
        
        return Variant switch
        {
            ConfirmationVariant.Info => "info",
            ConfirmationVariant.Warning => "warning",
            ConfirmationVariant.Danger or ConfirmationVariant.Destructive => "error",
            ConfirmationVariant.Success => "check_circle",
            _ => "help"
        };
    }

    private ModalVariant GetModalVariant()
    {
        return Variant switch
        {
            ConfirmationVariant.Info => ModalVariant.Info,
            ConfirmationVariant.Warning => ModalVariant.Warning,
            ConfirmationVariant.Danger or ConfirmationVariant.Destructive => ModalVariant.Destructive,
            ConfirmationVariant.Success => ModalVariant.Success,
            _ => ModalVariant.Warning
        };
    }

    private ButtonVariant GetConfirmVariant()
    {
        return Variant switch
        {
            ConfirmationVariant.Info => ButtonVariant.Primary,
            ConfirmationVariant.Warning => ButtonVariant.Warning,
            ConfirmationVariant.Danger or ConfirmationVariant.Destructive => ButtonVariant.Danger,
            ConfirmationVariant.Success => ButtonVariant.Success,
            _ => ButtonVariant.Primary
        };
    }

    private string GetIconClass()
    {
        return Variant switch
        {
            ConfirmationVariant.Info => "text-info",
            ConfirmationVariant.Warning => "text-warning",
            ConfirmationVariant.Danger or ConfirmationVariant.Destructive => "text-error",
            ConfirmationVariant.Success => "text-success",
            _ => "text-secondary"
        };
    }

    private string GetIconBackgroundClass()
    {
        return Variant switch
        {
            ConfirmationVariant.Info => "bg-info-container border border-info",
            ConfirmationVariant.Warning => "bg-warning-container border border-warning",
            ConfirmationVariant.Danger or ConfirmationVariant.Destructive => "bg-error-container border border-error",
            ConfirmationVariant.Success => "bg-success-container border border-success",
            _ => "bg-info-container border border-primary"
        };
    }

    private string GetIconColorClass()
    {
        return Variant switch
        {
            ConfirmationVariant.Info => "text-info",
            ConfirmationVariant.Warning => "text-warning",
            ConfirmationVariant.Danger or ConfirmationVariant.Destructive => "text-error",
            ConfirmationVariant.Success => "text-success",
            _ => "text-primary"
        };
    }

    private async Task HandleConfirm()
    {
        if (OnConfirm.HasDelegate)
        {
            await OnConfirm.InvokeAsync();
        }
    }

    private async Task HandleCancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
    }
}
