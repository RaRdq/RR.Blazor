@* RConfirmationModal - Generic confirmation modal component *@

<RModal IsVisible="@IsVisible"
        Size="ModalSize.Small"
        Variant="@Variant"
        Title="@Title"
        CloseOnBackdrop="@(!IsProcessing)"
        IsProcessing="@IsProcessing"
        CancelText="@CancelText"
        PrimaryText="@ConfirmText"
        PrimaryIcon="@GetConfirmIcon()"
        PrimaryButtonClass="@GetConfirmButtonClass()"
        ShowPrimaryButtonSpinner="@IsProcessing"
        OnCancel="Cancel"
        OnClose="Cancel"
        OnPrimaryAction="Confirm">
    
    <div class="d-flex flex-column align-center text-center gap-4">
        @if (!string.IsNullOrEmpty(IconName))
        {
            <div class="d-flex align-center justify-center w-12 h-12 rounded-xl @GetIconBackgroundClass()">
                <i class="material-symbols-rounded @GetIconColorClass()">@IconName</i>
            </div>
        }
        <div class="d-flex flex-column gap-2">
            @if (ChildContent != null)
            {
                @ChildContent
            }
            else
            {
                <p class="text-center text-base">@Message</p>
            }
        </div>
    </div>
    
</RModal>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public string Title { get; set; } = "Confirm Action";
    [Parameter] public string Message { get; set; } = "Are you sure you want to proceed?";
    [Parameter] public string ConfirmText { get; set; } = "Yes";
    [Parameter] public string CancelText { get; set; } = "Cancel";
    [Parameter] public string IconName { get; set; } = "warning";
    [Parameter] public ModalVariant Variant { get; set; } = ModalVariant.Warning;
    [Parameter] public bool IsProcessing { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private async Task Confirm()
    {
        if (OnConfirm.HasDelegate)
        {
            await OnConfirm.InvokeAsync();
        }
    }

    private async Task Cancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
    }

    private string GetConfirmButtonClass() => Variant switch
    {
        ModalVariant.Destructive => "bg-error text-white hover:opacity-90",
        ModalVariant.Warning => "bg-warning text-white hover:opacity-90",
        ModalVariant.Success => "bg-success text-white hover:opacity-90",
        ModalVariant.Info => "bg-info text-white hover:opacity-90",
        _ => "bg-primary text-white hover:opacity-90"
    };

    private string GetConfirmIcon() => Variant switch
    {
        ModalVariant.Destructive => "delete",
        ModalVariant.Warning => "warning",
        ModalVariant.Success => "check",
        ModalVariant.Info => "info",
        _ => "check"
    };

    private string GetIconBackgroundClass() => Variant switch
    {
        ModalVariant.Destructive => "bg-danger-light border border-error-border",
        ModalVariant.Warning => "bg-warning-light border border-warning-border",
        ModalVariant.Success => "bg-success-light border border-success-border",
        ModalVariant.Info => "bg-info-light border border-info-border",
        _ => "bg-info-light border border-primary-border"
    };

    private string GetIconColorClass() => Variant switch
    {
        ModalVariant.Destructive => "text-error-text",
        ModalVariant.Warning => "text-warning-text",
        ModalVariant.Success => "text-success-text",
        ModalVariant.Info => "text-info-text",
        _ => "text-primary"
    };
}