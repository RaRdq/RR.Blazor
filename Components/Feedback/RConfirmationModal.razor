@* RConfirmationModal - Generic confirmation modal component *@
@* This component is rendered INSIDE RModal by ModalProvider - do not nest RModal *@

<div class="d-flex flex-column align-center text-center gap-4">
    <div class="d-flex align-center justify-center w-12 h-12 rounded-xl @GetIconBackgroundClass()">
        <i class="material-symbols-rounded @GetIconColorClass()">@Icon</i>
    </div>
    <div class="d-flex flex-column gap-2">
        @if (ChildContent != null)
        {
            @ChildContent
        }
        else
        {
            <p class="text-center text-base">@Message</p>
        }
    </div>
</div>

@code {
    [Parameter] public string Message { get; set; } = "Are you sure you want to proceed?";
    [Parameter] public string Icon { get; set; } = "warning";
    [Parameter] public VariantType Variant { get; set; } = VariantType.Warning;
    [Parameter] public bool IsDestructive { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public object Data { get; set; }
    [Parameter] public EventCallback<object> OnDataChanged { get; set; }
    
    // Legacy compatibility parameters (ignored but prevent errors)
    [Parameter] public bool Visible { get; set; }
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string Header { get; set; } = "";
    [Parameter] public string ConfirmText { get; set; } = "";
    [Parameter] public string CancelText { get; set; } = "";
    [Parameter] public bool IsProcessing { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public SizeType Size { get; set; }
    [Parameter] public string ConfirmIcon { get; set; } = "";
    [Parameter] public bool ShowDetails { get; set; }
    [Parameter] public Dictionary<string, object> DetailsDictionary { get; set; }

    private string GetConfirmButtonClass() => Variant switch
    {
        VariantType.Error => "bg-error text-white hover:opacity-90",
        VariantType.Warning => "bg-warning text-white hover:opacity-90",
        VariantType.Success => "bg-success text-white hover:opacity-90",
        VariantType.Info => "bg-info text-white hover:opacity-90",
        _ => "bg-primary text-white hover:opacity-90"
    };

    private string GetConfirmIcon() => Variant switch
    {
        VariantType.Error => "delete",
        VariantType.Warning => "warning",
        VariantType.Success => "check",
        VariantType.Info => "info",
        _ => "check"
    };

    private string GetIconBackgroundClass() => Variant switch
    {
        VariantType.Error => "bg-danger-light border border-error-border",
        VariantType.Warning => "bg-warning-light border border-warning-border",
        VariantType.Success => "bg-success-light border border-success-border",
        VariantType.Info => "bg-info-light border border-info-border",
        _ => "bg-info-light border border-primary-border"
    };

    private string GetIconColorClass() => Variant switch
    {
        VariantType.Error => "text-error-text",
        VariantType.Warning => "text-warning-text",
        VariantType.Success => "text-success-text",
        VariantType.Info => "text-info-text",
        _ => "text-primary"
    };
}