@namespace RR.Blazor.Components.Feedback
@using RR.Blazor.Components.Base
@using RR.Blazor.Enums
@inherits RComponentBase

<div class="@GetClasses()">
    <div class="loading-spinner">
        @if (Type == LoadingType.Spinner)
        {
            <div class="spinner"></div>
        }
        else if (Type == LoadingType.Dots)
        {
            <div class="dots">
                <span></span>
                <span></span>
                <span></span>
            </div>
        }
        else if (Type == LoadingType.Bar)
        {
            <div class="progress-bar">
                <div class="progress-fill"></div>
            </div>
        }
    </div>
    
    @if (!string.IsNullOrEmpty(Text))
    {
        <div class="loading-text">@Text</div>
    }
</div>

@code {
    public enum LoadingType
    {
        Spinner,
        Dots,
        Bar
    }
    
    [Parameter] public LoadingType Type { get; set; } = LoadingType.Spinner;
    [Parameter] public string Text { get; set; }
    [Parameter] public SizeType Size { get; set; } = SizeType.Medium;
    [Parameter] public bool Overlay { get; set; }
    [Parameter] public bool Center { get; set; } = true;
    
    private string GetClasses()
    {
        var classes = new List<string> { "loading" };
        
        classes.Add($"loading-{Type.ToString().ToLower()}");
        classes.Add($"loading-{Size.ToString().ToLower()}");
        
        if (Overlay)
        {
            classes.Add("loading-overlay");
        }
        
        if (Center)
        {
            classes.Add("loading-center");
        }
        
        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes);
    }
}