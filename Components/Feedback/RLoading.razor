@namespace RR.Blazor.Components.Feedback
@using RR.Blazor.Components.Base
@using RR.Blazor.Enums
@inherits RComponentBase

<div class="@GetClasses()">
    <span class="@GetSpinnerClasses()" aria-hidden="true"></span>

    @if (!string.IsNullOrEmpty(Text))
    {
        <span class="loading-text">@Text</span>
    }
</div>

@code {
    public enum LoadingType
    {
        Spinner,
        Dots
    }
    
    [Parameter] public LoadingType Type { get; set; } = LoadingType.Spinner;
    [Parameter] public string Text { get; set; }
    [Parameter] public SizeType Size { get; set; } = SizeType.Medium;
    [Parameter] public bool Overlay { get; set; }
    [Parameter] public bool Center { get; set; } = true;
    
    private string GetClasses()
    {
        var classes = new List<string> { "loading", "loading-no-spinner" };

        if (Overlay)
        {
            classes.Add("loading-overlay");
        }
        else
        {
            classes.Add("loading-container");
        }

        classes.Add($"loading-{Size.ToString().ToLower()}");

        if (Center)
        {
            classes.Add("loading-center");
        }

        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }

        return string.Join(" ", classes);
    }

    private string GetSpinnerClasses()
    {
        var classes = new List<string> { "loading-spinner", $"loading-spinner-{MapSize(Size)}", "loading-spinner-primary" };

        return string.Join(" ", classes);
    }

    private static string MapSize(SizeType size) => size switch
    {
        SizeType.ExtraSmall => "xs",
        SizeType.Small => "sm",
        SizeType.Large => "lg",
        SizeType.ExtraLarge => "xl",
        _ => "md"
    };
}
