@**
<summary>
Smart dropdown component that automatically determines the correct type based on data.
Eliminates need for explicit generic type specifications.
</summary>
<category>Navigation</category>
<complexity>Simple</complexity>
<ai-prompt>Create smart dropdown that auto-detects type</ai-prompt>
<ai-common-use>any dropdown scenario without type specification</ai-common-use>
**@

@using System.Reflection
@using RR.Blazor.Enums

@if (IsStringType)
{
    <RDropdownGeneric TValue="string"
              Items="@GetStringItems()"
              @bind-SelectedValue="@StringValue"
              ItemLabelSelector="@GetStringLabelSelector()"
              ItemIconSelector="@ItemIconSelector"
              ItemDisabledSelector="@GetStringDisabledSelector()"
              SeparatorAfterSelector="@GetStringSeparatorSelector()"
              Position="@Position"
              Header="@Header"
              Footer="@Footer"
              EmptyText="@EmptyText"
              LoadingText="@LoadingText"
              IsLoading="@IsLoading"
              Disabled="@Disabled"
              CloseOnSelect="@CloseOnSelect"
              AriaLabel="@AriaLabel"
              Class="@Class"
              AdditionalClass="@AdditionalClass"
              OnOpened="@OnOpened"
              OnClosed="@OnClosed">
        <TriggerContent>@TriggerContent</TriggerContent>
        <EmptyContent>@EmptyContent</EmptyContent>
    </RDropdownGeneric>
}
else
{
    <RDropdownGeneric TValue="object"
              Items="@GetObjectItems()"
              @bind-SelectedValue="@ObjectValue"
              ItemLabelSelector="@GetObjectLabelSelector()"
              ItemIconSelector="@ItemIconSelector"
              ItemDisabledSelector="@GetObjectDisabledSelector()"
              SeparatorAfterSelector="@GetObjectSeparatorSelector()"
              Position="@Position"
              Header="@Header"
              Footer="@Footer"
              EmptyText="@EmptyText"
              LoadingText="@LoadingText"
              IsLoading="@IsLoading"
              Disabled="@Disabled"
              CloseOnSelect="@CloseOnSelect"
              AriaLabel="@AriaLabel"
              Class="@Class"
              AdditionalClass="@AdditionalClass"
              OnOpened="@OnOpened"
              OnClosed="@OnClosed">
        <TriggerContent>@TriggerContent</TriggerContent>
        <EmptyContent>@EmptyContent</EmptyContent>
    </RDropdownGeneric>
}

@code {
    [Parameter] public IEnumerable<object> Items { get; set; }
    [Parameter] public object SelectedValue { get; set; }
    [Parameter] public EventCallback<object> SelectedValueChanged { get; set; }
    [Parameter] public Func<object, string> ItemLabelSelector { get; set; }
    [Parameter] public Func<object, string> ItemIconSelector { get; set; }
    [Parameter] public Func<object, bool> ItemDisabledSelector { get; set; }
    [Parameter] public Func<object, bool> SeparatorAfterSelector { get; set; }
    [Parameter] public DropdownPosition Position { get; set; } = DropdownPosition.Bottom;
    [Parameter] public string Header { get; set; }
    [Parameter] public string Footer { get; set; }
    [Parameter] public RenderFragment EmptyContent { get; set; }
    [Parameter] public string EmptyText { get; set; } = "No items available";
    [Parameter] public string LoadingText { get; set; } = "Loading...";
    [Parameter] public bool IsLoading { get; set; } = false;
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public bool CloseOnSelect { get; set; } = true;
    [Parameter] public string AriaLabel { get; set; }
    [Parameter] public string Class { get; set; }
    [Parameter] public string AdditionalClass { get; set; }
    [Parameter] public EventCallback OnOpened { get; set; }
    [Parameter] public EventCallback OnClosed { get; set; }
    [Parameter] public RenderFragment TriggerContent { get; set; }

    private bool IsStringType => Items?.FirstOrDefault() is string || SelectedValue is string;

    private string StringValue
    {
        get => SelectedValue as string;
        set => SelectedValueChanged.InvokeAsync(value);
    }

    private object ObjectValue
    {
        get => SelectedValue;
        set => SelectedValueChanged.InvokeAsync(value);
    }

    private IEnumerable<string> GetStringItems() => Items?.Cast<string>() ?? [];
    private IEnumerable<object> GetObjectItems() => Items ?? [];

    private Func<string, string> GetStringLabelSelector() => 
        ItemLabelSelector != null ? (s) => ItemLabelSelector(s) : null;
    
    private Func<object, string> GetObjectLabelSelector() => ItemLabelSelector;

    private Func<string, bool> GetStringDisabledSelector() => 
        ItemDisabledSelector != null ? (s) => ItemDisabledSelector(s) : null;
    
    private Func<object, bool> GetObjectDisabledSelector() => ItemDisabledSelector;

    private Func<string, bool> GetStringSeparatorSelector() => 
        SeparatorAfterSelector != null ? (s) => SeparatorAfterSelector(s) : null;
    
    private Func<object, bool> GetObjectSeparatorSelector() => SeparatorAfterSelector;
}