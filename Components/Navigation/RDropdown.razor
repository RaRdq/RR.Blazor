@**
<summary>
Unified dropdown component that intelligently detects types and eliminates the need for explicit TValue specification.
This is the primary dropdown component for RR.Blazor - use this instead of RDropdownGeneric or other variants.
</summary>
<category>Navigation</category>
<complexity>Simple</complexity>
<ai-prompt>Create smart dropdown for any type of data</ai-prompt>
<ai-common-use>any dropdown scenario - automatically detects type</ai-common-use>
<ai-pattern name="auto-detection">Items list automatically detects type</ai-pattern>
<ai-pattern name="explicit-type">TValue="MyType" for explicit type control</ai-pattern>
<ai-pattern name="string-items">Items=stringList automatically uses string type</ai-pattern>
<ai-pattern name="object-items">Items=objectList automatically uses object type</ai-pattern>
**@

@using System.Reflection
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Rendering
@using RR.Blazor.Enums
@using RR.Blazor.Attributes
@implements IDisposable

@attribute [Component("RDropdown", Category = "Navigation", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(Prompt = "Create smart dropdown for any type of data", 
                       CommonUse = "any dropdown scenario - automatically detects type", 
                       AvoidUsage = "None - this is the universal dropdown component")]

@(RenderDropdown())

@code {
    // Type detection parameters
    [Parameter] public Type TValue { get; set; }
    
    // Core dropdown parameters
    [Parameter] public object Items { get; set; }
    [Parameter] public object SelectedValue { get; set; }
    [Parameter] public EventCallback<object> SelectedValueChanged { get; set; }
    [Parameter] public object ItemLabelSelector { get; set; }
    [Parameter] public object ItemIconSelector { get; set; }
    [Parameter] public object ItemDisabledSelector { get; set; }
    [Parameter] public object SeparatorAfterSelector { get; set; }
    
    // UI parameters
    [Parameter] public DropdownPosition Position { get; set; } = DropdownPosition.Bottom;
    [Parameter] public string Header { get; set; }
    [Parameter] public string Footer { get; set; }
    [Parameter] public RenderFragment EmptyContent { get; set; }
    [Parameter] public string EmptyText { get; set; } = "No items available";
    [Parameter] public string LoadingText { get; set; } = "Loading...";
    [Parameter] public bool IsLoading { get; set; } = false;
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public bool CloseOnSelect { get; set; } = true;
    [Parameter] public string AriaLabel { get; set; }
    [Parameter] public string Class { get; set; }
    [Parameter] public string AdditionalClass { get; set; }
    [Parameter] public EventCallback OnOpened { get; set; }
    [Parameter] public EventCallback OnClosed { get; set; }
    [Parameter] public RenderFragment TriggerContent { get; set; }

    // Private fields for type detection
    private Type _detectedType;
    private bool _typeResolved = false;
    private object _typedComponent;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        
        if (!_typeResolved)
        {
            _detectedType = DetectType();
            _typeResolved = true;
        }
    }

    private Type DetectType()
    {
        // 1. Explicit TValue parameter takes precedence
        if (TValue != null)
        {
            return TValue;
        }

        // 2. Try to detect from SelectedValue
        if (SelectedValue != null)
        {
            var selectedType = SelectedValue.GetType();
            
            // Don't use object type if we have a more specific type
            if (selectedType != typeof(object))
            {
                return selectedType;
            }
        }

        // 3. Try to detect from Items collection
        if (Items != null)
        {
            var itemsType = Items.GetType();
            
            // Check if it's an IEnumerable<T>
            var genericInterface = itemsType.GetInterfaces()
                .FirstOrDefault(i => i.IsGenericType && i.GetGenericTypeDefinition() == typeof(IEnumerable<>));
            
            if (genericInterface != null)
            {
                var elementType = genericInterface.GetGenericArguments()[0];
                
                // Don't use object type if we can find a more specific type
                if (elementType != typeof(object))
                {
                    return elementType;
                }
            }

            // Try to get type from first item
            if (Items is System.Collections.IEnumerable enumerable)
            {
                var firstItem = enumerable.Cast<object>().FirstOrDefault();
                if (firstItem != null)
                {
                    var firstItemType = firstItem.GetType();
                    if (firstItemType != typeof(object))
                    {
                        return firstItemType;
                    }
                }
            }
        }

        // 4. Default to object type
        return typeof(object);
    }

    private RenderFragment RenderDropdown()
    {
        return builder =>
        {
            if (_detectedType == null)
            {
                _detectedType = DetectType();
            }

            // Create the generic dropdown component type
            var genericDropdownType = typeof(RDropdownGeneric<>).MakeGenericType(_detectedType);

            builder.OpenComponent(0, genericDropdownType);

            // Forward all parameters with proper type conversion
            var parameterIndex = 1;

            // Convert and forward Items
            if (Items != null)
            {
                var convertedItems = ConvertItems(Items, _detectedType);
                builder.AddAttribute(parameterIndex++, "Items", convertedItems);
            }

            // Convert and forward SelectedValue
            if (SelectedValue != null)
            {
                var convertedSelectedValue = ConvertValue(SelectedValue, _detectedType);
                builder.AddAttribute(parameterIndex++, "SelectedValue", convertedSelectedValue);
            }

            // Convert and forward SelectedValueChanged
            if (SelectedValueChanged.HasDelegate)
            {
                var convertedCallback = CreateTypedCallback(_detectedType);
                builder.AddAttribute(parameterIndex++, "SelectedValueChanged", convertedCallback);
            }

            // Convert and forward selector functions
            if (ItemLabelSelector != null)
            {
                var convertedSelector = ConvertSelector(ItemLabelSelector, _detectedType, typeof(string));
                builder.AddAttribute(parameterIndex++, "ItemLabelSelector", convertedSelector);
            }

            if (ItemIconSelector != null)
            {
                var convertedSelector = ConvertSelector(ItemIconSelector, _detectedType, typeof(string));
                builder.AddAttribute(parameterIndex++, "ItemIconSelector", convertedSelector);
            }

            if (ItemDisabledSelector != null)
            {
                var convertedSelector = ConvertSelector(ItemDisabledSelector, _detectedType, typeof(bool));
                builder.AddAttribute(parameterIndex++, "ItemDisabledSelector", convertedSelector);
            }

            if (SeparatorAfterSelector != null)
            {
                var convertedSelector = ConvertSelector(SeparatorAfterSelector, _detectedType, typeof(bool));
                builder.AddAttribute(parameterIndex++, "SeparatorAfterSelector", convertedSelector);
            }

            // Forward UI parameters directly
            builder.AddAttribute(parameterIndex++, "Position", Position);
            builder.AddAttribute(parameterIndex++, "Header", Header);
            builder.AddAttribute(parameterIndex++, "Footer", Footer);
            builder.AddAttribute(parameterIndex++, "EmptyContent", EmptyContent);
            builder.AddAttribute(parameterIndex++, "EmptyText", EmptyText);
            builder.AddAttribute(parameterIndex++, "LoadingText", LoadingText);
            builder.AddAttribute(parameterIndex++, "IsLoading", IsLoading);
            builder.AddAttribute(parameterIndex++, "Disabled", Disabled);
            builder.AddAttribute(parameterIndex++, "CloseOnSelect", CloseOnSelect);
            builder.AddAttribute(parameterIndex++, "AriaLabel", AriaLabel);
            builder.AddAttribute(parameterIndex++, "Class", Class);
            builder.AddAttribute(parameterIndex++, "AdditionalClass", AdditionalClass);
            builder.AddAttribute(parameterIndex++, "OnOpened", OnOpened);
            builder.AddAttribute(parameterIndex++, "OnClosed", OnClosed);
            builder.AddAttribute(parameterIndex++, "TriggerContent", TriggerContent);

            builder.CloseComponent();
        };
    }

    private object ConvertItems(object items, Type targetType)
    {
        if (items == null) return null;

        var itemsType = items.GetType();
        
        // If already correct type, return as-is
        if (itemsType.IsGenericType && 
            itemsType.GetGenericTypeDefinition() == typeof(IEnumerable<>).GetGenericTypeDefinition() &&
            itemsType.GetGenericArguments()[0] == targetType)
        {
            return items;
        }

        // Convert to IEnumerable<targetType>
        if (items is System.Collections.IEnumerable enumerable)
        {
            var convertedList = typeof(List<>).MakeGenericType(targetType);
            var list = Activator.CreateInstance(convertedList);
            var addMethod = convertedList.GetMethod("Add");

            foreach (var item in enumerable)
            {
                var convertedItem = ConvertValue(item, targetType);
                addMethod?.Invoke(list, new[] { convertedItem });
            }

            return list;
        }

        return items;
    }

    private object ConvertValue(object value, Type targetType)
    {
        if (value == null) return null;
        if (value.GetType() == targetType) return value;

        // Handle basic type conversions
        try
        {
            if (targetType == typeof(string))
            {
                return value.ToString();
            }
            else if (targetType == typeof(object))
            {
                return value;
            }
            else if (targetType.IsEnum && value is string stringValue)
            {
                return Enum.Parse(targetType, stringValue);
            }
            else if (targetType.IsAssignableFrom(value.GetType()))
            {
                return value;
            }
            else
            {
                return Convert.ChangeType(value, targetType);
            }
        }
        catch
        {
            return value; // Return original value if conversion fails
        }
    }

    private object ConvertSelector(object selector, Type inputType, Type outputType)
    {
        if (selector == null) return null;

        var selectorType = selector.GetType();
        var expectedType = typeof(Func<,>).MakeGenericType(inputType, outputType);

        // If already correct type, return as-is
        if (selectorType == expectedType)
        {
            return selector;
        }

        // Create a wrapper function that converts types
        var method = GetType().GetMethod(nameof(CreateTypedSelector), BindingFlags.NonPublic | BindingFlags.Instance);
        var genericMethod = method?.MakeGenericMethod(inputType, outputType);
        return genericMethod?.Invoke(this, new[] { selector });
    }

    private Func<T, TResult> CreateTypedSelector<T, TResult>(object originalSelector)
    {
        if (originalSelector is Func<object, object> objSelector)
        {
            return item =>
            {
                var result = objSelector(item);
                return (TResult)ConvertValue(result, typeof(TResult));
            };
        }
        else if (originalSelector is Func<T, TResult> typedSelector)
        {
            return typedSelector;
        }
        else
        {
            // Create a generic wrapper using reflection
            var selectorType = originalSelector.GetType();
            var invokeMethod = selectorType.GetMethod("Invoke");
            
            return item =>
            {
                var result = invokeMethod?.Invoke(originalSelector, new object[] { item });
                return (TResult)ConvertValue(result, typeof(TResult));
            };
        }
    }

    private object CreateTypedCallback(Type valueType)
    {
        var method = GetType().GetMethod(nameof(CreateTypedCallbackGeneric), BindingFlags.NonPublic | BindingFlags.Instance);
        var genericMethod = method?.MakeGenericMethod(valueType);
        return genericMethod?.Invoke(this, null);
    }

    private EventCallback<T> CreateTypedCallbackGeneric<T>()
    {
        return EventCallback.Factory.Create<T>(this, async (T value) =>
        {
            var convertedValue = ConvertValue(value, typeof(object));
            await SelectedValueChanged.InvokeAsync(convertedValue);
        });
    }

    public void Dispose()
    {
        // Cleanup if needed
    }
}