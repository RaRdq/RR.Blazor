@** 
<summary>
Professional breadcrumb navigation component for showing page hierarchy and navigation paths.
Supports icons, custom separators, responsive collapsing, and accessibility features.
</summary>
<category>Navigation</category>
<complexity>Simple</complexity>
<ai-prompt>Create breadcrumb navigation for page hierarchy</ai-prompt>
<ai-common-use>page navigation, hierarchy display, user location indication</ai-common-use>
<ai-avoid>Don't use for primary navigation - use RNavMenu instead. Avoid for single-level pages.</ai-avoid>
<ai-pattern name="basic-breadcrumbs">Items list with BreadcrumbItem objects</ai-pattern>
<ai-pattern name="icon-breadcrumbs">BreadcrumbItem with Icon property for visual hierarchy</ai-pattern>
<ai-pattern name="custom-separator">Separator or SeparatorIcon for custom dividers</ai-pattern>
<ai-pattern name="responsive-breadcrumbs">CollapsibleOnMobile for mobile-friendly navigation</ai-pattern>
**@
@namespace RR.Blazor.Components
@using RR.Blazor.Models
@using RR.Blazor.Enums
@using RR.Blazor.Attributes

@attribute [Component("RBreadcrumbs", Category = "Navigation", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(Prompt = "Create breadcrumb navigation for page hierarchy", 
                       CommonUse = "page navigation, hierarchy display, user location indication", 
                       AvoidUsage = "Don't use for primary navigation - use RNavMenu instead")]

<nav class="breadcrumbs @GetBreadcrumbsClasses()" aria-label="Breadcrumb">
    <ol class="breadcrumbs__list">
        @if (Items?.Any() == true)
        {
            @foreach (var item in Items)
            {
                var isLast = item == Items.Last();
                
                <li class="breadcrumbs__item">
                    @if (!string.IsNullOrEmpty(item.Icon))
                    {
                        <i class="material-symbols-rounded breadcrumbs__icon">@item.Icon</i>
                    }
                    
                    @if (isLast || string.IsNullOrEmpty(item.Href))
                    {
                        <span class="breadcrumbs__text @(isLast ? "breadcrumbs__text--current" : "")" 
                              aria-current="@(isLast ? "page" : null)">
                            @item.Text
                        </span>
                    }
                    else
                    {
                        <a href="@item.Href" class="breadcrumbs__link">
                            @item.Text
                        </a>
                    }
                    
                    @if (!isLast)
                    {
                        <span class="breadcrumbs__separator" aria-hidden="true">
                            @if (!string.IsNullOrEmpty(Separator))
                            {
                                @Separator
                            }
                            else if (!string.IsNullOrEmpty(SeparatorIcon))
                            {
                                <i class="material-symbols-rounded">@SeparatorIcon</i>
                            }
                            else
                            {
                                <i class="material-symbols-rounded">chevron_right</i>
                            }
                        </span>
                    }
                </li>
            }
        }
        else if (ChildContent != null)
        {
            @ChildContent
        }
    </ol>
</nav>

@code {
    /// <summary>Breadcrumb items</summary>
    [Parameter, AIParameter("List of breadcrumb navigation items", "BreadcrumbItem with Text, Href, and optional Icon")] 
    public List<BreadcrumbItem> Items { get; set; }
    
    /// <summary>Size variant</summary>
    [Parameter, AIParameter("Size of breadcrumb text", "BreadcrumbSize.Small, BreadcrumbSize.Default, BreadcrumbSize.Large")] 
    public BreadcrumbSize Size { get; set; } = BreadcrumbSize.Default;
    
    /// <summary>Custom separator text (default: chevron icon)</summary>
    [Parameter, AIParameter("Text separator between breadcrumbs", "/ or > or custom text")] 
    public string Separator { get; set; }
    
    /// <summary>Custom separator icon</summary>
    [Parameter] public string SeparatorIcon { get; set; }
    
    /// <summary>Whether to collapse items on mobile</summary>
    [Parameter, AIParameter("Responsive behavior on mobile", "true to auto-collapse on small screens")] 
    public bool CollapsibleOnMobile { get; set; } = true;
    
    /// <summary>Max items to show before collapsing</summary>
    [Parameter] public int MaxVisibleItems { get; set; } = 0;
    
    /// <summary>Additional CSS classes</summary>
    [Parameter] public string Class { get; set; }
    
    /// <summary>Custom content</summary>
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    /// <summary>Additional HTML attributes</summary>
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> AdditionalAttributes { get; set; }
    
    private string GetBreadcrumbsClasses()
    {
        var classes = new List<string> { "breadcrumbs" };
        
        // Size variant
        if (Size != BreadcrumbSize.Default)
        {
            classes.Add($"breadcrumbs--{Size.ToString().ToLower()}");
        }
        
        // Collapsible on mobile
        if (CollapsibleOnMobile)
        {
            classes.Add("breadcrumbs--collapsible");
        }
        
        // Custom CSS classes
        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes);
    }
}

