@** 
<summary>
Professional navigation menu component for sidebar and main navigation with hierarchical support.
Supports collapsible groups, badges, icons, and responsive behavior for enterprise applications.
</summary>
<category>Navigation</category>
<complexity>Complex</complexity>
<ai-prompt>Create navigation menu for app sidebar</ai-prompt>
<ai-common-use>sidebar navigation, main menu, hierarchical navigation, app structure</ai-common-use>
<ai-avoid>Don't use for breadcrumbs - use RBreadcrumbs instead. Avoid for action menus - use RDropdown.</ai-avoid>
<ai-pattern name="basic-nav">Items list with NavMenuItem objects for simple navigation</ai-pattern>
<ai-pattern name="hierarchical-nav">NavMenuItem with Children for nested menu structure</ai-pattern>
<ai-pattern name="badge-nav">NavMenuItem with Badge for notifications and counts</ai-pattern>
<ai-pattern name="collapsible-nav">Responsive to SidebarCollapsed cascading parameter</ai-pattern>
**@
@using Microsoft.AspNetCore.Components.Routing
@using RR.Blazor.Attributes

@attribute [Component("RNavMenu", Category = "Navigation", Complexity = ComponentComplexity.Complex)]
@attribute [AIOptimized(Prompt = "Create navigation menu for app sidebar", 
                       CommonUse = "sidebar navigation, main menu, hierarchical navigation", 
                       AvoidUsage = "Don't use for breadcrumbs - use RBreadcrumbs instead")]

<nav class="nav-menu">
    @if (Items != null)
    {
        @foreach (var item in GetVisibleItems())
        {
            @if (item.IsDivider)
            {
                <div class="nav-divider"></div>
            }
            else if (item.Children?.Any() == true)
            {
                <div class="nav-group @(IsGroupExpanded(item.Id) ? "nav-group--expanded" : "")">
                    <button class="nav-group__toggle" @onclick="() => ToggleGroup(item.Id)">
                        @if (!string.IsNullOrEmpty(item.Icon))
                        {
                            <i class="material-symbols-rounded nav-group__icon">@item.Icon</i>
                        }
                        <span class="nav-group__text @(SidebarCollapsed ? "d-none" : "")">@item.Text</span>
                        <i class="material-symbols-rounded nav-group__chevron @(SidebarCollapsed ? "d-none" : "")">
                            @(IsGroupExpanded(item.Id) ? "expand_less" : "expand_more")
                        </i>
                    </button>
                    
                    @if (!SidebarCollapsed)
                    {
                        <div class="nav-group__items">
                            @foreach (var child in item.Children.Where(c => c.IsVisible))
                            {
                                <NavLink class="nav-item nav-item--child" 
                                         href="@child.Href" 
                                         Match="@(child.MatchExact ? NavLinkMatch.All : NavLinkMatch.Prefix)"
                                         ActiveClass="nav-item--active">
                                    @if (!string.IsNullOrEmpty(child.Icon))
                                    {
                                        <i class="material-symbols-rounded nav-item__icon">@child.Icon</i>
                                    }
                                    <span class="nav-item__text">@child.Text</span>
                                    @if (child.Badge != null)
                                    {
                                        <span class="nav-item__badge nav-item__badge--@child.Badge.Type.ToLower()">
                                            @child.Badge.Text
                                        </span>
                                    }
                                </NavLink>
                            }
                        </div>
                    }
                </div>
            }
            else
            {
                <NavLink class="@GetNavItemClasses(item)" 
                         href="@item.Href" 
                         Match="@(item.MatchExact ? NavLinkMatch.All : NavLinkMatch.Prefix)"
                         ActiveClass="nav-item--active">
                    @if (!string.IsNullOrEmpty(item.Icon))
                    {
                        <i class="material-symbols-rounded nav-item__icon">@item.Icon</i>
                    }
                    <span class="nav-item__text @(SidebarCollapsed ? "d-none" : "")">@item.Text</span>
                    @if (item.Badge != null && !SidebarCollapsed)
                    {
                        <span class="nav-item__badge nav-item__badge--@item.Badge.Type.ToLower()">
                            @item.Badge.Text
                        </span>
                    }
                </NavLink>
            }
        }
    }
    else if (ChildContent != null)
    {
        @ChildContent
    }
</nav>

@code {
    /// <summary>Navigation items</summary>
    [Parameter, AIParameter("List of navigation menu items", "NavMenuItem with Text, Href, Icon, and optional Children")] 
    public List<NavMenuItem> Items { get; set; }
    
    /// <summary>Custom navigation content</summary>
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    /// <summary>Whether sidebar is collapsed</summary>
    [CascadingParameter(Name = "SidebarCollapsed"), AIParameter("Responsive to sidebar state", "Auto-provided by RAppShell")] 
    public bool SidebarCollapsed { get; set; }
    
    /// <summary>Filter function for items</summary>
    [Parameter, AIParameter("Function to filter menu items", "item => item.RequiredRole == userRole")] 
    public Func<NavMenuItem, bool> ItemFilter { get; set; }
    
    /// <summary>Item clicked callback</summary>
    [Parameter] public EventCallback<NavMenuItem> OnItemClick { get; set; }
    
    private readonly HashSet<string> expandedGroups = new();
    
    private IEnumerable<NavMenuItem> GetVisibleItems()
    {
        if (Items == null) return [];
        
        var visibleItems = Items.Where(i => i.IsVisible);
        
        if (ItemFilter != null)
        {
            visibleItems = visibleItems.Where(ItemFilter);
        }
        
        return visibleItems;
    }
    
    private bool IsGroupExpanded(string groupId)
    {
        return expandedGroups.Contains(groupId);
    }
    
    private void ToggleGroup(string groupId)
    {
        if (expandedGroups.Contains(groupId))
        {
            expandedGroups.Remove(groupId);
        }
        else
        {
            expandedGroups.Add(groupId);
        }
    }
    
    private string GetNavItemClasses(NavMenuItem item)
    {
        var classes = new List<string> { "nav-item" };
        if (item.IsHighlighted)
        {
            classes.Add("nav-item--highlighted");
        }
        return string.Join(" ", classes);
    }
}


