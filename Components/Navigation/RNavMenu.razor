@using Microsoft.AspNetCore.Components.Routing

<nav class="nav-menu">
    @if (Items != null)
    {
        @foreach (var item in GetVisibleItems())
        {
            @if (item.IsDivider)
            {
                <div class="nav-divider"></div>
            }
            else if (item.Children?.Any() == true)
            {
                <div class="nav-group @(IsGroupExpanded(item.Id) ? "nav-group--expanded" : "")">
                    <button class="nav-group__toggle" @onclick="() => ToggleGroup(item.Id)">
                        @if (!string.IsNullOrEmpty(item.Icon))
                        {
                            <i class="material-symbols-rounded nav-group__icon">@item.Icon</i>
                        }
                        <span class="nav-group__text @(SidebarCollapsed ? "d-none" : "")">@item.Text</span>
                        <i class="material-symbols-rounded nav-group__chevron @(SidebarCollapsed ? "d-none" : "")">
                            @(IsGroupExpanded(item.Id) ? "expand_less" : "expand_more")
                        </i>
                    </button>
                    
                    @if (!SidebarCollapsed)
                    {
                        <div class="nav-group__items">
                            @foreach (var child in item.Children.Where(c => c.IsVisible))
                            {
                                <NavLink class="nav-item nav-item--child" 
                                         href="@child.Href" 
                                         Match="@(child.MatchExact ? NavLinkMatch.All : NavLinkMatch.Prefix)"
                                         ActiveClass="nav-item--active">
                                    @if (!string.IsNullOrEmpty(child.Icon))
                                    {
                                        <i class="material-symbols-rounded nav-item__icon">@child.Icon</i>
                                    }
                                    <span class="nav-item__text">@child.Text</span>
                                    @if (child.Badge != null)
                                    {
                                        <span class="nav-item__badge nav-item__badge--@child.Badge.Type.ToLower()">
                                            @child.Badge.Text
                                        </span>
                                    }
                                </NavLink>
                            }
                        </div>
                    }
                </div>
            }
            else
            {
                <NavLink class="@GetNavItemClasses(item)" 
                         href="@item.Href" 
                         Match="@(item.MatchExact ? NavLinkMatch.All : NavLinkMatch.Prefix)"
                         ActiveClass="nav-item--active">
                    @if (!string.IsNullOrEmpty(item.Icon))
                    {
                        <i class="material-symbols-rounded nav-item__icon">@item.Icon</i>
                    }
                    <span class="nav-item__text @(SidebarCollapsed ? "d-none" : "")">@item.Text</span>
                    @if (item.Badge != null && !SidebarCollapsed)
                    {
                        <span class="nav-item__badge nav-item__badge--@item.Badge.Type.ToLower()">
                            @item.Badge.Text
                        </span>
                    }
                </NavLink>
            }
        }
    }
    else if (ChildContent != null)
    {
        @ChildContent
    }
</nav>

@code {
    /// <summary>Navigation items</summary>
    [Parameter] public List<NavMenuItem> Items { get; set; }
    
    /// <summary>Custom navigation content</summary>
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    /// <summary>Whether sidebar is collapsed</summary>
    [CascadingParameter(Name = "SidebarCollapsed")] 
    public bool SidebarCollapsed { get; set; }
    
    /// <summary>Filter function for items</summary>
    [Parameter] public Func<NavMenuItem, bool> ItemFilter { get; set; }
    
    /// <summary>Item clicked callback</summary>
    [Parameter] public EventCallback<NavMenuItem> OnItemClick { get; set; }
    
    private readonly HashSet<string> expandedGroups = new();
    
    private IEnumerable<NavMenuItem> GetVisibleItems()
    {
        if (Items == null) return [];
        
        var visibleItems = Items.Where(i => i.IsVisible);
        
        if (ItemFilter != null)
        {
            visibleItems = visibleItems.Where(ItemFilter);
        }
        
        return visibleItems;
    }
    
    private bool IsGroupExpanded(string groupId)
    {
        return expandedGroups.Contains(groupId);
    }
    
    private void ToggleGroup(string groupId)
    {
        if (expandedGroups.Contains(groupId))
        {
            expandedGroups.Remove(groupId);
        }
        else
        {
            expandedGroups.Add(groupId);
        }
    }
    
    private string GetNavItemClasses(NavMenuItem item)
    {
        var classes = new List<string> { "nav-item" };
        if (item.IsHighlighted)
        {
            classes.Add("nav-item--highlighted");
        }
        return string.Join(" ", classes);
    }
}


@* 
Usage Example:

@code {
    private List<NavMenuItem> navItems = new()
    {
        new() { Text = "Dashboard", Icon = "dashboard", Href = "/" },
        new() { Text = "Users", Icon = "people", Href = "/users", Badge = new() { Text = "5", Type = "info" } },
        new() { IsDivider = true },
        new() { 
            Text = "Settings", 
            Icon = "settings", 
            Children = new()
            {
                new() { Text = "Profile", Icon = "person", Href = "/settings/profile" },
                new() { Text = "Security", Icon = "security", Href = "/settings/security" },
            }
        }
    };
}

<RNavMenu Items="@navItems" />

// Or with custom content:
<RNavMenu>
    <NavLink class="nav-item" href="/" ActiveClass="nav-item--active">
        <i class="material-symbols-rounded nav-item__icon">home</i>
        <span class="nav-item__text">Home</span>
    </NavLink>
</RNavMenu>
*@