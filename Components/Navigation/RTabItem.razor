@** 
<summary>
Individual tab item component for RTabs container with icon, badge, and content support.
Supports closable tabs, disabled states, and badge notifications for professional tab experiences.
</summary>
<category>Navigation</category>
<complexity>Simple</complexity>
<ai-prompt>Create individual tab item for RTabs container</ai-prompt>
<ai-common-use>tab content organization, document tabs, settings sections</ai-common-use>
<ai-avoid>Don't use outside RTabs container. Use RButton for standalone buttons.</ai-avoid>
<ai-pattern name="basic-tab">Text and ChildContent for simple tab item</ai-pattern>
<ai-pattern name="icon-tab">Icon="icon_name" for tab with icon</ai-pattern>
<ai-pattern name="badge-tab">BadgeCount for notification indicators</ai-pattern>
<ai-pattern name="closable-tab">Closable="true" for removable tabs</ai-pattern>
**@
@using RR.Blazor.Enums
@using RR.Blazor.Attributes
@using RR.Blazor.Components.Base
@implements IDisposable
@inherits RComponentBase

@attribute [Component("RTabItem", Category = "Navigation", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(Prompt = "Create individual tab item for RTabs container", 
                       CommonUse = "tab content organization, document tabs, settings sections", 
                       AvoidUsage = "Don't use outside RTabs container")]

@code {
    [CascadingParameter] public RTabs Parent { get; set; }
    
    /// <summary>Unique identifier for this tab</summary>
    [Parameter, AIParameter("Unique tab identifier", "Auto-generated if not provided")] 
    public string Id { get; set; } = $"tab-item-{Guid.NewGuid():N}";
    
    /// <summary>Tab text/title</summary>
    [Parameter, AIParameter("Tab display text", "Shown in tab header")] 
    public string Text { get; set; }
    
    /// <summary>Icon for tab</summary>
    [Parameter, AIParameter("Material icon name", "dashboard, settings, person, etc.")] 
    public string Icon { get; set; }
    
    /// <summary>Icon position</summary>
    [Parameter] public IconPosition IconPosition { get; set; } = IconPosition.Start;
    
    
    /// <summary>Whether tab can be closed</summary>
    [Parameter, AIParameter("Allow tab to be closed", "true for document-style tabs")] 
    public bool Closable { get; set; }
    
    /// <summary>Badge count to display</summary>
    [Parameter, AIParameter("Notification badge count", "0 to hide badge, >0 to show")] 
    public int BadgeCount { get; set; }
    
    /// <summary>Badge variant (danger, warning, success)</summary>
    [Parameter] public string BadgeVariant { get; set; }
    
    /// <summary>ARIA label for accessibility</summary>
    [Parameter, AIParameter("Accessibility label for screen readers", "Descriptive text for the tab")]
    public string AriaLabel { get; set; }
    
    
    protected override void OnInitialized()
    {
        if (Parent == null)
        {
            throw new InvalidOperationException("RTabItem must be used within RTabs component");
        }
        
        Parent.AddTab(new RTabs.RTabItemInfo
        {
            Id = Id,
            Text = Text,
            Icon = Icon,
            IconPosition = IconPosition,
            IsDisabled = Disabled,
            Closable = Closable,
            BadgeCount = BadgeCount,
            BadgeVariant = BadgeVariant,
            AriaLabel = AriaLabel,
            Content = ChildContent
        });
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && Parent != null)
        {

            var existingTab = Parent.GetTabs().FirstOrDefault(t => t.Id == Id);
            if (existingTab == null)
            {
                Parent.AddTab(new RTabs.RTabItemInfo
                {
                    Id = Id,
                    Text = Text,
                    Icon = Icon,
                    IconPosition = IconPosition,
                    IsDisabled = Disabled,
                    Closable = Closable,
                    BadgeCount = BadgeCount,
                    BadgeVariant = BadgeVariant,
                    AriaLabel = AriaLabel,
                    Content = ChildContent
                });
            }
        }
    }
    
    protected override void OnParametersSet()
    {

        if (Parent != null)
        {
            var existingTab = Parent.GetTabs().FirstOrDefault(t => t.Id == Id);
            if (existingTab != null)
            {
                existingTab.Text = Text;
                existingTab.Icon = Icon;
                existingTab.IconPosition = IconPosition;
                existingTab.IsDisabled = Disabled;
                existingTab.Closable = Closable;
                existingTab.BadgeCount = BadgeCount;
                existingTab.BadgeVariant = BadgeVariant;
                existingTab.AriaLabel = AriaLabel;
                existingTab.Content = ChildContent;
            }
        }
    }
    
    public void Dispose()
    {
        Parent?.RemoveTab(Id);
    }
}

