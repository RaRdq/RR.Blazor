@using RR.Blazor.Services
@using RR.Blazor.Models
@using RR.Blazor.Components.Base
@implements IDisposable
@inject IThemeService ThemeService
@inherits RComponentBase

<button class="d-inline-flex items-center justify-center pa-3 rounded-lg glass-frost border-0 shadow-sm hover:shadow-md transition-all focus:outline-none focus:ring-2 focus:ring-primary focus:ring-opacity-50 touch-target @Class"
        @onclick="ToggleTheme" 
        title="@GetTooltip()"
        aria-label="@GetTooltip()">
    <i class="material-symbols-rounded text-primary text-lg">@GetThemeIcon()</i>
    @if (isInitialized)
    {
        <span class="sr-only">@GetTooltip()</span>
    }
</button>

@code {
    
    private ThemeMode currentMode = ThemeMode.System;
    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {

            ThemeService.ThemeChanged += OnThemeChanged;
            

            await ThemeService.InitializeAsync();
            

            currentMode = await ThemeService.GetThemeModeAsync();
            isInitialized = true;
            

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to initialize theme switcher: {ex.Message}");
            currentMode = ThemeMode.System;
            isInitialized = true;
        }
    }

    private void OnThemeChanged(ThemeConfiguration theme)
    {
        InvokeAsync(() =>
        {
            currentMode = theme.Mode;
            StateHasChanged();
        });
    }

    private async Task ToggleTheme()
    {
        try
        {
            var newMode = currentMode switch
            {
                ThemeMode.Light => ThemeMode.Dark,
                ThemeMode.Dark => ThemeMode.System,
                ThemeMode.System => ThemeMode.Light,
                _ => ThemeMode.Light
            };
            
            currentMode = newMode;
            await ThemeService.SetThemeModeAsync(currentMode);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to toggle theme: {ex.Message}");
        }
    }

    private string GetThemeIcon()
    {
        return currentMode switch
        {
            ThemeMode.Light => "light_mode",
            ThemeMode.Dark => "dark_mode", 
            ThemeMode.System => "contrast",
            _ => "light_mode"
        };
    }

    private string GetTooltip()
    {
        if (!isInitialized) return "Loading theme...";
            
        return currentMode switch
        {
            ThemeMode.Light => "Switch to dark mode",
            ThemeMode.Dark => "Switch to system mode",
            ThemeMode.System => "Switch to light mode", 
            _ => "Switch theme"
        };
    }

    public void Dispose()
    {
        ThemeService.ThemeChanged -= OnThemeChanged;
    }
}

