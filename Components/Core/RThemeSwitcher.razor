@using RR.Blazor.Services
@using RR.Blazor.Models
@implements IDisposable
@inject IThemeService ThemeService

<button class="theme-switcher glass-interactive elevation-2 rounded-lg border-light @Class"
        @onclick="ToggleTheme" 
        title="@GetTooltip()"
        aria-label="@GetTooltip()">
    <i class="material-symbols-rounded text-primary">@GetThemeIcon()</i>
</button>

@code {
    [Parameter] public string Class { get; set; } = "";
    
    private ThemeMode currentMode = ThemeMode.Light;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentMode = await ThemeService.GetThemeModeAsync();
            ThemeService.ThemeChanged += OnThemeChanged;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to initialize theme switcher: {ex.Message}");
            currentMode = ThemeMode.Light;
        }
    }

    private void OnThemeChanged(ThemeConfiguration theme)
    {
        InvokeAsync(() =>
        {
            currentMode = theme.Mode;
            StateHasChanged();
        });
    }

    private async Task ToggleTheme()
    {
        try
        {
            var newMode = currentMode switch
            {
                ThemeMode.Light => ThemeMode.Dark,
                ThemeMode.Dark => ThemeMode.System,
                ThemeMode.System => ThemeMode.Light,
                _ => ThemeMode.Light
            };
            
            currentMode = newMode;
            await ThemeService.SetThemeModeAsync(currentMode);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to toggle theme: {ex.Message}");
        }
    }

    private string GetThemeIcon()
    {
        return currentMode switch
        {
            ThemeMode.Light => "light_mode",
            ThemeMode.Dark => "dark_mode", 
            ThemeMode.System => "contrast",
            _ => "light_mode"
        };
    }

    private string GetTooltip()
    {
        return currentMode switch
        {
            ThemeMode.Light => "Switch to dark theme",
            ThemeMode.Dark => "Switch to system theme",
            ThemeMode.System => "Switch to light theme", 
            _ => "Switch theme"
        };
    }

    public void Dispose()
    {
        ThemeService.ThemeChanged -= OnThemeChanged;
    }
}

