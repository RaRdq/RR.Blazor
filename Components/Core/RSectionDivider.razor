@** 
<summary>
Section divider with icons and titles for content organization.
</summary>
<category>Core</category>
<complexity>Simple</complexity>
<ai-prompt>Create section divider with title and icon</ai-prompt>
<ai-common-use>page sections, form organization, content separation</ai-common-use>
<ai-avoid>Don't overuse - only for logical section breaks</ai-avoid>
**@
@using RR.Blazor.Enums
@using RR.Blazor.Attributes
@using RR.Blazor.Components.Base
@inherits RComponentBase

@attribute [Component("RSectionDivider", Category = "Core", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(Prompt = "Create section divider with title and icon", 
                       CommonUse = "page sections, form organization, content separation", 
                       AvoidUsage = "Don't overuse - only for logical section breaks")]

<RDivider Style="@LineStyle"
          TextAlign="@GetTextAlign()"
          SemanticVariant="@GetSemanticVariant()"
          Class="@GetDividerClasses()">
    <ChildContent>
        @if (!string.IsNullOrEmpty(Icon))
        {
            <span class="material-symbols-rounded text-inherit mr-2">@Icon</span>
        }
        @if (!string.IsNullOrEmpty(Text))
        {
            <span class="font-semibold">@Text</span>
        }
        @if (!string.IsNullOrEmpty(Subtitle))
        {
            <span class="text-muted ml-2">@Subtitle</span>
        }
        @if (ChildContent != null)
        {
            @ChildContent
        }
    </ChildContent>
</RDivider>

@code {
    [Parameter, AIParameter("Section title", "Descriptive section names like Personal Information")]
    public string Text { get; set; }
    
    [Parameter, AIParameter("Section description", "Additional context for the section")]
    public string Subtitle { get; set; }
    
    [Parameter, AIParameter("Material icon", "Common icons: settings, person, security, payment")]
    public string Icon { get; set; }
    
    [Parameter] public bool ShowLine { get; set; } = true;
    [Parameter] public DividerStyle LineStyle { get; set; } = DividerStyle.Solid;
    [Parameter] public SectionDividerVariant Variant { get; set; } = SectionDividerVariant.Default;
    [Parameter] public SectionDividerSize Size { get; set; } = SectionDividerSize.Default;
    [Parameter] public SectionDividerAlignment Alignment { get; set; } = SectionDividerAlignment.Left;
    
    
    private string GetSemanticVariant()
    {
        return Variant switch
        {
            SectionDividerVariant.Primary => "Primary",
            SectionDividerVariant.Secondary => "Secondary",
            SectionDividerVariant.Success => "Success",
            SectionDividerVariant.Warning => "Warning",
            SectionDividerVariant.Error => "Error",
            SectionDividerVariant.Info => "Info",
            _ => "Default"
        };
    }
    
    private DividerTextAlign GetTextAlign()
    {
        return Alignment switch
        {
            SectionDividerAlignment.Center => DividerTextAlign.Center,
            SectionDividerAlignment.Right => DividerTextAlign.Right,
            _ => DividerTextAlign.Left
        };
    }
    
    private string GetDividerClasses()
    {
        var classes = new List<string>();
        
        if (!ShowLine)
        {
            classes.Add("divider-no-line");
        }
        
        // Size classes
        switch (Size)
        {
            case SectionDividerSize.Compact:
                classes.Add("divider-compact");
                break;
            case SectionDividerSize.Large:
                classes.Add("divider-spacious");
                break;
        }
        
        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes);
    }
}