@using RR.Blazor.Services
@using RR.Blazor.Models
@implements IAsyncDisposable
@inject IThemeService ThemeService

@if (ChildContent != null)
{
    <CascadingValue Value="ThemeService" Name="ThemeService">
        <CascadingValue Value="currentTheme" Name="CurrentTheme">
            @ChildContent
        </CascadingValue>
    </CascadingValue>
}

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public ThemeConfiguration InitialTheme { get; set; }
    
    private ThemeConfiguration currentTheme;
    private bool isInitialized = false;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {

            await Task.Yield();
            
            if (!isInitialized)
            {
                await ThemeService.InitializeAsync();
                isInitialized = true;
            }
            
            if (InitialTheme != null)
            {
                await ThemeService.SetThemeAsync(InitialTheme);
            }
            
            currentTheme = ThemeService.CurrentTheme;
            

            ThemeService.ThemeChanged += OnThemeChanged;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"RThemeProvider initialization error: {ex.Message}");

            currentTheme = ThemeConfiguration.Default;
        }
    }
    
    private void OnThemeChanged(ThemeConfiguration theme)
    {
        InvokeAsync(() =>
        {
            currentTheme = theme;
            StateHasChanged();
        });
    }
    
    public async ValueTask DisposeAsync()
    {
        try
        {

            ThemeService.ThemeChanged -= OnThemeChanged;
            
            if (ThemeService is IAsyncDisposable asyncDisposable)
            {
                await asyncDisposable.DisposeAsync();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"RThemeProvider disposal error: {ex.Message}");
        }
    }
}