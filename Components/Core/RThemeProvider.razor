@using RR.Blazor.Services
@using RR.Blazor.Models
@using RR.Blazor.Components.Base
@namespace RR.Blazor.Components.Core
@implements IAsyncDisposable
@inherits RComponentBase
@inject IRThemeService ThemeService

<div data-theme="@Theme" class="rr-theme-provider">
    @if (ChildContent != null)
    {
        <CascadingValue Value="ThemeService" Name="ThemeService">
            <CascadingValue Value="@currentTheme" Name="CurrentTheme">
                @ChildContent
            </CascadingValue>
        </CascadingValue>
    }
</div>

@code {
    [Parameter] public string Theme { get; set; } = "default";
    [Parameter] public ThemeConfiguration? InitialTheme { get; set; }
    private ThemeConfiguration? currentTheme;
    private bool initializationCompleted;
    private bool initializationInProgress;
    
    protected override Task OnInitializedAsync()
    {
        try
        {
            ThemeService.ThemeChanged += OnThemeChanged;
            currentTheme = InitialTheme ?? ThemeService.CurrentTheme;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"RThemeProvider initialization error: {ex.Message}");

            currentTheme = ThemeConfiguration.Default;
        }
        
        return Task.CompletedTask;
    }
    
    private void OnThemeChanged(ThemeConfiguration theme)
    {
        InvokeAsync(() =>
        {
            currentTheme = theme;
            StateHasChanged();
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (initializationCompleted || initializationInProgress)
        {
            return;
        }

        initializationInProgress = true;

        var initialized = false;

        try
        {
            await ThemeService.InitializeAsync();

            initialized = ThemeService.IsInitialized;

            if (initialized && InitialTheme != null)
            {
                await ThemeService.SetThemeAsync(InitialTheme);
            }

            currentTheme = ThemeService.CurrentTheme;
            initializationCompleted = initialized;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"RThemeProvider initialization error: {ex.Message}");
            currentTheme = ThemeConfiguration.Default;
            initializationCompleted = true;
        }
        finally
        {
            initializationInProgress = false;
        }

        if (!initializationCompleted)
        {
            await Task.Yield();
            await InvokeAsync(StateHasChanged);
            return;
        }

        await InvokeAsync(StateHasChanged);
    }

    protected override async ValueTask DisposeAsyncCore()
    {
        try
        {

            ThemeService.ThemeChanged -= OnThemeChanged;
            
            if (ThemeService is IAsyncDisposable asyncDisposable)
            {
                await asyncDisposable.DisposeAsync();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"RThemeProvider disposal error: {ex.Message}");
        }
    }
}
