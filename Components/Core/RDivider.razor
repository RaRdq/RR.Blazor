@** 
<summary>
Professional divider component for visual separation with text support and multiple styles.
Supports horizontal/vertical orientation, customizable styling, and automatic menu integration.
</summary>
<category>Core</category>
<complexity>Simple</complexity>
<ai-prompt>Create a professional divider for visual separation</ai-prompt>
<ai-common-use>section separation, menu dividers, form sections, content organization</ai-common-use>
<ai-avoid>Don't overuse - only for logical content separation. Avoid decorative usage.</ai-avoid>
<ai-pattern name="section-divider">Text="Settings" for labeled sections</ai-pattern>
<ai-pattern name="simple-divider">No parameters for basic horizontal line</ai-pattern>
<ai-pattern name="vertical-divider">Variant="DividerVariant.Vertical" for inline separation</ai-pattern>
<ai-pattern name="styled-divider">Style="DividerStyle.Dashed" for different visual styles</ai-pattern>
**@
@using RR.Blazor.Attributes

@attribute [Component("RDivider", Category = "Core", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(Prompt = "Create a professional divider for visual separation", 
                       CommonUse = "section separation, menu dividers, form sections", 
                       AvoidUsage = "Don't overuse - only for logical content separation")]

@if (Variant == DividerVariant.Vertical)
{
    <span class="@GetDividerClasses()" @attributes="AdditionalAttributes">
        @if (!string.IsNullOrEmpty(Text) || ChildContent != null)
        {
            <span class="divider-content">
                @if (!string.IsNullOrEmpty(Text))
                {
                    @Text
                }
                @ChildContent
            </span>
        }
    </span>
}
else
{
    <div class="@GetDividerClasses()" @attributes="AdditionalAttributes">
        @if (!string.IsNullOrEmpty(Text) || ChildContent != null)
        {
            <span class="divider-content">
                @if (!string.IsNullOrEmpty(Text))
                {
                    @Text
                }
                @ChildContent
            </span>
        }
    </div>
}

@code {
    /// <summary>Divider text (optional) - displays label within the divider line</summary>
    /// <ai-hint>Use for section labels like "Settings", "Advanced Options", "OR". Keep short</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Use for section labels like Settings, Advanced Options, OR. Keep short", IsRequired = false)]
    public string Text { get; set; }
    
    /// <summary>Divider variant - orientation of the divider line</summary>
    /// <ai-hint>Horizontal for section breaks, Vertical for inline separation between elements</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Horizontal for section breaks, Vertical for inline separation", 
                 SuggestedValues = new[] { "Horizontal", "Vertical" }, 
                 IsRequired = false)]
    public DividerVariant Variant { get; set; } = DividerVariant.Horizontal;
    
    /// <summary>Divider style - visual appearance of the divider line</summary>
    /// <ai-hint>Solid for standard dividers, Dashed for softer separation, Dotted for subtle breaks</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Solid for standard, Dashed for softer, Dotted for subtle separation", 
                 SuggestedValues = new[] { "Solid", "Dashed", "Dotted" }, 
                 IsRequired = false)]
    public DividerStyle Style { get; set; } = DividerStyle.Solid;
    
    /// <summary>Text alignment for dividers with text content</summary>
    /// <ai-hint>Center for balanced labels, Left for section headers, Right for special cases</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Center for balanced labels, Left for section headers, Right for special cases", 
                 SuggestedValues = new[] { "Left", "Center", "Right" }, 
                 IsRequired = false)]
    public DividerTextAlign TextAlign { get; set; } = DividerTextAlign.Center;
    
    /// <summary>Additional CSS classes</summary>
    [Parameter] public string Class { get; set; }
    
    /// <summary>Child content</summary>
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    /// <summary>Additional HTML attributes</summary>
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> AdditionalAttributes { get; set; }
    
    /// <summary>Parent list variant (cascaded)</summary>
    [CascadingParameter(Name = "ParentListVariant")] private ListVariant? ParentListVariant { get; set; }
    
    private string GetDividerClasses()
    {
        var classes = new List<string>();
        
        // If inside a menu list, use menu-specific divider
        if (ParentListVariant == ListVariant.Menu)
        {
            classes.Add("menu-list-divider");
        }
        else
        {
            // Generic divider classes
            classes.Add("divider");
            
            // Variant
            if (Variant == DividerVariant.Vertical)
            {
                classes.Add("divider-vertical");
            }
            
            // Style
            if (Style != DividerStyle.Solid)
            {
                classes.Add($"divider--{Style.ToString().ToLower()}");
            }
            
            // Text alignment
            if (!string.IsNullOrEmpty(Text) || ChildContent != null)
            {
                classes.Add($"divider-text-{TextAlign.ToString().ToLower()}");
            }
        }
        
        // Custom CSS classes
        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes);
    }
}

