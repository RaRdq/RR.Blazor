@** 
<summary>
Professional card component for content containers with business-grade variants.
Supports header, media, content areas, loading states, elevation effects, and comprehensive interaction patterns.
</summary>
<category>Core</category>
<complexity>Simple</complexity>
<ai-prompt>Create a professional card for content display</ai-prompt>
<ai-common-use>dashboards, data display, content organization, information panels</ai-common-use>
<ai-avoid>Don't use for navigation - use RLink instead. Avoid for simple text without structure.</ai-avoid>
<ai-pattern name="basic-card">Text="Card Title" Content="Card content" for simple content cards</ai-pattern>
<ai-pattern name="clickable-card">Clickable="true" OnClick="HandleClick" for interactive cards</ai-pattern>
<ai-pattern name="elevated-card">Elevation="4" for cards that need prominence</ai-pattern>
<ai-pattern name="loading-card">Loading="true" LoadingText="Processing..." for async operations</ai-pattern>
<ai-pattern name="media-card">ImageSrc="/image.jpg" ImageAlt="Description" for cards with images</ai-pattern>
**@
@using RR.Blazor.Enums
@using RR.Blazor.Attributes

@attribute [Component("RCard", Category = "Core", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(Prompt = "Create a professional card for content display", 
                       CommonUse = "dashboards, data display, content organization", 
                       AvoidUsage = "Don't use for navigation - use RLink instead")]

<div class="card @GetCardClasses()" 
     @onclick="HandleClick"
     @onclick:stopPropagation="StopPropagation"
     @onmouseenter="HandleMouseEnter"
     @onmouseleave="HandleMouseLeave"
     role="@(Clickable ? "button" : null)"
     tabindex="@(Clickable ? 0 : null)"
     aria-label="@AriaLabel">
    
    @* Header *@
    @if (HasHeader)
    {
        <div class="@GetHeaderClasses()">
            @if (!string.IsNullOrEmpty(Icon))
            {
                <i class="material-symbols-rounded mr-3 @GetIconSizeClass()">@Icon</i>
            }
            
            <div class="grow">
                @if (!string.IsNullOrEmpty(Text))
                {
                    <h3 class="@GetTitleClasses()">@Text</h3>
                }
                
                @if (!string.IsNullOrEmpty(Subtitle))
                {
                    <p class="@GetSubtitleClasses()">@Subtitle</p>
                }
            </div>
            
            @HeaderContent
        </div>
    }
    
    @* Media/Image *@
    @if (!string.IsNullOrEmpty(ImageSrc) || MediaContent != null)
    {
        <div class="@GetMediaClasses()">
            @if (!string.IsNullOrEmpty(ImageSrc))
            {
                <img src="@ImageSrc" 
                     alt="@ImageAlt" 
                     class="@GetImageClasses()" 
                     loading="lazy" />
            }
            @MediaContent
        </div>
    }
    
    @* Content *@
    @if (ChildContent != null || !string.IsNullOrEmpty(Content))
    {
        @if (NoPadding && string.IsNullOrEmpty(Content) && string.IsNullOrEmpty(BodyClass))
        {
            @* No wrapper div when NoPadding is true, no Content text, and no custom BodyClass *@
            @ChildContent
        }
        else
        {
            <div class="@GetContentClasses()">
                @if (!string.IsNullOrEmpty(Content))
                {
                    <p class="@GetContentTextClasses()">@Content</p>
                }
                @ChildContent
            </div>
        }
    }
    
    @* Footer *@
    @if (FooterContent != null)
    {
        <div class="@GetFooterClasses()">
            @FooterContent
        </div>
    }
    
    @* Loading Overlay *@
    @if (Loading)
    {
        <div class="@GetLoadingOverlayClasses()">
            <div class="flex items-center justify-center">
                <i class="material-symbols-rounded text-primary animate-spin">progress_activity</i>
                @if (!string.IsNullOrEmpty(LoadingText))
                {
                    <span class="ml-2 text-primary">@LoadingText</span>
                }
            </div>
        </div>
    }
    
    
    @* Ribbon/Badge (Legacy Support) *@
    @if (!string.IsNullOrEmpty(RibbonText))
    {
        <div class="@GetRibbonClasses()">
            @RibbonText
        </div>
    }
</div>

@code {
    /// <summary>Card variant style - determines visual appearance and behavior</summary>
    /// <ai-hint>Default for standard cards, Elevated for prominent cards, Glass for modern overlay effect</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Default for standard cards, Elevated for prominence, Glass for modern overlays", 
                 SuggestedValues = new[] { "Default", "Outlined", "Elevated", "Glass", "Flat" }, 
                 IsRequired = false)]
    public CardVariant Variant { get; set; } = CardVariant.Default;
    
    /// <summary>Card text - main heading displayed in header area</summary>
    /// <ai-hint>Use descriptive text like "User Details", "Order Summary", "Settings"</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Use descriptive text like User Details, Order Summary", IsRequired = false)]
    public string Text { get; set; }
    
    /// <summary>Card subtitle - secondary text displayed below title</summary>
    /// <ai-hint>Use for additional context like dates, categories, or descriptions</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Use for additional context like dates, categories, descriptions", IsRequired = false)]
    public string Subtitle { get; set; }
    
    /// <summary>Card content text - simple text content for the card body</summary>
    /// <ai-hint>Use for simple text content, or use ChildContent for complex layouts</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Use for simple text, or ChildContent for complex layouts", IsRequired = false)]
    public string Content { get; set; }
    
    /// <summary>Material icon name displayed in header area</summary>
    /// <ai-hint>Common icons: dashboard, person, settings, analytics, payment, work</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Common icons: dashboard, person, settings, analytics, payment", 
                 SuggestedValues = new[] { "dashboard", "person", "settings", "analytics", "payment", "work" })]
    public string Icon { get; set; }
    
    /// <summary>Image source URL for media content</summary>
    /// <ai-hint>Use for hero images, thumbnails, or visual content in cards</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Use for hero images, thumbnails, or visual content", IsRequired = false)]
    public string ImageSrc { get; set; }
    
    /// <summary>Image alt text</summary>
    [Parameter] public string ImageAlt { get; set; }
    
    /// <summary>Whether card is clickable - adds hover effects and cursor pointer</summary>
    /// <ai-hint>Set to true for interactive cards that perform actions when clicked</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Set to true for interactive cards that perform actions")]
    public bool Clickable { get; set; }
    
    /// <summary>Whether card is in loading state - shows overlay with spinner</summary>
    /// <ai-hint>Use during async operations to indicate processing state</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Use during async operations to show processing state")]
    public bool Loading { get; set; }
    
    /// <summary>Loading text to display</summary>
    [Parameter] public string LoadingText { get; set; }
    
    /// <summary>Whether card is selected/active</summary>
    [Parameter] public bool Selected { get; set; }
    
    /// <summary>Whether card is disabled</summary>
    [Parameter] public bool Disabled { get; set; }
    
    /// <summary>Ribbon/badge text</summary>
    [Parameter] public string RibbonText { get; set; }
    
    /// <summary>Ribbon variant</summary>
    [Parameter] public RibbonVariant RibbonVariant { get; set; } = RibbonVariant.Primary;
    
    /// <summary>Whether to remove padding from content</summary>
    [Parameter] public bool NoPadding { get; set; }
    
    /// <summary>Whether image should be full bleed</summary>
    [Parameter] public bool FullBleedImage { get; set; }
    
    /// <summary>Additional CSS classes</summary>
    [Parameter] public string Class { get; set; }
    
    /// <summary>CSS classes for the card body/content wrapper - provides full control over content area styling</summary>
    /// <ai-hint>Use to customize padding, layout, spacing of the card content area. Overrides default padding when specified.</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Customize content area styling - padding, layout, spacing. Overrides defaults.", IsRequired = false)]
    public string BodyClass { get; set; }
    
    /// <summary>Main content</summary>
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    /// <summary>Header content area</summary>
    [Parameter] public RenderFragment HeaderContent { get; set; }
    
    
    /// <summary>Media content area</summary>
    [Parameter] public RenderFragment MediaContent { get; set; }
    
    /// <summary>Footer content area</summary>
    [Parameter] public RenderFragment FooterContent { get; set; }
    
    
    /// <summary>Click event handler</summary>
    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
    
    /// <summary>Mouse enter event handler</summary>
    [Parameter] public EventCallback<MouseEventArgs> OnMouseEnter { get; set; }
    
    /// <summary>Mouse leave event handler</summary>
    [Parameter] public EventCallback<MouseEventArgs> OnMouseLeave { get; set; }
    
    /// <summary>Stop click propagation</summary>
    [Parameter] public bool StopPropagation { get; set; }
    
    /// <summary>Accessibility label</summary>
    [Parameter] public string AriaLabel { get; set; }
    
    /// <summary>Elevation level (0-24) - controls shadow depth and prominence</summary>
    /// <ai-hint>Use 0 for flat, 2-4 for standard, 8+ for prominent cards. -1 uses variant default</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Use 0 for flat, 2-4 for standard, 8+ for prominent. -1 uses variant default", 
                 SuggestedValues = new[] { "0", "2", "4", "8", "16" })]
    public int Elevation { get; set; } = -1;
    
    /// <summary>Component density level for ultra-dense layouts</summary>
    /// <ai-hint>Normal is default, Compact for ultra-dense, Dense for data-heavy interfaces</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Normal is default, Compact for ultra-dense, Dense for data-heavy", 
                 SuggestedValues = new[] { "Normal", "Dense", "Compact", "Spacious" })]
    public ComponentDensity Density { get; set; } = ComponentDensity.Normal;
    
    
    
    
    
    private bool HasHeader => !string.IsNullOrEmpty(Text) || HeaderContent != null;
    
    private string GetCardClasses()
    {
        var classes = new List<string>
        {
            "relative",
            "bg-surface-elevated",
            "border",
            "rounded-lg",
            "overflow-hidden",
            "transition"
        };
        
        // Elevation-based shadow (overrides variant shadows if specified)
        if (Elevation >= 0)
        {
            classes.Add($"elevation-{Math.Min(24, Math.Max(0, Elevation))}");
        }
        else
        {
            // Default variant styles when elevation not specified
            switch (Variant)
            {
                case CardVariant.Default:
                    classes.AddRange(new[] { "border-light", "shadow-sm" });
                    break;
                    
                case CardVariant.Outlined:
                    classes.AddRange(new[] { "border-light", "shadow-none" });
                    break;
                    
                case CardVariant.Elevated:
                    classes.AddRange(new[] { "border-light", "shadow-lg" });
                    break;
                    
                case CardVariant.Glass:
                    classes.AddRange(new[] { "border-light", "backdrop-blur-sm", "bg-overlay" });
                    break;
                    
                case CardVariant.Flat:
                    classes.AddRange(new[] { "border-none", "shadow-none" });
                    break;
            }
        }
        
        // Interactive states
        if (Clickable && !Disabled)
        {
            if (Elevation >= 0)
            {
                // Elevation-based hover effect
                var hoverElevation = Math.Min(24, Elevation + 2);
                classes.AddRange(new[] { "cursor-pointer", $"hover:elevation-{hoverElevation}", "hover:-translate-y-1" });
            }
            else
            {
                classes.AddRange(new[] { "cursor-pointer", "hover:shadow-md", "hover:-translate-y-1" });
            }
        }
        
        
        if (Selected)
        {
            classes.AddRange(new[] { "border-primary", "shadow-primary" });
        }
        
        if (Disabled)
        {
            classes.AddRange(new[] { "opacity-50", "cursor-not-allowed" });
        }
        
        if (Loading)
        {
            classes.Add("card-loading");
        }
        
        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetHeaderClasses()
    {
        var classes = new List<string>
        {
            "d-flex",
            "items-center",
            "justify-between",
            "border-b",
            "border-light"
        };
        
        // Add density-aware padding
        classes.Add(GetDensityPaddingClasses());
        
        return string.Join(" ", classes);
    }
    
    private string GetTitleSectionClasses()
    {
        return "flex items-center grow";
    }
    
    private string GetTitleClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "text-base font-semibold text-primary mb-0",
            ComponentDensity.Dense => "text-lg font-semibold text-primary mb-0",
            ComponentDensity.Normal => "text-lg font-semibold text-primary mb-0",
            ComponentDensity.Spacious => "text-xl font-semibold text-primary mb-0",
            _ => "text-lg font-semibold text-primary mb-0"
        };
    }
    
    private string GetSubtitleClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "text-xs text-secondary mt-0 mb-0",
            ComponentDensity.Dense => "text-sm text-secondary mt-0 mb-0",
            ComponentDensity.Normal => "text-sm text-secondary mt-1 mb-0",
            ComponentDensity.Spacious => "text-base text-secondary mt-2 mb-0",
            _ => "text-sm text-secondary mt-1 mb-0"
        };
    }
    
    
    private string GetMediaClasses()
    {
        var classes = new List<string>();
        
        if (FullBleedImage)
        {
            classes.Add("ml-0 mr-0");
        }
        else
        {
            classes.Add("ml-4 mr-4 mt-4");
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetImageClasses()
    {
        var classes = new List<string> { "w-full", "h-auto" };
        
        if (!FullBleedImage)
        {
            classes.Add("rounded-md");
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetContentClasses()
    {
        // If BodyClass is provided, use it as the complete class set for full user control
        if (!string.IsNullOrEmpty(BodyClass))
        {
            return BodyClass;
        }
        
        var classes = new List<string>();
        
        // Apply default density padding when no custom BodyClass is specified
        if (!NoPadding)
        {
            classes.Add(GetDensityPaddingClasses());
        }
        
        if (HasHeader && !FullBleedImage)
        {
            classes.Add("pt-0");
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetContentTextClasses()
    {
        return "text-base text-primary mb-0";
    }
    
    private string GetFooterClasses()
    {
        return $"{GetDensityPaddingClasses()} pt-0 border-t border-light {GetDensityMarginClasses()}";
    }
    
    private string GetDensityPaddingClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "pa-2",
            ComponentDensity.Dense => "pa-3",
            ComponentDensity.Normal => "pa-4",
            ComponentDensity.Spacious => "pa-6",
            _ => "pa-4"
        };
    }
    
    private string GetDensityMarginClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "mt-2",
            ComponentDensity.Dense => "mt-3",
            ComponentDensity.Normal => "mt-4",
            ComponentDensity.Spacious => "mt-6",
            _ => "mt-4"
        };
    }
    
    
    private string GetLoadingOverlayClasses()
    {
        return "absolute inset-0 bg-overlay flex items-center justify-center z-10";
    }
    
    private string GetRibbonClasses()
    {
        var classes = new List<string>
        {
            "absolute",
            "top-3",
            "right-3",
            "pl-2 pr-2",
            "pt-1 pb-1",
            "text-xs",
            "font-medium",
            "rounded-full",
            "z-10"
        };
        
        classes.Add(RibbonVariant switch
        {
            RibbonVariant.Success => "bg-success text-inverse",
            RibbonVariant.Warning => "bg-warning text-inverse",
            RibbonVariant.Error => "bg-error-light text-inverse",
            RibbonVariant.Info => "bg-info text-inverse",
            _ => "bg-primary text-inverse"
        });
        
        return string.Join(" ", classes);
    }
    
    private string GetIconSizeClass()
    {
        return "text-lg";
    }
    
    
    private async Task HandleClick(MouseEventArgs e)
    {
        if (Clickable && !Disabled && !Loading)
        {
            await OnClick.InvokeAsync(e);
        }
    }
    
    private async Task HandleMouseEnter(MouseEventArgs e)
    {
        await OnMouseEnter.InvokeAsync(e);
    }
    
    private async Task HandleMouseLeave(MouseEventArgs e)
    {
        await OnMouseLeave.InvokeAsync(e);
    }
}