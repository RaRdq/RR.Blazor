@using RR.Blazor.Enums
@using RR.Blazor.Attributes
@using RR.Blazor.Components.Base
@using RR.Blazor.Utilities
@inherits RComponentBase

@attribute [Component("RCard", Category = "Core", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(Prompt = "Create card for content display", 
                       CommonUse = "dashboards, data display, content organization", 
                       AvoidUsage = "Don't use for navigation - use RLink instead")]

<div class="@GetCardClasses()" 
     @onclick="@(Clickable || OnClick.HasDelegate ? HandleClick : null)"
     @onclick:stopPropagation="StopPropagation"
     @onmouseenter="@(OnMouseEnter.HasDelegate ? HandleMouseEnter : null)"
     @onmouseleave="@(OnMouseLeave.HasDelegate ? HandleMouseLeave : null)"
     role="@(Clickable ? "button" : null)"
     tabindex="@(Clickable ? 0 : null)"
     aria-label="@AriaLabel">
    
    @if (HasHeader)
    {
        <div class="@GetHeaderClasses()">
            @if (!string.IsNullOrEmpty(Icon))
            {
                <i class="icon mr-3 @GetIconSizeClass() icon-dynamic">@Icon</i>
            }
            
            <div class="grow">
                @if (!string.IsNullOrEmpty(Text))
                {
                    <h3 class="@GetTitleClasses()">@Text</h3>
                }
                
                @if (!string.IsNullOrEmpty(Subtitle))
                {
                    <p class="@GetSubtitleClasses()">@Subtitle</p>
                }
            </div>
            
            @HeaderContent
        </div>
    }
    
    @if (!string.IsNullOrEmpty(ImageSrc) || MediaContent != null)
    {
        <div class="@GetMediaClasses()">
            @if (!string.IsNullOrEmpty(ImageSrc))
            {
                <img src="@ImageSrc" 
                     alt="@ImageAlt" 
                     class="@GetImageClasses()" 
                     loading="lazy" />
            }
            @MediaContent
        </div>
    }
    
    @if (ChildContent != null || !string.IsNullOrEmpty(Content))
    {
        @if (NoPadding && string.IsNullOrEmpty(Content) && string.IsNullOrEmpty(BodyClass))
        {
            @ChildContent
        }
        else
        {
            <div class="@GetContentClasses()">
                @if (!string.IsNullOrEmpty(Content))
                {
                    <p class="@GetContentTextClasses()">@Content</p>
                }
                @ChildContent
            </div>
        }
    }
    
    @if (FooterContent != null)
    {
        <div class="@GetFooterClasses()">
            @FooterContent
        </div>
    }
    
    @if (Loading)
    {
        <div class="@GetLoadingOverlayClasses()">
            @if (!string.IsNullOrEmpty(LoadingText))
            {
                <span class="loading-text">@LoadingText</span>
            }
        </div>
    }
    
    
    @if (!string.IsNullOrEmpty(RibbonText))
    {
        <div class="@GetRibbonClasses()">
            @RibbonText
        </div>
    }
</div>

@code {
    [Parameter]
    [AIParameter(Hint = "Default for standard, Elevated for prominence, Glass for overlays, Gradient for hero sections, GlassGradient for premium features", 
                 SuggestedValues = new[] { "Default", "Outlined", "Elevated", "Glass", "Flat", "Gradient", "GlassGradient" }, 
                 IsRequired = false)]
    public CardVariant Variant { get; set; } = CardVariant.Default;
    
    [Parameter]
    [AIParameter(Hint = "Card title text", IsRequired = false)]
    public string Text { get; set; }
    
    [Parameter]
    [AIParameter(Hint = "Secondary text below title", IsRequired = false)]
    public string Subtitle { get; set; }
    
    [Parameter]
    [AIParameter(Hint = "Simple text content", IsRequired = false)]
    public string Content { get; set; }
    
    [Parameter]
    [AIParameter(Hint = "Icon name", 
                 SuggestedValues = new[] { "dashboard", "person", "settings", "analytics", "payment", "work" })]
    public string Icon { get; set; }
    
    [Parameter]
    [AIParameter(Hint = "Use for hero images, thumbnails, or visual content", IsRequired = false)]
    public string ImageSrc { get; set; }
    
    [Parameter] public string ImageAlt { get; set; }
    
    [Parameter]
    [AIParameter(Hint = "Set to true for interactive cards that perform actions")]
    public bool Clickable { get; set; }
    
    [Parameter]
    [AIParameter(Hint = "Use during async operations to show processing state")]
    public bool Loading { get; set; }
    
    [Parameter] public string LoadingText { get; set; }
    
    [Parameter] public bool Selected { get; set; }
    
    
    [Parameter] public string RibbonText { get; set; }
    
    [Parameter] public RibbonVariant RibbonVariant { get; set; } = RibbonVariant.Primary;
    
    [Parameter] public bool NoPadding { get; set; }
    
    [Parameter] public bool FullBleedImage { get; set; }
    
    
    [Parameter]
    [AIParameter(Hint = "Customize content area styling - padding, layout, spacing. Overrides defaults.", IsRequired = false)]
    public string BodyClass { get; set; }
    
    
    [Parameter] public RenderFragment HeaderContent { get; set; }
    
    
    [Parameter] public RenderFragment MediaContent { get; set; }
    
    [Parameter] public RenderFragment FooterContent { get; set; }
    
    
    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
    
    [Parameter] public EventCallback<MouseEventArgs> OnMouseEnter { get; set; }
    
    [Parameter] public EventCallback<MouseEventArgs> OnMouseLeave { get; set; }
    
    [Parameter] public bool StopPropagation { get; set; }
    
    [Parameter] public string AriaLabel { get; set; }
    
    
    
    
    
    
    
    private bool HasHeader => !string.IsNullOrEmpty(Text) || HeaderContent != null;
    
    private string GetCardClasses()
    {
        var classes = new List<string> { "card" };
        
        if (Variant != CardVariant.Default)
        {
            classes.Add(Variant switch
            {
                CardVariant.Outlined => "card-outlined",
                CardVariant.Elevated => "card-elevated",
                CardVariant.Glass => "card-glass",
                CardVariant.Flat => "card-flat",
                CardVariant.Gradient => "card-gradient",
                CardVariant.GlassGradient => "card-glass-gradient",
                _ => ""
            });
        }
        
        // Always add density class to ensure proper spacing
        classes.Add($"card-density-{Density.ToString().ToLower()}");
        
        if (Clickable && !Disabled) classes.Add("card-clickable");
        if (Selected) classes.Add("card-primary");
        if (Disabled) classes.Add("state-disabled");
        if (Loading) classes.Add("card-loading");
        
        
        if (!string.IsNullOrEmpty(Class)) classes.Add(Class);
        
        return string.Join(" ", classes);
    }
    
    private string GetHeaderClasses()
    {
        var classes = new List<string> { "card-header" };
        return string.Join(" ", classes);
    }
    
    private string GetTitleSectionClasses()
    {
        return "flex items-center grow";
    }
    
    private string GetTitleClasses()
    {
        var classes = new List<string> { "card-title" };
        
        var textSize = SizeHelper.GetTextSize(SizeType.Large, Density);
        classes.Add(textSize);
        
        return string.Join(" ", classes);
    }
    
    private string GetSubtitleClasses()
    {
        var classes = new List<string> { "text-secondary", "mb-0" };
        
        var textSize = SizeHelper.GetTextSize(SizeType.Small, Density);
        var margin = DensityHelper.GetMargin(Density, "1");
        var marginClass = $"mt-{margin}";
        
        classes.Add(textSize);
        classes.Add(marginClass);
        
        return string.Join(" ", classes);
    }
    
    
    private string GetMediaClasses()
    {
        var classes = new List<string>();
        
        classes.Add(FullBleedImage ? "ml-0 mr-0" : "ml-4 mr-4 mt-4");
        
        return string.Join(" ", classes);
    }
    
    private string GetImageClasses()
    {
        var classes = new List<string> { "w-full", "h-auto" };
        
        if (!FullBleedImage) classes.Add("rounded-md");
        
        return string.Join(" ", classes);
    }
    
    private string GetContentClasses()
    {
        if (!string.IsNullOrEmpty(BodyClass)) return BodyClass;
        
        var classes = new List<string> { "card-body" };
        
        return string.Join(" ", classes);
    }
    
    private string GetContentTextClasses()
    {
        var textSize = SizeHelper.GetTextSize(SizeType.Medium, Density);
        return $"{textSize} text-primary mb-0";
    }
    
    private string GetFooterClasses()
    {
        var classes = new List<string> { "card-actions" };
        return string.Join(" ", classes);
    }
    
    
    
    private string GetLoadingOverlayClasses()
    {
        return "card-loading";
    }
    
    private string GetRibbonClasses()
    {
        var classes = new List<string>
        {
            "absolute",
            "top-3",
            "right-3",
            "pl-2 pr-2",
            "pt-1 pb-1",
            "text-xs",
            "font-medium",
            "rounded-full",
            "z-10"
        };
        
        classes.Add(RibbonVariant switch
        {
            RibbonVariant.Success => "bg-success text-inverse",
            RibbonVariant.Warning => "bg-warning text-inverse",
            RibbonVariant.Error => "bg-error-light text-inverse",
            RibbonVariant.Info => "bg-info text-inverse",
            _ => "bg-primary text-inverse"
        });
        
        return string.Join(" ", classes);
    }
    
    private string GetIconSizeClass()
    {
        return SizeHelper.GetIconSize(SizeType.Medium, Density);
    }
    
    
    private async Task HandleClick(MouseEventArgs e)
    {
        if (Clickable && !Disabled && !Loading) await OnClick.InvokeAsync(e);
    }
    
    private async Task HandleMouseEnter(MouseEventArgs e)
    {
        await OnMouseEnter.InvokeAsync(e);
    }
    
    private async Task HandleMouseLeave(MouseEventArgs e)
    {
        await OnMouseLeave.InvokeAsync(e);
    }
}
