@** 
<summary>
Chip component for tags, badges, and status indicators with style variants.
</summary>
<category>Core</category>
<complexity>Simple</complexity>
<ai-prompt>Create a chip for badges, status, tags, or filters</ai-prompt>
<ai-common-use>status indicators, counts, labels, notifications, tags, filters, removable selections</ai-common-use>
<ai-avoid>Don't use for navigation buttons - use RButton instead. Avoid for large text content.</ai-avoid>
<ai-pattern name="status-chip">Text="Active" Style="ChipStyle.Status" Variant="ChipVariant.Success"</ai-pattern>
<ai-pattern name="count-badge">Text="5" Style="ChipStyle.Badge" Variant="ChipVariant.Primary"</ai-pattern>
<ai-pattern name="removable-tag">Text="Filter" Style="ChipStyle.Chip" Closeable="true"</ai-pattern>
<ai-pattern name="clickable-chip">Text="Category" Clickable="true"</ai-pattern>
**@
@namespace RR.Blazor.Components
@using RR.Blazor.Enums
@using RR.Blazor.Attributes
@using RR.Blazor.Components.Base
@inherits RForwardingComponentBase

@attribute [Component("RChip", Category = "Core", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(Prompt = "Create a chip for badges, status, tags, or filters", 
                       CommonUse = "status indicators, counts, labels, notifications, tags, filters", 
                       AvoidUsage = "Don't use for navigation - use RButton instead")]

<span class="@GetChipClasses()" 
      @onclick="HandleClick" 
      @attributes="GetForwardedAttributes()">
    
    @if (!string.IsNullOrEmpty(Icon))
    {
        <i class="material-symbols-rounded chip-icon">@Icon</i>
    }
    
    @if (!string.IsNullOrEmpty(Text))
    {
        <span class="chip-text">@Text</span>
    }
    
    @if (ChildContent != null)
    {
        @ChildContent
    }
    
    @if (Closeable)
    {
        <button class="chip-close" 
                @onclick="HandleClose" 
                @onclick:stopPropagation="true" 
                aria-label="@($"Remove {Text}")">
            <i class="material-symbols-rounded">close</i>
        </button>
    }
    
    @if (ShouldShowPulse())
    {
        <span class="chip-pulse"></span>
    }
</span>

@code {
    /// <summary>Chip style - determines the primary visual approach and behavior</summary>
    /// <ai-hint>Badge for counts/notifications, Chip for tags/filters, Status for state indicators</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Badge for counts, Chip for tags/filters, Status for state indicators", 
                 SuggestedValues = new[] { "Badge", "Chip", "Status" })]
    public ChipStyle Style { get; set; } = ChipStyle.Chip;
    
    /// <summary>Color/semantic variant - determines color scheme and meaning</summary>
    /// <ai-hint>Primary for emphasis, Success for positive, Warning for attention, Error for problems</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Primary for emphasis, Success for positive, Warning for attention, Error for problems", 
                 SuggestedValues = new[] { "Primary", "Secondary", "Success", "Warning", "Error", "Info" })]
    public VariantType Variant { get; set; } = VariantType.Secondary;
    
    /// <summary>Chip text content</summary>
    /// <ai-hint>Keep short: "Active", "5", "New", "Pending", "JavaScript". Use 1-20 characters max</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Keep short: Active, 5, New, Pending. Use 1-20 characters max")]
    public string Text { get; set; } = "";
    
    /// <summary>Material icon name to display</summary>
    /// <ai-hint>Common icons: check_circle, warning, error, info, star, notifications, close</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Common icons: check_circle, warning, error, info, star, notifications", 
                 SuggestedValues = new[] { "check_circle", "warning", "error", "info", "star", "notifications" })]
    public string Icon { get; set; } = "";
    
    /// <summary>Size variant</summary>
    /// <ai-hint>Small for compact, Medium for standard, Large for prominence</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Small for compact, Medium for standard, Large for prominence", 
                 SuggestedValues = new[] { "Small", "Medium", "Large" })]
    public SizeType Size { get; set; } = SizeType.Medium;
    
    /// <summary>Density level for ultra-compact layouts</summary>
    /// <ai-hint>Normal is default, Compact for ultra-dense, Dense for data-heavy</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Normal is default, Compact for ultra-dense, Dense for data-heavy", 
                 SuggestedValues = new[] { "Normal", "Dense", "Compact", "Spacious" })]
    public DensityType Density { get; set; } = DensityType.Normal;
    
    /// <summary>Whether chip is clickable</summary>
    /// <ai-hint>Set to true for interactive chips that perform actions when clicked</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Set to true for interactive chips that perform actions")]
    public bool Clickable { get; set; }
    
    /// <summary>Whether chip can be closed/removed</summary>
    /// <ai-hint>Set to true for removable tags and filter chips</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Set to true for removable tags and filter chips")]
    public bool Closeable { get; set; }
    
    [Parameter] public bool Selected { get; set; }
    
    [Parameter] public bool Disabled { get; set; }
    
    /// <summary>Whether to show pulse animation for processing states</summary>
    /// <ai-hint>Automatically enabled for Processing variant when Style is Status</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Shows pulse animation for processing/loading states")]
    public bool ShowPulse { get; set; }
    
    [Parameter] public EventCallback OnClick { get; set; }
    
    [Parameter] public EventCallback OnClose { get; set; }
    
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    [Parameter] public string Class { get; set; } = "";

    private string GetChipClasses()
    {
        var classes = new List<string>();
        
        var baseClass = Style switch
        {
            ChipStyle.Badge => "chip chip-badge",
            ChipStyle.Status => "chip chip-status", 
            ChipStyle.Chip => "chip",
            _ => "chip"
        };
        classes.Add(baseClass);
        
        classes.Add($"chip-{Variant.ToString().ToLower()}");
        if (ShouldShowPulse()) classes.Add("chip-pulsing");
        if (Size != SizeType.Medium) classes.Add($"chip-{Size.ToString().ToLower()}");
        if (Density != DensityType.Normal) classes.Add($"chip-{Density.ToString().ToLower()}");
        if (Clickable && !Disabled) classes.Add("chip-clickable");
        if (Selected) classes.Add("chip-selected");
        if (Closeable) classes.Add("chip-closeable");
        if (Disabled) classes.Add("chip-disabled");
        
        if (!string.IsNullOrEmpty(Class)) classes.Add(Class);
        
        return string.Join(" ", classes);
    }
    

    private async Task HandleClick()
    {
        if (Clickable && !Disabled && OnClick.HasDelegate) await OnClick.InvokeAsync();
    }

    private async Task HandleClose()
    {
        if (!Disabled && OnClose.HasDelegate) await OnClose.InvokeAsync();
    }

    private Dictionary<string, object> GetForwardedAttributes()
    {
        var excludeProperties = new HashSet<string> 
        { 
            nameof(Style), nameof(Variant), nameof(Text), nameof(Icon), nameof(Size), 
            nameof(Density), nameof(Clickable), nameof(Closeable), nameof(Selected), 
            nameof(Disabled), nameof(ShowPulse), nameof(OnClick), nameof(OnClose), nameof(ChildContent), nameof(Class) 
        };

        return GetType().GetProperties()
            .Where(p => p.GetCustomAttributes(typeof(ParameterAttribute), true).Any() 
                       && !excludeProperties.Contains(p.Name))
            .Where(p => p.GetValue(this) != null || p.PropertyType.IsValueType)
            .ToDictionary(p => p.Name, p => p.GetValue(this));
    }

    private bool ShouldShowPulse()
    {
        return (Style == ChipStyle.Status && Variant == VariantType.Warning) || ShowPulse;
    }
}