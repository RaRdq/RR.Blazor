@** 
<summary>
Professional avatar component for user representation with status indicators and interactive features.
Supports images, initials, icons, status badges, and notification counts with responsive sizing.
</summary>
<category>Core</category>
<complexity>Simple</complexity>
<ai-prompt>Create a professional avatar for user representation</ai-prompt>
<ai-common-use>user profiles, team members, contact lists, navigation headers</ai-common-use>
<ai-avoid>Don't use for decorative icons - use Icon component instead. Avoid for non-user content.</ai-avoid>
<ai-pattern name="user-avatar">ImageSrc="/avatar.jpg" Alt="User Name" for profile pictures</ai-pattern>
<ai-pattern name="initials-avatar">Text="JD" Variant="AvatarVariant.Primary" for text-based avatars</ai-pattern>
<ai-pattern name="status-avatar">ShowStatus="true" Status="AvatarStatus.Online" for presence indicators</ai-pattern>
<ai-pattern name="notification-avatar">ShowBadge="true" BadgeCount="3" for unread counts</ai-pattern>
<ai-pattern name="clickable-avatar">IsClickable="true" OnClick="HandleClick" for interactive avatars</ai-pattern>
**@
@using RR.Blazor.Attributes

@attribute [Component("RAvatar", Category = "Core", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(Prompt = "Create a professional avatar for user representation", 
                       CommonUse = "user profiles, team members, contact lists", 
                       AvoidUsage = "Don't use for decorative icons - use Icon component instead")]

<div class="avatar @GetAvatarClasses()" @onclick="HandleClick" role="@(IsClickable ? "button" : null)">
    @if (!string.IsNullOrEmpty(ImageSrc))
    {
        <img src="@ImageSrc" 
             alt="@Alt" 
             class="avatar-image @GetImageClasses()" 
             loading="lazy" />
    }
    else if (!string.IsNullOrEmpty(Icon))
    {
        <i class="material-symbols-rounded @GetIconClasses()">@Icon</i>
    }
    else if (!string.IsNullOrEmpty(Text))
    {
        <span class="avatar-text @GetTextClasses()">@Text</span>
    }
    else
    {
        <i class="material-symbols-rounded @GetIconClasses()">person</i>
    }
    
    @* Status indicator *@
    @if (ShowStatus)
    {
        <div class="avatar-status @GetStatusClasses()"></div>
    }
    
    @* Badge/Count indicator *@
    @if (ShowBadge && BadgeCount > 0)
    {
        <div class="avatar-badge @GetBadgeClasses()">
            @(BadgeCount > 99 ? "99+" : BadgeCount.ToString())
        </div>
    }
</div>

@code {
    /// <summary>Avatar size variant - determines dimensions and icon/text sizing</summary>
    /// <ai-hint>Medium is default, Large for prominent display, Small for compact layouts</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Medium is default, Large for prominent display, Small for compact layouts", 
                 SuggestedValues = new[] { "ExtraSmall", "Small", "Medium", "Large", "ExtraLarge" })]
    public AvatarSize Size { get; set; } = AvatarSize.Medium;
    
    /// <summary>Avatar variant style - determines color scheme and background</summary>
    /// <ai-hint>Default for neutral, Primary for branded, Success/Warning/Error for status-based styling</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Default for neutral, Primary for branded, Success/Warning/Error for status", 
                 SuggestedValues = new[] { "Default", "Primary", "Success", "Warning", "Error", "Gradient" }, 
                 IsRequired = false)]
    public AvatarVariant Variant { get; set; } = AvatarVariant.Default;
    
    /// <summary>Image source URL for profile picture</summary>
    /// <ai-hint>Use high-quality square images for best results. Falls back to text/icon if not provided</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Use high-quality square images. Falls back to text/icon if not provided", IsRequired = false)]
    public string ImageSrc { get; set; }
    
    /// <summary>Image alt text for accessibility</summary>
    /// <ai-hint>Use descriptive text like "John Doe's profile picture" for screen readers</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Use descriptive text like 'John Doe profile picture' for screen readers", IsRequired = false)]
    public string Alt { get; set; }
    
    /// <summary>Text content (typically initials) when no image is available</summary>
    /// <ai-hint>Use 1-2 character initials like "JD", "AB". Automatically uppercase</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Use 1-2 character initials like JD, AB. Automatically uppercase", IsRequired = false)]
    public string Text { get; set; }
    
    /// <summary>Material icon name as fallback when no image or text provided</summary>
    /// <ai-hint>Common icons: person, account_circle, face, group. Defaults to "person"</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Common icons: person, account_circle, face, group. Defaults to person", 
                 SuggestedValues = new[] { "person", "account_circle", "face", "group" })]
    public string Icon { get; set; }
    
    /// <summary>Whether to show status indicator dot</summary>
    /// <ai-hint>Use for presence indicators in chat, team lists, or user directories</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Use for presence indicators in chat, team lists, user directories")]
    public bool ShowStatus { get; set; }
    
    /// <summary>Status state for presence indicator</summary>
    /// <ai-hint>Online for active users, Away for inactive, Busy for do-not-disturb, Offline for unavailable</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Online for active, Away for inactive, Busy for do-not-disturb, Offline for unavailable", 
                 SuggestedValues = new[] { "Online", "Away", "Busy", "Offline" })]
    public AvatarStatus Status { get; set; } = AvatarStatus.None;
    
    /// <summary>Whether to show notification badge with count</summary>
    /// <ai-hint>Use for unread message counts, notification indicators, or pending items</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Use for unread message counts, notification indicators, pending items")]
    public bool ShowBadge { get; set; }
    
    /// <summary>Badge count number displayed in notification badge</summary>
    /// <ai-hint>Shows actual count, displays "99+" for values over 99</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Shows actual count, displays 99+ for values over 99")]
    public int BadgeCount { get; set; }
    
    /// <summary>Whether avatar is clickable - adds hover effects and cursor pointer</summary>
    /// <ai-hint>Set to true for interactive avatars that open profiles, menus, or perform actions</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Set to true for interactive avatars that open profiles or menus")]
    public bool IsClickable { get; set; }
    
    /// <summary>Additional CSS classes</summary>
    [Parameter] public string Class { get; set; }
    
    /// <summary>Click event handler</summary>
    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
    
    private string GetAvatarClasses()
    {
        var classes = new List<string> { "avatar" };
        
        // Size utility classes
        classes.Add(Size switch
        {
            AvatarSize.ExtraSmall => "avatar-xs",
            AvatarSize.Small => "avatar-sm",
            AvatarSize.Medium => "avatar-md",
            AvatarSize.Large => "avatar-lg",
            AvatarSize.ExtraLarge => "avatar-xl",
            _ => "avatar-md"
        });
        
        // Variant utility classes
        classes.Add(Variant switch
        {
            AvatarVariant.Default => "avatar-default",
            AvatarVariant.Primary => "avatar-primary",
            AvatarVariant.Success => "avatar-success",
            AvatarVariant.Warning => "avatar-warning",
            AvatarVariant.Error => "avatar-error",
            AvatarVariant.Gradient => "avatar-primary",
            _ => "avatar-default"
        });
        
        // Interactive utility classes
        if (IsClickable)
        {
            classes.Add("cursor-pointer hover-scale-sm transition-transform");
        }
        
        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetImageClasses()
    {
        return "avatar-image w-full h-full object-cover rounded-full";
    }
    
    private string GetIconClasses()
    {
        var iconSizeClass = Size switch
        {
            AvatarSize.ExtraSmall => "text-xs",
            AvatarSize.Small => "text-sm",
            AvatarSize.Medium => "text-lg",
            AvatarSize.Large => "text-2xl",
            AvatarSize.ExtraLarge => "text-3xl",
            _ => "text-lg"
        };
        
        return $"material-symbols-rounded {iconSizeClass} text-center";
    }
    
    private string GetTextClasses()
    {
        var textSizeClass = Size switch
        {
            AvatarSize.ExtraSmall => "text-2xs",
            AvatarSize.Small => "text-xs",
            AvatarSize.Medium => "text-sm",
            AvatarSize.Large => "text-base",
            AvatarSize.ExtraLarge => "text-lg",
            _ => "text-sm"
        };
        
        return $"avatar-text font-bold text-transform-uppercase {textSizeClass} text-center";
    }
    
    private string GetStatusClasses()
    {
        var statusClass = Status switch
        {
            AvatarStatus.Online => "avatar-status-online bg-success",
            AvatarStatus.Away => "avatar-status-away bg-warning",
            AvatarStatus.Busy => "avatar-status-away bg-warning",
            AvatarStatus.Offline => "avatar-status-offline bg-error",
            _ => "avatar-status-offline bg-error"
        };
        
        return $"avatar-status absolute bottom-0 right-0 w-3 h-3 rounded-full border-2 border-surface {statusClass}";
    }
    
    private string GetBadgeClasses()
    {
        var badgeSizeClass = Size switch
        {
            AvatarSize.ExtraSmall => "text-2xs min-w-4 h-4",
            AvatarSize.Small => "text-xs min-w-5 h-5",
            AvatarSize.Medium => "text-xs min-w-6 h-6",
            AvatarSize.Large => "text-sm min-w-7 h-7",
            AvatarSize.ExtraLarge => "text-sm min-w-8 h-8",
            _ => "text-xs min-w-6 h-6"
        };
        
        return $"avatar-badge absolute -top-1 -right-1 bg-error text-on-error rounded-full {badgeSizeClass} d-flex align-center justify-center font-bold";
    }
    
    private async Task HandleClick(MouseEventArgs e)
    {
        if (IsClickable)
        {
            await OnClick.InvokeAsync(e);
        }
    }
}

