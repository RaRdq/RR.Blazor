@using RR.Blazor.Enums
@using Microsoft.JSInterop
@using RR.Blazor.Components.Base
@inherits RInteractiveComponentBase

<RModal Visible="@Visible" 
        VisibleChanged="@VisibleChanged"
        Title="@Title" 
        Subtitle="@Subtitle"
        Icon="@Icon"
        Size="@Size"
        Variant="@Variant"
        Density="@Density"
        OnClose="@OnClose"
        OnCancel="@OnCancel"
        OnPrimaryAction="@OnPrimaryAction"
        PrimaryText="@PrimaryText"
        CancelText="@CancelText"
        PrimaryButtonDisabled="@PrimaryButtonDisabled"
        ShowPrimaryButton="@ShowPrimaryButton"
        ShowCancelButton="@ShowCancelButton"
        ShowHeader="@ShowHeader"
        ShowFooter="@ShowFooter"
        Loading="@Processing"
        LoadingMessage="@ProcessingMessage"
        CloseOnBackdrop="@CloseOnBackdrop"
        CloseOnEscape="@CloseOnEscape"
        Class="@GetModalClasses()">
    
    <HeaderContent>
        @HeaderContent
    </HeaderContent>
    
    <ChildContent>
        @if (ShowAlert && !string.IsNullOrEmpty(AlertMessage))
        {
            <div class="@GetAlertClasses()" role="alert" aria-live="@(AlertType == AlertType.Error ? "assertive" : "polite")">
                <i class="icon @GetAlertIconClasses()" aria-hidden="true">@GetAlertIcon()</i>
                <div>
                    <div class="text-sm font-semibold">@AlertMessage</div>
                    @if (!string.IsNullOrEmpty(AlertDescription))
                    {
                        <div class="text-xs text-secondary">@AlertDescription</div>
                    }
                </div>
            </div>
        }
        
        @if (ShowGlassContent)
        {
            <div class="@GetContentClasses()">
                @ChildContent
            </div>
        }
        else
        {
            @ChildContent
        }
        
        @if (ShowQuickActions && QuickActions != null)
        {
            <div class="@GetQuickActionsClasses()">
                <div class="text-h6 font-bold mb-3">@QuickActionsTitle</div>
                <div class="@GetActionGroupClasses()" role="group" aria-label="@QuickActionsAriaLabel">
                    @QuickActions
                </div>
            </div>
        }
    </ChildContent>
    
    <FooterContent>
        @FooterContent
    </FooterContent>
</RModal>

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string Subtitle { get; set; }
    [Parameter] public string Icon { get; set; }
    [Parameter] public SizeType Size { get; set; } = SizeType.Medium;
    [Parameter] public VariantType Variant { get; set; } = VariantType.Default;
    
    [Parameter] public BaseModalGlassVariant GlassVariant { get; set; } = BaseModalGlassVariant.Medium;
    [Parameter] public bool ShowGlassContent { get; set; } = true;
    [Parameter] public bool InteractiveGlass { get; set; } = false;
    
    [Parameter] public RenderFragment HeaderContent { get; set; }
    [Parameter] public RenderFragment FooterContent { get; set; }
    [Parameter] public RenderFragment QuickActions { get; set; }
    
    [Parameter] public bool ShowAlert { get; set; }
    [Parameter] public string AlertMessage { get; set; }
    [Parameter] public string AlertDescription { get; set; }
    [Parameter] public AlertType AlertType { get; set; } = AlertType.Info;
    
    [Parameter] public bool ShowQuickActions { get; set; }
    [Parameter] public string QuickActionsTitle { get; set; } = "Quick Actions";
    [Parameter] public string QuickActionsAriaLabel { get; set; } = "Quick action buttons";
    
    [Parameter] public bool ShowHeader { get; set; } = true;
    [Parameter] public bool ShowFooter { get; set; } = true;
    
    [Parameter] public bool ShowPrimaryButton { get; set; } = true;
    [Parameter] public bool ShowCancelButton { get; set; } = true;
    [Parameter] public string PrimaryText { get; set; } = "Save";
    [Parameter] public string CancelText { get; set; } = "Cancel";
    [Parameter] public bool PrimaryButtonDisabled { get; set; }
    
    [Parameter] public bool Processing { get; set; }
    [Parameter] public string ProcessingMessage { get; set; } = "Processing...";
    
    [Parameter] public bool CloseOnBackdrop { get; set; } = true;
    [Parameter] public bool CloseOnEscape { get; set; } = true;
    
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnPrimaryAction { get; set; }
    
    private string GetModalClasses()
    {
        var classes = new List<string>();
        
        classes.Add(GlassVariant switch
        {
            BaseModalGlassVariant.Light => "glass-light",
            BaseModalGlassVariant.Medium => "glass-medium",
            BaseModalGlassVariant.Heavy => "glass-heavy",
            BaseModalGlassVariant.Frost => "glass-frost",
            BaseModalGlassVariant.Interactive => "glass-interactive",
            _ => "glass-medium"
        });
        
        classes.Add("backdrop-blur-xl");
        classes.Add("shadow-2xl");
        
        if (InteractiveGlass) classes.Add("hover-lift-sm focus-ring-animate");
        
        classes.Add(Class);
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }
    
    private string GetContentClasses()
    {
        var classes = new List<string>();
        
        if (ShowGlassContent)
        {
            classes.Add("pa-6 rounded-lg glass-light backdrop-blur-sm");
            if (InteractiveGlass) classes.Add("hover-lift-sm transition-all");
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetAlertClasses()
    {
        var classes = new List<string>
        {
            "flex items-center gap-3 mb-4 pa-4 glass-medium rounded-lg border-l-4 backdrop-blur-sm"
        };
        
        var (bg, border) = AlertType switch
        {
            AlertType.Success => ("bg-success-light", "border-success"),
            AlertType.Warning => ("bg-warning-light", "border-warning"),
            AlertType.Error => ("bg-error-light", "border-error"),
            _ => ("bg-info-light", "border-info")
        };
        classes.Add($"{bg} {border}");
        
        return string.Join(" ", classes);
    }
    
    private string GetAlertIconClasses()
    {
        var classes = new List<string>();
        
        classes.Add(AlertType switch
        {
            AlertType.Success => "text-success",
            AlertType.Warning => "text-warning animate-pulse",
            AlertType.Error => "text-error animate-pulse",
            _ => "text-info"
        });
        
        return string.Join(" ", classes);
    }
    
    private string GetAlertIcon() => AlertType switch
    {
        AlertType.Success => "check_circle",
        AlertType.Warning => "priority_high",
        AlertType.Error => "error",
        AlertType.Info => "info",
        _ => "info"
    };
    
    private string GetQuickActionsClasses()
    {
        return Density switch
        {
            DensityType.Compact => "mt-4 pt-3 border-t border-light",
            DensityType.Dense => "mt-5 pt-3 border-t border-light",
            DensityType.Normal => "mt-6 pt-4 border-t border-light",
            DensityType.Spacious => "mt-8 pt-6 border-t border-light",
            _ => "mt-6 pt-4 border-t border-light"
        };
    }
    
    private string GetActionGroupClasses()
    {
        var classes = new List<string>
        {
            "flex gap-3 flex-wrap pa-4 rounded-lg glass-medium backdrop-blur-sm"
        };
        if (InteractiveGlass) classes.Add("hover-lift-sm transition-all");
        
        return string.Join(" ", classes);
    }
}