@using RR.Blazor.Enums
@using RR.Blazor.Attributes
@using RR.Blazor.Components.Core
@using RR.Blazor.Components.Base
@inherits RComponentBase

@attribute [Component("RActionGroup", Category = "Core", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(Prompt = "Create action group for organizing buttons", 
                       CommonUse = "form actions, toolbar buttons, navigation controls", 
                       AvoidUsage = "Don't use for single buttons")]

<div class="action-group @GetActionGroupClasses()">
    @if (Pattern != ActionGroupPattern.None)
    {
        @RenderStandardPattern()
    }
    else
    {
        @ChildContent
    }
</div>

@code {
    [Parameter] public ActionGroupDirection Direction { get; set; } = ActionGroupDirection.Horizontal;
    
    [Parameter] public ActionGroupAlignment Alignment { get; set; } = ActionGroupAlignment.Start;
    
    [Parameter] public ActionGroupSpacing Spacing { get; set; } = ActionGroupSpacing.Medium;
    
    
    [Parameter] public bool Responsive { get; set; } = true;
    
    [Parameter] public ActionGroupPattern Pattern { get; set; } = ActionGroupPattern.None;
    
    [Parameter] public bool Processing { get; set; }
    [Parameter] public string ProcessingText { get; set; }
    [Parameter] public SizeType ButtonSize { get; set; } = SizeType.Medium;
    
    [Parameter] public string CancelText { get; set; } = "Cancel";
    [Parameter] public string CancelIcon { get; set; }
    [Parameter] public ButtonVariant CancelVariant { get; set; } = ButtonVariant.Ghost;
    [Parameter] public bool CancelDisabled { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    
    [Parameter] public string SaveText { get; set; } = "Save";
    [Parameter] public string SaveIcon { get; set; }
    [Parameter] public ButtonVariant SaveVariant { get; set; } = ButtonVariant.Primary;
    [Parameter] public bool SaveDisabled { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    
    [Parameter] public string BackText { get; set; } = "Back";
    [Parameter] public string BackIcon { get; set; } = "arrow_back";
    [Parameter] public ButtonVariant BackVariant { get; set; } = ButtonVariant.Secondary;
    [Parameter] public bool BackDisabled { get; set; }
    [Parameter] public EventCallback OnBack { get; set; }
    
    [Parameter] public string NextText { get; set; } = "Next";
    [Parameter] public string NextIcon { get; set; } = "arrow_forward";
    [Parameter] public ButtonVariant NextVariant { get; set; } = ButtonVariant.Primary;
    [Parameter] public bool NextDisabled { get; set; }
    [Parameter] public EventCallback OnNext { get; set; }
    
    [Parameter] public string ApproveText { get; set; } = "Approve";
    [Parameter] public string ApproveIcon { get; set; } = "check_circle";
    [Parameter] public ButtonVariant ApproveVariant { get; set; } = ButtonVariant.Success;
    [Parameter] public bool ApproveDisabled { get; set; }
    [Parameter] public EventCallback OnApprove { get; set; }
    
    [Parameter] public string RejectText { get; set; } = "Reject";
    [Parameter] public string RejectIcon { get; set; } = "cancel";
    [Parameter] public ButtonVariant RejectVariant { get; set; } = ButtonVariant.Error;
    [Parameter] public bool RejectDisabled { get; set; }
    [Parameter] public EventCallback OnReject { get; set; }
    
    private string GetActionGroupClasses()
    {
        var classes = new List<string> { "d-flex" };
        
        classes.Add(Direction == ActionGroupDirection.Vertical ? "flex-col" : "flex-row");
        if (Direction == ActionGroupDirection.Horizontal && Responsive)
        {
            classes.Add("flex-wrap");
        }
        
        classes.Add(GetSpacingClasses());
        
        if (Direction == ActionGroupDirection.Horizontal)
        {
            classes.Add(Alignment switch
            {
                ActionGroupAlignment.Start => "justify-start",
                ActionGroupAlignment.Center => "justify-center",
                ActionGroupAlignment.End => "justify-end",
                ActionGroupAlignment.SpaceBetween => "justify-between",
                ActionGroupAlignment.SpaceAround => "justify-around",
                ActionGroupAlignment.SpaceEvenly => "justify-evenly",
                _ => "justify-start"
            });
        }
        else
        {
            classes.Add(Alignment switch
            {
                ActionGroupAlignment.Start => "items-start",
                ActionGroupAlignment.Center => "items-center",
                ActionGroupAlignment.End => "items-end",
                _ => "items-stretch"
            });
        }
        
        if (FullWidth && Direction == ActionGroupDirection.Vertical) classes.Add("w-full");
        if (!string.IsNullOrEmpty(Class)) classes.Add(Class);
        
        return string.Join(" ", classes);
    }

    private string GetSpacingClasses()
    {
        var baseSpacing = Spacing switch
        {
            ActionGroupSpacing.None => "gap-0",
            ActionGroupSpacing.Small => "gap-2",
            ActionGroupSpacing.Medium => "gap-3",
            ActionGroupSpacing.Large => "gap-4",
            ActionGroupSpacing.ExtraLarge => "gap-6",
            _ => "gap-3"
        };

        return Density switch
        {
            DensityType.Compact => ApplyCompactSpacing(),
            DensityType.Dense => ApplyDenseSpacing(),
            DensityType.Normal => baseSpacing,
            DensityType.Spacious => ApplySpaciousSpacing(),
            _ => baseSpacing
        };
    }

    private string ApplyCompactSpacing()
    {
        return Spacing switch
        {
            ActionGroupSpacing.None => "gap-0",
            ActionGroupSpacing.Small => "gap-1",
            ActionGroupSpacing.Medium => "gap-2",
            ActionGroupSpacing.Large => "gap-3",
            ActionGroupSpacing.ExtraLarge => "gap-4",
            _ => "gap-2"
        };
    }

    private string ApplyDenseSpacing()
    {
        return Spacing switch
        {
            ActionGroupSpacing.None => "gap-0",
            ActionGroupSpacing.Small => "gap-1",
            ActionGroupSpacing.Medium => "gap-2",
            ActionGroupSpacing.Large => "gap-3",
            ActionGroupSpacing.ExtraLarge => "gap-5",
            _ => "gap-2"
        };
    }

    private string ApplySpaciousSpacing()
    {
        return Spacing switch
        {
            ActionGroupSpacing.None => "gap-0",
            ActionGroupSpacing.Small => "gap-3",
            ActionGroupSpacing.Medium => "gap-4",
            ActionGroupSpacing.Large => "gap-6",
            ActionGroupSpacing.ExtraLarge => "gap-8",
            _ => "gap-4"
        };
    }
    
    private RenderFragment RenderStandardPattern() => Pattern switch
    {
        ActionGroupPattern.CancelSave => RenderCancelSavePattern(),
        ActionGroupPattern.BackNext => RenderBackNextPattern(),
        ActionGroupPattern.ApproveReject => RenderApproveRejectPattern(),
        _ => ChildContent
    };
    
    private RenderFragment RenderCancelSavePattern() => __builder =>
    {
        <RButton Text="@CancelText" 
                 Icon="@CancelIcon" 
                 IconPosition="IconPosition.Start"
                 Variant="@CancelVariant" 
                 Size="@ButtonSize" 
                 OnClick="@OnCancel"
                 Disabled="@(Processing || CancelDisabled)" />
        
        <RButton Text="@(Processing && !string.IsNullOrEmpty(ProcessingText) ? ProcessingText : SaveText)" 
                 Icon="@SaveIcon" 
                 IconPosition="IconPosition.Start"
                 Variant="@SaveVariant" 
                 Size="@ButtonSize" 
                 OnClick="@OnSave"
                 Disabled="@(Processing || SaveDisabled)"
                 Loading="@Processing" />
    };
    
    private RenderFragment RenderBackNextPattern() => __builder =>
    {
        <RButton Text="@BackText" 
                 Icon="@BackIcon" 
                 IconPosition="IconPosition.Start"
                 Variant="@BackVariant" 
                 Size="@ButtonSize" 
                 OnClick="@OnBack"
                 Disabled="@(Processing || BackDisabled)" />
        
        <RButton Text="@NextText" 
                 Icon="@NextIcon" 
                 IconPosition="IconPosition.End"
                 Variant="@NextVariant" 
                 Size="@ButtonSize" 
                 OnClick="@OnNext"
                 Disabled="@(Processing || NextDisabled)"
                 Loading="@Processing" />
    };
    
    private RenderFragment RenderApproveRejectPattern() => __builder =>
    {
        <RButton Text="@RejectText" 
                 Icon="@RejectIcon" 
                 IconPosition="IconPosition.End"
                 Variant="@RejectVariant" 
                 Size="@ButtonSize" 
                 OnClick="@OnReject"
                 Disabled="@(Processing || RejectDisabled)" />
        
        <RButton Text="@ApproveText" 
                 Icon="@ApproveIcon" 
                 IconPosition="IconPosition.Start"
                 Variant="@ApproveVariant" 
                 Size="@ButtonSize" 
                 OnClick="@OnApprove"
                 Disabled="@(Processing || ApproveDisabled)"
                 Loading="@Processing" />
    };
}

