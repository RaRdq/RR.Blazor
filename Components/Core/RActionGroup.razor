@** 
<summary>
Professional action group component for organizing multiple buttons with consistent spacing and alignment.
Supports horizontal/vertical layouts, responsive behavior, and flexible alignment options.
</summary>
<category>Core</category>
<complexity>Simple</complexity>
<ai-prompt>Create a professional action group for organizing buttons</ai-prompt>
<ai-common-use>form actions, toolbar buttons, navigation controls, modal actions</ai-common-use>
<ai-avoid>Don't use for single buttons - use RButton directly. Avoid for non-action content.</ai-avoid>
<ai-pattern name="form-actions">Alignment="ActionGroupAlignment.End" for form Save/Cancel buttons</ai-pattern>
<ai-pattern name="toolbar-actions">Direction="ActionGroupDirection.Horizontal" Spacing="ActionGroupSpacing.Small" for compact toolbars</ai-pattern>
<ai-pattern name="vertical-menu">Direction="ActionGroupDirection.Vertical" FullWidth="true" for dropdown menus</ai-pattern>
<ai-pattern name="space-between">Alignment="ActionGroupAlignment.SpaceBetween" for opposing actions</ai-pattern>
**@
@using RR.Blazor.Enums
@using RR.Blazor.Attributes

@attribute [Component("RActionGroup", Category = "Core", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(Prompt = "Create a professional action group for organizing buttons", 
                       CommonUse = "form actions, toolbar buttons, navigation controls", 
                       AvoidUsage = "Don't use for single buttons - use RButton directly")]

<div class="action-group @GetActionGroupClasses()">
    @ChildContent
</div>

@code {
    /// <summary>Layout direction for the action group - horizontal or vertical arrangement</summary>
    /// <ai-hint>Horizontal for most forms and toolbars, Vertical for dropdown menus and mobile layouts</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Horizontal for forms/toolbars, Vertical for dropdowns/mobile layouts", 
                 SuggestedValues = new[] { "Horizontal", "Vertical" }, 
                 IsRequired = false)]
    public ActionGroupDirection Direction { get; set; } = ActionGroupDirection.Horizontal;
    
    /// <summary>Alignment for the action group - determines button positioning</summary>
    /// <ai-hint>End for form actions (Save/Cancel), SpaceBetween for opposing actions, Center for balanced layouts</ai-hint>
    [Parameter]
    [AIParameter(Hint = "End for form actions, SpaceBetween for opposing actions, Center for balanced", 
                 SuggestedValues = new[] { "Start", "Center", "End", "SpaceBetween", "SpaceAround", "SpaceEvenly" }, 
                 IsRequired = false)]
    public ActionGroupAlignment Alignment { get; set; } = ActionGroupAlignment.Start;
    
    /// <summary>Spacing between actions - controls gap between buttons</summary>
    /// <ai-hint>Medium for most cases, Small for compact toolbars, Large for prominent spacing</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Medium for most cases, Small for compact toolbars, Large for prominence", 
                 SuggestedValues = new[] { "None", "Small", "Medium", "Large", "ExtraLarge" }, 
                 IsRequired = false)]
    public ActionGroupSpacing Spacing { get; set; } = ActionGroupSpacing.Medium;
    
    /// <summary>Whether buttons should be full width in vertical layout</summary>
    /// <ai-hint>Use for vertical menus and mobile layouts where buttons should span full width</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Use for vertical menus and mobile layouts for full-width buttons")]
    public bool FullWidth { get; set; }
    
    /// <summary>Whether to wrap on small screens for responsive behavior</summary>
    /// <ai-hint>True for responsive layouts that adapt to mobile, false for fixed layouts</ai-hint>
    [Parameter]
    [AIParameter(Hint = "True for responsive mobile layouts, false for fixed layouts")]
    public bool Responsive { get; set; } = true;
    
    /// <summary>Additional CSS classes</summary>
    [Parameter] public string Class { get; set; }
    
    /// <summary>Child content (buttons/actions)</summary>
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    private string GetActionGroupClasses()
    {
        var classes = new List<string> { "flex" };
        
        // Direction
        if (Direction == ActionGroupDirection.Vertical)
        {
            classes.Add("flex-col");
        }
        else
        {
            classes.Add("flex-row");
            if (Responsive)
            {
                classes.Add("flex-wrap");
            }
        }
        
        // Spacing
        classes.Add(Spacing switch
        {
            ActionGroupSpacing.None => "gap-0",
            ActionGroupSpacing.Small => "gap-2",
            ActionGroupSpacing.Medium => "gap-3",
            ActionGroupSpacing.Large => "gap-4",
            ActionGroupSpacing.ExtraLarge => "gap-6",
            _ => "gap-3"
        });
        
        // Alignment
        if (Direction == ActionGroupDirection.Horizontal)
        {
            classes.Add(Alignment switch
            {
                ActionGroupAlignment.Start => "justify-start",
                ActionGroupAlignment.Center => "justify-center",
                ActionGroupAlignment.End => "justify-end",
                ActionGroupAlignment.SpaceBetween => "justify-between",
                ActionGroupAlignment.SpaceAround => "justify-around",
                ActionGroupAlignment.SpaceEvenly => "justify-evenly",
                _ => "justify-start"
            });
        }
        else
        {
            classes.Add(Alignment switch
            {
                ActionGroupAlignment.Start => "items-start",
                ActionGroupAlignment.Center => "items-center",
                ActionGroupAlignment.End => "items-end",
                _ => "items-stretch"
            });
        }
        
        // Full width for vertical layout
        if (FullWidth && Direction == ActionGroupDirection.Vertical)
        {
            classes.Add("w-full");
        }
        
        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes);
    }
}

