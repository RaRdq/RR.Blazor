@using RR.Blazor.Enums
@* RActionGroup - Reusable component for grouping action buttons with consistent spacing and alignment *@

<div class="action-group @GetActionGroupClasses()">
    @ChildContent
</div>

@code {
    /// <summary>Layout direction for the action group</summary>
    [Parameter] public ActionGroupDirection Direction { get; set; } = ActionGroupDirection.Horizontal;
    
    /// <summary>Alignment for the action group</summary>
    [Parameter] public ActionGroupAlignment Alignment { get; set; } = ActionGroupAlignment.Start;
    
    /// <summary>Spacing between actions</summary>
    [Parameter] public ActionGroupSpacing Spacing { get; set; } = ActionGroupSpacing.Medium;
    
    /// <summary>Whether buttons should be full width in vertical layout</summary>
    [Parameter] public bool FullWidth { get; set; }
    
    /// <summary>Whether to wrap on small screens</summary>
    [Parameter] public bool Responsive { get; set; } = true;
    
    /// <summary>Additional CSS classes</summary>
    [Parameter] public string Class { get; set; }
    
    /// <summary>Child content (buttons/actions)</summary>
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    private string GetActionGroupClasses()
    {
        var classes = new List<string> { "d-flex" };
        
        // Direction
        if (Direction == ActionGroupDirection.Vertical)
        {
            classes.Add("flex-column");
        }
        else
        {
            classes.Add("flex-row");
            if (Responsive)
            {
                classes.Add("flex-wrap");
            }
        }
        
        // Spacing
        classes.Add(Spacing switch
        {
            ActionGroupSpacing.None => "gap-0",
            ActionGroupSpacing.Small => "gap-2",
            ActionGroupSpacing.Medium => "gap-3",
            ActionGroupSpacing.Large => "gap-4",
            ActionGroupSpacing.ExtraLarge => "gap-6",
            _ => "gap-3"
        });
        
        // Alignment
        if (Direction == ActionGroupDirection.Horizontal)
        {
            classes.Add(Alignment switch
            {
                ActionGroupAlignment.Start => "justify-start",
                ActionGroupAlignment.Center => "justify-center",
                ActionGroupAlignment.End => "justify-end",
                ActionGroupAlignment.SpaceBetween => "justify-between",
                ActionGroupAlignment.SpaceAround => "justify-around",
                ActionGroupAlignment.SpaceEvenly => "justify-evenly",
                _ => "justify-start"
            });
        }
        else
        {
            classes.Add(Alignment switch
            {
                ActionGroupAlignment.Start => "align-start",
                ActionGroupAlignment.Center => "align-center",
                ActionGroupAlignment.End => "align-end",
                _ => "align-stretch"
            });
        }
        
        // Full width for vertical layout
        if (FullWidth && Direction == ActionGroupDirection.Vertical)
        {
            classes.Add("w-full");
        }
        
        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes);
    }
}

@* 
Usage Examples:

<!-- Horizontal action group (default) -->
<RActionGroup Alignment="ActionGroupAlignment.End">
    <RButton Text="Cancel" Variant="ButtonVariant.Secondary" />
    <RButton Text="Save" Variant="ButtonVariant.Primary" />
</RActionGroup>

<!-- Vertical action group -->
<RActionGroup Direction="ActionGroupDirection.Vertical" FullWidth="true">
    <RButton Text="Edit" Icon="edit" IconPosition="IconPosition.Start" />
    <RButton Text="Delete" Icon="delete" IconPosition="IconPosition.Start" Variant="ButtonVariant.Danger" />
    <RButton Text="Share" Icon="share" IconPosition="IconPosition.Start" Variant="ButtonVariant.Ghost" />
</RActionGroup>

<!-- Centered with large spacing -->
<RActionGroup Alignment="ActionGroupAlignment.Center" Spacing="ActionGroupSpacing.Large">
    <RButton Text="Previous" Icon="arrow_back" IconPosition="IconPosition.Start" Variant="ButtonVariant.Ghost" />
    <RButton Text="Next" Icon="arrow_forward" IconPosition="IconPosition.End" Variant="ButtonVariant.Primary" />
</RActionGroup>

<!-- Space between alignment -->
<RActionGroup Alignment="ActionGroupAlignment.SpaceBetween">
    <RButton Text="Back" Variant="ButtonVariant.Ghost" />
    <div class="d-flex gap-2">
        <RButton Text="Cancel" Variant="ButtonVariant.Secondary" />
        <RButton Text="Submit" Variant="ButtonVariant.Primary" />
    </div>
</RActionGroup>

<!-- Quick action buttons -->
<RActionGroup Direction="ActionGroupDirection.Horizontal" Spacing="ActionGroupSpacing.Small">
    <RButton Icon="edit" IconPosition="IconPosition.Start" Size="ButtonSize.Small" Variant="ButtonVariant.Ghost" />
    <RButton Icon="delete" IconPosition="IconPosition.Start" Size="ButtonSize.Small" Variant="ButtonVariant.Ghost" />
    <RButton Icon="more_vert" IconPosition="IconPosition.Start" Size="ButtonSize.Small" Variant="ButtonVariant.Ghost" />
</RActionGroup>
*@