@** 
<summary>
Unified status component that handles both indicator and message display patterns.
Supports icon indicators, text messages, and various status types with professional styling.
</summary>
<category>Core</category>
<complexity>Simple</complexity>
<ai-prompt>Create a status indicator or message for displaying state information</ai-prompt>
<ai-common-use>status badges, state indicators, feedback messages, process status</ai-common-use>
<ai-avoid>Don't use for buttons - use RButton. Avoid for large content blocks.</ai-avoid>
<ai-pattern name="indicator">Type="StatusType.Success" Mode="StatusMode.Indicator" for compact badges</ai-pattern>
<ai-pattern name="message">Type="StatusType.Info" Mode="StatusMode.Message" Text="Status message" for contextual messages</ai-pattern>
<ai-pattern name="processing">Type="StatusType.Processing" ShowPulse="true" for animated processing state</ai-pattern>
**@
@using RR.Blazor.Enums

<span class="@GetStatusClasses()">
    @if (!string.IsNullOrEmpty(Icon))
    {
        <i class="material-symbols-rounded status-icon">@Icon</i>
    }
    
    @if (!string.IsNullOrEmpty(Text))
    {
        <span class="status-text">@Text</span>
    }
    
    @if (Type == StatusType.Processing && ShowPulse)
    {
        <span class="status-pulse"></span>
    }
</span>

@code {
    [Parameter] public StatusType Type { get; set; } = StatusType.Info;
    [Parameter] public StatusMode Mode { get; set; } = StatusMode.Indicator;
    [Parameter] public string Text { get; set; } = "";
    [Parameter] public string Icon { get; set; }
    [Parameter] public bool ShowPulse { get; set; } = true;
    [Parameter] public string Class { get; set; }

    private string GetStatusClasses()
    {
        var classes = new List<string>();
        
        // Mode determines base styling
        classes.Add($"status-{Mode.ToString().ToLower()}");
        
        // Type determines color variant
        classes.Add($"status-{Type.ToString().ToLower()}");
        
        // Processing state
        if (Type == StatusType.Processing && ShowPulse)
        {
            classes.Add("status-pulsing");
        }
        
        // Custom classes
        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes);
    }
}