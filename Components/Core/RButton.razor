@*
Button component with variants and loading states.
*@
@using RR.Blazor.Enums
@using RR.Blazor.Attributes
@using RR.Blazor.Components.Base
@using RR.Blazor.Utilities
@inherits RVariantComponentBase<ButtonSize, ButtonVariant>

@attribute [Component("RButton", Category = "Core", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(Prompt = "Create button for user actions", 
                       CommonUse = "forms, navigation, actions, toolbars", 
                       AvoidUsage = "Don't use for navigation links - use RLink instead")]

<button type="@Type.ToString().ToLower()" 
        class="@GetButtonClasses()" 
        disabled="@(Disabled || Loading)"
        data-loading="@(Loading ? "true" : null)"
        data-loading-text="@(Loading && !string.IsNullOrEmpty(LoadingText) ? "true" : null)"
        @onclick="HandleClick"
        @onclick:stopPropagation="StopPropagation"
        @onclick:preventDefault="PreventDefault"
        @attributes="GetSafeAttributes()">
    
    @if (HasIcon && (IconPosition == IconPosition.Start || IconPosition == IconPosition.Top))
    {
        <i class="@GetIconClasses()">@Icon</i>
    }
    
    @if (HasText && (!Loading || string.IsNullOrEmpty(LoadingText)))
    {
        <span class="@GetTextClasses()">@Text</span>
    }
    
    @if (ChildContent != null)
    {
        @ChildContent
    }
    
    @if (Loading && !string.IsNullOrEmpty(LoadingText))
    {
        <span class="loading-text">@LoadingText</span>
    }
    
    @if (HasIcon && (IconPosition == IconPosition.End || IconPosition == IconPosition.Bottom))
    {
        <i class="@GetIconClasses()">@Icon</i>
    }
</button>

@code {
    #region Button-Specific Properties
    
    [Parameter] 
    [AIParameter("Button type", SuggestedValues = new[] { "Button", "Submit", "Reset" })]
    public ButtonType Type { get; set; } = ButtonType.Button;
    
    [Parameter] 
    [AIParameter("Icon position", SuggestedValues = new[] { "Start", "End", "Top", "Bottom" })]
    public IconPosition IconPosition { get; set; } = IconPosition.Start;
    
    [Parameter] 
    [AIParameter("Stop event propagation")]
    public bool StopPropagation { get; set; }
    
    [Parameter] 
    [AIParameter("Prevent default behavior")]
    public bool PreventDefault { get; set; }
    
    #endregion
    
    #region Abstract Method Implementations
    
    protected override string GetSizeClasses()
    {
        return SizeHelper.GetButtonSize(Size, Density);
    }
    
    protected override string GetVariantClasses()
    {
        // Return BEM-style button variant classes that match the SCSS
        var variantName = Variant.ToString().ToLower();
        
        var variantClass = variantName switch
        {
            "primary" => "button-primary",
            "secondary" => "button-secondary",
            "success" => "button-success",
            "warning" => "button-warning",
            "danger" or "error" => "button-error",
            "info" => "button-info",
            "outline" => "button-outlined-primary",
            "ghost" => "button-ghost-primary",
            "glass" => "button-glass-primary",
            "link" => "button-link",
            "muted" => "button-muted",
            // Special effect variants - standalone classes with distinct visual styles
            "gradient" => "button-gradient",
            "neon" => "button-neon",
            "neumorphism" => "button-neumorphism",
            "shimmer" => "button-shimmer",
            "enterprise" => "button-enterprise",
            _ => "button-primary"
        };
        
        return variantClass;
    }
    
    protected override ButtonSize GetDefaultSize()
    {
        return ButtonSize.Medium;
    }
    
    protected override ButtonVariant GetDefaultVariant()
    {
        return ButtonVariant.Primary;
    }
    
    protected override string GetTextSizeClasses()
    {
        return SizeHelper.GetTextSize(Size, Density);
    }
    
    protected override string GetIconSizeClasses()
    {
        return SizeHelper.GetButtonIconSize(Size, Density);
    }
    
    #endregion
    
    #region Styling Methods
    
    private string GetButtonClasses()
    {
        var classes = new List<string>
        {
            "button",
            "d-flex",
            "align-center", 
            "justify-center"
        };
        
        // Check if this is an icon-only button (has icon but no text and no child content)
        if (HasIcon && !HasText && ChildContent == null)
        {
            classes.Add("button-icon");
        }
        
        // Add flex direction for icon positioning
        if (IconPosition == IconPosition.Top || IconPosition == IconPosition.Bottom)
        {
            classes.Add("flex-col");
        }
        
        var sizeClass = GetSizeClasses();
        if (!string.IsNullOrEmpty(sizeClass))
        {
            classes.Add(sizeClass);
        }
        
        var baseClasses = GetBaseClasses();
        if (!string.IsNullOrEmpty(baseClasses))
        {
            classes.AddRange(baseClasses.Split(' ').Where(c => !string.IsNullOrEmpty(c)));
        }
        
        classes.Add(GetCursorClasses());
        classes.Add(DensityHelper.GetGap(Density));
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }
    
    #endregion
}