@using RR.Blazor.Enums
@using RR.Blazor.Attributes
@using RR.Blazor.Components.Base
@using RR.Blazor.Utilities
@inherits RDesignableComponentBase<SizeType, VariantType>

@attribute [Component("RButton", Category = "Core", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(Prompt = "Create button for user actions", 
                       CommonUse = "forms, navigation, actions, toolbars", 
                       AvoidUsage = "Don't use for navigation links - use RLink instead")]

<button type="@Type.ToString().ToLower()" 
        class="@GetButtonClasses()" 
        disabled="@(Disabled || Loading)"
        data-loading="@(Loading ? "true" : null)"
        data-loading-text="@(Loading && !string.IsNullOrEmpty(LoadingText) ? "true" : null)"
        @onclick="HandleClick"
        @onclick:stopPropagation="StopPropagation"
        @onclick:preventDefault="PreventDefault"
        @attributes="GetSafeAttributes()">
    
    @if (HasIcon && (IconPosition == IconPosition.Start || IconPosition == IconPosition.Top))
    {
        <i class="@GetIconClasses()">@Icon</i>
    }
    
    @if (HasText && (!Loading || string.IsNullOrEmpty(LoadingText)))
    {
        <span class="@GetTextClasses()">@Text</span>
    }
    
    @if (ChildContent != null && !Loading)
    {
        @ChildContent
    }
    
    @if (Loading && !string.IsNullOrEmpty(LoadingText))
    {
        <span class="loading-text">@LoadingText</span>
    }
    
    @if (HasIcon && (IconPosition == IconPosition.End || IconPosition == IconPosition.Bottom))
    {
        <i class="@GetIconClasses()">@Icon</i>
    }
</button>

@code {
    #region Button-Specific Properties
    
    [Parameter] 
    [AIParameter("Button type", SuggestedValues = new[] { "Button", "Submit", "Reset" })]
    public ButtonType Type { get; set; } = ButtonType.Button;
    
    [Parameter]
    [AIParameter("Button aesthetic style", SuggestedValues = new[] { "Material", "Glass", "Neumorphism", "Neon" })]
    public ButtonStyleType StyleType { get; set; } = ButtonStyleType.Material;
    
    [Parameter]
    [AIParameter("Button structural mode", SuggestedValues = new[] { "Filled", "Outline", "Ghost" })]
    public ButtonMode Mode { get; set; } = ButtonMode.Filled;
    
    [Parameter]
    [AIParameter("Visual intensity level", SuggestedValues = new[] { "Normal", "Muted", "Bold", "Subtle" })]
    public IntensityType Intensity { get; set; } = IntensityType.Normal;
    
    [Parameter] 
    [AIParameter("Icon position", SuggestedValues = new[] { "Start", "End", "Top", "Bottom" })]
    public IconPosition IconPosition { get; set; } = IconPosition.Start;
    
    [Parameter] 
    [AIParameter("Stop event propagation")]
    public bool StopPropagation { get; set; }
    
    [Parameter] 
    [AIParameter("Prevent default behavior")]
    public bool PreventDefault { get; set; }
    
    #endregion
    
    #region Abstract Method Implementations
    
    protected override string GetSizeClasses()
    {
        return SizeHelper.GetButtonSize(Size, Density);
    }
    
    protected override string GetVariantClasses()
    {
        var variantName = Variant.ToString().ToLower();
        var classes = new List<string>();
        
        // Map semantic variant to button class
        var semanticClass = variantName switch
        {
            "default" or "primary" => "button-primary",
            "secondary" => "button-secondary",
            "success" => "button-success",
            "warning" => "button-warning",
            "danger" or "error" => "button-error",
            "info" => "button-info",
            _ => "button-primary"
        };
        classes.Add(semanticClass);
        
        // Apply structural mode modifier if not filled (default)
        if (Mode == ButtonMode.Outline)
        {
            classes.Add("button-outline");
        }
        else if (Mode == ButtonMode.Ghost)
        {
            classes.Add("button-ghost");
        }
        
        // Apply aesthetic style modifier if not Material (default)
        if (StyleType != ButtonStyleType.Material)
        {
            var styleClass = StyleType switch
            {
                ButtonStyleType.Glass => "button-glass",
                ButtonStyleType.Neumorphism => "button-neumorphism",
                ButtonStyleType.Neon => "button-neon",
                ButtonStyleType.Elevated => "button-elevated",
                ButtonStyleType.Flat => "button-flat",
                ButtonStyleType.Frosted => "button-frosted",
                _ => ""
            };
            
            if (!string.IsNullOrEmpty(styleClass))
                classes.Add(styleClass);
        }
        
        // Apply intensity modifier
        if (Intensity != IntensityType.Normal)
        {
            var intensityClass = Intensity switch
            {
                IntensityType.Muted => "button-muted",
                IntensityType.Bold => "button-bold", 
                IntensityType.Subtle => "button-subtle",
                _ => ""
            };
            
            if (!string.IsNullOrEmpty(intensityClass))
                classes.Add(intensityClass);
        }
        
        return string.Join(" ", classes);
    }
    
    protected override SizeType GetDefaultSize()
    {
        return SizeType.Medium;
    }
    
    protected override VariantType GetDefaultVariant()
    {
        return VariantType.Primary;
    }
    
    protected override string GetTextSizeClasses()
    {
        return SizeHelper.GetTextSize(Size, Density);
    }
    
    protected override string GetIconSizeClasses()
    {
        return SizeHelper.GetButtonIconSize(Size, Density);
    }
    
    #endregion
    
    private int _lastRenderHash = 0;
    
    protected override bool ShouldRender()
    {
        var hash = new HashCode();
        hash.Add(Icon);
        hash.Add(Text);
        hash.Add(Variant);
        hash.Add(Size);
        hash.Add(Mode);
        hash.Add(StyleType);
        hash.Add(Intensity);
        hash.Add(Disabled);
        hash.Add(Loading);
        hash.Add(IconPosition);
        var currentHash = hash.ToHashCode();
        if (_lastRenderHash == currentHash) return false;
        _lastRenderHash = currentHash;
        return true;
    }
    
    private string GetButtonClasses()
    {
        var classes = new List<string>
        {
            "button",
            "d-flex",
            "align-center", 
            "justify-center"
        };
        
        if (HasIcon && !HasText && ChildContent == null) classes.Add("button-icon");
        if (Loading) classes.Add("button-loading");
        if (IconPosition == IconPosition.Top || IconPosition == IconPosition.Bottom) classes.Add("flex-col");
        
        var sizeClass = GetSizeClasses();
        if (!string.IsNullOrEmpty(sizeClass)) classes.Add(sizeClass);
        
        var baseClasses = GetBaseClasses();
        if (!string.IsNullOrEmpty(baseClasses)) classes.AddRange(baseClasses.Split(' ').Where(c => !string.IsNullOrEmpty(c)));
        
        // Note: Semantic color and style modifiers are now handled in GetVariantClasses()
        
        classes.Add(GetCursorClasses());
        classes.Add(DensityHelper.GetGap(Density));
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }
    
}