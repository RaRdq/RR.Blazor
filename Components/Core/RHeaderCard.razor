@using RR.Blazor.Enums
@using RR.Blazor.Attributes
@using RR.Blazor.Components.Base
@inherits RComponentBase

@attribute [Component("RHeaderCard", Category = "Core", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(Prompt = "Create header card with title and description", 
                       CommonUse = "page headers, section intros, feature highlights", 
                       AvoidUsage = "Don't use for regular content cards - use RCard instead")]

<div class="@GetHeaderCardClasses()">
    <div class="card-body @GetBodyClasses()">
        @if (IconPosition == IconPosition.Top && !string.IsNullOrEmpty(Icon))
        {
            <i class="@GetIconClasses()">@Icon</i>
        }
        
        <div class="@GetContentWrapperClasses()">
            @if (IconPosition == IconPosition.Start && !string.IsNullOrEmpty(Icon))
            {
                <i class="@GetIconClasses()">@Icon</i>
            }
            
            <div class="@GetTextContainerClasses()">
                @if (!string.IsNullOrEmpty(Title))
                {
                    <h1 class="@GetTitleClasses()">@Title</h1>
                }
                @if (!string.IsNullOrEmpty(Description))
                {
                    <p class="@GetDescriptionClasses()">@Description</p>
                }
            </div>
            
            @if (IconPosition == IconPosition.End && !string.IsNullOrEmpty(Icon))
            {
                <i class="@GetIconClasses()">@Icon</i>
            }
        </div>
        
        @if (IconPosition == IconPosition.Bottom && !string.IsNullOrEmpty(Icon))
        {
            <i class="@GetIconClasses()">@Icon</i>
        }
        
        @if (ChildContent != null)
        {
            <div class="@GetChildContentClasses()">
                @ChildContent
            </div>
        }
    </div>
</div>

@code {
    [Parameter, AIParameter("Main title text", "Display title for the header")] 
    public string Title { get; set; }
    
    [Parameter, AIParameter("Description text", "Subtitle or description below title")] 
    public string Description { get; set; }
    
    [Parameter, AIParameter("Material icon", "settings, dashboard, widgets, etc.")] 
    public string Icon { get; set; }
    
    [Parameter] public string SizeType { get; set; } = "lg";
    
    [Parameter] public IconPosition IconPosition { get; set; } = IconPosition.Start;
    
    [Parameter] public ActionGroupAlignment Alignment { get; set; } = ActionGroupAlignment.Start;
    
    [Parameter]
    [AIParameter(Hint = "Header card variant - Gradient for hero headers, GlassGradient for premium features", 
                 SuggestedValues = new[] { "Default", "Gradient", "GlassGradient" }, 
                 IsRequired = false)]
    public CardVariant Variant { get; set; } = CardVariant.Default;
    
    private string GetIconClasses()
    {
        var classes = new List<string> { "icon", "header-card-icon" };
        if (!string.IsNullOrEmpty(SizeType)) classes.Add($"icon-{SizeType}");
        return string.Join(" ", classes);
    }
    
    private string GetHeaderCardClasses()
    {
        var classes = new List<string> { "card" };
        
        if (Variant == CardVariant.Gradient) classes.Add("card-gradient");
        else if (Variant == CardVariant.GlassGradient) classes.Add("card-glass-gradient");
        
        if (!string.IsNullOrEmpty(Class)) classes.Add(Class);
        
        return string.Join(" ", classes);
    }
    
    private string GetBodyClasses()
    {
        var classes = new List<string> { "header-card-body" };
        
        classes.Add(Alignment switch
        {
            ActionGroupAlignment.Start => "align-start",
            ActionGroupAlignment.Center => "align-center", 
            ActionGroupAlignment.End => "align-end",
            _ => "align-start"
        });
        
        if (!string.IsNullOrEmpty(Icon)) classes.Add($"icon-{IconPosition.ToString().ToLower()}");
        
        return string.Join(" ", classes);
    }
    
    private string GetContentWrapperClasses()
    {
        var classes = new List<string> { "header-content-wrapper" };
        
        if (!string.IsNullOrEmpty(Icon) && (IconPosition == IconPosition.Start || IconPosition == IconPosition.End))
        {
            classes.Add("d-flex align-center gap-3");
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetTextContainerClasses()
    {
        var classes = new List<string> { "header-text-container" };
        
        classes.Add(Alignment switch
        {
            ActionGroupAlignment.Center => "text-center",
            ActionGroupAlignment.End => "text-right",
            _ => "text-left"
        });
        
        return string.Join(" ", classes);
    }
    
    private string GetTitleClasses()
    {
        var classes = new List<string> { "header-title" };
        return string.Join(" ", classes);
    }
    
    private string GetDescriptionClasses()
    {
        var classes = new List<string> { "header-description", "text-muted" };
        return string.Join(" ", classes);
    }
    
    private string GetChildContentClasses()
    {
        var classes = new List<string> { "header-child-content" };
        
        classes.Add("mt-3");
        
        return string.Join(" ", classes);
    }
}