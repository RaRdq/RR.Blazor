@** 
<summary>
Header card component for page titles and descriptions with consistent styling.
Perfect for page headers, section intros, and feature highlights.
</summary>
<category>Core</category>
<complexity>Simple</complexity>
<ai-prompt>Create header card with title and description</ai-prompt>
<ai-common-use>page headers, section intros, feature highlights</ai-common-use>
<ai-avoid>Don't use for regular content cards - use RCard instead</ai-avoid>
<ai-pattern name="basic-header">Title and Description for simple headers</ai-pattern>
<ai-pattern name="icon-header">Icon, Title, and Description for branded headers</ai-pattern>
**@
@using RR.Blazor.Enums
@using RR.Blazor.Attributes

@attribute [Component("RHeaderCard", Category = "Core", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(Prompt = "Create header card with title and description", 
                       CommonUse = "page headers, section intros, feature highlights", 
                       AvoidUsage = "Don't use for regular content cards - use RCard instead")]

<RCard Class="@($"header-card {Class}")">
    <HeaderContent>
        <div class="d-flex items-center gap-3">
            @if (!string.IsNullOrEmpty(Icon))
            {
                <i class="material-symbols-rounded text-primary @GetIconSize()">@Icon</i>
            }
            <div class="flex-1">
                @if (!string.IsNullOrEmpty(Title))
                {
                    <h1 class="text-2xl font-bold ma-0 text-primary">@Title</h1>
                }
                @if (!string.IsNullOrEmpty(Description))
                {
                    <p class="text-muted ma-0 mt-1">@Description</p>
                }
            </div>
        </div>
    </HeaderContent>
    <ChildContent>
        @ChildContent
    </ChildContent>
</RCard>

@code {
    /// <summary>Header title</summary>
    [Parameter, AIParameter("Main title text", "Display title for the header")] 
    public string Title { get; set; }
    
    /// <summary>Header description</summary>
    [Parameter, AIParameter("Description text", "Subtitle or description below title")] 
    public string Description { get; set; }
    
    /// <summary>Icon for header</summary>
    [Parameter, AIParameter("Material icon", "settings, dashboard, widgets, etc.")] 
    public string Icon { get; set; }
    
    /// <summary>Icon size</summary>
    [Parameter] public string IconSize { get; set; } = "text-3xl";
    
    /// <summary>Additional CSS classes</summary>
    [Parameter] public string Class { get; set; }
    
    /// <summary>Child content</summary>
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    private string GetIconSize() => IconSize ?? "text-3xl";
}