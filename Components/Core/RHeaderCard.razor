@** 
<summary>
Header card component for page titles and descriptions with consistent styling.
Perfect for page headers, section intros, and feature highlights.
</summary>
<category>Core</category>
<complexity>Simple</complexity>
<ai-prompt>Create header card with title and description</ai-prompt>
<ai-common-use>page headers, section intros, feature highlights</ai-common-use>
<ai-avoid>Don't use for regular content cards - use RCard instead</ai-avoid>
<ai-pattern name="basic-header">Title and Description for simple headers</ai-pattern>
<ai-pattern name="icon-header">Icon, Title, and Description for branded headers</ai-pattern>
**@
@using RR.Blazor.Enums
@using RR.Blazor.Attributes
@using RR.Blazor.Components.Base
@inherits RComponentBase

@attribute [Component("RHeaderCard", Category = "Core", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(Prompt = "Create header card with title and description", 
                       CommonUse = "page headers, section intros, feature highlights", 
                       AvoidUsage = "Don't use for regular content cards - use RCard instead")]

<div class="card card-header @Class">
    <div class="card-body">
        @if (!string.IsNullOrEmpty(Icon))
        {
            <i class="@GetIconClasses()">@Icon</i>
        }
        <div>
            @if (!string.IsNullOrEmpty(Title))
            {
                <h1>@Title</h1>
            }
            @if (!string.IsNullOrEmpty(Description))
            {
                <p>@Description</p>
            }
        </div>
        @ChildContent
    </div>
</div>

@code {
    [Parameter, AIParameter("Main title text", "Display title for the header")] 
    public string Title { get; set; }
    
    [Parameter, AIParameter("Description text", "Subtitle or description below title")] 
    public string Description { get; set; }
    
    [Parameter, AIParameter("Material icon", "settings, dashboard, widgets, etc.")] 
    public string Icon { get; set; }
    
    [Parameter] public string IconSize { get; set; } = "lg";
    
    private string GetIconClasses()
    {
        var classes = new List<string> { "material-symbols-rounded" };
        if (!string.IsNullOrEmpty(IconSize))
        {
            classes.Add($"icon-{IconSize}");
        }
        return string.Join(" ", classes);
    }
}