@** 
<summary>
Badge component for status indicators, counts, and labels.
</summary>
<category>Core</category>
<complexity>Simple</complexity>
<ai-prompt>Create badge for status or count display</ai-prompt>
<ai-common-use>status indicators, counts, labels, notifications</ai-common-use>
<ai-avoid>Don't use for navigation - use RButton instead</ai-avoid>
**@
@namespace RR.Blazor.Components
@using RR.Blazor.Enums
@using RR.Blazor.Attributes
@using RR.Blazor.Components.Base
@using Microsoft.AspNetCore.Components.Rendering
@inherits RForwardingComponentBase

@attribute [Component("RBadge", Category = "Core", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(Prompt = "Create badge for status or count display", 
                       CommonUse = "status indicators, counts, labels, notifications", 
                       AvoidUsage = "Don't use for navigation - use RButton instead")]

<span class="@GetBadgeClasses()" 
      @onclick="HandleClick" 
      @attributes="GetForwardedAttributes()">
    
    @if (!string.IsNullOrEmpty(Icon))
    {
        <i class="@GetIconClasses()">@Icon</i>
    }
    
    @if (!string.IsNullOrEmpty(Text))
    {
        <span>@Text</span>
    }
    
    @if (ChildContent != null)
    {
        @ChildContent
    }
</span>

@code {
    /// <summary>Badge text content</summary>
    [Parameter]
    [AIParameter(Hint = "Short text: Active, 5, New", IsRequired = false)]
    public string Text { get; set; }
    
    /// <summary>Badge variant</summary>
    [Parameter]
    [AIParameter(Hint = "Color scheme variant", 
                 SuggestedValues = new[] { "Primary", "Secondary", "Success", "Warning", "Danger", "Info" }, 
                 IsRequired = false)]
    public BadgeVariant Variant { get; set; } = BadgeVariant.Secondary;
    
    /// <summary>Badge size</summary>
    [Parameter]
    [AIParameter(Hint = "Badge size", 
                 SuggestedValues = new[] { "Small", "Medium", "Large" })]
    public BadgeSize Size { get; set; } = BadgeSize.Medium;
    
    /// <summary>Component density level for ultra-dense layouts</summary>
    /// <ai-hint>Normal is default, Compact for ultra-dense, Dense for data-heavy interfaces</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Normal is default, Compact for ultra-dense, Dense for data-heavy", 
                 SuggestedValues = new[] { "Normal", "Dense", "Compact", "Spacious" })]
    public ComponentDensity Density { get; set; } = ComponentDensity.Normal;
    
    /// <summary>Material icon name to display alongside text</summary>
    /// <ai-hint>Common icons: check_circle, warning, error, info, star, notifications</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Common icons: check_circle, warning, error, info, star, notifications", 
                 SuggestedValues = new[] { "check_circle", "warning", "error", "info", "star", "notifications" })]
    public string Icon { get; set; }
    
    /// <summary>Whether badge is clickable - adds hover effects and cursor pointer</summary>
    /// <ai-hint>Set to true for interactive badges that perform actions when clicked</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Set to true for interactive badges that perform actions")]
    public bool Clickable { get; set; }
    
    /// <summary>Click event handler for interactive badges</summary>
    [Parameter] public EventCallback OnClick { get; set; }
    
    /// <summary>Child content for custom badge content</summary>
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    /// <summary>Additional CSS classes</summary>
    [Parameter] public string Class { get; set; } = string.Empty;

    private string GetBadgeClasses()
    {
        var classes = new List<string> { "badge" };
        
        // Variant utility classes
        classes.Add(GetVariantUtilityClasses());
        
        // Size and density utility classes
        classes.Add(GetSizeUtilityClasses());
        
        // Interactive utility classes
        if (Clickable || OnClick.HasDelegate)
        {
            classes.Add("badge-clickable cursor-pointer hover-scale-sm transition-transform");
        }
        
        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }
    
    private string GetSizeUtilityClasses()
    {
        var sizeClass = Size switch
        {
            BadgeSize.Small => "badge-sm",
            BadgeSize.Large => "badge-lg",
            _ => "" // Medium is default, no additional class needed
        };
        
        var densityClass = Density switch
        {
            ComponentDensity.Compact => "badge-compact",
            ComponentDensity.Dense => "badge-dense", 
            ComponentDensity.Spacious => "badge-spacious",
            _ => ""
        };
        
        return $"{sizeClass} {densityClass}".Trim();
    }
    
    private string GetVariantUtilityClasses()
    {
        return Variant switch
        {
            BadgeVariant.Primary => "badge-primary",
            BadgeVariant.Success => "badge-success", 
            BadgeVariant.Warning => "badge-warning",
            BadgeVariant.Danger => "badge-danger",
            BadgeVariant.Error => "badge-error",
            BadgeVariant.Info => "badge-info",
            BadgeVariant.Outline => "badge-outlined-primary",
            _ => "badge-secondary"
        };
    }

    private string GetIconClasses()
    {
        var iconSizeClass = Size switch
        {
            BadgeSize.Small => "text-sm",
            BadgeSize.Large => "text-lg",
            _ => "text-base"
        };
        
        var densityIconClass = Density switch
        {
            ComponentDensity.Compact => GetCompactIconUtilityClass(),
            ComponentDensity.Dense => GetDenseIconUtilityClass(),
            ComponentDensity.Spacious => GetSpaciousIconUtilityClass(),
            _ => iconSizeClass
        };
        
        return $"material-symbols-rounded {densityIconClass}";
    }
    
    private string GetCompactIconUtilityClass()
    {
        return Size switch
        {
            BadgeSize.Small => "text-xs",
            BadgeSize.Medium => "text-xs",
            BadgeSize.Large => "text-sm",
            _ => "text-xs"
        };
    }
    
    private string GetDenseIconUtilityClass()
    {
        return Size switch
        {
            BadgeSize.Small => "text-xs",
            BadgeSize.Medium => "text-sm",
            BadgeSize.Large => "text-base",
            _ => "text-sm"
        };
    }
    
    private string GetSpaciousIconUtilityClass()
    {
        return Size switch
        {
            BadgeSize.Small => "text-base",
            BadgeSize.Medium => "text-lg",
            BadgeSize.Large => "text-xl",
            _ => "text-lg"
        };
    }

    private async Task HandleClick()
    {
        if (OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync();
        }
    }

    private Dictionary<string, object> GetForwardedAttributes()
    {
        var excludeProperties = new HashSet<string> 
        { 
            nameof(Text), nameof(Variant), nameof(Size), nameof(Density), 
            nameof(Icon), nameof(Clickable), nameof(OnClick), nameof(ChildContent), nameof(Class) 
        };

        var forwarded = new Dictionary<string, object>();
        var componentType = GetType();
        var properties = componentType.GetProperties()
            .Where(p => p.GetCustomAttributes(typeof(ParameterAttribute), true).Any() 
                       && !excludeProperties.Contains(p.Name));

        foreach (var property in properties)
        {
            var value = property.GetValue(this);
            if (value != null || property.PropertyType.IsValueType)
            {
                forwarded[property.Name] = value;
            }
        }
        
        return forwarded;
    }
}

