@namespace RR.Blazor.Components
@using RR.Blazor.Enums
@using RR.Blazor.Attributes
@using RR.Blazor.Components.Base
@using RR.Blazor.Utilities
@using Microsoft.AspNetCore.Components.Rendering
@inherits RSizedComponentBase<SizeType>

@attribute [Component("RBadge", Category = "Core", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(Prompt = "Create badge for status or count display", 
                       CommonUse = "status indicators, counts, labels, notifications", 
                       AvoidUsage = "Don't use for navigation - use RButton instead")]

<span class="@GetBadgeClasses()" 
      @onclick="HandleClick"
      @onclick:stopPropagation="true"
      @attributes="GetForwardedAttributes()">
    
    @if (!string.IsNullOrEmpty(Icon))
    {
        <i class="@GetIconClasses()">@Icon</i>
    }
    
    @if (!string.IsNullOrEmpty(Text))
    {
        <span>@Text</span>
    }
    
    @if (ChildContent != null)
    {
        @ChildContent
    }
</span>

@code {
    
    [Parameter]
    [AIParameter(Hint = "Color scheme variant", 
                 SuggestedValues = new[] { "Primary", "Secondary", "Success", "Warning", "Danger", "Info" }, 
                 IsRequired = false)]
    public VariantType Variant { get; set; } = VariantType.Secondary;
    
    
    [Parameter]
    [AIParameter(Hint = "Set to true for interactive badges that perform actions")]
    public bool Clickable { get; set; }
    
    

    private string GetBadgeClasses()
    {
        var classes = new List<string> { "badge" };
        
        classes.Add(GetVariantUtilityClasses());
        classes.Add(GetSizeUtilityClasses());
        if (Clickable) classes.Add("badge-clickable cursor-pointer hover-scale-sm transition-transform");
        
        classes.AddRange(GetBaseCssClasses());
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }
    
    private string GetSizeUtilityClasses()
    {
        return SizeHelper.GetBadgeSize(Size, Density);
    }
    
    private string GetVariantUtilityClasses()
    {
        return Variant switch
        {
            VariantType.Primary => "badge-primary",
            VariantType.Success => "badge-success", 
            VariantType.Warning => "badge-warning",
            VariantType.Danger => "badge-danger",
            VariantType.Error => "badge-error",
            VariantType.Info => "badge-info",
            VariantType.Outline => "badge-outlined-primary",
            _ => "badge-secondary"
        };
    }

    private string GetIconClasses()
    {
        var iconSizeClass = SizeHelper.GetIconSize(Size, Density);
        return $"icon {iconSizeClass}";
    }

    protected override string GetSizeClasses()
    {
        return Size switch
        {
            SizeType.ExtraSmall => "badge-xs",
            SizeType.Small => "badge-sm",
            SizeType.Medium => "badge-md",
            SizeType.Large => "badge-lg",
            SizeType.ExtraLarge => "badge-xl",
            _ => "badge-md"
        };
    }
    
    protected override SizeType GetDefaultSize() => SizeType.Medium;
    
    private async Task HandleClick(MouseEventArgs args)
    {
        if (OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync(args);
        }
    }

    private Dictionary<string, object> GetForwardedAttributes()
    {
        var excludeProperties = new HashSet<string>(StringComparer.OrdinalIgnoreCase) 
        { 
            nameof(Text), nameof(Variant), nameof(Size), nameof(Density), nameof(Class),
            nameof(Icon), nameof(Clickable), nameof(Title), nameof(Subtitle), nameof(Disabled),
            nameof(OnClick), nameof(Loading), nameof(LoadingText), nameof(AriaLabel), nameof(TabIndex),
            nameof(ChildContent)
        };

        var forwarded = new Dictionary<string, object>();
        var componentType = GetType();
        var properties = componentType.GetProperties()
            .Where(p => p.GetCustomAttributes(typeof(ParameterAttribute), true).Any() 
                       && !excludeProperties.Contains(p.Name)
                       && p.CanRead);

        foreach (var property in properties)
        {
            try
            {
                var value = property.GetValue(this);
                if (value != null || property.PropertyType.IsValueType)
                {
                    forwarded[property.Name] = value;
                }
            }
            catch
            {
                // Skip properties that can't be accessed
            }
        }
        
        return forwarded;
    }
}

