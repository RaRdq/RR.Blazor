@** 
<summary>
Professional badge component for status indicators, counts, and labels.
Supports multiple variants, sizes, and interactive states with enterprise-grade styling.
</summary>
<category>Core</category>
<complexity>Simple</complexity>
<ai-prompt>Create a professional badge for status or count display</ai-prompt>
<ai-common-use>status indicators, counts, labels, notifications, tags</ai-common-use>
<ai-avoid>Don't use for navigation buttons - use RButton instead. Avoid for large text content.</ai-avoid>
<ai-pattern name="status-badge">Text="Active" Variant="BadgeVariant.Success" for status indicators</ai-pattern>
<ai-pattern name="count-badge">Text="5" Variant="BadgeVariant.Primary" for notification counts</ai-pattern>
<ai-pattern name="warning-badge">Text="Pending" Variant="BadgeVariant.Warning" for attention states</ai-pattern>
<ai-pattern name="clickable-badge">Clickable="true" OnClick="HandleClick" for interactive badges</ai-pattern>
**@
@namespace RR.Blazor.Components
@using RR.Blazor.Enums
@using RR.Blazor.Attributes

@attribute [Component("RBadge", Category = "Core", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(Prompt = "Create a professional badge for status or count display", 
                       CommonUse = "status indicators, counts, labels, notifications", 
                       AvoidUsage = "Don't use for navigation - use RButton instead")]

<span class="@GetBadgeClasses()" @onclick="HandleClick" @attributes="AdditionalAttributes">
    @if (!string.IsNullOrEmpty(Icon))
    {
        <i class="material-symbols-rounded @GetIconClasses()">@Icon</i>
    }
    @if (!string.IsNullOrEmpty(Text))
    {
        <span>@Text</span>
    }
    @ChildContent
</span>

@code {
    /// <summary>Badge text content - typically short labels, counts, or status indicators</summary>
    /// <ai-hint>Keep text short: "Active", "5", "New", "Pending". Use 1-10 characters max</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Keep text short: Active, 5, New, Pending. Use 1-10 characters max", IsRequired = false)]
    public string Text { get; set; }
    /// <summary>Badge variant - determines color scheme and semantic meaning</summary>
    /// <ai-hint>Primary for emphasis, Success for positive states, Warning for attention, Danger for errors</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Primary for emphasis, Success for positive, Warning for attention, Danger for errors", 
                 SuggestedValues = new[] { "Primary", "Secondary", "Success", "Warning", "Danger", "Info" }, 
                 IsRequired = false)]
    public BadgeVariant Variant { get; set; } = BadgeVariant.Secondary;
    /// <summary>Badge size - affects padding, text size, and overall dimensions</summary>
    /// <ai-hint>Medium is default, Small for compact layouts, Large for prominence</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Medium is default, Small for compact layouts, Large for prominence", 
                 SuggestedValues = new[] { "Small", "Medium", "Large" })]
    public BadgeSize Size { get; set; } = BadgeSize.Medium;
    
    /// <summary>Component density level for ultra-dense layouts</summary>
    /// <ai-hint>Normal is default, Compact for ultra-dense, Dense for data-heavy interfaces</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Normal is default, Compact for ultra-dense, Dense for data-heavy", 
                 SuggestedValues = new[] { "Normal", "Dense", "Compact", "Spacious" })]
    public ComponentDensity Density { get; set; } = ComponentDensity.Normal;
    /// <summary>Material icon name to display alongside text</summary>
    /// <ai-hint>Common icons: check_circle, warning, error, info, star, notifications</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Common icons: check_circle, warning, error, info, star, notifications", 
                 SuggestedValues = new[] { "check_circle", "warning", "error", "info", "star", "notifications" })]
    public string Icon { get; set; }
    /// <summary>Whether badge is clickable - adds hover effects and cursor pointer</summary>
    /// <ai-hint>Set to true for interactive badges that perform actions when clicked</ai-hint>
    [Parameter]
    [AIParameter(Hint = "Set to true for interactive badges that perform actions")]
    public bool Clickable { get; set; }
    /// <summary>Click event handler for interactive badges</summary>
    [Parameter] public EventCallback OnClick { get; set; }
    /// <summary>Child content for custom badge content</summary>
    [Parameter] public RenderFragment ChildContent { get; set; }
    /// <summary>Additional CSS classes</summary>
    [Parameter] public string Class { get; set; } = string.Empty;
    /// <summary>Additional HTML attributes</summary>
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> AdditionalAttributes { get; set; }

    private string GetBadgeClasses()
    {
        var classes = new List<string>
        {
            "d-inline-flex",
            "items-center",
            "rounded-full",
            "font-medium",
            "whitespace-nowrap",
            "border"
        };
        
        // Size and density classes
        classes.Add(GetSizeClasses());
        
        // Density-specific gap adjustments
        classes.Add(GetDensityGapClasses());
        
        // Variant classes - using utility classes instead of CSS
        classes.Add(GetVariantClasses());
        
        // Clickable
        if (Clickable || OnClick.HasDelegate)
        {
            classes.AddRange(new[]
            {
                "cursor-pointer",
                "hover:shadow-sm",
                "transition",
                "hover:scale-105"
            });
        }
        
        // Custom CSS
        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }
    
    private string GetSizeClasses()
    {
        var baseSizeClasses = Size switch
        {
            BadgeSize.Small => "pl-2 pr-2 pt-0 pb-0 text-xs h-5",
            BadgeSize.Medium => "pl-3 pr-3 pt-1 pb-1 text-sm h-6",
            BadgeSize.Large => "pl-4 pr-4 pt-2 pb-2 text-base h-8",
            _ => "pl-3 pr-3 pt-1 pb-1 text-sm h-6"
        };
        
        // Apply density modifiers
        return Density switch
        {
            ComponentDensity.Compact => ApplyCompactDensity(),
            ComponentDensity.Dense => ApplyDenseDensity(),
            ComponentDensity.Normal => baseSizeClasses,
            ComponentDensity.Spacious => ApplySpacious(),
            _ => baseSizeClasses
        };
    }
    
    private string ApplyCompactDensity()
    {
        return Size switch
        {
            BadgeSize.Small => "pl-1 pr-1 pt-0 pb-0 text-xs h-4",
            BadgeSize.Medium => "pl-2 pr-2 pt-0 pb-0 text-xs h-5",
            BadgeSize.Large => "pl-3 pr-3 pt-1 pb-1 text-sm h-6",
            _ => "pl-2 pr-2 pt-0 pb-0 text-xs h-5"
        };
    }
    
    private string ApplyDenseDensity()
    {
        return Size switch
        {
            BadgeSize.Small => "pl-1 pr-1 pt-0 pb-0 text-xs h-4",
            BadgeSize.Medium => "pl-2 pr-2 pt-0 pb-0 text-sm h-5",
            BadgeSize.Large => "pl-3 pr-3 pt-1 pb-1 text-base h-7",
            _ => "pl-2 pr-2 pt-0 pb-0 text-sm h-5"
        };
    }
    
    private string ApplySpacious()
    {
        return Size switch
        {
            BadgeSize.Small => "pl-3 pr-3 pt-1 pb-1 text-sm h-7",
            BadgeSize.Medium => "pl-4 pr-4 pt-2 pb-2 text-base h-8",
            BadgeSize.Large => "pl-6 pr-6 pt-3 pb-3 text-lg h-10",
            _ => "pl-4 pr-4 pt-2 pb-2 text-base h-8"
        };
    }
    
    private string GetDensityGapClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "gap-1",
            ComponentDensity.Dense => "gap-1",
            ComponentDensity.Normal => "gap-2",
            ComponentDensity.Spacious => "gap-2",
            _ => "gap-2"
        };
    }
    
    private string GetVariantClasses()
    {
        return Variant switch
        {
            BadgeVariant.Primary => "bg-primary text-white border-primary",
            BadgeVariant.Success => "bg-success text-white border-success",
            BadgeVariant.Warning => "bg-warning text-white border-warning",
            BadgeVariant.Danger => "bg-error text-white border-error",
            BadgeVariant.Info => "bg-info text-white border-info",
            _ => "bg-secondary text-white border-secondary"
        };
    }

    private string GetIconClasses()
    {
        // Base size classes
        var baseSizeClasses = Size switch
        {
            BadgeSize.Small => "text-sm",
            BadgeSize.Large => "text-lg",
            _ => "text-base"
        };
        
        // Apply density modifiers for icon sizing
        return Density switch
        {
            ComponentDensity.Compact => GetCompactIconClasses(),
            ComponentDensity.Dense => GetDenseIconClasses(),
            ComponentDensity.Normal => baseSizeClasses,
            ComponentDensity.Spacious => GetSpaciousIconClasses(),
            _ => baseSizeClasses
        };
    }
    
    private string GetCompactIconClasses()
    {
        return Size switch
        {
            BadgeSize.Small => "text-xs",
            BadgeSize.Medium => "text-xs",
            BadgeSize.Large => "text-sm",
            _ => "text-xs"
        };
    }
    
    private string GetDenseIconClasses()
    {
        return Size switch
        {
            BadgeSize.Small => "text-xs",
            BadgeSize.Medium => "text-sm",
            BadgeSize.Large => "text-base",
            _ => "text-sm"
        };
    }
    
    private string GetSpaciousIconClasses()
    {
        return Size switch
        {
            BadgeSize.Small => "text-base",
            BadgeSize.Medium => "text-lg",
            BadgeSize.Large => "text-xl",
            _ => "text-lg"
        };
    }

    private async Task HandleClick()
    {
        if (OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync();
        }
    }
}
