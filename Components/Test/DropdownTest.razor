@page "/rr-test/dropdown-debug"
@using RR.Blazor.Components.Form
@using RR.Blazor.Components.Layout
@using RR.Blazor.Enums
@inject IJSRuntime JSRuntime

<PageTitle>RChoice Component Test Suite</PageTitle>
<RAppShell Title="RR.Blazor Test Suite"
           Features="AppShellFeatures.Header | AppShellFeatures.ThemeToggle"
           AutoWrapContent="true"
           PageTitle="RChoice Component Tests"
           PageSubtitle="Comprehensive testing of RChoice.cs and RChoiceGeneric.razor">
    
    <ChildContent>
        <div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <h1 class="h2 mb-3">🎯 RChoice Component Test Suite</h1>
            <p class="text-muted mb-4">Comprehensive testing of RChoice.cs and RChoiceGeneric.razor components</p>
        </div>
    </div>

    <!-- Smart Variant Detection Tests -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Test 1: Smart Variant Detection (Auto Mode)</h3>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label class="form-label">Few Items (Auto → Inline):</label>
                            <RChoice Items="@shortList" 
                                     SelectedValue="@autoShort"
                                     SelectedValueChanged="@((object value) => autoShort = value?.ToString() ?? "")"
                                     Variant="ChoiceVariant.Auto"
                                     ItemLabelSelector="x => x?.ToString() ?? string.Empty" />
                            <small class="text-muted">Selected: @autoShort</small>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Many Items (Auto → Dropdown):</label>
                            <RChoice Items="@longList" 
                                     SelectedValue="@autoLong"
                                     SelectedValueChanged="@((object value) => autoLong = value?.ToString() ?? "")"
                                     Variant="ChoiceVariant.Auto"
                                     ItemLabelSelector="x => x?.ToString() ?? string.Empty" />
                            <small class="text-muted">Selected: @autoLong</small>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Long Labels (Auto → Dropdown):</label>
                            <RChoice Items="@longLabelList" 
                                     SelectedValue="@autoLongLabels"
                                     SelectedValueChanged="@((object value) => autoLongLabels = value?.ToString() ?? "")"
                                     Variant="ChoiceVariant.Auto"
                                     MaxLabelLength="15"
                                     ItemLabelSelector="x => x?.ToString() ?? string.Empty" />
                            <small class="text-muted">Selected: @autoLongLabels</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Forced Variants Test -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Test 2: Forced Inline vs Dropdown Variants</h3>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Forced Inline (Many Items):</label>
                            <RChoice Items="@companies" 
                                     SelectedValue="@forcedInline"
                                     SelectedValueChanged="@((object value) => forcedInline = value?.ToString() ?? "")"
                                     Variant="ChoiceVariant.Inline"
                                     ItemLabelSelector="x => x?.ToString() ?? string.Empty" />
                            <small class="text-muted">Selected: @forcedInline</small>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Forced Dropdown (Few Items):</label>
                            <RChoice Items="@fruits" 
                                     SelectedValue="@forcedDropdown"
                                     SelectedValueChanged="@((object value) => forcedDropdown = value?.ToString() ?? "")"
                                     Variant="ChoiceVariant.Dropdown"
                                     ItemLabelSelector="x => x?.ToString() ?? string.Empty" />
                            <small class="text-muted">Selected: @forcedDropdown</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Choice Styles Test -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Test 3: Choice Styles (Inline Mode)</h3>
                </div>
                <div class="card-body">
                    <div class="row g-4">
                        <div class="col-md-6">
                            <label class="form-label">Standard Style:</label>
                            <RChoice Items="@colors" 
                                     SelectedValue="@styleStandard"
                                     SelectedValueChanged="@((object value) => styleStandard = value?.ToString() ?? "")"
                                     Variant="ChoiceVariant.Inline"
                                     Style="ChoiceStyle.Standard"
                                     ItemLabelSelector="x => x?.ToString() ?? string.Empty" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Compact Style:</label>
                            <RChoice Items="@colors" 
                                     SelectedValue="@styleCompact"
                                     SelectedValueChanged="@((object value) => styleCompact = value?.ToString() ?? "")"
                                     Variant="ChoiceVariant.Inline"
                                     Style="ChoiceStyle.Compact"
                                     ItemLabelSelector="x => x?.ToString() ?? string.Empty" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Pills Style:</label>
                            <RChoice Items="@colors" 
                                     SelectedValue="@stylePills"
                                     SelectedValueChanged="@((object value) => stylePills = value?.ToString() ?? "")"
                                     Variant="ChoiceVariant.Inline"
                                     Style="ChoiceStyle.Pills"
                                     ItemLabelSelector="x => x?.ToString() ?? string.Empty" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Tabs Style:</label>
                            <RChoice Items="@colors" 
                                     SelectedValue="@styleTabs"
                                     SelectedValueChanged="@((object value) => styleTabs = value?.ToString() ?? "")"
                                     Variant="ChoiceVariant.Inline"
                                     Style="ChoiceStyle.Tabs"
                                     ItemLabelSelector="x => x?.ToString() ?? string.Empty" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Buttons Style:</label>
                            <RChoice Items="@colors" 
                                     SelectedValue="@styleButtons"
                                     SelectedValueChanged="@((object value) => styleButtons = value?.ToString() ?? "")"
                                     Variant="ChoiceVariant.Inline"
                                     Style="ChoiceStyle.Buttons"
                                     ItemLabelSelector="x => x?.ToString() ?? string.Empty" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Advanced Features Test -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Test 4: Advanced Features & Selectors</h3>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label class="form-label">With Icons & Custom Selectors:</label>
                            <RChoice Items="@iconItems" 
                                     SelectedValue="@iconSelected"
                                     SelectedValueChanged="@((object value) => iconSelected = (IconTestItem)value)"
                                     Variant="ChoiceVariant.Dropdown"
                                     ItemLabelSelector="x => ((IconTestItem)x).Label"
                                     ItemIconSelector="x => ((IconTestItem)x).Icon"
                                     ItemTitleSelector="x => ((IconTestItem)x).Description"
                                     ItemDisabledSelector="x => ((IconTestItem)x).Disabled" />
                            <small class="text-muted">Selected: @(iconSelected?.Label ?? "None")</small>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">With Loading States:</label>
                            <RChoice Items="@loadingItems" 
                                     SelectedValue="@loadingSelected"
                                     SelectedValueChanged="@((object value) => loadingSelected = (LoadingTestItem)value)"
                                     Variant="ChoiceVariant.Dropdown"
                                     ItemLabelSelector="x => ((LoadingTestItem)x).Name"
                                     ItemLoadingSelector="x => ((LoadingTestItem)x).Loading" />
                            <small class="text-muted">Selected: @(loadingSelected?.Name ?? "None")</small>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Disabled Component:</label>
                            <RChoice Items="@fruits" 
                                     SelectedValue="@disabledSelected"
                                     SelectedValueChanged="@((object value) => disabledSelected = value?.ToString() ?? "")"
                                     Variant="ChoiceVariant.Dropdown"
                                     Disabled="true"
                                     ItemLabelSelector="x => x?.ToString() ?? string.Empty" />
                            <small class="text-muted">Selected: @disabledSelected</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Density & Direction Test -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Test 5: Density & Direction Options</h3>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-3">
                            <label class="form-label">Compact Density:</label>
                            <RChoice Items="@numbers" 
                                     SelectedValue="@densityCompact"
                                     SelectedValueChanged="@((object value) => densityCompact = value?.ToString() ?? "")"
                                     Variant="ChoiceVariant.Inline"
                                     Density="ComponentDensity.Compact"
                                     ItemLabelSelector="x => x?.ToString() ?? string.Empty" />
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Normal Density:</label>
                            <RChoice Items="@numbers" 
                                     SelectedValue="@densityNormal"
                                     SelectedValueChanged="@((object value) => densityNormal = value?.ToString() ?? "")"
                                     Variant="ChoiceVariant.Inline"
                                     Density="ComponentDensity.Normal"
                                     ItemLabelSelector="x => x?.ToString() ?? string.Empty" />
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Spacious Density:</label>
                            <RChoice Items="@numbers" 
                                     SelectedValue="@densitySpacious"
                                     SelectedValueChanged="@((object value) => densitySpacious = value?.ToString() ?? "")"
                                     Variant="ChoiceVariant.Inline"
                                     Density="ComponentDensity.Spacious"
                                     ItemLabelSelector="x => x?.ToString() ?? string.Empty" />
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Vertical Direction:</label>
                            <RChoice Items="@shortList" 
                                     SelectedValue="@directionVertical"
                                     SelectedValueChanged="@((object value) => directionVertical = value?.ToString() ?? "")"
                                     Variant="ChoiceVariant.Inline"
                                     Direction="ChoiceDirection.Vertical"
                                     ItemLabelSelector="x => x?.ToString() ?? string.Empty" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edge Cases Test -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Test 6: Edge Cases & Positioning</h3>
                </div>
                <div class="card-body">
                    <div style="height: 400px; position: relative; border: 1px dashed #ccc;">
                        <div style="position: absolute; top: 10px; right: 10px; width: 200px;">
                            <label class="form-label">Top Right:</label>
                            <RChoice Items="@fruits" 
                                     SelectedValue="@topRightSelection"
                                     SelectedValueChanged="@((object value) => topRightSelection = value?.ToString() ?? "")"
                                     Variant="ChoiceVariant.Dropdown"
                                     ItemLabelSelector="x => x?.ToString() ?? string.Empty" />
                        </div>
                        <div style="position: absolute; bottom: 10px; left: 10px; width: 200px;">
                            <label class="form-label">Bottom Left:</label>
                            <RChoice Items="@colors" 
                                     SelectedValue="@bottomLeftSelection"
                                     SelectedValueChanged="@((object value) => bottomLeftSelection = value?.ToString() ?? "")"
                                     Variant="ChoiceVariant.Dropdown"
                                     ItemLabelSelector="x => x?.ToString() ?? string.Empty" />
                        </div>
                        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 250px;">
                            <label class="form-label">Center with CloseOnSelect=false:</label>
                            <RChoice Items="@companies" 
                                     SelectedValue="@centerSelection"
                                     SelectedValueChanged="@((object value) => centerSelection = value?.ToString() ?? "")"
                                     Variant="ChoiceVariant.Dropdown"
                                     CloseOnSelect="false"
                                     ItemLabelSelector="x => x?.ToString() ?? string.Empty" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Dictionary Test Section - Testing the Original Issue -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Test 6: Dictionary Support (Original Issue Fix)</h3>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Dictionary Items (HRPayrollFilters style):</label>
                            <RChoice Items="@statusOptions" 
                                     SelectedValue="@dictionarySelected"
                                     SelectedValueChanged="@((object value) => dictionarySelected = value?.ToString() ?? "")"
                                     Variant="ChoiceVariant.Dropdown"
                                     ItemLabelSelector="x => x?.ToString() ?? string.Empty" />
                            <small class="text-muted">Selected: @dictionarySelected</small>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Null Items (Error Prevention Test):</label>
                            <RChoice Items="@nullItems" 
                                     SelectedValue="@nullSelected"
                                     SelectedValueChanged="@((object value) => nullSelected = value?.ToString() ?? "")"
                                     Variant="ChoiceVariant.Dropdown"
                                     ItemLabelSelector="x => x?.ToString() ?? string.Empty" />
                            <small class="text-muted">Selected: @nullSelected (should be empty list)</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Debug Controls -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">🔧 Debug Controls</h3>
                </div>
                <div class="card-body">
                    <div class="row g-3 mb-3">
                        <div class="col-md-4">
                            <button @onclick="RunDebugTest" class="button button-primary w-100">
                                🔍 Run Component Analysis
                            </button>
                        </div>
                        <div class="col-md-4">
                            <button @onclick="TestKeyboardNavigation" class="button button-info w-100">
                                ⌨️ Test Keyboard Navigation
                            </button>
                        </div>
                        <div class="col-md-4">
                            <button @onclick="ClearAllSelections" class="button button-warning w-100">
                                🗑️ Clear All Selections
                            </button>
                        </div>
                    </div>
                    <div id="debug-output" style="background: #000; color: #0f0; font-family: monospace; padding: 1rem; border-radius: 4px; height: 300px; overflow-y: auto; white-space: pre-wrap;">
                        Click a debug button above to run analysis...
                    </div>
                </div>
            </div>
        </div>
    </div>
        </div>
    </ChildContent>
    
</RAppShell>

<script>
    window.testRChoice = function() {
        const output = document.getElementById('debug-output');
        if (!output) return;
        
        output.textContent = '';
        
        function log(message) {
            output.textContent += message + '\n';
            output.scrollTop = output.scrollHeight;
            console.log(message);
        }
        
        log('🎯 RChoice Component Analysis');
        log('============================');
        log('Time: ' + new Date().toLocaleTimeString());
        
        // Test all choice components
        const choices = document.querySelectorAll('.choice');
        log(`Found ${choices.length} RChoice component(s)`);
        
        let inlineCount = 0, dropdownCount = 0;
        
        choices.forEach((choice, i) => {
            const isInline = choice.classList.contains('choice-inline');
            const isDropdown = choice.classList.contains('choice-dropdown');
            
            if (isInline) inlineCount++;
            if (isDropdown) dropdownCount++;
            
            log(`\n--- Component ${i + 1} ---`);
            log(`Type: ${isInline ? 'Inline' : isDropdown ? 'Dropdown' : 'Unknown'}`);
            
            if (isDropdown) {
                const trigger = choice.querySelector('.choice-trigger');
                const viewport = choice.querySelector('.choice-viewport');
                const items = choice.querySelectorAll('.choice-item');
                
                log(`Structure: trigger=${!!trigger}, viewport=${!!viewport}, items=${items.length}`);
                
                if (trigger) {
                    const isDisabled = trigger.disabled;
                    const isOpen = choice.classList.contains('choice-open');
                    log(`State: disabled=${isDisabled}, open=${isOpen}`);
                    
                    if (!isDisabled) {
                        log(`Testing interaction...`);
                        trigger.click();
                        
                        setTimeout(() => {
                            const nowOpen = choice.classList.contains('choice-open');
                            log(`After click: open=${nowOpen}`);
                            
                            if (nowOpen && viewport) {
                                const rect = viewport.getBoundingClientRect();
                                log(`Viewport: ${rect.width}x${rect.height} at (${Math.round(rect.x)}, ${Math.round(rect.y)})`);
                            }
                        }, 100);
                    }
                }
            } else if (isInline) {
                const items = choice.querySelectorAll('.choice-item');
                const activeItems = choice.querySelectorAll('.choice-item-active');
                log(`Items: ${items.length}, Active: ${activeItems.length}`);
                
                // Check for style classes
                const styles = ['choice-compact', 'choice-dense', 'choice-normal', 'choice-spacious'];
                const detectedStyles = styles.filter(s => choice.classList.contains(s));
                if (detectedStyles.length > 0) {
                    log(`Styles: ${detectedStyles.join(', ')}`);
                }
            }
        });
        
        log(`\n📊 Summary:`);
        log(`Inline components: ${inlineCount}`);
        log(`Dropdown components: ${dropdownCount}`);
        log(`Total components: ${choices.length}`);
        
        if (choices.length > 0) {
            log(`\n✅ All RChoice components loaded successfully!`);
        } else {
            log(`\n❌ No RChoice components found!`);
        }
    };
    
    window.testKeyboardNavigation = function() {
        const output = document.getElementById('debug-output');
        if (!output) return;
        
        output.textContent = '';
        
        function log(message) {
            output.textContent += message + '\n';
            output.scrollTop = output.scrollHeight;
        }
        
        log('⌨️ Keyboard Navigation Test');
        log('===========================');
        
        const dropdowns = document.querySelectorAll('.choice-dropdown .choice-trigger');
        log(`Testing ${dropdowns.length} dropdown trigger(s)`);
        
        if (dropdowns.length > 0) {
            const firstTrigger = dropdowns[0];
            log('\nFocusing first dropdown...');
            firstTrigger.focus();
            
            setTimeout(() => {
                log('Simulating Space key press...');
                firstTrigger.dispatchEvent(new KeyboardEvent('keydown', { key: ' ' }));
                
                setTimeout(() => {
                    const parent = firstTrigger.closest('.choice-dropdown');
                    const isOpen = parent.classList.contains('choice-open');
                    log(`Dropdown opened: ${isOpen}`);
                    
                    if (isOpen) {
                        log('Simulating Escape key press...');
                        firstTrigger.dispatchEvent(new KeyboardEvent('keydown', { key: 'Escape' }));
                        
                        setTimeout(() => {
                            const nowOpen = parent.classList.contains('choice-open');
                            log(`Dropdown closed: ${!nowOpen}`);
                            log(nowOpen ? '❌ Keyboard navigation failed' : '✅ Keyboard navigation working');
                        }, 100);
                    }
                }, 100);
            }, 100);
        } else {
            log('No dropdown triggers found for keyboard testing');
        }
    };
</script>

@code {
    // Test data
    private List<string> shortList = new() { "One", "Two", "Three" };
    private List<string> longList = new() { "Option 1", "Option 2", "Option 3", "Option 4", "Option 5", "Option 6", "Option 7", "Option 8" };
    private List<string> longLabelList = new() { "Very Long Label Option A", "Another Extremely Long Label B", "Super Extended Label C" };
    private List<string> companies = new() { "TechCorp Solutions Ltd", "Global Manufacturing Inc", "Data Systems Corp", "Innovation Labs LLC" };
    private List<string> fruits = new() { "Apple", "Banana", "Orange", "Grape", "Strawberry" };
    private List<string> colors = new() { "Red", "Blue", "Green", "Yellow", "Purple" };
    private List<string> numbers = new() { "One", "Two", "Three", "Four", "Five" };
    
    // Test objects with complex properties
    private List<IconTestItem> iconItems = new()
    {
        new IconTestItem { Label = "Dashboard", Icon = "dashboard", Description = "Main dashboard view", Disabled = false },
        new IconTestItem { Label = "Settings", Icon = "settings", Description = "Application settings", Disabled = false },
        new IconTestItem { Label = "Users", Icon = "people", Description = "User management", Disabled = true },
        new IconTestItem { Label = "Reports", Icon = "bar_chart", Description = "Analytics and reports", Disabled = false }
    };
    
    private List<LoadingTestItem> loadingItems = new()
    {
        new LoadingTestItem { Name = "Data Loading", Loading = true },
        new LoadingTestItem { Name = "Ready Item", Loading = false },
        new LoadingTestItem { Name = "Processing", Loading = true },
        new LoadingTestItem { Name = "Complete", Loading = false }
    };
    
    // Selection states
    private string autoShort = "";
    private string autoLong = "";
    private string autoLongLabels = "";
    private string forcedInline = "";
    private string forcedDropdown = "";
    private string styleStandard = "";
    private string styleCompact = "";
    private string stylePills = "";
    private string styleTabs = "";
    private string styleButtons = "";
    private IconTestItem iconSelected = null;
    private LoadingTestItem loadingSelected = null;
    private string disabledSelected = "";
    private string densityCompact = "";
    private string densityNormal = "";
    private string densitySpacious = "";
    private string directionVertical = "";
    private string topRightSelection = "";
    private string bottomLeftSelection = "";
    private string centerSelection = "";
    
    // Dictionary test data - exactly like HRPayrollFilters
    private Dictionary<string, string> statusOptions = new()
    {
        { "all", "All Statuses" },
        { "pending", "Pending" },
        { "approved", "Approved" },
        { "rejected", "Rejected" },
        { "processing", "Processing" }
    };
    private string dictionarySelected = "";
    
    // Null test data
    private Dictionary<string, string> nullItems = null;
    private string nullSelected = "";

    private async Task RunDebugTest()
    {
        await JSRuntime.InvokeVoidAsync("eval", "window.testRChoice()");
    }
    
    private async Task TestKeyboardNavigation()
    {
        await JSRuntime.InvokeVoidAsync("eval", "window.testKeyboardNavigation()");
    }
    
    private void ClearAllSelections()
    {
        autoShort = autoLong = autoLongLabels = forcedInline = forcedDropdown = "";
        styleStandard = styleCompact = stylePills = styleTabs = styleButtons = "";
        iconSelected = null;
        loadingSelected = null;
        disabledSelected = densityCompact = densityNormal = densitySpacious = "";
        directionVertical = topRightSelection = bottomLeftSelection = centerSelection = "";
        dictionarySelected = nullSelected = "";
        StateHasChanged();
    }
    
    public class IconTestItem
    {
        public string Label { get; set; }
        public string Icon { get; set; }
        public string Description { get; set; }
        public bool Disabled { get; set; }
        
        public override bool Equals(object obj) => obj is IconTestItem other && Label == other.Label;
        public override int GetHashCode() => Label?.GetHashCode() ?? 0;
        public override string ToString() => Label;
    }
    
    public class LoadingTestItem
    {
        public string Name { get; set; }
        public bool Loading { get; set; }
        
        public override bool Equals(object obj) => obj is LoadingTestItem other && Name == other.Name;
        public override int GetHashCode() => Name?.GetHashCode() ?? 0;
        public override string ToString() => Name;
    }
}