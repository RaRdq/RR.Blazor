@using RR.Blazor.Components.Core
@using RR.Blazor.Components.Form
@using RR.Blazor.Components.Feedback
@using RR.Blazor.Enums
@using RR.Blazor.Models
@inherits ComponentBase

<RModal @bind-IsOpen="IsOpen" Title="@Parameters.Title" Size="@Size">
    <ChildContent>
        <div class="space-y-4">
            <p>@Parameters.Message</p>
            
            <RTextInput @bind-Value="userInput" 
                       Label="Enter some text"
                       Placeholder="Type here..." />
        </div>
    </ChildContent>
    
    <FooterContent>
        <div class="flex gap-2 justify-end">
            <RButton Text="Cancel" 
                    Variant="ButtonVariant.Secondary" 
                    OnClick="@HandleCancel" />
            <RButton Text="OK" 
                    Variant="ButtonVariant.Primary" 
                    OnClick="@HandleOk" />
        </div>
    </FooterContent>
</RModal>

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    [Parameter] public TestModalParams Parameters { get; set; } = new TestModalParams();
    [Parameter] public SizeType Size { get; set; } = SizeType.Medium;
    [Parameter] public EventCallback<string> OnResult { get; set; }
    
    private string userInput = string.Empty;
    
    private async Task HandleCancel()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(false);
        await OnResult.InvokeAsync(null);
    }
    
    private async Task HandleOk()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(false);
        await OnResult.InvokeAsync(userInput);
    }
}