@page "/test/smart-tables"
@using RR.Blazor.Components.Data
@using RR.Blazor.Components.Core
@using RR.Blazor.Enums
@using RR.Blazor.Models.Export

@* Comprehensive Smart Table System Test *@

<div class="pa-6">
    <h1 class="text-3xl font-bold mb-4">📋 Generic Table Test</h1>
    <p class="text-secondary mb-6">Clean, efficient generic table with core functionality - no AI bloat</p>

    @* Test Selector *@
    <div class="test-controls mb-6 pa-4 bg-surface rounded">
        <RChoiceGeneric Items="@testOptions.Keys"
                        SelectedValue="@selectedTest"
                        SelectedValueChangedObject="@OnTestChangedCallback"
                        ItemLabelSelectorTyped="@(item => testOptions[item.ToString()])"
                        AriaLabel="Test Case" />
    </div>

    @if (selectedTest == "professional-styling")
    {
        <div class="test-section mb-8">
            <h2 class="text-xl font-semibold mb-4">🎨 Professional Styling System</h2>
            <p class="text-secondary mb-6">Enterprise-grade styling with variants, densities, themes, and accessibility</p>

            @* Styling Controls *@
            <div class="styling-controls mb-6 p-4 bg-surface-elevated rounded-lg">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                    <div>
                        <label class="block text-sm font-medium mb-2">Table Variant</label>
                        <RChoiceGeneric Items="@GetTableVariants()"
                                       SelectedValue="@selectedVariant"
                                       SelectedValueChangedObject="@((object value) => selectedVariant = (RR.Blazor.Enums.TableVariant)value)"
                                       ItemLabelSelectorTyped="@(item => item.ToString())"
                                       AriaLabel="Table Variant" />
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Table Density</label>
                        <RChoiceGeneric Items="@GetTableDensities()"
                                       SelectedValue="@selectedDensity"
                                       SelectedValueChangedObject="@((object value) => selectedDensity = (RR.Blazor.Enums.TableDensity)value)"
                                       ItemLabelSelectorTyped="@(item => item.ToString())"
                                       AriaLabel="Table Density" />
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-2">Elevation Level</label>
                        <input type="range" min="0" max="16" step="2" @bind="selectedElevation" 
                               class="w-full" aria-label="Elevation Level" />
                        <span class="text-xs text-secondary">Level @selectedElevation</span>
                    </div>
                </div>
                
                <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <label class="flex items-center gap-2">
                        <input type="checkbox" @bind="enableGlassmorphism" class="form-checkbox" />
                        <span class="text-sm">Glassmorphism</span>
                    </label>
                    <label class="flex items-center gap-2">
                        <input type="checkbox" @bind="enableHoverEffects" class="form-checkbox" />
                        <span class="text-sm">Hover Effects</span>
                    </label>
                    <label class="flex items-center gap-2">
                        <input type="checkbox" @bind="enableAnimations" class="form-checkbox" />
                        <span class="text-sm">Animations</span>
                    </label>
                    <label class="flex items-center gap-2">
                        <input type="checkbox" @bind="showBorders" class="form-checkbox" />
                        <span class="text-sm">Show Borders</span>
                    </label>
                </div>
            </div>

            @* Professional Styling Demo Table *@
            <RTableGeneric TItem="EmployeeModel"
                          Items="@employees"
                          Title="Professional Enterprise Table"
                          Subtitle="@GetStylingSubtitle()"
                          TableVariant="@selectedVariant"
                          TableDensity="@selectedDensity"
                          TableElevation="@selectedElevation"
                          EnableGlassmorphism="@enableGlassmorphism"
                          EnableHoverEffects="@enableHoverEffects"
                          EnableAnimations="@enableAnimations"
                          ShowBorders="@showBorders"
                          MultiSelection="true"
                          PageSize="8"
                          ShowPagination="true"
                          Sortable="true"
                          MultiColumnSort="true"
                          ShowColumnManager="true"
                          EnableColumnReordering="true"
                          ResizableColumns="true"
                          LoadingMessage="Loading employee data..."
                          EmptyMessage="No employees found">

                <RColumn Property="@((EmployeeModel e) => e.FirstName)" 
                         Header="Avatar" 
                         Width="60px"
                         Sortable="false"
                         Filterable="false" />

                <RColumn TItem="EmployeeModel" Key="FirstName" Header="First Name" Sortable="true" Filterable="true" />
                <RColumn TItem="EmployeeModel" Key="LastName" Header="Last Name" Sortable="true" Filterable="true" />
                <RColumn TItem="EmployeeModel" Key="Department" Header="Department" Sortable="true" Filterable="true" />
                
                <RColumn TItem="EmployeeModel" 
                         Key="Salary" 
                         Header="Salary" 
                         Format="C" 
                         Sortable="true" 
                         Filterable="true"
                         CellClass="text-right font-mono" />

                <RColumn Property="@((EmployeeModel e) => e.Status)" 
                         Header="Status" 
                         Sortable="true" 
                         Filterable="true"
                         CellClass="text-center" />

                <RColumn Property="@((EmployeeModel e) => e.Id)" 
                         Header="Actions" 
                         Width="120px"
                         Sortable="false" 
                         Filterable="false"
                         CellClass="text-center" />
            </RTableGeneric>

            @* Styling Code Example *@
            <div class="mt-6 p-4 bg-surface-elevated rounded-lg">
                <h4 class="font-medium mb-2">Code Example</h4>
                <pre class="text-xs bg-canvas p-3 rounded overflow-x-auto"><code>&lt;RTableGeneric TItem="EmployeeModel"
              Items="@@employees"
              TableVariant="@selectedVariant"
              TableDensity="@selectedDensity"
              TableElevation="@selectedElevation"
              EnableGlassmorphism="@enableGlassmorphism.ToString().ToLower()"
              EnableHoverEffects="@enableHoverEffects.ToString().ToLower()"
              EnableAnimations="@enableAnimations.ToString().ToLower()"
              ShowBorders="@showBorders.ToString().ToLower()"
              MultiSelection="true"
              ShowColumnManager="true" /&gt;</code></pre>
            </div>
        </div>
    }
    else if (selectedTest == "clean-features")
    {
        <div class="test-section mb-8">
            <h2 class="text-xl font-semibold mb-4">🧹 Clean Core Features</h2>
            <p class="text-secondary mb-4">Essential table functionality without AI complexity - clean, efficient, and fast</p>

            @* Simple Product Table *@
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Product Catalog - Core Functionality</h3>
                <p class="text-sm text-secondary mb-3">Clean table with sorting, selection, pagination, and export</p>
                <RTableGeneric TItem="ProductModel"
                              Items="@products"
                              Title="Product Catalog"
                              Subtitle="Clean and efficient table implementation"
                              EnableExport="true"
                              ExportFormats="csv,excel,json"
                              MultiSelection="true"
                              PageSize="5"
                              ShowPagination="true"
                              Sortable="true"
                              MultiColumnSort="true">
                    <ColumnsContent>
                        <RColumn Property="@((ProductModel p) => p.Name)" Header="Product Name" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Price)" Header="Price" Format="c" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Category)" Header="Category" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Stock)" Header="Stock" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.IsActive)" Header="Status" Sortable="true" />
                    </ColumnsContent>
                </RTableGeneric>
            </div>

            @* Employee Directory *@
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Employee Directory - Simple and Fast</h3>
                <p class="text-sm text-secondary mb-3">Optimized for performance without unnecessary complexity</p>
                <RTableGeneric TItem="EmployeeModel"
                              Items="@employees"
                              Title="Employee Directory"
                              Subtitle="Clean and professional employee table"
                              EnableExport="true"
                              ExportFormats="csv,excel,pdf"
                              SingleSelection="true"
                              PageSize="3"
                              ShowPagination="true"
                              Sortable="true">
                    <ColumnsContent>
                        <RColumn Property="@((EmployeeModel e) => e.FullName)" Header="Full Name" Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.Department)" Header="Department" Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.Salary)" Header="Salary" Format="c" Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.HireDate)" Header="Hire Date" Format="d" Sortable="true" />
                    </ColumnsContent>
                </RTableGeneric>
            </div>

            @* Generic Data Table *@
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Generic Data - Auto Column Generation</h3>
                <p class="text-sm text-secondary mb-3">Table automatically generates columns from data properties</p>
                <RTableGeneric TItem="GenericItem"
                              Items="@paginationTestData.Take(10).ToList()"
                              Title="Generic Data Table"
                              Subtitle="Automatic column generation from properties"
                              EnableExport="true"
                              PageSize="5"
                              ShowPagination="true"
                              Sortable="true" />
            </div>
        </div>
    }

    @if (selectedTest == "export-system")
    {
        <div class="test-section mb-8">
            <h2 class="text-xl font-semibold mb-4">📊 Advanced Export System</h2>
            <p class="text-secondary mb-4">Professional export capabilities with multiple formats and progress tracking</p>

            @* CSV Export Demo *@
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">CSV Export - Product Data</h3>
                <p class="text-sm text-secondary mb-3">Export product catalog to CSV with custom formatting</p>
                <RTableGeneric TItem="ProductModel"
                              Items="@products"
                              Title="Product Export Demo"
                              Subtitle="Try the export dropdown"
                              EnableExport="true"
                              ExportFormats="csv"
                              OnExportProgress="@HandleExportProgress"
                              PageSize="3"
                              ShowPagination="true">
                    <ColumnsContent>
                        <RColumn Property="@((ProductModel p) => p.Name)" Header="Product Name" />
                        <RColumn Property="@((ProductModel p) => p.Price)" Header="Price" Format="c" />
                        <RColumn Property="@((ProductModel p) => p.Category)" Header="Category" />
                        <RColumn Property="@((ProductModel p) => p.Stock)" Header="Stock" />
                        <RColumn Property="@((ProductModel p) => p.IsActive)" Header="Status" />
                    </ColumnsContent>
                </RTableGeneric>
            </div>

            @* Multi-Format Export *@
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Multi-Format Export - Employee Data</h3>
                <p class="text-sm text-secondary mb-3">Export to CSV, Excel, JSON, and PDF formats</p>
                <RTableGeneric TItem="EmployeeModel"
                              Items="@employees"
                              Title="Employee Export Demo"
                              Subtitle="Multiple export formats available"
                              EnableExport="true"
                              ExportFormats="csv,excel,json,pdf"
                              OnExportProgress="@HandleExportProgress"
                              SingleSelection="true">
                    <ColumnsContent>
                        <RColumn Property="@((EmployeeModel e) => e.FullName)" Header="Full Name" />
                        <RColumn Property="@((EmployeeModel e) => e.Department)" Header="Department" />
                        <RColumn Property="@((EmployeeModel e) => e.Salary)" Header="Salary" Format="c" />
                        <RColumn Property="@((EmployeeModel e) => e.HireDate)" Header="Hire Date" Format="d" />
                    </ColumnsContent>
                </RTableGeneric>
            </div>

            @* Large Dataset Export *@
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Large Dataset Export</h3>
                <p class="text-sm text-secondary mb-3">Test export performance with larger datasets</p>
                <RTableGeneric TItem="ProductModel"
                              Items="@largeProductList"
                              Title="Large Dataset Export"
                              Subtitle="@($"{largeProductList.Count} products - test export performance")"
                              EnableExport="true"
                              ExportFormats="csv,excel,json"
                              OnExportProgress="@HandleExportProgress"
                              PageSize="10"
                              ShowPagination="true">
                    <ColumnsContent>
                        <RColumn Property="@((ProductModel p) => p.Name)" Header="Product" />
                        <RColumn Property="@((ProductModel p) => p.Price)" Header="Price" Format="c" />
                        <RColumn Property="@((ProductModel p) => p.Category)" Header="Category" />
                        <RColumn Property="@((ProductModel p) => p.Stock)" Header="Stock" />
                    </ColumnsContent>
                </RTableGeneric>
            </div>

            @* Export Progress Display *@
            @if (!string.IsNullOrEmpty(exportStatus))
            {
                <div class="export-status bg-info/5 border border-info/20 rounded-lg p-4 mt-6">
                    <h4 class="text-lg font-medium text-info mb-2 d-flex items-center gap-2">
                        <i class="material-symbols-rounded">download</i>
                        Export Status
                    </h4>
                    <p class="text-sm mb-0">@exportStatus</p>
                    @if (exportProgress > 0)
                    {
                        <div class="progress-bar mt-2">
                            <div class="progress-fill" style="width: @(exportProgress)%"></div>
                        </div>
                        <p class="text-xs text-secondary mt-1">@(exportProgress)% complete</p>
                    }
                </div>
            }
        </div>
    }

    @if (selectedTest == "performance-monitoring")
    {
        <div class="test-section mb-8">
            <h2 class="text-xl font-semibold mb-4">⚡ Performance Monitoring</h2>
            <p class="text-secondary mb-4">Real-time performance tracking and optimization recommendations</p>

            @* Performance Enabled Table *@
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Performance Monitoring - Product Catalog</h3>
                <p class="text-sm text-secondary mb-3">Monitor render times, data loading, and memory usage</p>
                <RTableGeneric TItem="ProductModel"
                              Items="@largeProductList"
                              Title="Performance Monitored Table"
                              Subtitle="Performance metrics tracked in real-time"
                              MultiSelection="true"
                              PageSize="10"
                              ShowPagination="true"
                              MultiColumnSort="true"
                              EnableExport="true">
                    <ColumnsContent>
                        <RColumn Property="@((ProductModel p) => p.Name)" Header="Product Name" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Price)" Header="Price" Format="c" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Category)" Header="Category" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Stock)" Header="Stock" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.IsActive)" Header="Status" Sortable="true" />
                    </ColumnsContent>
                </RTableGeneric>
            </div>

            @* Heavy Operations Table *@
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Heavy Operations - Performance Testing</h3>
                <p class="text-sm text-secondary mb-3">Stress test with frequent sorting and filtering operations</p>
                <RTableGeneric TItem="GenericItem"
                              Items="@paginationTestData"
                              Title="Performance Stress Test"
                              Subtitle="Monitor performance under heavy operations"
                              MultiSelection="true"
                              PageSize="15"
                              ShowPagination="true"
                              MultiColumnSort="true"
                              MaxSortLevels="3"
                              EnableExport="true">
                    <ColumnsContent>
                        <RColumn Property="@((GenericItem i) => i.Name)" Header="Name" Sortable="true" />
                        <RColumn Property="@((GenericItem i) => i.Value)" Header="Value" Sortable="true" />
                        <RColumn Property="@((GenericItem i) => i.Status)" Header="Status" Sortable="true" />
                    </ColumnsContent>
                </RTableGeneric>
            </div>

            @* Performance Metrics Display *@
            @if (performanceMetrics != null)
            {
                <div class="performance-metrics bg-success/5 border border-success/20 rounded-lg p-4 mt-6">
                    <h4 class="text-lg font-medium text-success mb-3 d-flex items-center gap-2">
                        <i class="material-symbols-rounded">speed</i>
                        Performance Metrics
                    </h4>
                    <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                        <div class="metric-card">
                            <div class="text-sm text-secondary">Render Time</div>
                            <div class="text-lg font-semibold">@(performanceMetrics.AverageRenderTime.ToString("F1"))ms</div>
                        </div>
                        <div class="metric-card">
                            <div class="text-sm text-secondary">Data Load</div>
                            <div class="text-lg font-semibold">@(performanceMetrics.AverageDataLoad.ToString("F1"))ms</div>
                        </div>
                        <div class="metric-card">
                            <div class="text-sm text-secondary">Memory Usage</div>
                            <div class="text-lg font-semibold">@(performanceMetrics.MemoryUsage)</div>
                        </div>
                        <div class="metric-card">
                            <div class="text-sm text-secondary">Total Operations</div>
                            <div class="text-lg font-semibold">@(performanceMetrics.TotalOperations)</div>
                        </div>
                    </div>
                    @if (performanceRecommendations?.Any() == true)
                    {
                        <div class="mt-4">
                            <h5 class="font-medium mb-2">Performance Recommendations:</h5>
                            <div class="grid gap-2">
                                @foreach (var rec in performanceRecommendations)
                                {
                                    <div class="d-flex items-center gap-2 text-sm">
                                        <i class="material-symbols-rounded text-xs text-warning">warning</i>
                                        <span>@rec.ToString()</span>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }

    @if (selectedTest == "smart-auto")
    {
        <div class="test-section mb-8">
            <h2 class="text-xl font-semibold mb-4">🧠 Smart Auto-Detection</h2>
            <p class="text-secondary mb-4">RTable automatically detects item type, RColumn gets context via cascading</p>
            
            @* Products *@
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Product Catalog - Professional Table</h3>
                <p class="text-sm text-secondary mb-3">Full-featured table with sorting, selection, pagination, hover effects, and professional styling</p>
                <RTable Items="@products"
                        Title="Product Catalog"
                        Subtitle="@($"{products.Count} products available")"
                        BulkOperationsEnabled="true"
                        ExportEnabled="true"
                        MultiSelection="true"
                        MultiColumnSort="true"
                        MaxSortLevels="3"
                        PageSize="10"
                        ShowPagination="true"
                        Striped="false"
                        Hover="true"
                        Density="ComponentDensity.Normal"
                        SelectedItems="@selectedProducts"
                        SelectedItemsChanged="@HandleProductSelectionChanged">
                    <ColumnsContent>
                        <RColumn Property="@((ProductModel p) => p.Name)" Header="Product Name" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Price)" Header="Price" Format="c" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Category)" Header="Category" Sortable="true" Filterable="true" />
                        <RColumn Property="@((ProductModel p) => p.Stock)" Header="Stock" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.IsActive)" Header="Status" Sortable="true" />
                    </ColumnsContent>
                    <BulkOperations>
                        <div class="d-flex gap-2">
                            <RButton Text="@($"Export {selectedProducts?.Count ?? 0} items")"
                                     Icon="download"
                                     Size="ButtonSize.Small"
                                     Variant="ButtonVariant.Primary"
                                     Disabled="@(selectedProducts?.Count == 0)" />
                            <RButton Text="Delete Selected"
                                     Icon="delete"
                                     Size="ButtonSize.Small"
                                     Variant="ButtonVariant.Danger"
                                     Disabled="@(selectedProducts?.Count == 0)" />
                        </div>
                    </BulkOperations>
                </RTable>
            </div>

            @* Employees *@
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Employee Directory</h3>
                <RTable Items="@employees"
                        SingleSelection="true"
                        MultiColumnSort="true"
                        MaxSortLevels="2"
                        PageSize="3"
                        ShowPagination="true"
                        SelectedItem="@selectedEmployee"
                        SelectedItemChanged="@HandleEmployeeSelectionChanged">
                    <ColumnsContent>
                        <RColumn Property="@((EmployeeModel e) => e.FullName)" Header="Full Name" Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.Department)" Header="Department" Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.Salary)" Header="Salary" Format="c" Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.HireDate)" Header="Hire Date" Format="d" Sortable="true" />
                        @* <RColumn Header="Actions" Template="@(CreateEmployeeActionsTemplate())" Sortable="false" /> *@
                    </ColumnsContent>
                </RTable>
            </div>
        </div>
    }

    @if (selectedTest == "explicit-generic")
    {
        <div class="test-section mb-8">
            <h2 class="text-xl font-semibold mb-4">⚡ Explicit Generic Usage</h2>
            <p class="text-secondary mb-4">RTableGeneric with explicit TItem, RColumn still gets smart context</p>
            
            <RTableGeneric TItem="ProductModel"
                          Items="@products"
                          Title="Products (Explicit Generic)"
                          Subtitle="@($"{products.Count} items")"
                          Density="ComponentDensity.Compact"
                          ExportEnabled="true">
                <ColumnsContent>
                    <RColumn Property="@((ProductModel p) => p.Name)" Header="Product Name" Sortable="true" />
                    <RColumn Property="@((ProductModel p) => p.Price)" Header="Price" Format="c" />
                    <RColumn Property="@((ProductModel p) => p.Category)" Header="Category" />
                    <RColumn Property="@((ProductModel p) => p.Id)" Header="Actions" />
                </ColumnsContent>
            </RTableGeneric>
        </div>
    }

    @if (selectedTest == "column-management")
    {
        <div class="test-section mb-8">
            <h2 class="text-xl font-semibold mb-4">🎛️ Advanced Column Management</h2>
            <p class="text-secondary mb-4">Enterprise-grade column management with resizing, pinning, reordering, and persistence</p>
            
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Product Catalog - Column Management Enabled</h3>
                <p class="text-sm text-secondary mb-3">Drag column borders to resize, use column manager to hide/show/pin columns, drag headers to reorder</p>
                <RTableGeneric TItem="ProductModel"
                              Items="@products"
                              Title="Advanced Product Management"
                              Subtitle="Fully-featured table with enterprise column management"
                              ShowColumnManager="true"
                              ResizableColumns="true"
                              EnableColumnReordering="true"
                              PersistColumnPreferences="true"
                              TableId="products-advanced"
                              MultiSelection="true"
                              PageSize="5"
                              ShowPagination="true"
                              Density="ComponentDensity.Normal">
                    <ColumnsContent>
                        <RColumn Property="@((ProductModel p) => p.Id)" 
                                Header="ID" 
                                Width="80px" 
                                MinWidth="60px" 
                                MaxWidth="120px"
                                Sticky="true" 
                                StickyPosition="StickyPosition.Left" 
                                Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Name)" 
                                Header="Product Name" 
                                Width="200px"
                                MinWidth="150px"
                                MaxWidth="300px"
                                Resizable="true" 
                                Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Category)" 
                                Header="Category" 
                                Width="120px"
                                Resizable="true" 
                                Sortable="true" 
                                Filterable="true" />
                        <RColumn Property="@((ProductModel p) => p.Price)" 
                                Header="Price" 
                                Format="c" 
                                Width="100px"
                                Resizable="true" 
                                Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Stock)" 
                                Header="Stock" 
                                Width="80px"
                                Resizable="true" 
                                Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.IsActive)" 
                                Header="Status" 
                                Width="80px"
                                Resizable="true" 
                                Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Id)" 
                                Header="Actions" 
                                Width="100px"
                                Sticky="true" 
                                StickyPosition="StickyPosition.Right" 
                                Hideable="false"
                                Sortable="false" />
                    </ColumnsContent>
                </RTableGeneric>
            </div>
            
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Employee Directory - Compact with Column Management</h3>
                <p class="text-sm text-secondary mb-3">Demonstrates column management in compact density mode</p>
                <RTableGeneric TItem="EmployeeModel"
                              Items="@employees"
                              Title="Employee Management System"
                              ShowColumnManager="true"
                              ResizableColumns="true"
                              EnableColumnReordering="true"
                              PersistColumnPreferences="true"
                              TableId="employees-compact"
                              SingleSelection="true"
                              PageSize="3"
                              ShowPagination="true"
                              Density="ComponentDensity.Compact">
                    <ColumnsContent>
                        <RColumn Property="@((EmployeeModel e) => e.Id)" 
                                Header="ID" 
                                Width="60px"
                                Sticky="true" 
                                Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.FullName)" 
                                Header="Full Name" 
                                Width="180px"
                                MinWidth="120px"
                                Resizable="true" 
                                Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.Department)" 
                                Header="Department" 
                                Width="120px"
                                Resizable="true" 
                                Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.Salary)" 
                                Header="Salary" 
                                Format="c" 
                                Width="100px"
                                Resizable="true" 
                                Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.HireDate)" 
                                Header="Hire Date" 
                                Format="d" 
                                Width="100px"
                                Resizable="true" 
                                Sortable="true" />
                    </ColumnsContent>
                </RTableGeneric>
            </div>
        </div>
    }

    @if (selectedTest == "all-states")
    {
        <div class="test-section mb-8">
            <h2 class="text-xl font-semibold mb-4">🌐 All Data States</h2>
            <p class="text-secondary mb-4">Testing different data states and configurations</p>
            
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Small Dataset</h3>
                <RTable Items="@products.Take(2).ToList()"
                        Title="Small Product List"
                        ExportEnabled="true"
                        PageSize="3">
                    <ColumnsContent>
                        <RColumn Property="@((ProductModel p) => p.Name)" />
                        <RColumn Property="@((ProductModel p) => p.Price)" Format="c" />
                        <RColumn Property="@((ProductModel p) => p.Category)" />
                    </ColumnsContent>
                </RTable>
            </div>
            
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Large Dataset</h3>
                <RTable Items="@products"
                        Title="Full Product Catalog"
                        ExportEnabled="true"
                        PageSize="3">
                    <ColumnsContent>
                        <RColumn Property="@((ProductModel p) => p.Name)" />
                        <RColumn Property="@((ProductModel p) => p.Price)" Format="c" />
                        <RColumn Property="@((ProductModel p) => p.Stock)" />
                    </ColumnsContent>
                </RTable>
            </div>
        </div>
    }

    @if (selectedTest == "selection-pagination")
    {
        <div class="test-section mb-8">
            <h2 class="text-xl font-semibold mb-4">📋 Selection & Pagination Features</h2>
            <p class="text-secondary mb-4">Comprehensive testing of row selection and pagination functionality</p>
            
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Multi-Selection with Pagination</h3>
                <p class="text-sm text-secondary mb-3">Select individual items or use header checkbox to select all visible items on current page</p>
                <RTable Items="@largeProductList"
                        Title="Product Catalog"
                        Subtitle="@GetProductSelectionSummary()"
                        MultiSelection="true"
                        ShowPagination="true"
                        PageSize="5"
                        PageSizeOptions="@(new List<int> { 3, 5, 10, 15 })"
                        SelectedItems="@selectedLargeProducts"
                        SelectedItemsChanged="@HandleLargeProductSelectionChanged">
                    <ColumnsContent>
                        <RColumn Property="@((ProductModel p) => p.Name)" Header="Product Name" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Price)" Header="Price" Format="c" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Category)" Header="Category" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Stock)" Header="Stock" Sortable="true" />
                    </ColumnsContent>
                </RTable>
            </div>
            
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Single Selection with Pagination</h3>
                <p class="text-sm text-secondary mb-3">Select one employee using radio buttons, navigate through pages</p>
                <RTable Items="@largeEmployeeList"
                        Title="Employee Directory"
                        Subtitle="@GetEmployeeSelectionSummary()"
                        SingleSelection="true"
                        ShowPagination="true"
                        PageSize="4"
                        PageSizeOptions="@(new List<int> { 2, 4, 6, 8 })"
                        SelectedItem="@selectedLargeEmployee"
                        SelectedItemChanged="@HandleLargeEmployeeSelectionChanged">
                    <ColumnsContent>
                        <RColumn Property="@((EmployeeModel e) => e.FullName)" Header="Full Name" Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.Department)" Header="Department" Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.Salary)" Header="Salary" Format="c" Sortable="true" />
                    </ColumnsContent>
                </RTable>
            </div>
            
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Pagination Controls Test</h3>
                <p class="text-sm text-secondary mb-3">Test all pagination features: page size selector, direct page input, navigation buttons</p>
                <RTable Items="@paginationTestData"
                        Title="Pagination Demo"
                        Subtitle="@($"{paginationTestData.Count} total records")"
                        ShowPagination="true"
                        PageSize="3"
                        PageSizeOptions="@(new List<int> { 2, 3, 5, 10, 20 })">
                    <ColumnsContent>
                        <RColumn Property="@((GenericItem i) => i.Name)" Header="Name" Sortable="true" />
                        <RColumn Property="@((GenericItem i) => i.Value)" Header="Value" Sortable="true" />
                        <RColumn Property="@((GenericItem i) => i.Status)" Header="Status" Sortable="true" />
                    </ColumnsContent>
                </RTable>
            </div>
            
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Selection Persistence Across Pages</h3>
                <p class="text-sm text-secondary mb-3">Selected items remain selected when navigating between pages</p>
                <RTable Items="@persistenceTestData"
                        Title="Selection Persistence Test"
                        Subtitle="@GetPersistenceSelectionSummary()"
                        MultiSelection="true"
                        ShowPagination="true"
                        PageSize="4"
                        SelectedItems="@persistenceSelectedItems"
                        SelectedItemsChanged="@HandlePersistenceSelectionChanged">
                    <ColumnsContent>
                        <RColumn Property="@((GenericItem i) => i.Name)" Header="Item Name" />
                        <RColumn Property="@((GenericItem i) => i.Status)" Header="Status" />
                    </ColumnsContent>
                </RTable>
            </div>
        </div>
    }

    @if (selectedTest == "professional-features")
    {
        <div class="test-section mb-8">
            <h2 class="text-xl font-semibold mb-4">⭐ Professional Features Showcase</h2>
            <p class="text-secondary mb-4">Complete feature demonstration: all parameters, styling, and enterprise functionality</p>
            
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Striped Table with Enhanced Styling</h3>
                <p class="text-sm text-secondary mb-3">Professional striped rows with enhanced hover effects and comprehensive features</p>
                <RTable Items="@products"
                        Title="Product Catalog - Striped"
                        Subtitle="Enhanced with professional striping"
                        StartIcon="inventory_2"
                        MultiSelection="true"
                        MultiColumnSort="true"
                        MaxSortLevels="2"
                        PageSize="5"
                        ShowPagination="true"
                        Striped="true"
                        Hover="true"
                        Sortable="true"
                        AllowUnsorted="true"
                        Density="ComponentDensity.Normal"
                        BulkOperationsEnabled="true"
                        ExportEnabled="true"
                        SelectedItems="@selectedProducts"
                        SelectedItemsChanged="@HandleProductSelectionChanged">
                    <ColumnsContent>
                        <RColumn Property="@((ProductModel p) => p.Name)" Header="Product Name" Sortable="true" Width="200px" />
                        <RColumn Property="@((ProductModel p) => p.Price)" Header="Price" Format="c" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Category)" Header="Category" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Stock)" Header="Stock" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.IsActive)" Header="Active" Sortable="true" />
                    </ColumnsContent>
                    <BulkOperations>
                        <div class="d-flex gap-2">
                            <RButton Text="Bulk Export" Icon="download" Size="ButtonSize.Small" Variant="ButtonVariant.Primary" />
                            <RButton Text="Archive Selected" Icon="archive" Size="ButtonSize.Small" Variant="ButtonVariant.Outline" />
                        </div>
                    </BulkOperations>
                </RTable>
            </div>
            
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">No Hover Effects - Clean Minimal Table</h3>
                <p class="text-sm text-secondary mb-3">Clean table without hover effects, compact density</p>
                <RTable Items="@employees.Take(3).ToList()"
                        Title="Employee Directory - Minimal"
                        SingleSelection="true"
                        PageSize="10"
                        ShowPagination="false"
                        Striped="false"
                        Hover="false"
                        Density="ComponentDensity.Compact"
                        SelectedItem="@selectedEmployee"
                        SelectedItemChanged="@HandleEmployeeSelectionChanged">
                    <ColumnsContent>
                        <RColumn Property="@((EmployeeModel e) => e.FullName)" Header="Name" Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.Department)" Header="Department" Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.Salary)" Header="Salary" Format="c" Sortable="true" />
                    </ColumnsContent>
                </RTable>
            </div>
            
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">All Density Variants Comparison</h3>
                <p class="text-sm text-secondary mb-3">Side-by-side comparison of all density options</p>
                <div class="grid-cols-2 gap-4 d-grid">
                    <div>
                        <h4 class="font-medium mb-2">Compact Density</h4>
                        <RTable Items="@products.Take(2).ToList()"
                                Title="Compact"
                                PageSize="5"
                                ShowPagination="false"
                                Hover="true"
                                Density="ComponentDensity.Compact">
                            <ColumnsContent>
                                <RColumn Property="@((ProductModel p) => p.Name)" Header="Product" />
                                <RColumn Property="@((ProductModel p) => p.Price)" Header="Price" Format="c" />
                            </ColumnsContent>
                        </RTable>
                    </div>
                    <div>
                        <h4 class="font-medium mb-2">Spacious Density</h4>
                        <RTable Items="@products.Take(2).ToList()"
                                Title="Spacious"
                                PageSize="5"
                                ShowPagination="false"
                                Hover="true"
                                Density="ComponentDensity.Spacious">
                            <ColumnsContent>
                                <RColumn Property="@((ProductModel p) => p.Name)" Header="Product" />
                                <RColumn Property="@((ProductModel p) => p.Price)" Header="Price" Format="c" />
                            </ColumnsContent>
                        </RTable>
                    </div>
                </div>
            </div>
        </div>
    }
    
    @if (selectedTest == "visual-states")
    {
        <div class="test-section mb-8">
            <h2 class="text-xl font-semibold mb-4">🎨 Visual States & Densities</h2>
            
            @foreach (var density in allDensities)
            {
                <div class="mb-6">
                    <h3 class="text-lg font-medium mb-2">@density.ToString() Density</h3>
                    <RTableGeneric TItem="ProductModel"
                                  Items="@products.Take(2).ToList()"
                                  Title="@($"Products - {density}")"
                                  Density="@density"
                                  ExportEnabled="true">
                        <ColumnsContent>
                            <RColumn Property="@((ProductModel p) => p.Name)" />
                            <RColumn Property="@((ProductModel p) => p.Price)" Format="c" />
                            <RColumn Property="@((ProductModel p) => p.Category)" />
                        </ColumnsContent>
                    </RTableGeneric>
                </div>
            }

            @* Special States *@
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Loading State</h3>
                <RTable Items="@emptyProducts"
                        Loading="true"
                        Title="Loading..."
                        LoadingMessage="Fetching data...">
                    <ColumnsContent>
                        <RColumn Property="@((ProductModel p) => p.Name)" />
                        <RColumn Property="@((ProductModel p) => p.Price)" />
                    </ColumnsContent>
                </RTable>
            </div>

            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Empty State</h3>
                <RTable Items="@emptyProducts"
                        Title="No Products"
                        EmptyMessage="No products match your criteria.">
                    <ColumnsContent>
                        <RColumn Property="@((ProductModel p) => p.Name)" />
                        <RColumn Property="@((ProductModel p) => p.Price)" />
                    </ColumnsContent>
                </RTable>
            </div>
        </div>
    }

    @if (selectedTest == "interaction")
    {
        <div class="test-section mb-8">
            <h2 class="text-xl font-semibold mb-4">👆 Interaction & Selection</h2>
            
            <RTable Items="@products"
                    Title="Interactive Table"
                    BulkOperationsEnabled="true"
                    MultiSelection="true"
                    RowClickable="true"
                    SelectedItems="@selectedProducts"
                    SelectedItemsChanged="@HandleProductSelectionChanged"
                    OnRowClick="@HandleRowClick">
                <BulkOperations>
                    <div class="d-flex gap-2">
                        <RButton Text="@($"Export {selectedProducts?.Count ?? 0} items")"
                                 Icon="download"
                                 Size="ButtonSize.Small"
                                 Variant="ButtonVariant.Primary"
                                 Disabled="@(selectedProducts?.Count == 0)" />
                        <RButton Text="Delete Selected"
                                 Icon="delete"
                                 Size="ButtonSize.Small"
                                 Variant="ButtonVariant.Danger"
                                 Disabled="@(selectedProducts?.Count == 0)" />
                    </div>
                </BulkOperations>
                <ColumnsContent>
                    <RColumn Property="@((ProductModel p) => p.Name)" Sortable="true" />
                    <RColumn Property="@((ProductModel p) => p.Price)" Format="c" />
                    <RColumn Property="@((ProductModel p) => p.Stock)" />
                </ColumnsContent>
            </RTable>
        </div>
    }

    @if (selectedTest == "sorting-test")
    {
        <div class="test-section mb-8">
            <h2 class="text-xl font-semibold mb-4">🔄 Advanced Sorting Features</h2>
            <p class="text-secondary mb-4">Test comprehensive sorting functionality with different data types and multi-column support</p>
            
            <div class="mb-4 pa-3 bg-surface-elevated rounded">
                <h4 class="font-medium mb-2">Sorting Instructions:</h4>
                <ul class="text-sm text-secondary space-y-1">
                    <li>• <strong>Single Sort:</strong> Click any column header to sort ascending → descending → unsorted</li>
                    <li>• <strong>Multi Sort:</strong> Hold <kbd class="px-1 py-0.5 bg-surface rounded text-xs">Shift</kbd> + click additional columns for multi-level sorting</li>
                    <li>• <strong>Sort Priority:</strong> Numbers show sort order (1, 2, 3...)</li>
                    <li>• <strong>Data Types:</strong> String, Number, Currency, Date, Boolean sorting</li>
                </ul>
            </div>
            
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Product Catalog - Multi-Column Sorting</h3>
                <RTable Items="@products"
                        Title="Advanced Sorting Demo"
                        Subtitle="Try sorting by multiple columns using Shift+Click"
                        MultiColumnSort="true"
                        MaxSortLevels="3"
                        AllowUnsorted="true">
                    <ColumnsContent>
                        <RColumn Property="@((ProductModel p) => p.Name)" Header="Product Name (String)" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Price)" Header="Price (Currency)" Format="c" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Category)" Header="Category (String)" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Stock)" Header="Stock (Number)" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.IsActive)" Header="Active (Boolean)" Sortable="true" />
                    </ColumnsContent>
                </RTable>
            </div>
            
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Employee Directory - Date & Currency Sorting</h3>
                <RTable Items="@employees"
                        Title="Date & Time Sorting"
                        Subtitle="Test sorting with dates and salaries"
                        MultiColumnSort="true"
                        MaxSortLevels="2">
                    <ColumnsContent>
                        <RColumn Property="@((EmployeeModel e) => e.FullName)" Header="Name" Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.Department)" Header="Department" Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.Salary)" Header="Salary (Currency)" Format="c" Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.HireDate)" Header="Hire Date (DateTime)" Format="d" Sortable="true" />
                    </ColumnsContent>
                </RTable>
            </div>
            
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Single Column Mode - Traditional Sorting</h3>
                <p class="text-sm text-secondary mb-3">Multi-column sorting disabled - only one column can be sorted at a time</p>
                <RTable Items="@products.Take(3).ToList()"
                        Title="Single Column Sorting"
                        MultiColumnSort="false"
                        AllowUnsorted="false">
                    <ColumnsContent>
                        <RColumn Property="@((ProductModel p) => p.Name)" Header="Product" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Price)" Header="Price" Format="c" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Stock)" Header="Stock" Sortable="true" />
                    </ColumnsContent>
                </RTable>
            </div>
        </div>
    }

    @if (selectedTest == "reflection-fallback")
    {
        <div class="test-section mb-8">
            <h2 class="text-xl font-semibold mb-4">⚠️ Reflection Fallback Test</h2>
            <p class="text-secondary mb-4">RColumn without table context - should log warning and use reflection</p>
            
            @* Standalone column (this will trigger reflection fallback with warning) *@
            <div class="mb-4">
                <p class="text-warning mb-2">Check browser console for reflection fallback warnings:</p>
                <table class="table-auto border">
                    <thead>
                        <tr>
                            <RColumn Property="@((ProductModel p) => p.Name)" Header="Product (Reflection)" />
                            <RColumn Property="@((ProductModel p) => p.Price)" Header="Price (Reflection)" />
                        </tr>
                    </thead>
                </table>
            </div>

            @* Invalid column (this will show error state) *@
            <div class="mb-4">
                <p class="text-error mb-2">Column without proper context (should show error):</p>
                <table class="table-auto border">
                    <thead>
                        <tr>
                            <RColumn Header="Invalid Column" />
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    }

    @* Debug Information *@
    <div class="debug-info mt-8 pa-4 bg-surface rounded">
        <h3 class="text-lg font-medium mb-2">🔍 Debug Information</h3>
        <div class="text-sm space-y-1">
            <p><strong>Selected Test:</strong> @selectedTest</p>
            <p><strong>Products Count:</strong> @products.Count</p>
            <p><strong>Employees Count:</strong> @employees.Count</p>
            <p><strong>Selected Products:</strong> @(selectedProducts?.Count ?? 0)</p>
            <p><strong>Selected Employee:</strong> @(selectedEmployee?.FullName ?? "None")</p>
        </div>
    </div>
</div>

@code {
    private string selectedTest = "clean-features";
    
    private readonly Dictionary<string, string> testOptions = new()
    {
        { "professional-styling", "🎨 Professional Styling System" },
        { "clean-features", "🧹 Clean Core Features" },
        { "export-system", "📊 Advanced Export System" },
        { "performance-monitoring", "⚡ Performance Monitoring" },
        { "smart-auto", "🧠 Smart Auto-Detection" },
        { "explicit-generic", "⚡ Explicit Generic" },
        { "column-management", "🎛️ Advanced Column Management" },
        { "selection-pagination", "📋 Selection & Pagination" },
        { "professional-features", "⭐ Professional Features" },
        { "all-states", "🌐 All States" },
        { "visual-states", "🎨 Visual States" },
        { "interaction", "👆 Interactions" },
        { "sorting-test", "🔄 Advanced Sorting" },
        { "reflection-fallback", "⚠️ Reflection Fallback" }
    };
    
    // Professional Styling State Variables
    private RR.Blazor.Enums.TableVariant selectedVariant = RR.Blazor.Enums.TableVariant.Standard;
    private RR.Blazor.Enums.TableDensity selectedDensity = RR.Blazor.Enums.TableDensity.Normal;
    private int selectedElevation = 2;
    private bool enableGlassmorphism = false;
    private bool enableHoverEffects = true;
    private bool enableAnimations = true;
    private bool showBorders = true;
    
    private List<ProductModel> products = new();
    private List<EmployeeModel> employees = new();
    private List<ProductModel> emptyProducts = new();
    
    // Selection & Pagination test data
    private List<ProductModel> largeProductList = new();
    private List<EmployeeModel> largeEmployeeList = new();
    private List<GenericItem> paginationTestData = new();
    private List<GenericItem> persistenceTestData = new();
    
    private List<ProductModel>? selectedProducts = new();
    private EmployeeModel? selectedEmployee;
    
    // Selection & Pagination selections
    private List<ProductModel>? selectedLargeProducts = new();
    private EmployeeModel? selectedLargeEmployee;
    private List<GenericItem>? persistenceSelectedItems = new();
    
    private readonly List<ComponentDensity> allDensities = Enum.GetValues<ComponentDensity>().ToList();
    
    // Export and Performance State
    private string exportStatus = "";
    private double exportProgress = 0;
    
    // Performance tracking
    private PerformanceMetrics? performanceMetrics;
    private List<object>? performanceRecommendations = new();

    protected override void OnInitialized()
    {
        products = new List<ProductModel>
        {
            new() { Id = 1, Name = "iPhone 15 Pro", Price = 999.99m, Category = "Electronics", Stock = 25, IsActive = true },
            new() { Id = 2, Name = "MacBook Pro M3", Price = 1999.99m, Category = "Computers", Stock = 8, IsActive = true },
            new() { Id = 3, Name = "AirPods Pro", Price = 249.99m, Category = "Audio", Stock = 50, IsActive = true },
            new() { Id = 4, Name = "iPad Air", Price = 599.99m, Category = "Tablets", Stock = 15, IsActive = false },
            new() { Id = 5, Name = "Apple Watch", Price = 399.99m, Category = "Wearables", Stock = 5, IsActive = true }
        };

        employees = new List<EmployeeModel>
        {
            new() { Id = 1, FullName = "Sarah Johnson", FirstName = "Sarah", LastName = "Johnson", Department = "Engineering", Salary = 95000, HireDate = DateTime.Now.AddYears(-2), Status = "Active" },
            new() { Id = 2, FullName = "Michael Chen", FirstName = "Michael", LastName = "Chen", Department = "Design", Salary = 75000, HireDate = DateTime.Now.AddYears(-1), Status = "Active" },
            new() { Id = 3, FullName = "Emily Rodriguez", FirstName = "Emily", LastName = "Rodriguez", Department = "Marketing", Salary = 65000, HireDate = DateTime.Now.AddMonths(-8), Status = "Pending" },
            new() { Id = 4, FullName = "David Kim", FirstName = "David", LastName = "Kim", Department = "Sales", Salary = 80000, HireDate = DateTime.Now.AddYears(-3), Status = "Active" }
        };
        
        InitializeSelectionPaginationTestData();
    }
    
    private void InitializeSelectionPaginationTestData()
    {
        // Large product list for selection/pagination testing
        largeProductList = new List<ProductModel>();
        for (int i = 1; i <= 25; i++)
        {
            largeProductList.Add(new ProductModel
            {
                Id = i,
                Name = $"Product {i:D2}",
                Price = (decimal)(50 + (i * 25.5)),
                Category = i <= 8 ? "Electronics" : i <= 16 ? "Computers" : "Accessories",
                Stock = 10 + (i % 20),
                IsActive = i % 3 != 0
            });
        }
        
        // Large employee list for selection/pagination testing
        largeEmployeeList = new List<EmployeeModel>();
        var departments = new[] { "Engineering", "Design", "Marketing", "Sales", "HR", "Finance" };
        var names = new[] { "Alice", "Bob", "Carol", "David", "Emma", "Frank", "Grace", "Henry", "Ivy", "Jack", "Kate", "Leo", "Maya", "Nathan", "Olivia", "Peter" };
        
        for (int i = 0; i < 16; i++)
        {
            largeEmployeeList.Add(new EmployeeModel
            {
                Id = i + 1,
                FullName = $"{names[i]} {(char)('A' + i)}.",
                Department = departments[i % departments.Length],
                Salary = 50000 + (i * 5000),
                HireDate = DateTime.Now.AddMonths(-(i * 3))
            });
        }
        
        // Pagination test data
        paginationTestData = new List<GenericItem>();
        for (int i = 1; i <= 50; i++)
        {
            paginationTestData.Add(new GenericItem
            {
                Name = $"Item {i:D3}",
                Value = $"Value {i}",
                Status = i % 4 == 0 ? "Inactive" : "Active"
            });
        }
        
        // Persistence test data
        persistenceTestData = new List<GenericItem>();
        for (int i = 1; i <= 20; i++)
        {
            persistenceTestData.Add(new GenericItem
            {
                Name = $"Persistent Item {i:D2}",
                Value = $"Test {i}",
                Status = i % 3 == 0 ? "Special" : "Normal"
            });
        }
    }

    private async Task OnTestChangedCallback(object test)
    {
        selectedTest = test?.ToString() ?? "smart-auto";
        StateHasChanged();
        await Task.CompletedTask;
    }


    private async Task HandleRowClick(object item)
    {
        // Handle row click
        await Task.CompletedTask;
    }

    private void HandleProductSelectionChanged(object items)
    {
        if (items is List<ProductModel> typedItems)
        {
            selectedProducts = typedItems;
        }
        else if (items is IEnumerable<object> objectItems)
        {
            selectedProducts = objectItems.Cast<ProductModel>().ToList();
        }
        else
        {
            selectedProducts = new List<ProductModel>();
        }
        StateHasChanged();
    }

    private void HandleEmployeeSelectionChanged(object item)
    {
        if (item is EmployeeModel typedItem)
        {
            selectedEmployee = typedItem;
        }
        else
        {
            selectedEmployee = null;
        }
        StateHasChanged();
    }
    
    // Selection & Pagination handlers
    private void HandleLargeProductSelectionChanged(object items)
    {
        if (items is List<ProductModel> typedItems)
        {
            selectedLargeProducts = typedItems;
        }
        else if (items is IEnumerable<object> objectItems)
        {
            selectedLargeProducts = objectItems.Cast<ProductModel>().ToList();
        }
        else
        {
            selectedLargeProducts = new List<ProductModel>();
        }
        StateHasChanged();
    }
    
    private void HandleLargeEmployeeSelectionChanged(object item)
    {
        if (item is EmployeeModel typedItem)
        {
            selectedLargeEmployee = typedItem;
        }
        else
        {
            selectedLargeEmployee = null;
        }
        StateHasChanged();
    }
    
    private void HandlePersistenceSelectionChanged(object items)
    {
        if (items is List<GenericItem> typedItems)
        {
            persistenceSelectedItems = typedItems;
        }
        else if (items is IEnumerable<object> objectItems)
        {
            persistenceSelectedItems = objectItems.Cast<GenericItem>().ToList();
        }
        else
        {
            persistenceSelectedItems = new List<GenericItem>();
        }
        StateHasChanged();
    }
    
    // Summary methods
    private string GetProductSelectionSummary()
    {
        var selectedCount = selectedLargeProducts?.Count ?? 0;
        if (selectedCount == 0) return $"{largeProductList.Count} products available";
        return $"{largeProductList.Count} products available • {selectedCount} selected";
    }
    
    private string GetEmployeeSelectionSummary()
    {
        if (selectedLargeEmployee == null) return $"{largeEmployeeList.Count} employees available";
        return $"{largeEmployeeList.Count} employees available • {selectedLargeEmployee.FullName} selected";
    }
    
    private string GetPersistenceSelectionSummary()
    {
        var selectedCount = persistenceSelectedItems?.Count ?? 0;
        if (selectedCount == 0) return $"{persistenceTestData.Count} items available";
        return $"{persistenceTestData.Count} items available • {selectedCount} selected across all pages";
    }

    // Action handlers for row controls
    private void EditProduct(ProductModel product)
    {
        // Simulate edit action
        Console.WriteLine($"Editing product: {product.Name}");
    }

    private void DeleteProduct(ProductModel product)
    {
        // Simulate delete action
        Console.WriteLine($"Deleting product: {product.Name}");
        products.Remove(product);
        StateHasChanged();
    }

    private void ViewEmployee(EmployeeModel employee)
    {
        // Simulate view action
        Console.WriteLine($"Viewing employee: {employee.FullName}");
    }

    private void EditEmployee(EmployeeModel employee)
    {
        // Simulate edit action
        Console.WriteLine($"Editing employee: {employee.FullName}");
    }

    // Template creators for action columns
    private RenderFragment<ProductModel> CreateProductActionsTemplate()
    {
        return item => builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "d-flex gap-1");
            
            // Edit Button
            builder.OpenComponent<RButton>(2);
            builder.AddAttribute(3, "Icon", "edit");
            builder.AddAttribute(4, "Size", ButtonSize.Small);
            builder.AddAttribute(5, "Variant", ButtonVariant.Ghost);
            builder.AddAttribute(6, "OnClick", EventCallback.Factory.Create<MouseEventArgs>(this, _ => EditProduct(item)));
            builder.CloseComponent();
            
            // Delete Button
            builder.OpenComponent<RButton>(7);
            builder.AddAttribute(8, "Icon", "delete");
            builder.AddAttribute(9, "Size", ButtonSize.Small);
            builder.AddAttribute(10, "Variant", ButtonVariant.Ghost);
            builder.AddAttribute(11, "Class", "text-error");
            builder.AddAttribute(12, "OnClick", EventCallback.Factory.Create<MouseEventArgs>(this, _ => DeleteProduct(item)));
            builder.CloseComponent();
            
            builder.CloseElement();
        };
    }

    private RenderFragment<EmployeeModel> CreateEmployeeActionsTemplate()
    {
        return item => builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "d-flex gap-1");
            
            // View Button
            builder.OpenComponent<RButton>(2);
            builder.AddAttribute(3, "Icon", "person");
            builder.AddAttribute(4, "Size", ButtonSize.Small);
            builder.AddAttribute(5, "Variant", ButtonVariant.Ghost);
            builder.AddAttribute(6, "OnClick", EventCallback.Factory.Create<MouseEventArgs>(this, _ => ViewEmployee(item)));
            builder.CloseComponent();
            
            // Edit Button
            builder.OpenComponent<RButton>(7);
            builder.AddAttribute(8, "Icon", "edit");
            builder.AddAttribute(9, "Size", ButtonSize.Small);
            builder.AddAttribute(10, "Variant", ButtonVariant.Ghost);
            builder.AddAttribute(11, "OnClick", EventCallback.Factory.Create<MouseEventArgs>(this, _ => EditEmployee(item)));
            builder.CloseComponent();
            
            builder.CloseElement();
        };
    }

    public class ProductModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public decimal Price { get; set; }
        public string Category { get; set; } = "";
        public int Stock { get; set; }
        public bool IsActive { get; set; }
    }

    public class EmployeeModel
    {
        public int Id { get; set; }
        public string FullName { get; set; } = "";
        public string FirstName { get; set; } = "";
        public string LastName { get; set; } = "";
        public string Department { get; set; } = "";
        public decimal Salary { get; set; }
        public DateTime HireDate { get; set; }
        public string Status { get; set; } = "Active";
    }

    public class GenericItem
    {
        public string Name { get; set; } = "";
        public string Value { get; set; } = "";
        public string Status { get; set; } = "";
    }

    // Export Event Handlers

    private async Task HandleExportProgress(ExportProgressEventArgs args)
    {
        exportStatus = args.CurrentStep;
        exportProgress = args.ProgressPercentage;
        
        if (args.IsCompleted)
        {
            exportStatus = "Export completed successfully!";
            // Clear status after 3 seconds
            _ = Task.Delay(3000).ContinueWith(_ =>
            {
                exportStatus = "";
                exportProgress = 0;
                InvokeAsync(StateHasChanged);
            });
        }
        else if (!string.IsNullOrEmpty(args.ErrorMessage))
        {
            exportStatus = $"Export failed: {args.ErrorMessage}";
        }
        
        StateHasChanged();
        await Task.CompletedTask;
    }


    // Helper methods for table display

    private string FormatBytes(long bytes)
    {
        if (bytes < 1024) return $"{bytes} B";
        if (bytes < 1024 * 1024) return $"{bytes / 1024:F1} KB";
        if (bytes < 1024 * 1024 * 1024) return $"{bytes / (1024 * 1024):F1} MB";
        return $"{bytes / (1024 * 1024 * 1024):F1} GB";
    }

    // Professional Styling Helper Methods
    private RR.Blazor.Enums.TableVariant[] GetTableVariants()
    {
        return Enum.GetValues<RR.Blazor.Enums.TableVariant>();
    }
    
    private RR.Blazor.Enums.TableDensity[] GetTableDensities()
    {
        return Enum.GetValues<RR.Blazor.Enums.TableDensity>();
    }
    
    private string GetStylingSubtitle()
    {
        var parts = new List<string>
        {
            $"Variant: {selectedVariant}",
            $"Density: {selectedDensity}",
            $"Elevation: {selectedElevation}"
        };
        
        if (enableGlassmorphism) parts.Add("Glassmorphism");
        if (enableHoverEffects) parts.Add("Hover Effects");
        if (enableAnimations) parts.Add("Animations");
        if (!showBorders) parts.Add("No Borders");
        
        return string.Join(" • ", parts);
    }
    
    private string GetStatusBadgeClass(string status)
    {
        return status?.ToLowerInvariant() switch
        {
            "active" => "badge-success",
            "inactive" => "badge-secondary",
            "pending" => "badge-warning",
            "error" => "badge-error",
            _ => "badge-info"
        };
    }
    
    // Status badge helper methods

    // Performance metrics display model
    public class PerformanceMetrics
    {
        public double AverageRenderTime { get; set; }
        public double AverageDataLoad { get; set; }
        public string MemoryUsage { get; set; } = "";
        public int TotalOperations { get; set; }
    }
}