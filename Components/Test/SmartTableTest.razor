@page "/test/smart-tables"
@using RR.Blazor.Components.Data
@using RR.Blazor.Components.Core
@using RR.Blazor.Enums

@* Comprehensive Smart Table System Test *@

<div class="pa-6">
    <h1 class="text-3xl font-bold mb-4">ü§ñ Smart Table Test</h1>
    <p class="text-secondary mb-6">Comprehensive testing of RTable + RColumn smart synergy with all variations</p>

    @* Test Selector *@
    <div class="test-controls mb-6 pa-4 bg-surface rounded">
        <RChoiceGeneric Items="@testOptions.Keys"
                        SelectedValue="@selectedTest"
                        SelectedValueChangedObject="@OnTestChangedCallback"
                        ItemLabelSelectorTyped="@(item => testOptions[item.ToString()])"
                        AriaLabel="Test Case" />
    </div>

    @if (selectedTest == "smart-auto")
    {
        <div class="test-section mb-8">
            <h2 class="text-xl font-semibold mb-4">üß† Smart Auto-Detection</h2>
            <p class="text-secondary mb-4">RTable automatically detects item type, RColumn gets context via cascading</p>
            
            @* Products *@
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Product Catalog</h3>
                <RTable Items="@products"
                        BulkOperationsEnabled="true"
                        ExportEnabled="true"
                        MultiSelection="true"
                        MultiColumnSort="true"
                        MaxSortLevels="3"
                        SelectedItems="@selectedProducts"
                        SelectedItemsChanged="@HandleProductSelectionChanged">
                    <ColumnsContent>
                        <RColumn Property="@((ProductModel p) => p.Name)" Header="Product Name" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Price)" Header="Price" Format="c" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Category)" Header="Category" Sortable="true" Filterable="true" />
                        <RColumn Property="@((ProductModel p) => p.Stock)" Header="Stock" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.IsActive)" Header="Status" Sortable="true" />
                        @* <RColumn Header="Actions" Template="@(CreateProductActionsTemplate())" Sortable="false" /> *@
                    </ColumnsContent>
                </RTable>
            </div>

            @* Employees *@
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Employee Directory</h3>
                <RTable Items="@employees"
                        SingleSelection="true"
                        MultiColumnSort="true"
                        MaxSortLevels="2"
                        SelectedItem="@selectedEmployee"
                        SelectedItemChanged="@HandleEmployeeSelectionChanged">
                    <ColumnsContent>
                        <RColumn Property="@((EmployeeModel e) => e.FullName)" Header="Full Name" Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.Department)" Header="Department" Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.Salary)" Header="Salary" Format="c" Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.HireDate)" Header="Hire Date" Format="d" Sortable="true" />
                        @* <RColumn Header="Actions" Template="@(CreateEmployeeActionsTemplate())" Sortable="false" /> *@
                    </ColumnsContent>
                </RTable>
            </div>
        </div>
    }

    @if (selectedTest == "explicit-generic")
    {
        <div class="test-section mb-8">
            <h2 class="text-xl font-semibold mb-4">‚ö° Explicit Generic Usage</h2>
            <p class="text-secondary mb-4">RTableGeneric with explicit TItem, RColumn still gets smart context</p>
            
            <RTableGeneric TItem="ProductModel"
                          Items="@products"
                          Title="Products (Explicit Generic)"
                          Subtitle="@($"{products.Count} items")"
                          Density="ComponentDensity.Compact"
                          ExportEnabled="true">
                <ColumnsContent>
                    <RColumn Property="@((ProductModel p) => p.Name)" Header="Product Name" Sortable="true" />
                    <RColumn Property="@((ProductModel p) => p.Price)" Header="Price" Format="c" />
                    <RColumn Property="@((ProductModel p) => p.Category)" Header="Category" />
                    <RColumn Property="@((ProductModel p) => p.Id)" Header="Actions" />
                </ColumnsContent>
            </RTableGeneric>
        </div>
    }

    @if (selectedTest == "all-states")
    {
        <div class="test-section mb-8">
            <h2 class="text-xl font-semibold mb-4">üåê All Data States</h2>
            <p class="text-secondary mb-4">Testing different data states and configurations</p>
            
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Small Dataset</h3>
                <RTable Items="@products.Take(2).ToList()"
                        Title="Small Product List"
                        ExportEnabled="true"
                        PageSize="3">
                    <ColumnsContent>
                        <RColumn Property="@((ProductModel p) => p.Name)" />
                        <RColumn Property="@((ProductModel p) => p.Price)" Format="c" />
                        <RColumn Property="@((ProductModel p) => p.Category)" />
                    </ColumnsContent>
                </RTable>
            </div>
            
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Large Dataset</h3>
                <RTable Items="@products"
                        Title="Full Product Catalog"
                        ExportEnabled="true"
                        PageSize="3">
                    <ColumnsContent>
                        <RColumn Property="@((ProductModel p) => p.Name)" />
                        <RColumn Property="@((ProductModel p) => p.Price)" Format="c" />
                        <RColumn Property="@((ProductModel p) => p.Stock)" />
                    </ColumnsContent>
                </RTable>
            </div>
        </div>
    }

    @if (selectedTest == "visual-states")
    {
        <div class="test-section mb-8">
            <h2 class="text-xl font-semibold mb-4">üé® Visual States & Densities</h2>
            
            @foreach (var density in allDensities)
            {
                <div class="mb-6">
                    <h3 class="text-lg font-medium mb-2">@density.ToString() Density</h3>
                    <RTableGeneric TItem="ProductModel"
                                  Items="@products.Take(2).ToList()"
                                  Title="@($"Products - {density}")"
                                  Density="@density"
                                  ExportEnabled="true">
                        <ColumnsContent>
                            <RColumn Property="@((ProductModel p) => p.Name)" />
                            <RColumn Property="@((ProductModel p) => p.Price)" Format="c" />
                            <RColumn Property="@((ProductModel p) => p.Category)" />
                        </ColumnsContent>
                    </RTableGeneric>
                </div>
            }

            @* Special States *@
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Loading State</h3>
                <RTable Items="@emptyProducts"
                        Loading="true"
                        Title="Loading..."
                        LoadingMessage="Fetching data...">
                    <ColumnsContent>
                        <RColumn Property="@((ProductModel p) => p.Name)" />
                        <RColumn Property="@((ProductModel p) => p.Price)" />
                    </ColumnsContent>
                </RTable>
            </div>

            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Empty State</h3>
                <RTable Items="@emptyProducts"
                        Title="No Products"
                        EmptyMessage="No products match your criteria.">
                    <ColumnsContent>
                        <RColumn Property="@((ProductModel p) => p.Name)" />
                        <RColumn Property="@((ProductModel p) => p.Price)" />
                    </ColumnsContent>
                </RTable>
            </div>
        </div>
    }

    @if (selectedTest == "interaction")
    {
        <div class="test-section mb-8">
            <h2 class="text-xl font-semibold mb-4">üëÜ Interaction & Selection</h2>
            
            <RTable Items="@products"
                    Title="Interactive Table"
                    BulkOperationsEnabled="true"
                    MultiSelection="true"
                    RowClickable="true"
                    SelectedItems="@selectedProducts"
                    SelectedItemsChanged="@HandleProductSelectionChanged"
                    OnRowClick="@HandleRowClick">
                <BulkOperations>
                    <div class="d-flex gap-2">
                        <RButton Text="@($"Export {selectedProducts?.Count ?? 0} items")"
                                 Icon="download"
                                 Size="ButtonSize.Small"
                                 Variant="ButtonVariant.Primary"
                                 Disabled="@(selectedProducts?.Count == 0)" />
                        <RButton Text="Delete Selected"
                                 Icon="delete"
                                 Size="ButtonSize.Small"
                                 Variant="ButtonVariant.Danger"
                                 Disabled="@(selectedProducts?.Count == 0)" />
                    </div>
                </BulkOperations>
                <ColumnsContent>
                    <RColumn Property="@((ProductModel p) => p.Name)" Sortable="true" />
                    <RColumn Property="@((ProductModel p) => p.Price)" Format="c" />
                    <RColumn Property="@((ProductModel p) => p.Stock)" />
                </ColumnsContent>
            </RTable>
        </div>
    }

    @if (selectedTest == "sorting-test")
    {
        <div class="test-section mb-8">
            <h2 class="text-xl font-semibold mb-4">üîÑ Advanced Sorting Features</h2>
            <p class="text-secondary mb-4">Test comprehensive sorting functionality with different data types and multi-column support</p>
            
            <div class="mb-4 pa-3 bg-surface-elevated rounded">
                <h4 class="font-medium mb-2">Sorting Instructions:</h4>
                <ul class="text-sm text-secondary space-y-1">
                    <li>‚Ä¢ <strong>Single Sort:</strong> Click any column header to sort ascending ‚Üí descending ‚Üí unsorted</li>
                    <li>‚Ä¢ <strong>Multi Sort:</strong> Hold <kbd class="px-1 py-0.5 bg-surface rounded text-xs">Shift</kbd> + click additional columns for multi-level sorting</li>
                    <li>‚Ä¢ <strong>Sort Priority:</strong> Numbers show sort order (1, 2, 3...)</li>
                    <li>‚Ä¢ <strong>Data Types:</strong> String, Number, Currency, Date, Boolean sorting</li>
                </ul>
            </div>
            
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Product Catalog - Multi-Column Sorting</h3>
                <RTable Items="@products"
                        Title="Advanced Sorting Demo"
                        Subtitle="Try sorting by multiple columns using Shift+Click"
                        MultiColumnSort="true"
                        MaxSortLevels="3"
                        AllowUnsorted="true">
                    <ColumnsContent>
                        <RColumn Property="@((ProductModel p) => p.Name)" Header="Product Name (String)" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Price)" Header="Price (Currency)" Format="c" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Category)" Header="Category (String)" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Stock)" Header="Stock (Number)" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.IsActive)" Header="Active (Boolean)" Sortable="true" />
                    </ColumnsContent>
                </RTable>
            </div>
            
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Employee Directory - Date & Currency Sorting</h3>
                <RTable Items="@employees"
                        Title="Date & Time Sorting"
                        Subtitle="Test sorting with dates and salaries"
                        MultiColumnSort="true"
                        MaxSortLevels="2">
                    <ColumnsContent>
                        <RColumn Property="@((EmployeeModel e) => e.FullName)" Header="Name" Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.Department)" Header="Department" Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.Salary)" Header="Salary (Currency)" Format="c" Sortable="true" />
                        <RColumn Property="@((EmployeeModel e) => e.HireDate)" Header="Hire Date (DateTime)" Format="d" Sortable="true" />
                    </ColumnsContent>
                </RTable>
            </div>
            
            <div class="mb-6">
                <h3 class="text-lg font-medium mb-2">Single Column Mode - Traditional Sorting</h3>
                <p class="text-sm text-secondary mb-3">Multi-column sorting disabled - only one column can be sorted at a time</p>
                <RTable Items="@products.Take(3).ToList()"
                        Title="Single Column Sorting"
                        MultiColumnSort="false"
                        AllowUnsorted="false">
                    <ColumnsContent>
                        <RColumn Property="@((ProductModel p) => p.Name)" Header="Product" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Price)" Header="Price" Format="c" Sortable="true" />
                        <RColumn Property="@((ProductModel p) => p.Stock)" Header="Stock" Sortable="true" />
                    </ColumnsContent>
                </RTable>
            </div>
        </div>
    }

    @if (selectedTest == "reflection-fallback")
    {
        <div class="test-section mb-8">
            <h2 class="text-xl font-semibold mb-4">‚ö†Ô∏è Reflection Fallback Test</h2>
            <p class="text-secondary mb-4">RColumn without table context - should log warning and use reflection</p>
            
            @* Standalone column (this will trigger reflection fallback with warning) *@
            <div class="mb-4">
                <p class="text-warning mb-2">Check browser console for reflection fallback warnings:</p>
                <table class="table-auto border">
                    <thead>
                        <tr>
                            <RColumn Property="@((ProductModel p) => p.Name)" Header="Product (Reflection)" />
                            <RColumn Property="@((ProductModel p) => p.Price)" Header="Price (Reflection)" />
                        </tr>
                    </thead>
                </table>
            </div>

            @* Invalid column (this will show error state) *@
            <div class="mb-4">
                <p class="text-error mb-2">Column without proper context (should show error):</p>
                <table class="table-auto border">
                    <thead>
                        <tr>
                            <RColumn Header="Invalid Column" />
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    }

    @* Debug Information *@
    <div class="debug-info mt-8 pa-4 bg-surface rounded">
        <h3 class="text-lg font-medium mb-2">üîç Debug Information</h3>
        <div class="text-sm space-y-1">
            <p><strong>Selected Test:</strong> @selectedTest</p>
            <p><strong>Products Count:</strong> @products.Count</p>
            <p><strong>Employees Count:</strong> @employees.Count</p>
            <p><strong>Selected Products:</strong> @(selectedProducts?.Count ?? 0)</p>
            <p><strong>Selected Employee:</strong> @(selectedEmployee?.FullName ?? "None")</p>
        </div>
    </div>
</div>

@code {
    private string selectedTest = "smart-auto";
    
    private readonly Dictionary<string, string> testOptions = new()
    {
        { "smart-auto", "üß† Smart Auto-Detection" },
        { "explicit-generic", "‚ö° Explicit Generic" },
        { "all-states", "üåê All States" },
        { "visual-states", "üé® Visual States" },
        { "interaction", "üëÜ Interactions" },
        { "sorting-test", "üîÑ Advanced Sorting" },
        { "reflection-fallback", "‚ö†Ô∏è Reflection Fallback" }
    };
    
    private List<ProductModel> products = new();
    private List<EmployeeModel> employees = new();
    private List<ProductModel> emptyProducts = new();
    
    private List<ProductModel>? selectedProducts = new();
    private EmployeeModel? selectedEmployee;
    
    private readonly List<ComponentDensity> allDensities = Enum.GetValues<ComponentDensity>().ToList();

    protected override void OnInitialized()
    {
        products = new List<ProductModel>
        {
            new() { Id = 1, Name = "iPhone 15 Pro", Price = 999.99m, Category = "Electronics", Stock = 25, IsActive = true },
            new() { Id = 2, Name = "MacBook Pro M3", Price = 1999.99m, Category = "Computers", Stock = 8, IsActive = true },
            new() { Id = 3, Name = "AirPods Pro", Price = 249.99m, Category = "Audio", Stock = 50, IsActive = true },
            new() { Id = 4, Name = "iPad Air", Price = 599.99m, Category = "Tablets", Stock = 15, IsActive = false },
            new() { Id = 5, Name = "Apple Watch", Price = 399.99m, Category = "Wearables", Stock = 5, IsActive = true }
        };

        employees = new List<EmployeeModel>
        {
            new() { Id = 1, FullName = "Sarah Johnson", Department = "Engineering", Salary = 95000, HireDate = DateTime.Now.AddYears(-2) },
            new() { Id = 2, FullName = "Michael Chen", Department = "Design", Salary = 75000, HireDate = DateTime.Now.AddYears(-1) },
            new() { Id = 3, FullName = "Emily Rodriguez", Department = "Marketing", Salary = 65000, HireDate = DateTime.Now.AddMonths(-8) },
            new() { Id = 4, FullName = "David Kim", Department = "Sales", Salary = 80000, HireDate = DateTime.Now.AddYears(-3) }
        };
    }

    private async Task OnTestChangedCallback(object test)
    {
        selectedTest = test?.ToString() ?? "smart-auto";
        StateHasChanged();
        await Task.CompletedTask;
    }


    private async Task HandleRowClick(object item)
    {
        // Handle row click
        await Task.CompletedTask;
    }

    private void HandleProductSelectionChanged(object items)
    {
        if (items is List<ProductModel> typedItems)
        {
            selectedProducts = typedItems;
        }
        else if (items is IEnumerable<object> objectItems)
        {
            selectedProducts = objectItems.Cast<ProductModel>().ToList();
        }
        else
        {
            selectedProducts = new List<ProductModel>();
        }
        StateHasChanged();
    }

    private void HandleEmployeeSelectionChanged(object item)
    {
        if (item is EmployeeModel typedItem)
        {
            selectedEmployee = typedItem;
        }
        else
        {
            selectedEmployee = null;
        }
        StateHasChanged();
    }

    // Action handlers for row controls
    private void EditProduct(ProductModel product)
    {
        // Simulate edit action
        Console.WriteLine($"Editing product: {product.Name}");
    }

    private void DeleteProduct(ProductModel product)
    {
        // Simulate delete action
        Console.WriteLine($"Deleting product: {product.Name}");
        products.Remove(product);
        StateHasChanged();
    }

    private void ViewEmployee(EmployeeModel employee)
    {
        // Simulate view action
        Console.WriteLine($"Viewing employee: {employee.FullName}");
    }

    private void EditEmployee(EmployeeModel employee)
    {
        // Simulate edit action
        Console.WriteLine($"Editing employee: {employee.FullName}");
    }

    // Template creators for action columns
    private RenderFragment<ProductModel> CreateProductActionsTemplate()
    {
        return item => builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "d-flex gap-1");
            
            // Edit Button
            builder.OpenComponent<RButton>(2);
            builder.AddAttribute(3, "Icon", "edit");
            builder.AddAttribute(4, "Size", ButtonSize.Small);
            builder.AddAttribute(5, "Variant", ButtonVariant.Ghost);
            builder.AddAttribute(6, "OnClick", EventCallback.Factory.Create<MouseEventArgs>(this, _ => EditProduct(item)));
            builder.CloseComponent();
            
            // Delete Button
            builder.OpenComponent<RButton>(7);
            builder.AddAttribute(8, "Icon", "delete");
            builder.AddAttribute(9, "Size", ButtonSize.Small);
            builder.AddAttribute(10, "Variant", ButtonVariant.Ghost);
            builder.AddAttribute(11, "Class", "text-error");
            builder.AddAttribute(12, "OnClick", EventCallback.Factory.Create<MouseEventArgs>(this, _ => DeleteProduct(item)));
            builder.CloseComponent();
            
            builder.CloseElement();
        };
    }

    private RenderFragment<EmployeeModel> CreateEmployeeActionsTemplate()
    {
        return item => builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "d-flex gap-1");
            
            // View Button
            builder.OpenComponent<RButton>(2);
            builder.AddAttribute(3, "Icon", "person");
            builder.AddAttribute(4, "Size", ButtonSize.Small);
            builder.AddAttribute(5, "Variant", ButtonVariant.Ghost);
            builder.AddAttribute(6, "OnClick", EventCallback.Factory.Create<MouseEventArgs>(this, _ => ViewEmployee(item)));
            builder.CloseComponent();
            
            // Edit Button
            builder.OpenComponent<RButton>(7);
            builder.AddAttribute(8, "Icon", "edit");
            builder.AddAttribute(9, "Size", ButtonSize.Small);
            builder.AddAttribute(10, "Variant", ButtonVariant.Ghost);
            builder.AddAttribute(11, "OnClick", EventCallback.Factory.Create<MouseEventArgs>(this, _ => EditEmployee(item)));
            builder.CloseComponent();
            
            builder.CloseElement();
        };
    }

    public class ProductModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public decimal Price { get; set; }
        public string Category { get; set; } = "";
        public int Stock { get; set; }
        public bool IsActive { get; set; }
    }

    public class EmployeeModel
    {
        public int Id { get; set; }
        public string FullName { get; set; } = "";
        public string Department { get; set; } = "";
        public decimal Salary { get; set; }
        public DateTime HireDate { get; set; }
    }

    public class GenericItem
    {
        public string Name { get; set; } = "";
        public string Value { get; set; } = "";
        public string Status { get; set; } = "";
    }
}