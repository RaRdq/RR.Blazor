@page "/test/toggle"
@using RR.Blazor.Components
@using RR.Blazor.Enums

<div class="pa-4 space-y-6">
    <div class="mb-6">
        <div class="text-h3 font-bold">Toggle Switch Component Test</div>
        <p class="text-body-2 text-secondary">Testing RToggleGeneric component for proper two-way binding and functionality</p>
    </div>

    <!-- Test Results Display -->
    <div class="border rounded-lg pa-4 bg-info-light">
        <div class="text-h4 font-bold">Current Values</div>
        <div class="grid grid-cols-2 gap-4 text-sm">
            <div>basicToggle: <strong>@basicToggle</strong></div>
            <div>settingsToggle: <strong>@settingsToggle</strong></div>
            <div>notificationToggle: <strong>@notificationToggle</strong></div>
            <div>featureToggle: <strong>@featureToggle</strong></div>
        </div>
    </div>

    <!-- Critical Test: Value/ValueChanged Pattern -->
    <section class="border rounded-lg pa-4 bg-surface-variant/10">
        <div class="text-h5 font-semibold">Critical Test: Value/ValueChanged Pattern</div>
        <div class="space-y-4">
            <div class="flex items-center justify-between">
                <label>Basic Toggle (Value/ValueChanged): @basicToggle</label>
                <RToggleGeneric TValue="bool" Value="basicToggle" ValueChanged="@(value => { basicToggle = value; StateHasChanged(); })" Text="Enable Feature" />
            </div>
            
            <div class="flex items-center justify-between">
                <label>Settings Toggle (Value/ValueChanged): @settingsToggle</label>
                <RToggleGeneric TValue="bool" Value="settingsToggle" ValueChanged="@(value => { settingsToggle = value; StateHasChanged(); })"
                              Text="Auto-save" 
                              Icon="save" 
                              Variant="ToggleVariant.Rounded" />
            </div>
        </div>
    </section>

    <!-- Manual ValueChanged Pattern -->
    <section class="border rounded-lg pa-4 bg-surface-variant/10">
        <div class="text-h5 font-semibold">Manual ValueChanged Pattern</div>
        <div class="space-y-4">
            <div class="flex items-center justify-between">
                <label>Notification Toggle (Manual): @notificationToggle</label>
                <RToggleGeneric TValue="bool" 
                              Value="notificationToggle" 
                              ValueChanged="@(value => { notificationToggle = value; StateHasChanged(); })"
                              Text="Notifications" 
                              Icon="notifications" />
            </div>
        </div>
    </section>

    <!-- Checked/CheckedChanged Pattern -->
    <section class="border rounded-lg pa-4 bg-surface-variant/10">
        <div class="text-h5 font-semibold">Checked/CheckedChanged Pattern</div>
        <div class="space-y-4">
            <div class="flex items-center justify-between">
                <label>Feature Toggle (Checked): @featureToggle</label>
                <RToggleGeneric TValue="bool" 
                              Checked="featureToggle" 
                              CheckedChanged="@(value => { featureToggle = value; StateHasChanged(); })"
                              Text="Advanced Features" 
                              Icon="tune" 
                              Variant="ToggleVariant.Square" />
            </div>
        </div>
    </section>

    <!-- Size and Variant Tests -->
    <section class="border rounded-lg pa-4 bg-surface-variant/10">
        <div class="text-h5 font-semibold">Size and Variant Tests</div>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div class="space-y-3">
                <div class="text-h6 font-semibold">Small Size</div>
                <RToggleGeneric TValue="bool" Value="sizeTestSmall" ValueChanged="@(value => { sizeTestSmall = value; StateHasChanged(); })"
                              Text="Small" 
                              Size="ToggleSize.Small" />
                <div class="text-xs text-secondary">Value: @sizeTestSmall</div>
            </div>
            
            <div class="space-y-3">
                <div class="text-h6 font-semibold">Medium Size</div>
                <RToggleGeneric TValue="bool" Value="sizeTestMedium" ValueChanged="@(value => { sizeTestMedium = value; StateHasChanged(); })"
                              Text="Medium" 
                              Size="ToggleSize.Medium" />
                <div class="text-xs text-secondary">Value: @sizeTestMedium</div>
            </div>
            
            <div class="space-y-3">
                <div class="text-h6 font-semibold">Large Size</div>
                <RToggleGeneric TValue="bool" Value="sizeTestLarge" ValueChanged="@(value => { sizeTestLarge = value; StateHasChanged(); })"
                              Text="Large" 
                              Size="ToggleSize.Large" />
                <div class="text-xs text-secondary">Value: @sizeTestLarge</div>
            </div>
        </div>
    </section>

    <!-- Manual Test Buttons -->
    <section class="border rounded-lg pa-4 bg-surface-variant/10">
        <div class="text-h5 font-semibold">Manual Test Controls</div>
        <div class="flex gap-3 flex-wrap">
            <RButton Text="Toggle Basic" 
                     OnClick="@(() => basicToggle = !basicToggle)" 
                     Variant="ButtonVariant.Primary" />
            <RButton Text="Toggle Settings" 
                     OnClick="@(() => settingsToggle = !settingsToggle)" 
                     Variant="ButtonVariant.Secondary" />
            <RButton Text="Reset All" 
                     OnClick="ResetAll" 
                     Variant="ButtonVariant.Ghost" />
            <RButton Text="Set All True" 
                     OnClick="SetAllTrue" 
                     Variant="ButtonVariant.Success" />
        </div>
    </section>

    <!-- Test Log -->
    <section class="border rounded-lg pa-4 bg-surface-variant/10">
        <div class="text-h5 font-semibold">Test Log</div>
        <div class="bg-surface rounded pa-3 font-mono text-sm max-h-60 overflow-y-auto">
            @foreach (var log in testLogs)
            {
                <div class="mb-1">[@log.Timestamp.ToString("HH:mm:ss")] @log.Message</div>
            }
        </div>
        <RButton Text="Clear Log" OnClick="ClearLog" Variant="ButtonVariant.Ghost" Size="ButtonSize.Small" Class="mt-2" />
    </section>
</div>

@code {
    private bool basicToggle = false;
    private bool settingsToggle = true;
    private bool notificationToggle = false;
    private bool featureToggle = true;
    
    private bool sizeTestSmall = false;
    private bool sizeTestMedium = true;
    private bool sizeTestLarge = false;
    
    private List<TestLog> testLogs = new();

    protected override void OnInitialized()
    {
        AddLog("Component initialized");
        AddLog($"Initial values - Basic: {basicToggle}, Settings: {settingsToggle}, Notification: {notificationToggle}, Feature: {featureToggle}");
    }

    private void ResetAll()
    {
        basicToggle = false;
        settingsToggle = false;
        notificationToggle = false;
        featureToggle = false;
        sizeTestSmall = false;
        sizeTestMedium = false;
        sizeTestLarge = false;
        AddLog("All toggles reset to false");
        StateHasChanged();
    }

    private void SetAllTrue()
    {
        basicToggle = true;
        settingsToggle = true;
        notificationToggle = true;
        featureToggle = true;
        sizeTestSmall = true;
        sizeTestMedium = true;
        sizeTestLarge = true;
        AddLog("All toggles set to true");
        StateHasChanged();
    }

    private void AddLog(string message)
    {
        testLogs.Add(new TestLog { Timestamp = DateTime.Now, Message = message });
        if (testLogs.Count > 50) // Keep only last 50 logs
        {
            testLogs.RemoveAt(0);
        }
    }

    private void ClearLog()
    {
        testLogs.Clear();
        StateHasChanged();
    }

    public record TestLog
    {
        public DateTime Timestamp { get; init; }
        public string Message { get; init; } = "";
    }
}