@implements IDisposable
@inject IModalService ModalService
@inject IJSRuntime JSRuntime

@* Modal Container - Manages all active modals *@
<div class="modal-container">
    @foreach (var modal in _activeModals)
    {
        <DynamicComponent Type="typeof(RModal)" Parameters="GetModalParameters(modal)" />
    }
</div>

@code {
    private readonly List<ModalInstance> _activeModals = new();
    private DotNetObjectReference<ModalContainer> _dotNetRef;

    protected override async Task OnInitializedAsync()
    {
        _dotNetRef = DotNetObjectReference.Create(this);
        
        ModalService.OnModalOpened += OnModalOpened;
        ModalService.OnModalClosed += OnModalClosed;
        
        await JSRuntime.InvokeVoidAsync("modalContainer.initialize", _dotNetRef);
    }

    private void OnModalOpened(ModalInstance modal)
    {
        _activeModals.Add(modal);
        InvokeAsync(StateHasChanged);
    }

    private void OnModalClosed(ModalInstance modal)
    {
        _activeModals.Remove(modal);
        InvokeAsync(StateHasChanged);
    }

    private Dictionary<string, object> GetModalParameters(ModalInstance modal)
    {
        var parameters = new Dictionary<string, object>
        {
            { nameof(RModal.IsVisible), modal.IsVisible },
            { nameof(RModal.Title), modal.Options.Title },
            { nameof(RModal.Subtitle), modal.Options.Subtitle },
            { nameof(RModal.Icon), modal.Options.Icon },
            { nameof(RModal.Size), GetSizeString(modal.Options.Size) },
            { nameof(RModal.Variant), GetVariantString(modal.Options.Variant) },
            { nameof(RModal.CloseOnBackdrop), modal.Options.CloseOnBackdrop },
            { nameof(RModal.CloseOnEscape), modal.Options.CloseOnEscape },
            { nameof(RModal.ShowCloseButton), modal.Options.ShowCloseButton },
            { nameof(RModal.ShowHeader), modal.Options.ShowHeader },
            { nameof(RModal.ShowFooter), modal.Options.ShowFooter },
            { nameof(RModal.CssClass), modal.Options.CssClass },
            { nameof(RModal.OnClose), EventCallback.Factory.Create(this, () => HandleModalClose(modal)) },
            { nameof(RModal.OnCancel), EventCallback.Factory.Create(this, () => HandleModalCancel(modal)) },
            { nameof(RModal.OnPrimaryAction), EventCallback.Factory.Create(this, () => HandlePrimaryAction(modal)) }
        };

        // Add custom component content
        if (modal.Options.ComponentType != null)
        {
            parameters[nameof(RModal.ChildContent)] = CreateModalContent(modal);
        }

        // Add custom buttons
        if (modal.Options.Buttons.Any())
        {
            parameters[nameof(RModal.FooterContent)] = CreateModalFooter(modal);
        }

        return parameters;
    }

    private RenderFragment CreateModalContent(ModalInstance modal)
    {
        return builder =>
        {
            builder.OpenComponent(0, modal.Options.ComponentType);
            
            foreach (var param in modal.Options.Parameters)
            {
                builder.AddAttribute(1, param.Key, param.Value);
            }
            
            if (modal.Options.Data != null)
            {
                builder.AddAttribute(2, "Data", modal.Options.Data);
            }

            builder.AddAttribute(3, "OnDataChanged", EventCallback.Factory.Create<object>(this, data =>
            {
                modal.Result = data;
                StateHasChanged();
            }));

            builder.CloseComponent();
        };
    }

    private RenderFragment CreateModalFooter(ModalInstance modal)
    {
        return builder =>
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "modal__footer-buttons");

            var index = 2;
            foreach (var button in modal.Options.Buttons)
            {
                builder.OpenComponent(index++, typeof(RButton));
                builder.AddAttribute(index++, nameof(RButton.Text), button.Text);
                builder.AddAttribute(index++, nameof(RButton.Variant), button.Variant);
                builder.AddAttribute(index++, nameof(RButton.StartIcon), button.Icon);
                builder.AddAttribute(index++, nameof(RButton.CssClass), button.CssClass);
                builder.AddAttribute(index++, nameof(RButton.Disabled), button.IsDisabled);
                builder.AddAttribute(index++, nameof(RButton.Loading), button.IsLoading);
                builder.AddAttribute(index++, nameof(RButton.OnClick), EventCallback.Factory.Create(this, async () =>
                {
                    await HandleButtonClick(modal, button);
                }));
                builder.CloseComponent();
            }

            builder.CloseElement();
        };
    }

    private async Task HandleModalClose(ModalInstance modal)
    {
        await CloseModal(modal, Enums.ModalResult.Cancel);
    }

    private async Task HandleModalCancel(ModalInstance modal)
    {
        await CloseModal(modal, Enums.ModalResult.Cancel);
    }

    private async Task HandlePrimaryAction(ModalInstance modal)
    {
        var primaryButton = modal.Options.Buttons.FirstOrDefault(b => b.Type == ModalButtonType.Primary);
        if (primaryButton?.OnClick != null)
        {
            var canClose = await primaryButton.OnClick(modal.Result ?? modal.Options.Data);
            if (canClose)
            {
                await CloseModal(modal, primaryButton.Result);
            }
        }
        else
        {
            await CloseModal(modal, Enums.ModalResult.Ok);
        }
    }

    private async Task HandleButtonClick(ModalInstance modal, ModalButton button)
    {
        if (button.OnClick != null)
        {
            var canClose = await button.OnClick(modal.Result ?? modal.Options.Data);
            if (canClose)
            {
                await CloseModal(modal, button.Result);
            }
        }
        else
        {
            await CloseModal(modal, button.Result);
        }
    }

    private async Task CloseModal(ModalInstance modal, Enums.ModalResult result)
    {
        modal.IsVisible = false;
        
        if (modal is ModalInstance<object> typedModal)
        {
            typedModal.TaskSource.SetResult(new ModalResult<object>
            {
                ResultType = result,
                Data = modal.Result
            });
        }

        await ModalService.CloseAsync(modal.Id);
    }

    private string GetSizeString(ModalSize size) => size switch
    {
        ModalSize.Small => "small",
        ModalSize.Large => "large",
        ModalSize.XLarge => "xlarge",
        ModalSize.Wide => "wide",
        ModalSize.Full => "full",
        _ => "medium"
    };

    private string GetVariantString(ModalVariant variant) => variant switch
    {
        ModalVariant.Confirmation => "confirmation",
        ModalVariant.Destructive => "destructive",
        ModalVariant.Success => "success",
        ModalVariant.Warning => "warning",
        ModalVariant.Info => "info",
        ModalVariant.Glass => "glass",
        ModalVariant.Protected => "protected",
        _ => "default"
    };

    [JSInvokable]
    public async Task OnKeyDown(string key)
    {
        if (key == "Escape" && _activeModals.Any())
        {
            var topModal = _activeModals.LastOrDefault();
            if (topModal?.Options.CloseOnEscape == true)
            {
                await HandleModalClose(topModal);
            }
        }
    }

    public void Dispose()
    {
        ModalService.OnModalOpened -= OnModalOpened;
        ModalService.OnModalClosed -= OnModalClosed;
        _dotNetRef?.Dispose();
    }
}