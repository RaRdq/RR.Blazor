@namespace RR.Blazor.Components.Data
@using RR.Blazor.Components.Base
@using RR.Blazor.Components.Core
@using RR.Blazor.Components.Form
@using RR.Blazor.Enums
@inherits RComponentBase

<div class="@GetClasses()">
    @if (ShowSearchBox)
    {
        <div class="filter-bar-search">
            <RTextInput @bind-Value="@SearchValue" 
                       Placeholder="@SearchPlaceholder"
                       Icon="search"
                       OnInput="@HandleSearchInput" />
        </div>
    }
    
    @if (ChildContent != null)
    {
        <div class="filter-bar-content">
            @ChildContent
        </div>
    }
    
    @if (CustomFilters != null)
    {
        <div class="filter-bar-custom">
            @CustomFilters
        </div>
    }
    
    @if (ShowClearButton && HasActiveFilters)
    {
        <RButton Text="Clear Filters" 
                Icon="close"
                Variant="VariantType.Secondary"
                Size="SizeType.Small"
                OnClick="@HandleClearFilters" />
    }
</div>

@code {
    [Parameter] public bool ShowSearchBox { get; set; } = true;
    [Parameter] public string SearchPlaceholder { get; set; } = "Search...";
    [Parameter] public string SearchValue { get; set; }
    [Parameter] public EventCallback<string> SearchValueChanged { get; set; }
    [Parameter] public EventCallback<string> OnSearch { get; set; }
    [Parameter] public bool ShowClearButton { get; set; } = true;
    [Parameter] public bool HasActiveFilters { get; set; }
    [Parameter] public EventCallback OnClearFilters { get; set; }
    [Parameter] public RenderFragment CustomFilters { get; set; }
    
    private async Task HandleSearchInput(ChangeEventArgs e)
    {
        SearchValue = e.Value?.ToString() ?? "";
        await SearchValueChanged.InvokeAsync(SearchValue);
        await OnSearch.InvokeAsync(SearchValue);
    }
    
    private async Task HandleClearFilters()
    {
        SearchValue = "";
        await SearchValueChanged.InvokeAsync(SearchValue);
        await OnClearFilters.InvokeAsync();
    }
    
    private string GetClasses()
    {
        var classes = new List<string> { "filter-bar", "d-flex", "gap-3", "align-items-center", "mb-4" };
        
        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes);
    }
}