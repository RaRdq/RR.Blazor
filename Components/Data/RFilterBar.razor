@* RFilterBar - Universal filter and search component for business applications *@
@using RR.Blazor.Enums
@using RR.Blazor.Models

<RCard Variant="CardVariant.Flat" Class="pa-4">
    <div class="flex flex-wrap gap-4 items-center">
        @* Search Field *@
        @if (ShowSearch)
        {
            <div class="flex-1 min-w-64">
                <RInput Type="FieldType.Search"
                           Value="@SearchValue"
                           ValueChanged="@(value => OnSearchValueChanged(value?.ToString()))"
                           Placeholder="@SearchPlaceholder"
                           StartIcon="search"
                           Size="TextInputSize.Small" />
            </div>
        }
    
        @* Dynamic Filters *@
        @if (Filters != null && Filters.Any())
        {
            @foreach (var filter in Filters)
            {
                @if (GetFilterFieldType(filter) == FieldType.Select)
                {
                    <select class="rr-select"
                            @bind="filter.Value"
                            @bind:after="@(async () => await HandleFilterChanged(filter.Key, filter.Value))">
                        <option value="">@filter.Label</option>
                        @if (filter.Options != null)
                        {
                            @foreach (var option in filter.Options)
                            {
                                <option value="@option.Value">@option.Label</option>
                            }
                        }
                    </select>
                }
                else
                {
                    <RInput Type="@GetFilterFieldType(filter)"
                               Label="@filter.Label"
                               Value="@filter.Value"
                               ValueChanged="@(value => HandleFilterChanged(filter.Key, value?.ToString()))"
                               Size="TextInputSize.Small"
                               Class="min-w-32" />
                }
            }
        }

        @* Date Range Filter *@
        @if (ShowDateRange)
        {
            <div class="flex gap-2 items-center">
                <RInput Type="FieldType.Date"
                           Label="From"
                           Value="@DateFrom?.ToString("yyyy-MM-dd")"
                           ValueChanged="@(value => HandleDateFromChanged(value?.ToString()))"
                           Size="TextInputSize.Small"
                           Class="w-40" />
                <span class="text-secondary">to</span>
                <RInput Type="FieldType.Date"
                           Label="To"
                           Value="@DateTo?.ToString("yyyy-MM-dd")"
                           ValueChanged="@(value => HandleDateToChanged(value?.ToString()))"
                           Size="TextInputSize.Small"
                           Class="w-40" />
            </div>
        }

        @* Quick Filter Buttons *@
        @if (QuickFilters != null && QuickFilters.Any())
        {
            <div class="flex gap-2">
                @foreach (var quickFilter in QuickFilters)
                {
                    <RButton Text="@quickFilter.Label"
                             Icon="@quickFilter.Icon"
                             IconPosition="IconPosition.Start"
                             Variant="@(ActiveQuickFilters.Contains(quickFilter.Key) ? ButtonVariant.Primary : ButtonVariant.Ghost)"
                             Size="ButtonSize.Small"
                             OnClick="@(async () => await ToggleQuickFilter(quickFilter.Key))" />
                }
            </div>
        }

        @* Status Filter *@
        @if (ShowStatus && StatusOptions?.Any() == true)
        {
            <select class="rr-select"
                    @bind="StatusFilter"
                    @bind:after="@(async () => await OnStatusFilterChanged(StatusFilter))">
                <option value="">Status</option>
                @if (StatusOptions != null)
                {
                    @foreach (var option in StatusOptions)
                    {
                        <option value="@option.Key">@option.Value</option>
                    }
                }
            </select>
        }

        @* Custom Filter Content *@
        @if (CustomFilters != null)
        {
            @CustomFilters
        }

        @* Clear Filters Button *@
        @if (ShowClearButton && HasActiveFilters())
        {
            <RButton Text="Clear All"
                     Icon="clear"
                     IconPosition="IconPosition.Start"
                     Variant="ButtonVariant.Ghost"
                     Size="ButtonSize.Small"
                     OnClick="ClearAllFilters" />
        }

        @* Filter Count Badge *@
        @if (ShowFilterCount && HasActiveFilters())
        {
            <div class="flex items-center gap-2">
                <RBadge Text="@($"{GetActiveFilterCount()} active")"
                       Variant="BadgeVariant.Info"
                       Size="BadgeSize.Small" />
            </div>
        }
    </div>
</RCard>

@code {
    /// <summary>Whether to show search input</summary>
    [Parameter] public bool ShowSearch { get; set; } = true;
    
    /// <summary>Search input value</summary>
    [Parameter] public string SearchValue { get; set; } = "";
    
    /// <summary>Search value changed callback</summary>
    [Parameter] public EventCallback<string> SearchValueChanged { get; set; }
    
    /// <summary>Search input placeholder text</summary>
    [Parameter] public string SearchPlaceholder { get; set; } = "Search...";
    
    /// <summary>Dynamic filter definitions</summary>
    [Parameter] public List<FilterDefinition> Filters { get; set; } = new();
    
    /// <summary>Filter changed callback</summary>
    [Parameter] public EventCallback<FilterChangedEventArgs> FilterChanged { get; set; }
    
    /// <summary>Whether to show date range filter</summary>
    [Parameter] public bool ShowDateRange { get; set; }
    
    /// <summary>Date from value</summary>
    [Parameter] public DateTime? DateFrom { get; set; }
    
    /// <summary>Date to value</summary>
    [Parameter] public DateTime? DateTo { get; set; }
    
    /// <summary>Date range changed callback</summary>
    [Parameter] public EventCallback<DateRangeChangedEventArgs> DateRangeChanged { get; set; }
    
    /// <summary>Quick filter button definitions</summary>
    [Parameter] public List<QuickFilterDefinition> QuickFilters { get; set; } = new();
    
    /// <summary>Active quick filter keys</summary>
    [Parameter] public HashSet<string> ActiveQuickFilters { get; set; } = new();
    
    /// <summary>Quick filter toggled callback</summary>
    [Parameter] public EventCallback<QuickFilterToggledEventArgs> QuickFilterToggled { get; set; }
    
    /// <summary>Whether to show status filter</summary>
    [Parameter] public bool ShowStatus { get; set; }
    
    /// <summary>Status filter value</summary>
    [Parameter] public string StatusFilter { get; set; } = "";
    
    /// <summary>Status filter options</summary>
    [Parameter] public Dictionary<string, string> StatusOptions { get; set; } = new();
    
    /// <summary>Status filter changed callback</summary>
    [Parameter] public EventCallback<string> StatusFilterChanged { get; set; }
    
    /// <summary>Custom filter content</summary>
    [Parameter] public RenderFragment CustomFilters { get; set; }
    
    /// <summary>Whether to show clear all button</summary>
    [Parameter] public bool ShowClearButton { get; set; } = true;
    
    /// <summary>Whether to show active filter count</summary>
    [Parameter] public bool ShowFilterCount { get; set; } = true;
    
    /// <summary>All filters cleared callback</summary>
    [Parameter] public EventCallback FiltersCleared { get; set; }

    private async Task OnSearchValueChanged(string value)
    {
        SearchValue = value;
        await SearchValueChanged.InvokeAsync(value);
    }

    private async Task HandleFilterChanged(string key, string value)
    {
        var args = new FilterChangedEventArgs { Key = key, Value = value };
        await FilterChanged.InvokeAsync(args);
    }

    private async Task HandleDateFromChanged(string value)
    {
        if (DateTime.TryParse(value, out var date))
        {
            DateFrom = date;
            await DateRangeChanged.InvokeAsync(new DateRangeChangedEventArgs
            {
                DateFrom = DateFrom,
                DateTo = DateTo
            });
        }
    }

    private async Task HandleDateToChanged(string value)
    {
        if (DateTime.TryParse(value, out var date))
        {
            DateTo = date;
            await DateRangeChanged.InvokeAsync(new DateRangeChangedEventArgs
            {
                DateFrom = DateFrom,
                DateTo = DateTo
            });
        }
    }

    private async Task ToggleQuickFilter(string key)
    {
        if (ActiveQuickFilters.Contains(key))
        {
            ActiveQuickFilters.Remove(key);
        }
        else
        {
            ActiveQuickFilters.Add(key);
        }
        
        await QuickFilterToggled.InvokeAsync(new QuickFilterToggledEventArgs
        {
            Key = key,
            IsActive = ActiveQuickFilters.Contains(key),
            ActiveFilters = ActiveQuickFilters.ToList()
        });
    }

    private async Task OnStatusFilterChanged(string value)
    {
        StatusFilter = value;
        await StatusFilterChanged.InvokeAsync(value);
    }

    private async Task ClearAllFilters()
    {
        SearchValue = "";
        DateFrom = null;
        DateTo = null;
        StatusFilter = "";
        ActiveQuickFilters.Clear();
        
        // Clear individual filters
        if (Filters?.Any() == true)
        {
            foreach (var filter in Filters)
            {
                filter.Value = "";
            }
        }
        
        await FiltersCleared.InvokeAsync();
    }

    private bool HasActiveFilters()
    {
        return !string.IsNullOrEmpty(SearchValue) ||
               DateFrom.HasValue ||
               DateTo.HasValue ||
               !string.IsNullOrEmpty(StatusFilter) ||
               ActiveQuickFilters.Any() ||
               (Filters?.Any(f => !string.IsNullOrEmpty(f.Value)) == true);
    }

    private int GetActiveFilterCount()
    {
        var count = 0;
        if (!string.IsNullOrEmpty(SearchValue)) count++;
        if (DateFrom.HasValue || DateTo.HasValue) count++;
        if (!string.IsNullOrEmpty(StatusFilter)) count++;
        count += ActiveQuickFilters.Count;
        count += Filters?.Count(f => !string.IsNullOrEmpty(f.Value)) ?? 0;
        return count;
    }

    private FieldType GetFilterFieldType(FilterDefinition filter)
    {
        return filter.Type switch
        {
            "select" => FieldType.Select,
            "number" => FieldType.Number,
            "date" => FieldType.Date,
            "text" => FieldType.Text,
            _ => FieldType.Select
        };
    }

    private string GetFilterInputType(FilterDefinition filter)
    {
        return filter.Type switch
        {
            "number" => "number",
            "date" => "date",
            "text" => "text",
            _ => "text"
        };
    }
}

@*
Usage Examples:

<!-- Basic search and filter bar -->
<RFilterBar SearchValue="@searchTerm"
           SearchValueChanged="@(value => searchTerm = value)"
           Filters="@filterDefinitions"
           FilterChanged="HandleFilterChanged" />

<!-- Full business application filter bar -->
<RFilterBar SearchValue="@searchTerm"
           SearchValueChanged="@(value => searchTerm = value)"
           ShowDateRange="true"
           DateFrom="@startDate"
           DateTo="@endDate"
           DateRangeChanged="HandleDateRangeChanged"
           ShowStatus="true"
           StatusFilter="@statusFilter"
           StatusOptions="@statusOptions"
           StatusFilterChanged="@(value => statusFilter = value)"
           QuickFilters="@quickFilterOptions"
           ActiveQuickFilters="@activeQuickFilters"
           QuickFilterToggled="HandleQuickFilterToggled"
           ShowFilterCount="true"
           ShowClearButton="true"
           FiltersCleared="HandleFiltersCleared">
    <CustomFilters>
        <select class="rr-select"
                @bind="departmentFilter">
            <option value="">Department</option>
            @if (departmentOptions != null)
            {
                @foreach (var option in departmentOptions)
                {
                    <option value="@option.Value">@option.Text</option>
                }
            }
        </select>
    </CustomFilters>
</RFilterBar>

<!-- E-commerce product filter -->
<RFilterBar SearchPlaceholder="Search products..."
           QuickFilters="@productQuickFilters"
           Filters="@productFilters"
           ShowStatus="false" />

<!-- User management filter -->
<RFilterBar SearchPlaceholder="Search users..."
           ShowDateRange="true"
           QuickFilters="@userQuickFilters"
           StatusOptions="@userStatusOptions"
           ShowStatus="true" />
*@