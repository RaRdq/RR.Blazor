@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components.Web
@using RR.Blazor.Components.Core
@using RR.Blazor.Components.Form
@using RR.Blazor.Components.Data
@using RR.Blazor.Components.Display
@using RR.Blazor.Components.Feedback
@using RR.Blazor.Components.Base
@using RR.Blazor.Enums
@using RR.Blazor.Models
@using RR.Blazor.Services
@using RR.Blazor.Templates
@using RR.Blazor.Interfaces
@using System.Linq.Expressions
@using Blazored.LocalStorage

@typeparam TItem where TItem : class
@inherits RComponentBase
@implements IAsyncDisposable
@implements IFilterable<TItem>
@inject GridService GridService
@inject IJSRuntime JSRuntime
@inject IFilterPersistenceService FilterPersistence
@inject ILocalStorageService LocalStorage

@* Enterprise Data Grid with Advanced Features *@

@{
    System.Diagnostics.Debug.WriteLine($"RGridGeneric<{typeof(TItem).Name}>: Items count = {Items?.Count()}, Configuration = {Configuration != null}");
}

<div class="grid-container @GetContainerClasses()" data-grid-id="@Configuration?.GridId" @attributes="GetSafeAttributes()">
    
    @* Grid Header *@
    @if (Configuration.ShowHeader)
    {
        <div class="grid-header">
            <div class="grid-header-content">
                @if (!string.IsNullOrEmpty(Configuration.Title))
                {
                    <div class="grid-header-title">
                        @if (!string.IsNullOrEmpty(Configuration.Icon))
                        {
                            <i class="icon grid-header-title-icon">@Configuration.Icon</i>
                        }
                        <h3 class="grid-header-title-text">@Configuration.Title</h3>
                        @if (!string.IsNullOrEmpty(Configuration.Subtitle))
                        {
                            <span class="grid-header-title-subtitle">@Configuration.Subtitle</span>
                        }
                    </div>
                }
            </div>
            
            <div class="grid-header-actions">
                @* Real-time Status *@
                @if (Configuration.EnableRealTimeUpdates)
                {
                    <div class="grid-header-actions-realtime-status @(_isConnected ? "grid-header-actions-realtime-status-connected" : "grid-header-actions-realtime-status-disconnected")">
                        <i class="icon">@(_isConnected ? "cloud_done" : "cloud_off")</i>
                        <span>@(_isConnected ? "Live" : "Offline")</span>
                    </div>
                }
                
                @* Performance Metrics *@
                @if (_showPerformanceMetrics && _performanceMetrics != null)
                {
                    <div class="grid-header-actions-performance">
                        <RTooltip Text="@($"Render: {_performanceMetrics.RenderTime.TotalMilliseconds:F1}ms | Rows: {_performanceMetrics.TotalRows:N0}")">
                            <i class="icon">speed</i>
                        </RTooltip>
                    </div>
                }
                
                @* Export Actions *@
                @if (Configuration.EnableExport)
                {
                    <RButton Variant="ButtonVariant.Ghost" 
                            Icon="file_download" 
                            Size="SizeType.Small"
                            OnClick="@ShowExportModal">
                        Export
                    </RButton>
                }
                
                @* Column Manager *@
                @if (Configuration.EnableColumnReordering)
                {
                    <RButton Variant="ButtonVariant.Ghost" 
                            Icon="view_column" 
                            Size="SizeType.Small"
                            OnClick="@ShowColumnManager">
                        Columns
                    </RButton>
                }
                
                @* Settings *@
                <RButton Variant="ButtonVariant.Ghost" 
                        Icon="settings" 
                        Size="SizeType.Small"
                        OnClick="@ShowSettingsModal">
                    Settings
                </RButton>
                
                @if (HeaderActions != null)
                {
                    @HeaderActions
                }
            </div>
        </div>
    }

    @* Quick Filter Bar with Chips *@
    @if (Configuration.EnableFiltering && HasActiveFilters())
    {
        <div class="grid-quick-filter-bar">
            <div class="grid-quick-filter-bar__chips">
                @foreach (var filterState in _columnFilterStates.Where(fs => fs.Value?.IsActive == true))
                {
                    var column = Columns.FirstOrDefault(c => c.Key == filterState.Key);
                    if (column != null)
                    {
                        <RChip Text="@GetFilterChipText(filterState.Key, filterState.Value)"
                              Icon="filter_alt"
                              Closeable="true"
                              OnClose="@(() => RemoveColumnFilter(filterState.Key))"
                              Size="SizeType.Small"
                              Variant="VariantType.Info" />
                    }
                }
            </div>
            
            <div class="grid-quick-filter-bar__actions">
                @if (_savedFilterSets.Any())
                {
                    <RChoice Items="@GetSavedFilterSetItems()"
                            SelectedValue="@_selectedFilterSetId"
                            SelectedValueChanged="@LoadFilterSet"
                            Placeholder="Load filter set..."
                            Variant="ChoiceVariant.Dropdown"
                            Size="SizeType.Small"
                            Class="grid-quick-filter-bar__load-set" />
                }
                
                <RButton Text="Save Filter Set"
                        Icon="save"
                        Variant="ButtonVariant.Ghost"
                        Size="SizeType.Small"
                        OnClick="@ShowSaveFilterSetModal" />
                
                <RButton Text="Clear All Filters"
                        Icon="clear_all"
                        Variant="ButtonVariant.Ghost"
                        Size="SizeType.Small"
                        OnClick="@ClearAllFilters" />
            </div>
        </div>
    }
    
    @* Integrated Filter System *@
    @if (Configuration.EnableFiltering)
    {
        <div class="grid-filter-section">
            <RFilterGeneric TItem="TItem"
                    DataSource="@Items.AsQueryable()"
                    OnPredicateChanged="@(async (predicate) => await OnFilterPredicateChanged(predicate))"
                    OnCriteriaChanged="@(async (criteria) => await OnFilterCriteriaChanged(criteria))"
                    Config="@GetFilterConfig()"
                    QuickFilters="@_quickFilters"
                    SearchFields="@GetSearchFields()"
                    Class="grid-filter-section-filter" />
        </div>
    }

    @* Grouping Panel *@
    @if (Configuration.EnableGrouping && State.GroupDescriptors.Any())
    {
        <div class="grid-grouping-panel">
            <div class="grid-grouping-panel-pills">
                @foreach (var group in State.GroupDescriptors)
                {
                    <RChip Text="@GetGroupDisplayText(group)"
                          Icon="@GetGroupIcon(group)"
                          Closeable="true"
                          OnClose="@(() => RemoveGrouping(group))"
                          Size="SizeType.Small"
                          Variant="VariantType.Info" />
                }
            </div>
            <RButton Text="Clear Grouping"
                    Icon="clear_all"
                    Variant="ButtonVariant.Ghost"
                    Size="SizeType.Small"
                    OnClick="@ClearGrouping" />
        </div>
    }

    @* Main Grid Content - No wrapper needed, RenderGridContent creates its own *@
    @if (State.IsLoading)
    {
        <div class="grid-loading">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            <p class="grid-loading-text">@State.LoadingMessage</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(State.ErrorMessage))
    {
        <div class="grid-error">
            <RAlert Type="AlertType.Error" 
                   Title="Grid Error"
                   Text="@State.ErrorMessage"
                   ShowIcon="true" />
        </div>
    }
    else if (!_processedData.Any())
    {
        <div class="grid-empty">
            @if (EmptyContent != null)
            {
                @EmptyContent
            }
            else
            {
                <REmptyState Icon="inbox"
                            Title="No Data Available"
                            Description="There are no items to display"
                            Class="grid-empty-state" />
            }
        </div>
    }
    else
    {
        @if (Configuration.EnableVirtualization && _processedData.Count() > Configuration.VirtualizationThreshold)
        {
            @* Virtualized Grid *@
            <div class="grid-virtualized" @ref="_virtualizedContainer">
                @RenderVirtualizedGrid()
            </div>
        }
        else
        {
            @* Standard Grid - RenderStandardGrid creates its own grid-layout div *@
            @RenderStandardGrid()
        }
    }

    @* Grid Footer *@
    @if (Configuration.EnablePaging && _processedData.Any())
    {
        <RPaginationFooter CurrentPage="@State.CurrentPage"
                          CurrentPageChanged="@(async (int page) => await GoToPage(page))"
                          PageSize="@State.PageSize"
                          PageSizeChanged="@(async (int size) => await OnPageSizeChanged(size))"
                          TotalItems="@State.TotalItems"
                          SelectedCount="@State.SelectedItems.Count"
                          PageSizeOptions="@Configuration.PageSizeOptions.ToList()"
                          ShowPageSizeSelector="true"
                          ShowProcessingTime="true"
                          ProcessingTime="@(_dataResult.ProcessingTime.TotalMilliseconds > 100 ? _dataResult.ProcessingTime : null)"
                          UseDropdown="true" />
    }

</div>

@* Export Modal *@
@if (_showExportModal)
{
    <RModal @bind-Visible="_showExportModal"
           Header="Export Data"
           Size="SizeType.Medium">
        <ChildContent>
            <div class="grid-export-options">
                <RFormSection Title="Export Format">
                    <RChoice Items="@GetExportFormats()"
                            SelectedValue="@_exportConfig.Format"
                            SelectedValueChanged="@(format => _exportConfig.Format = (ExportFormat)format)"
                            Variant="ChoiceVariant.Inline" />
                </RFormSection>
                
                <RFormSection Title="Options">
                    <RCheckbox Value="@_exportConfig.IncludeHeaders"
                              ValueChanged="@((bool value) => _exportConfig.IncludeHeaders = value)"
                              Label="Include Headers" />
                    
                    <RCheckbox Value="@_exportConfig.IncludeFilters"
                              ValueChanged="@((bool value) => _exportConfig.IncludeFilters = value)"
                              Label="Include Filter Information" />
                    
                    <RCheckbox Value="@_exportConfig.ExportAllPages"
                              ValueChanged="@((bool value) => _exportConfig.ExportAllPages = value)"
                              Label="Export All Pages" />
                </RFormSection>
                
                <RInput Value="@_exportConfig.FileName"
                       ValueChanged="@((object value) => _exportConfig.FileName = (string)value)"
                       Label="File Name"
                       Placeholder="Enter file name..." />
            </div>
        </ChildContent>
        
        <FooterContent>
            <RButton Text="Cancel"
                    Variant="ButtonVariant.Ghost"
                    OnClick="@(() => _showExportModal = false)" />
            
            <RButton Text="Export"
                    Icon="file_download"
                    Variant="ButtonVariant.Primary"
                    Loading="@_isExporting"
                    OnClick="@PerformExport" />
        </FooterContent>
    </RModal>
}

@* Column Manager Modal *@
@if (_showColumnManager)
{
    <RModal @bind-Visible="_showColumnManager"
           Header="Manage Columns"
           Size="SizeType.Large">
        <ChildContent>
            <div class="grid-column-manager">
                @* Column visibility and ordering *@
                <div class="grid-column-manager-list">
                    @foreach (var column in Columns.OrderBy(c => State.ColumnStates.ContainsKey(c.Key) ? State.ColumnStates[c.Key].Order : 0))
                    {
                        <div class="grid-column-manager-list-item @(GetColumnState(column.Key).IsVisible ? "grid-column-manager-list-item-visible" : "grid-column-manager-list-item-hidden")">
                            <div class="grid-column-manager-list-item-controls">
                                <RButton Icon="drag_indicator"
                                        Variant="ButtonVariant.Ghost"
                                        Size="SizeType.Small"
                                        Class="grid-column-manager-list-item-controls-drag-handle" />
                                
                                <RCheckbox Value="@GetColumnState(column.Key).IsVisible"
                                          ValueChanged="@((bool value) => UpdateColumnVisibility(column.Key, value))"
                                          Class="grid-column-checkbox" />
                            </div>
                            
                            <div class="grid-column-manager-list-item-info">
                                <span class="grid-column-manager-list-item-info-title">@column.Title</span>
                                <span class="grid-column-manager-list-item-info-type">@GetColumnTypeDisplay(column)</span>
                            </div>
                            
                            <div class="grid-column-manager-list-item-actions">
                                @if (Configuration.EnableColumnFreeze)
                                {
                                    <RButton Icon="@(GetColumnState(column.Key).IsFrozen ? "lock" : "lock_open")"
                                            Variant="ButtonVariant.Ghost"
                                            Size="SizeType.Small"
                                            OnClick="@(() => ToggleColumnFreeze(column.Key))"
                                            Tooltip="@(GetColumnState(column.Key).IsFrozen ? "Unfreeze Column" : "Freeze Column")" />
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </ChildContent>
        
        <FooterContent>
            <RButton Text="Reset to Default"
                    Variant="ButtonVariant.Ghost"
                    OnClick="@ResetColumnSettings" />
            
            <RButton Text="Apply"
                    Variant="ButtonVariant.Primary"
                    OnClick="@(() => _showColumnManager = false)" />
        </FooterContent>
    </RModal>
}

@* Save Filter Set Modal *@
@if (_showSaveFilterSetModal)
{
    <RModal @bind-Visible="_showSaveFilterSetModal"
           Header="Save Filter Set"
           Size="SizeType.Small">
        <ChildContent>
            <div class="grid-save-filter-set">
                <RInput Value="@_newFilterSetName"
                       ValueChanged="@((object value) => _newFilterSetName = value?.ToString())"
                       Label="Filter Set Name"
                       Placeholder="Enter a name for this filter set..."
                       Required="true" />
                
                <RTextarea Value="@_newFilterSetDescription"
                          ValueChanged="@((object value) => _newFilterSetDescription = value?.ToString())"
                          Label="Description (Optional)"
                          Placeholder="Describe what this filter set is for..."
                          Rows="3" />
                
                <div class="grid-save-filter-set__preview">
                    <span class="grid-save-filter-set__preview-label">Filters to save:</span>
                    <ul class="grid-save-filter-set__preview-list">
                        @foreach (var filter in _columnFilterStates.Where(fs => fs.Value?.IsActive == true))
                        {
                            <li>@GetFilterChipText(filter.Key, filter.Value)</li>
                        }
                    </ul>
                </div>
            </div>
        </ChildContent>
        
        <FooterContent>
            <RButton Text="Cancel"
                    Variant="ButtonVariant.Ghost"
                    OnClick="@(() => _showSaveFilterSetModal = false)" />
            
            <RButton Text="Save"
                    Icon="save"
                    Variant="ButtonVariant.Primary"
                    OnClick="@SaveFilterSet"
                    Disabled="@string.IsNullOrWhiteSpace(_newFilterSetName)" />
        </FooterContent>
    </RModal>
}

@* Settings Modal *@
@if (_showSettingsModal)
{
    <RModal @bind-Visible="_showSettingsModal"
           Header="Grid Settings"
           Size="SizeType.Medium">
        <ChildContent>
            <div class="grid-settings">
                <RFormSection Title="Display">
                    <RChoice Items="@GetDensityOptions()"
                            SelectedValue="@Configuration.Density"
                            SelectedValueChanged="@(density => Configuration.Density = (DensityType)density)"
                            Label="Density"
                            Variant="ChoiceVariant.Dropdown" />
                    
                    <RCheckbox Value="@Configuration.Striped"
                              ValueChanged="@((bool value) => Configuration.Striped = value)"
                              Label="Striped Rows" />
                    
                    <RCheckbox Value="@Configuration.Bordered"
                              ValueChanged="@((bool value) => Configuration.Bordered = value)"
                              Label="Bordered" />
                    
                    <RCheckbox Value="@Configuration.Hover"
                              ValueChanged="@((bool value) => Configuration.Hover = value)"
                              Label="Row Hover Effect" />
                </RFormSection>
                
                <RFormSection Title="Features">
                    <RCheckbox Value="@Configuration.EnableGrouping"
                              ValueChanged="@((bool value) => Configuration.EnableGrouping = value)"
                              Label="Enable Grouping" />
                    
                    <RCheckbox Value="@Configuration.EnableMasterDetail"
                              ValueChanged="@((bool value) => Configuration.EnableMasterDetail = value)"
                              Label="Enable Master-Detail" />
                    
                    <RCheckbox Value="@Configuration.EnableVirtualization"
                              ValueChanged="@((bool value) => Configuration.EnableVirtualization = value)"
                              Label="Enable Virtualization" />
                    
                    <RCheckbox Value="@Configuration.EnableFilterPersistence"
                              ValueChanged="@((bool value) => Configuration.EnableFilterPersistence = value)"
                              Label="Remember Filters" />
                    
                    <RCheckbox Value="@_showPerformanceMetrics"
                              ValueChanged="@((bool value) => _showPerformanceMetrics = value)"
                              Label="Show Performance Metrics" />
                </RFormSection>
            </div>
        </ChildContent>
        
        <FooterContent>
            <RButton Text="Close"
                    Variant="ButtonVariant.Primary"
                    OnClick="@(() => _showSettingsModal = false)" />
        </FooterContent>
    </RModal>
}

@code {
    #region Parameters

    [Parameter] public IEnumerable<TItem> Items { get; set; } = Enumerable.Empty<TItem>();
    [Parameter] public List<GridColumnDefinition<TItem>> Columns { get; set; } = new();
    [Parameter] public GridConfiguration<TItem> Configuration { get; set; }
    [Parameter] public GridState<TItem> State { get; set; }
    
    // Events - Typed versions
    [Parameter] public EventCallback<GridState<TItem>> StateChanged { get; set; }
    [Parameter] public EventCallback<GridRowEventArgs<TItem>> OnRowClick { get; set; }
    [Parameter] public EventCallback<GridCellEventArgs<TItem>> OnCellClick { get; set; }
    [Parameter] public EventCallback<List<TItem>> OnSelectionChanged { get; set; }
    [Parameter] public EventCallback<GridUpdateEventArgs<TItem>> OnDataUpdated { get; set; }
    
    // Events - Object versions for smart wrapper compatibility
    [Parameter] public EventCallback<object> OnRowClickObject { get; set; }
    [Parameter] public EventCallback<object> OnCellClickObject { get; set; }
    [Parameter] public EventCallback<object> OnSelectionChangedObject { get; set; }
    [Parameter] public EventCallback<object> OnDataUpdatedObject { get; set; }
    [Parameter] public EventCallback<object> StateChangedObject { get; set; }
    
    // Content
    [Parameter] public RenderFragment HeaderActions { get; set; }
    [Parameter] public RenderFragment EmptyContent { get; set; }
    [Parameter] public RenderFragment<TItem> MasterDetailTemplate { get; set; }
    
    // RFilter Integration - SOLID Compliant Inverted Control Pattern
    [Parameter] public IFilterProvider<TItem>? BindFilter { get; set; }
    [Parameter] public bool EnableRowFilters { get; set; } = true;
    [Parameter] public bool EnableColumnFilters { get; set; } = true;
    [Parameter] public bool EnableCellFilters { get; set; } = false;
    [Parameter] public FilterLogic GridFilterLogic { get; set; } = FilterLogic.And;
    [Parameter] public bool ShowFilterIndicators { get; set; } = true;
    
    #endregion

    #region Private Fields

    private ElementReference _virtualizedContainer;
    private IJSObjectReference _jsModule;
    private GridDataResult<TItem> _dataResult = new();
    private List<TItem> _processedData = new();
    private List<QuickFilterState> _quickFilters = new();
    private Dictionary<string, RColumnFilterState> _columnFilterStates = new();
    private Dictionary<string, HashSet<object>> _pendingFilterValues = new();
    private Dictionary<string, List<object>> _columnUniqueValues = new();
    private Dictionary<string, FilterOperator> _columnActiveOperators = new();
    private string _activeFilterDropdown = null;
    private bool _isLoadingFilterValues = false;
    private System.Threading.CancellationTokenSource _filterLoadCancellation;
    private Expression<Func<TItem, bool>>? _filterPredicate;
    
    // RFilter integration - SOLID pattern
    private IFilterProvider<TItem>? _lastBindFilter;
    
    // Filter persistence
    private List<FilterConfiguration> _savedFilterSets = new();
    private string _selectedFilterSetId = null;
    private bool _showSaveFilterSetModal = false;
    private string _newFilterSetName = "";
    private string _newFilterSetDescription = "";
    
    // UI State
    private bool _showExportModal = false;
    private bool _showColumnManager = false;
    private bool _showSettingsModal = false;
    private bool _isExporting = false;
    private bool _showPerformanceMetrics = false;
    private ExportConfiguration _exportConfig = new();
    
    // Real-time
    private bool _isConnected = false;
    private GridPerformanceMetrics _performanceMetrics;
    
    // Virtualization
    private int _virtualScrollTop = 0;
    private int _virtualItemHeight = 40;
    private int _virtualViewportHeight = 400;

    #endregion

    #region Lifecycle

    protected override async Task OnInitializedAsync()
    {
        // Initialize configuration if not provided
        if (Configuration == null)
        {
            Configuration = new GridConfiguration<TItem>();
        }
        
        // Initialize state if not provided
        if (State == null)
        {
            State = new GridState<TItem>
            {
                PageSize = Configuration.PageSize,
                CurrentPage = 1
            };
        }
        
        // Auto-generate columns if not provided
        if (Columns == null || !Columns.Any())
        {
            Columns = GenerateColumnsFromType();
        }
        
        // Initialize column states and compile property accessors
        foreach (var column in Columns)
        {
            if (!State.ColumnStates.ContainsKey(column.Key))
            {
                State.ColumnStates[column.Key] = new ColumnState
                {
                    IsVisible = column.Visible,
                    Order = column.Order
                };
            }
            
            // Pre-compile property accessors for high performance
            column.EnsureCompiled();
        }
        
        // Load saved filter sets
        await LoadSavedFilterSets();
        
        // Restore last filter state if enabled
        if (Configuration.EnableFilterPersistence)
        {
            await RestoreFilterState();
        }
        
        // Setup real-time updates
        if (Configuration.EnableRealTimeUpdates)
        {
            await SetupRealTimeUpdates();
        }
        
        await ProcessDataAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Subscribe to BindFilter changes if bound - SOLID inverted control pattern
        if (BindFilter != null && _lastBindFilter != BindFilter)
        {
            // Unsubscribe from previous filter
            if (_lastBindFilter != null)
            {
                _lastBindFilter.OnFilterChanged -= OnBindFilterChanged;
            }
            
            // Subscribe to new filter
            BindFilter.OnFilterChanged += OnBindFilterChanged;
            _lastBindFilter = BindFilter;
        }
        
        await ProcessDataAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _jsModule = await SafeInvokeAsync<IJSObjectReference>(
                    "RRBlazor.getModuleReference", "table");
                
                if (_jsModule != null)
                {
                    await _jsModule.InvokeVoidAsync("initialize", 
                        Configuration.GridId, Configuration);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to initialize RGrid JavaScript: {ex.Message}");
            }
        }
    }

    #endregion
    
    #region Column Generation
    
    private List<GridColumnDefinition<TItem>> GenerateColumnsFromType()
    {
        var columns = new List<GridColumnDefinition<TItem>>();
        var itemType = typeof(TItem);
        
        // Handle primitive types and strings specially
        if (itemType.IsPrimitive || itemType == typeof(string) || itemType == typeof(decimal) || 
            itemType == typeof(DateTime) || itemType == typeof(DateTimeOffset) || itemType == typeof(Guid))
        {
            // For primitive types, create a single "Value" column
            var column = new GridColumnDefinition<TItem>
            {
                Key = "Value",
                Title = "Value",
                Visible = true,
                Sortable = true,
                Filterable = true,
                Width = GetDefaultWidthForType(itemType),
                CompiledProperty = item => item // For primitives, the item IS the value
            };
            columns.Add(column);
            return columns;
        }
        
        // Get all public properties
        var properties = itemType.GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance)
            .Where(p => p.CanRead)
            .OrderBy(p => p.Name);
        
        foreach (var property in properties)
        {
            // Skip complex types and collections (except strings)
            if (property.PropertyType != typeof(string) && 
                (property.PropertyType.IsClass || typeof(System.Collections.IEnumerable).IsAssignableFrom(property.PropertyType)))
            {
                continue;
            }
            
            var column = new GridColumnDefinition<TItem>
            {
                Key = property.Name,
                Title = FormatPropertyName(property.Name),
                Visible = true,
                Sortable = true,
                Filterable = true,
                Width = GetDefaultWidthForType(property.PropertyType),
                CompiledProperty = CreateValueGetter(property)
            };
            
            columns.Add(column);
        }
        
        return columns;
    }
    
    private string FormatPropertyName(string propertyName)
    {
        // Convert PascalCase to Title Case
        var result = System.Text.RegularExpressions.Regex.Replace(propertyName, "([A-Z])", " $1").Trim();
        return result;
    }
    
    private string GetDefaultWidthForType(Type type)
    {
        if (type == typeof(bool)) return "100px";
        if (type == typeof(DateTime) || type == typeof(DateTime?)) return "180px";
        if (type == typeof(int) || type == typeof(decimal) || type == typeof(double) || type == typeof(float)) return "120px";
        return "auto";
    }
    
    private Func<TItem, object> CreateValueGetter(System.Reflection.PropertyInfo property)
    {
        // Create compiled accessor using expression trees for high performance
        var parameter = Expression.Parameter(typeof(TItem), "item");
        var propertyAccess = Expression.Property(parameter, property);
        var boxedProperty = Expression.Convert(propertyAccess, typeof(object));
        var lambda = Expression.Lambda<Func<TItem, object>>(boxedProperty, parameter);
        return lambda.Compile();
    }
    
    #endregion

    #region Data Processing

    private async Task ProcessDataAsync()
    {
        State.IsLoading = true;
        StateHasChanged();
        
        try
        {
            var filteredData = Items;
            
            // Apply BindFilter predicate - SOLID compliant: component controls its own filtering
            if (BindFilter != null)
            {
                var filterPredicate = BindFilter.GetPredicate();
                filteredData = filteredData.Where(filterPredicate.Compile());
            }
            
            // Apply column filters
            filteredData = ApplyColumnFilters(filteredData);
            
            _dataResult = GridService.ProcessData(filteredData, State, Configuration);
            _processedData = _dataResult.Data;
            
            State.TotalItems = _dataResult.TotalCount;
            State.IsLoading = false;
            State.ErrorMessage = _dataResult.Error;
            State.LastUpdated = DateTime.UtcNow;
            
            _performanceMetrics = GridService.GetPerformanceMetrics(Configuration.GridId);
            
            // Invoke state changed callbacks
            if (StateChanged.HasDelegate)
            {
                // Invoke state changed callbacks
        if (StateChanged.HasDelegate)
        {
            await StateChanged.InvokeAsync(State);
        }
        else if (StateChangedObject.HasDelegate)
        {
            await StateChangedObject.InvokeAsync(State);
        }
            }
            else if (StateChangedObject.HasDelegate)
            {
                await StateChangedObject.InvokeAsync(State);
            }
        }
        catch (Exception ex)
        {
            State.IsLoading = false;
            State.ErrorMessage = ex.Message;
            Console.WriteLine($"Error processing grid data: {ex.Message}");
        }
        
        StateHasChanged();
    }
    
    private IEnumerable<TItem> ApplyColumnFilters(IEnumerable<TItem> data)
    {
        if (data == null || !_columnFilterStates.Any(fs => fs.Value?.IsActive == true))
            return data;
        
        var filteredData = data;
        
        foreach (var filterState in _columnFilterStates.Where(fs => fs.Value?.IsActive == true))
        {
            var column = Columns.FirstOrDefault(c => c.Key == filterState.Key);
            if (column == null) continue;
            
            var filterValue = filterState.Value.Value ?? filterState.Value.QuickFilterValue;
            if (filterValue == null && filterState.Value.Operator != FilterOperator.IsEmpty && filterState.Value.Operator != FilterOperator.IsNotEmpty)
                continue;
            
            // Handle multi-select filters (from inline dropdown)
            if (filterState.Value.Operator == FilterOperator.In && filterValue is HashSet<object> selectedValues)
            {
                if (selectedValues.Any())
                {
                    filteredData = filteredData.Where(item =>
                    {
                        var itemValue = column.GetValue(item);
                        return selectedValues.Contains(itemValue);
                    });
                }
            }
            else
            {
                // TODO: Use compiled expression for other filter types
                // FilterExpressionCompiler needs to be implemented
                // For now, using a simple value comparison
                filteredData = filteredData.Where(item =>
                {
                    var value = column.GetValue(item);
                    if (value == null) return false;
                    var valueStr = value.ToString()?.ToLowerInvariant() ?? "";
                    var filterStr = filterValue?.ToString()?.ToLowerInvariant() ?? "";
                    return valueStr.Contains(filterStr);
                });
            }
        }
        
        return filteredData;
    }

    private async Task OnDataFiltered(FilterResult<TItem> result)
    {
        _processedData = result.Data.ToList();
        State.TotalItems = _processedData.Count;
        // Invoke state changed callbacks
        if (StateChanged.HasDelegate)
        {
            await StateChanged.InvokeAsync(State);
        }
        else if (StateChangedObject.HasDelegate)
        {
            await StateChangedObject.InvokeAsync(State);
        }
        StateHasChanged();
    }
    
    private async Task OnFilterPredicateChanged(Expression<Func<TItem, bool>> predicate)
    {
        _filterPredicate = predicate;
        await ProcessDataAsync();
        StateHasChanged();
    }
    
    private async Task OnFilterPredicateChanged(object predicate)
    {
        if (predicate is Expression<Func<TItem, bool>> typedPredicate)
        {
            await OnFilterPredicateChanged(typedPredicate);
        }
    }

    private async Task OnFilterCriteriaChanged(UniversalFilterCriteria<TItem> criteria)
    {
        // Convert to grid filter criteria
        // State.FilterCriteria = ConvertFilterCriteria(criteria);
        await ProcessDataAsync();
    }
    
    private async Task OnFilterCriteriaChanged(object criteria)
    {
        if (criteria is UniversalFilterCriteria<TItem> typedCriteria)
        {
            await OnFilterCriteriaChanged(typedCriteria);
        }
    }

    #endregion

    #region Rendering

    private RenderFragment RenderStandardGrid() => builder =>
    {
        // Build CSS Grid template columns
        var columns = GetVisibleColumns().ToList();
        var gridTemplateColumns = new System.Text.StringBuilder();
        
        // Add selection column if needed
        if (Configuration?.SelectionMode != GridSelectionMode.None)
        {
            gridTemplateColumns.Append("48px "); // Fixed width for checkbox column
        }
        
        // Add data columns with their specified widths
        foreach (var column in columns)
        {
            var width = !string.IsNullOrEmpty(column.Width) ? column.Width : "1fr";
            gridTemplateColumns.Append($"{width} ");
        }
        
        // Create the actual CSS Grid container
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "grid-layout");
        builder.AddAttribute(2, "style", $"display: grid; grid-template-columns: {gridTemplateColumns.ToString().Trim()};");
        
        // Render header row
        RenderGridHeader(builder, columns);
        
        // Render data rows
        var visibleData = GetPagedData();
        var rowIndex = 0;
        
        // Debug logging
        System.Diagnostics.Debug.WriteLine($"[RGridGeneric] Rendering {visibleData.Count()} items with {columns.Count} columns");
        foreach (var col in columns)
        {
            System.Diagnostics.Debug.WriteLine($"  Column: {col.Key} = {col.Title}");
        }
        
        foreach (var item in visibleData)
        {
            RenderGridRow(builder, item, rowIndex, columns);
            
            // Master-detail row
            if (Configuration?.EnableMasterDetail == true && State.ExpandedMasterRows.Contains(GetItemKey(item)))
            {
                RenderGridMasterDetailRow(builder, item, columns.Count);
            }
            rowIndex++;
        }
        
        builder.CloseElement(); // grid-layout div
    };
    
    private void RenderGridHeader(RenderTreeBuilder builder, List<GridColumnDefinition<TItem>> columns)
    {
        // Selection header
        if (Configuration?.SelectionMode != GridSelectionMode.None)
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "grid-header-cell grid-selection-header");
            
            if (Configuration.SelectionMode == GridSelectionMode.Multiple)
            {
                builder.OpenComponent<RCheckbox>(2);
                builder.AddAttribute(3, "Value", IsAllSelected());
                builder.AddAttribute(4, "ValueChanged", EventCallback.Factory.Create<bool>(this, OnSelectAllChanged));
                builder.CloseComponent();
            }
            
            builder.CloseElement();
        }
        
        // Column headers with integrated filters
        foreach (var column in columns)
        {
            builder.OpenElement(5, "div");
            builder.AddAttribute(6, "class", $"grid-header-cell {(column.Sortable ? "grid-sortable" : "")} {(column.Filterable && Configuration?.EnableColumnFiltering == true ? "grid-filterable" : "")}");
            
            // Header content wrapper
            builder.OpenElement(7, "div");
            builder.AddAttribute(8, "class", "grid-header-content");
            
            if (column.Sortable)
            {
                builder.OpenElement(9, "button");
                builder.AddAttribute(10, "class", "grid-sort-button");
                builder.AddAttribute(11, "onclick", EventCallback.Factory.Create(this, () => ToggleSort(column.Key)));
                
                builder.OpenElement(12, "span");
                builder.AddAttribute(13, "class", "grid-header-title");
                builder.AddContent(14, column.Title);
                builder.CloseElement();
                
                builder.OpenElement(15, "i");
                builder.AddAttribute(16, "class", "icon grid-sort-icon");
                builder.AddContent(17, GetSortIcon(column.Key));
                builder.CloseElement();
                
                builder.CloseElement(); // button
            }
            else
            {
                builder.OpenElement(18, "span");
                builder.AddAttribute(19, "class", "grid-header-title");
                builder.AddContent(20, column.Title);
                builder.CloseElement();
            }
            
            // Inline filter icon and dropdown IN the header
            if (column.Filterable && Configuration?.EnableColumnFiltering == true)
            {
                var filterState = _columnFilterStates.TryGetValue(column.Key, out var state) ? state : null;
                var hasActiveFilter = filterState?.IsActive == true;
                
                builder.OpenElement(21, "button");
                builder.AddAttribute(22, "class", $"grid-filter-toggle {(hasActiveFilter ? "grid-filter-toggle-active" : "")}");
                builder.AddAttribute(23, "onclick", EventCallback.Factory.Create(this, () => ToggleColumnFilterDropdown(column.Key)));
                builder.AddAttribute(24, "onclick:stopPropagation", true);
                builder.AddAttribute(25, "title", hasActiveFilter ? "Filter active" : "Add filter");
                
                builder.OpenElement(26, "i");
                builder.AddAttribute(27, "class", "icon");
                builder.AddContent(28, hasActiveFilter ? "filter_alt" : "filter_list");
                builder.CloseElement();
                
                if (hasActiveFilter)
                {
                    builder.OpenElement(29, "span");
                    builder.AddAttribute(30, "class", "grid-filter-badge");
                    builder.CloseElement();
                }
                
                builder.CloseElement(); // filter toggle button
                
                // Render filter dropdown if open
                if (_activeFilterDropdown == column.Key)
                {
                    RenderInlineFilterDropdown(builder, column, 31);
                }
            }
            
            builder.CloseElement(); // header content wrapper
            
            // Column resizer
            if (Configuration?.EnableColumnResizing == true && column.Resizable)
            {
                builder.OpenElement(100, "div");
                builder.AddAttribute(101, "class", "grid-column-resizer");
                builder.AddAttribute(102, "onmousedown", "event.stopPropagation(); RRBlazor.grid.startResize(event, this);");
                builder.CloseElement();
            }
            
            builder.CloseElement(); // header cell
        }
    }
    
    private void RenderInlineFilterDropdown(RenderTreeBuilder builder, GridColumnDefinition<TItem> column, int sequence)
    {
        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown grid-filter-dropdown-advanced");
        builder.AddAttribute(sequence++, "onclick:stopPropagation", true);
        
        // Dropdown header
        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__header");
        
        builder.OpenElement(sequence++, "span");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__title");
        builder.AddContent(sequence++, $"Filter: {column.Title}");
        builder.CloseElement();
        
        builder.OpenElement(sequence++, "button");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__close");
        builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => CloseFilterDropdown()));
        builder.OpenElement(sequence++, "i");
        builder.AddAttribute(sequence++, "class", "icon");
        builder.AddContent(sequence++, "close");
        builder.CloseElement();
        builder.CloseElement();
        
        builder.CloseElement(); // header
        
        // Advanced Operator Selection
        var columnType = GetColumnDataType(column);
        var availableOperators = GetAvailableOperators(columnType);
        var currentOperator = _columnActiveOperators.TryGetValue(column.Key, out var op) ? op : FilterOperator.Contains;
        
        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__operator");
        
        builder.OpenElement(sequence++, "label");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__operator-label");
        builder.AddContent(sequence++, "Operator:");
        builder.CloseElement();
        
        builder.OpenElement(sequence++, "select");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__operator-select");
        builder.AddAttribute(sequence++, "value", currentOperator.ToString());
        builder.AddAttribute(sequence++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this,
            async (e) => await OnOperatorChanged(column.Key, e.Value?.ToString())));
        
        foreach (var availableOp in availableOperators)
        {
            builder.OpenElement(sequence++, "option");
            builder.AddAttribute(sequence++, "value", availableOp.ToString());
            builder.AddContent(sequence++, GetOperatorDisplayText(availableOp, columnType));
            builder.CloseElement();
        }
        
        builder.CloseElement(); // select
        builder.CloseElement(); // operator div
        
        // Render operator-specific filter UI
        RenderOperatorSpecificUI(builder, column, currentOperator, columnType, ref sequence);
        
        // Quick search (for Contains, StartsWith, EndsWith operators)
        if (IsTextSearchOperator(currentOperator))
        {
            builder.OpenElement(sequence++, "div");
            builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__search");
            
            builder.OpenElement(sequence++, "input");
            builder.AddAttribute(sequence++, "type", "text");
            builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__search-input");
            builder.AddAttribute(sequence++, "placeholder", GetOperatorPlaceholder(currentOperator));
            
            var currentFilterState = _columnFilterStates.TryGetValue(column.Key, out var fs) ? fs : new RColumnFilterState();
            builder.AddAttribute(sequence++, "value", currentFilterState.QuickFilterValue ?? "");
            builder.AddAttribute(sequence++, "oninput", EventCallback.Factory.Create<ChangeEventArgs>(this, 
                async (e) => await OnInlineFilterSearchChanged(column.Key, e.Value?.ToString())));
            
            builder.CloseElement(); // input
            builder.CloseElement(); // search div
        }
        
        // Unique values list with checkboxes
        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__values");
        
        // Select All / Clear All buttons
        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__actions");
        
        builder.OpenElement(sequence++, "button");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__action-btn");
        builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => SelectAllFilterValues(column.Key)));
        builder.AddContent(sequence++, "Select All");
        builder.CloseElement();
        
        builder.OpenElement(sequence++, "button");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__action-btn");
        builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => ClearAllFilterValues(column.Key)));
        builder.AddContent(sequence++, "Clear All");
        builder.CloseElement();
        
        builder.CloseElement(); // actions
        
        // Get unique values for this column
        var uniqueValues = GetUniqueColumnValues(column);
        var selectedValues = GetSelectedFilterValues(column.Key);
        var searchTerm = "";
        
        // Values list
        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__list");
        
        foreach (var value in uniqueValues)
        {
            var displayValue = value?.ToString() ?? "(empty)";
            
            // Filter by search term
            if (!string.IsNullOrEmpty(searchTerm) && !displayValue.ToLower().Contains(searchTerm))
                continue;
            
            builder.OpenElement(sequence++, "label");
            builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__item");
            
            builder.OpenElement(sequence++, "input");
            builder.AddAttribute(sequence++, "type", "checkbox");
            builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__checkbox");
            builder.AddAttribute(sequence++, "checked", selectedValues.Contains(value));
            builder.AddAttribute(sequence++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this,
                async (e) => await OnFilterValueToggled(column.Key, value, (bool)(e.Value ?? false))));
            builder.CloseElement();
            
            builder.OpenElement(sequence++, "span");
            builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__label");
            builder.AddContent(sequence++, displayValue);
            builder.CloseElement();
            
            // Count of items with this value
            var count = GetValueCount(column, value);
            builder.OpenElement(sequence++, "span");
            builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__count");
            builder.AddContent(sequence++, $"({count})");
            builder.CloseElement();
            
            builder.CloseElement(); // label
        }
        
        builder.CloseElement(); // list
        builder.CloseElement(); // values div
        
        // Footer with Apply/Cancel buttons
        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__footer");
        
        builder.OpenElement(sequence++, "button");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__btn grid-filter-dropdown__btn-primary");
        builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => ApplyColumnFilter(column.Key)));
        builder.AddContent(sequence++, "Apply");
        builder.CloseElement();
        
        builder.OpenElement(sequence++, "button");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__btn grid-filter-dropdown__btn-secondary");
        builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => ClearColumnFilter(column.Key)));
        builder.AddContent(sequence++, "Clear");
        builder.CloseElement();
        
        builder.CloseElement(); // footer
        
        builder.CloseElement(); // dropdown
    }
    
    private void RenderGridRow(RenderTreeBuilder builder, TItem item, int rowIndex, List<GridColumnDefinition<TItem>> columns)
    {
        // For CSS Grid, cells should not have row classes - they're positioned by grid
        var cellClass = "grid-cell";
        var dataClass = "grid-cell grid-data-cell";
        
        // Add row-based styling via data attributes for CSS targeting
        var rowDataAttr = $"row-{rowIndex}";
        var isEven = rowIndex % 2 == 0;
        var isSelected = IsItemSelected(item);
        
        // Selection cell
        if (Configuration?.SelectionMode != GridSelectionMode.None)
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", $"{cellClass} grid-selection-cell {(isEven ? "even-row" : "odd-row")} {(isSelected ? "selected-row" : "")}");
            builder.AddAttribute(2, "data-row", rowDataAttr);
            builder.AddAttribute(3, "onclick", EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, async (args) => await OnRowClickInternal(item, rowIndex)));
            
            if (Configuration?.SelectionMode == GridSelectionMode.Single)
            {
                builder.OpenComponent<RRadio>(4);
                builder.AddAttribute(5, "Value", IsItemSelected(item));
                builder.AddAttribute(6, "ValueChanged", EventCallback.Factory.Create<bool>(this, value => OnItemSelectionChanged(item, value)));
                builder.CloseComponent();
            }
            else if (Configuration?.SelectionMode == GridSelectionMode.Multiple)
            {
                builder.OpenComponent<RCheckbox>(7);
                builder.AddAttribute(8, "Value", IsItemSelected(item));
                builder.AddAttribute(9, "ValueChanged", EventCallback.Factory.Create<bool>(this, value => OnItemSelectionChanged(item, value)));
                builder.CloseComponent();
            }
            
            builder.CloseElement();
        }
        
        // Data cells
        foreach (var column in columns)
        {
            builder.OpenElement(10, "div");
            builder.AddAttribute(11, "class", $"{dataClass} {(isEven ? "even-row" : "odd-row")} {(isSelected ? "selected-row" : "")}");
            builder.AddAttribute(12, "data-row", rowDataAttr);
            builder.AddAttribute(13, "data-column", column.Key);
            builder.AddAttribute(14, "onclick", EventCallback.Factory.Create(this, () => OnCellClickInternal(item, column, rowIndex)));
            
            // Cell content
            var cellContent = GetCellContent(column, item);
            if (cellContent != null)
            {
                builder.AddContent(12, cellContent);
            }
            else
            {
                var value = column.GetFormattedValue(item);
                System.Diagnostics.Debug.WriteLine($"  Cell [{column.Key}]: {value}");
                builder.AddContent(13, value);
            }
            
            // Master-detail expand button
            if (Configuration?.EnableMasterDetail == true && column.IsMasterColumn)
            {
                builder.OpenElement(14, "button");
                builder.AddAttribute(15, "class", "grid-expand-button");
                builder.AddAttribute(16, "onclick", EventCallback.Factory.Create(this, () => ToggleMasterDetail(item)));
                
                var isExpanded = State.ExpandedMasterRows.Contains(GetItemKey(item));
                builder.OpenElement(17, "i");
                builder.AddAttribute(18, "class", "icon");
                builder.AddContent(19, isExpanded ? "expand_less" : "expand_more");
                builder.CloseElement();
                
                builder.CloseElement();
            }
            
            builder.CloseElement(); // cell
        }
    }
    
    private void RenderGridMasterDetailRow(RenderTreeBuilder builder, TItem item, int columnCount)
    {
        var totalColumns = columnCount;
        if (Configuration?.SelectionMode != GridSelectionMode.None) totalColumns++;
        
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "grid-master-detail-row");
        builder.AddAttribute(2, "style", $"grid-column: 1 / span {totalColumns};");
        
        if (MasterDetailTemplate != null)
        {
            builder.AddContent(3, MasterDetailTemplate(item));
        }
        else
        {
            builder.AddContent(4, "Master-detail content for this item");
        }
        
        builder.CloseElement();
    }


    private RenderFragment RenderVirtualizedGrid() => builder =>
    {
        // Placeholder for virtualized rendering
        builder.AddContent(0, "Virtualized grid rendering - Implementation in progress");
    };

    private RenderFragment GetCellContent(GridColumnDefinition<TItem> column, TItem item)
    {
        // Use Universal Template System
        if (column.BadgeTemplate != null)
            return column.BadgeTemplate.Render(item);
        
        if (column.CurrencyTemplate != null)
            return column.CurrencyTemplate.Render(item);
        
        if (column.StackTemplate != null)
            return column.StackTemplate.Render(item);
        
        // GroupTemplate is for grouped items, skip for individual items
        
        if (column.AvatarTemplate != null && column.AvatarTemplate is RenderFragment<TItem> avatarTemplate)
            return avatarTemplate(item);
        
        if (column.ProgressTemplate != null && column.ProgressTemplate is RenderFragment<TItem> progressTemplate)
            return progressTemplate(item);
        
        if (column.RatingTemplate != null)
            return column.RatingTemplate.Render(item);
        
        return column.GetCellContent(item);
    }

    #endregion

    #region Helper Methods

    private List<GridColumnDefinition<TItem>> GetVisibleColumns()
    {
        return Columns
            .Where(c => State.ColumnStates.ContainsKey(c.Key) && State.ColumnStates[c.Key].IsVisible)
            .OrderBy(c => State.ColumnStates[c.Key].Order)
            .ToList();
    }

    private IEnumerable<TItem> GetPagedData()
    {
        if (!Configuration.EnablePaging)
            return _processedData;
        
        return _processedData
            .Skip((State.CurrentPage - 1) * State.PageSize)
            .Take(State.PageSize);
    }

    private string GetContainerClasses()
    {
        var classes = new List<string> { "grid", $"grid-density-{Configuration?.Density.ToString().ToLower() ?? "normal"}" };
        
        if (Configuration?.Striped == true) classes.Add("grid-striped");
        if (Configuration?.Bordered == true) classes.Add("grid-bordered");
        if (Configuration?.Hover == true) classes.Add("grid-hover");
        if (Configuration?.EnableGrouping == true) classes.Add("grid-groupable");
        if (Configuration?.EnableMasterDetail == true) classes.Add("grid-master-detail");
        if (!string.IsNullOrEmpty(Class)) classes.Add(Class);
        
        return string.Join(" ", classes);
    }

    private string GetContentClasses()
    {
        var classes = new List<string> { "grid-content" };
        
        if (Configuration?.EnableVirtualization == true) classes.Add("grid-content-virtualized");
        
        return string.Join(" ", classes);
    }

    private string GetTableClasses()
    {
        var classes = new List<string> { "grid-table" };
        
        return string.Join(" ", classes);
    }

    private string GetHeaderCellClasses(GridColumnDefinition<TItem> column)
    {
        var classes = new List<string> { "grid-table-header-cell" };
        
        if (column.Sortable) classes.Add("grid-table-header-cell-sortable");
        if (column.Resizable) classes.Add("grid-table-header-cell-resizable");
        if (GetColumnState(column.Key).IsFrozen) classes.Add("grid-table-header-cell-frozen");
        if (!string.IsNullOrEmpty(column.HeaderClass)) classes.Add(column.HeaderClass);
        
        return string.Join(" ", classes);
    }

    private string GetHeaderCellStyles(GridColumnDefinition<TItem> column)
    {
        var styles = new List<string>();
        
        if (!string.IsNullOrEmpty(column.Width)) styles.Add($"width: {column.Width}");
        if (!string.IsNullOrEmpty(column.MinWidth)) styles.Add($"min-width: {column.MinWidth}");
        if (!string.IsNullOrEmpty(column.MaxWidth)) styles.Add($"max-width: {column.MaxWidth}");
        
        return string.Join("; ", styles);
    }

    private string GetRowClasses(TItem item, int index)
    {
        var classes = new List<string> { "grid-row" };
        
        if (IsItemSelected(item)) classes.Add("grid-row-selected");
        if (index % 2 == 1 && Configuration?.Striped == true) classes.Add("grid-row-odd");
        
        return string.Join(" ", classes);
    }

    private string GetCellClasses(GridColumnDefinition<TItem> column, TItem item)
    {
        var classes = new List<string> { "grid-cell" };
        
        if (GetColumnState(column.Key).IsFrozen) classes.Add("grid-cell-frozen");
        if (!string.IsNullOrEmpty(column.CellClass)) classes.Add(column.CellClass);
        if (column.CellClassFunc != null)
        {
            var customClass = column.CellClassFunc(item);
            if (!string.IsNullOrEmpty(customClass)) classes.Add(customClass);
        }
        
        return string.Join(" ", classes);
    }

    private string GetCellStyles(GridColumnDefinition<TItem> column)
    {
        var styles = new List<string>();
        
        if (!string.IsNullOrEmpty(column.Width)) styles.Add($"width: {column.Width}");
        
        return string.Join("; ", styles);
    }

    private ColumnState GetColumnState(string columnKey)
    {
        return State.ColumnStates.TryGetValue(columnKey, out var state) 
            ? state 
            : new ColumnState();
    }

    private object GetItemKey(TItem item)
    {
        // Simple implementation - in production, you'd want a more robust key generation
        return item.GetHashCode();
    }

    private int GetStartIndex()
    {
        if (!_processedData.Any()) return 0;
        return ((State.CurrentPage - 1) * State.PageSize) + 1;
    }

    private int GetEndIndex()
    {
        var endIndex = State.CurrentPage * State.PageSize;
        return Math.Min(endIndex, State.TotalItems);
    }

    private string GetSortIcon(string columnKey)
    {
        var sortDescriptor = State.SortDescriptors.FirstOrDefault(s => s.ColumnKey == columnKey);
        if (sortDescriptor == null) return "unfold_more";
        
        return sortDescriptor.Direction == GridSortDirection.Ascending ? "arrow_drop_up" : "arrow_drop_down";
    }

    private List<string> GetSearchFields()
    {
        return Columns
            .Where(c => c.Searchable)
            .Select(c => c.Key)
            .ToList();
    }

    private UniversalFilterConfig GetFilterConfig()
    {
        return new UniversalFilterConfig
        {
            ShowSearch = Configuration.EnableSearch,
            ShowQuickFilters = true,
            ShowDateRange = true,
            ShowAdvancedPanel = true,
            ShowClearButton = true,
            ShowFilterCount = true,
            EnableRealTime = true,
            DebounceMs = 300
        };
    }

    #endregion

    // Continued in next part due to length...
    
    #region Event Handlers

    private async Task OnRowClickInternal(TItem item, int index)
    {
        var args = new GridRowEventArgs<TItem>
        {
            Item = item,
            RowIndex = index,
            IsSelected = IsItemSelected(item)
        };
        
        // Invoke typed callback if available
        if (OnRowClick.HasDelegate)
        {
            await OnRowClick.InvokeAsync(args);
        }
        // Fall back to object callback for smart wrapper compatibility
        else if (OnRowClickObject.HasDelegate)
        {
            await OnRowClickObject.InvokeAsync(args);
        }
        
        // Handle row selection if enabled
        if (Configuration.SelectionMode == GridSelectionMode.Row)
        {
            await OnItemSelectionChanged(item, !IsItemSelected(item));
        }
    }

    private async Task OnCellClickInternal(TItem item, GridColumnDefinition<TItem> column, int index)
    {
        var args = new GridCellEventArgs<TItem>
        {
            Item = item,
            ColumnKey = column.Key,
            RowIndex = index,
            ColumnIndex = GetVisibleColumns().IndexOf(column),
            CellValue = column.GetValue(item)
        };
        
        // Invoke typed callback if available
        if (OnCellClick.HasDelegate)
        {
            await OnCellClick.InvokeAsync(args);
        }
        // Fall back to object callback for smart wrapper compatibility
        else if (OnCellClickObject.HasDelegate)
        {
            await OnCellClickObject.InvokeAsync(args);
        }
    }

    private bool IsItemSelected(TItem item)
    {
        return State.SelectedItems.Contains(item) || 
               (Configuration.SelectionMode == GridSelectionMode.Single && State.SelectedItem?.Equals(item) == true);
    }

    private bool IsAllSelected()
    {
        var pagedItems = GetPagedData().ToList();
        return pagedItems.Any() && pagedItems.All(item => IsItemSelected(item));
    }

    private async Task OnSelectAllChanged(bool selected)
    {
        var pagedItems = GetPagedData().ToList();
        
        if (selected)
        {
            foreach (var item in pagedItems)
            {
                if (!State.SelectedItems.Contains(item))
                    State.SelectedItems.Add(item);
            }
        }
        else
        {
            foreach (var item in pagedItems)
            {
                State.SelectedItems.Remove(item);
            }
        }
        
        // Invoke selection changed callbacks
        if (OnSelectionChanged.HasDelegate)
        {
            await OnSelectionChanged.InvokeAsync(State.SelectedItems);
        }
        else if (OnSelectionChangedObject.HasDelegate)
        {
            await OnSelectionChangedObject.InvokeAsync(State.SelectedItems);
        }
        // Invoke state changed callbacks
        if (StateChanged.HasDelegate)
        {
            await StateChanged.InvokeAsync(State);
        }
        else if (StateChangedObject.HasDelegate)
        {
            await StateChangedObject.InvokeAsync(State);
        }
        StateHasChanged();
    }

    private async Task OnItemSelectionChanged(TItem item, bool selected)
    {
        if (Configuration.SelectionMode == GridSelectionMode.Single)
        {
            State.SelectedItem = selected ? item : default(TItem);
            State.SelectedItems.Clear();
            if (selected) State.SelectedItems.Add(item);
        }
        else if (Configuration.SelectionMode == GridSelectionMode.Multiple)
        {
            if (selected)
            {
                if (!State.SelectedItems.Contains(item))
                    State.SelectedItems.Add(item);
            }
            else
            {
                State.SelectedItems.Remove(item);
            }
        }
        
        // Invoke selection changed callbacks
        if (OnSelectionChanged.HasDelegate)
        {
            await OnSelectionChanged.InvokeAsync(State.SelectedItems);
        }
        else if (OnSelectionChangedObject.HasDelegate)
        {
            await OnSelectionChangedObject.InvokeAsync(State.SelectedItems);
        }
        // Invoke state changed callbacks
        if (StateChanged.HasDelegate)
        {
            await StateChanged.InvokeAsync(State);
        }
        else if (StateChangedObject.HasDelegate)
        {
            await StateChangedObject.InvokeAsync(State);
        }
        StateHasChanged();
    }

    private async Task ToggleSort(string columnKey)
    {
        var existingSort = State.SortDescriptors.FirstOrDefault(s => s.ColumnKey == columnKey);
        
        if (existingSort != null)
        {
            if (existingSort.Direction == GridSortDirection.Ascending)
            {
                existingSort.Direction = GridSortDirection.Descending;
            }
            else
            {
                State.SortDescriptors.Remove(existingSort);
            }
        }
        else
        {
            State.SortDescriptors.Clear(); // Single column sort for now
            State.SortDescriptors.Add(new SortDescriptor
            {
                ColumnKey = columnKey,
                Direction = GridSortDirection.Ascending,
                Order = 0
            });
        }
        
        await ProcessDataAsync();
    }

    private async Task GoToPage(int page)
    {
        State.CurrentPage = Math.Max(1, Math.Min(page, State.TotalPages));
        await ProcessDataAsync();
    }

    private async Task OnPageSizeChanged(object value)
    {
        if (int.TryParse(value?.ToString(), out var pageSize))
        {
            State.PageSize = pageSize;
            State.CurrentPage = 1; // Reset to first page
            await ProcessDataAsync();
        }
    }

    private void ToggleMasterDetail(TItem item)
    {
        var key = GetItemKey(item);
        if (State.ExpandedMasterRows.Contains(key))
        {
            State.ExpandedMasterRows.Remove(key);
        }
        else
        {
            State.ExpandedMasterRows.Add(key);
        }
        
        StateHasChanged();
    }

    #endregion

    #region Export

    private void ShowExportModal()
    {
        _exportConfig = new ExportConfiguration
        {
            FileName = $"{Configuration.Title}_{DateTime.Now:yyyyMMdd}",
            Format = ExportFormat.Excel,
            IncludeHeaders = true,
            ExportAllPages = false
        };
        _showExportModal = true;
    }

    private async Task PerformExport()
    {
        _isExporting = true;
        StateHasChanged();
        
        try
        {
            var dataToExport = _exportConfig.ExportAllPages ? Items : GetPagedData();
            var exportData = await GridService.ExportDataAsync(dataToExport, _exportConfig, Columns);
            
            if (_jsModule != null)
            {
                await _jsModule.InvokeVoidAsync("downloadFile", 
                    _exportConfig.FileName, 
                    Convert.ToBase64String(exportData),
                    GetMimeType(_exportConfig.Format));
            }
            else
            {
                Console.WriteLine("Export failed: JavaScript module not loaded");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Export failed: {ex.Message}");
            // Show error toast or alert
        }
        finally
        {
            _isExporting = false;
            _showExportModal = false;
            StateHasChanged();
        }
    }

    private string GetMimeType(ExportFormat format)
    {
        return format switch
        {
            ExportFormat.Excel => "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            ExportFormat.CSV => "text/csv",
            ExportFormat.JSON => "application/json",
            ExportFormat.PDF => "application/pdf",
            _ => "application/octet-stream"
        };
    }

    private List<object> GetExportFormats()
    {
        return Enum.GetValues<ExportFormat>()
            .Select(f => new { Value = f, Text = f.ToString() })
            .Cast<object>()
            .ToList();
    }

    #endregion

    #region Column Management

    private void ShowColumnManager()
    {
        _showColumnManager = true;
    }

    private void UpdateColumnVisibility(string columnKey, bool visible)
    {
        if (State.ColumnStates.ContainsKey(columnKey))
        {
            State.ColumnStates[columnKey].IsVisible = visible;
        }
        else
        {
            State.ColumnStates[columnKey] = new ColumnState { IsVisible = visible };
        }
        
        StateHasChanged();
    }

    private void ToggleColumnFreeze(string columnKey)
    {
        var columnState = GetColumnState(columnKey);
        columnState.IsFrozen = !columnState.IsFrozen;
        State.ColumnStates[columnKey] = columnState;
        StateHasChanged();
    }

    private void ResetColumnSettings()
    {
        State.ColumnStates.Clear();
        foreach (var column in Columns)
        {
            State.ColumnStates[column.Key] = new ColumnState
            {
                IsVisible = column.Visible,
                Order = column.Order
            };
        }
        StateHasChanged();
    }

    private string GetColumnTypeDisplay(GridColumnDefinition<TItem> column)
    {
        if (column.Property != null)
        {
            var propertyType = GetPropertyType(column.Property);
            return propertyType?.Name ?? "Unknown";
        }
        return "Custom";
    }

    private Type GetPropertyType(Expression<Func<TItem, object>> expression)
    {
        if (expression.Body is MemberExpression memberExpression)
        {
            return memberExpression.Type;
        }
        if (expression.Body is UnaryExpression unaryExpression && 
            unaryExpression.Operand is MemberExpression memberExpr)
        {
            return memberExpr.Type;
        }
        return null;
    }

    #endregion

    #region Settings

    private void ShowSettingsModal()
    {
        _showSettingsModal = true;
    }

    private List<object> GetDensityOptions()
    {
        return Enum.GetValues<DensityType>()
            .Select(d => new { Value = d, Text = d.ToString() })
            .Cast<object>()
            .ToList();
    }

    #endregion

    #region Grouping

    private string GetGroupDisplayText(GroupDescriptor group)
    {
        var column = Columns.FirstOrDefault(c => c.Key == group.ColumnKey);
        return column?.Title ?? group.ColumnKey;
    }

    private string GetGroupIcon(GroupDescriptor group)
    {
        return group.Direction == GridSortDirection.Ascending ? "arrow_drop_up" : "arrow_drop_down";
    }

    private async Task RemoveGrouping(GroupDescriptor group)
    {
        State.GroupDescriptors.Remove(group);
        await ProcessDataAsync();
    }

    private async Task ClearGrouping()
    {
        State.GroupDescriptors.Clear();
        await ProcessDataAsync();
    }

    #endregion

    #region Real-time Updates

    private async Task SetupRealTimeUpdates()
    {
        await GridService.InitializeRealTimeUpdatesAsync(
            Configuration.GridId, 
            Configuration, 
            (obj) => OnRealTimeUpdate(obj as GridUpdateEventArgs<TItem>));
        
        _isConnected = true;
        StateHasChanged();
    }

    private async Task OnRealTimeUpdate(GridUpdateEventArgs<TItem> updateArgs)
    {
        if (updateArgs == null) return;
        State.HasPendingUpdates = true;
        // Invoke data updated callbacks
        if (OnDataUpdated.HasDelegate)
        {
            await OnDataUpdated.InvokeAsync(updateArgs);
        }
        else if (OnDataUpdatedObject.HasDelegate)
        {
            await OnDataUpdatedObject.InvokeAsync(updateArgs);
        }
        
        // Refresh data
        await ProcessDataAsync();
    }

    #endregion
    
    #region Column Filter Handlers
    
    private async Task OnColumnFilterChanged(string columnKey, RColumnFilterState filterState)
    {
        _columnFilterStates[columnKey] = filterState;
        
        // Update column filter in grid state
        var existingFilter = State.FilterCriteria.ColumnFilters.FirstOrDefault(cf => cf.ColumnKey == columnKey);
        if (existingFilter != null)
        {
            State.FilterCriteria.ColumnFilters.Remove(existingFilter);
        }
        
        if (filterState.IsActive)
        {
            State.FilterCriteria.ColumnFilters.Add(new ColumnFilter
            {
                ColumnKey = columnKey,
                Operator = ConvertToGridFilterOperator(filterState.Operator),
                Value = filterState.Value ?? filterState.QuickFilterValue,
                SecondValue = filterState.SecondValue,
                IsActive = true
            });
        }
        
        await ProcessDataAsync();
    }
    
    private async Task OnColumnFilterCleared(string columnKey)
    {
        _columnFilterStates.Remove(columnKey);
        
        var existingFilter = State.FilterCriteria.ColumnFilters.FirstOrDefault(cf => cf.ColumnKey == columnKey);
        if (existingFilter != null)
        {
            State.FilterCriteria.ColumnFilters.Remove(existingFilter);
        }
        
        await ProcessDataAsync();
    }
    
    private GridFilterOperator ConvertToGridFilterOperator(FilterOperator filterOp)
    {
        return filterOp switch
        {
            FilterOperator.Equals => GridFilterOperator.Equals,
            FilterOperator.NotEquals => GridFilterOperator.NotEquals,
            FilterOperator.Contains => GridFilterOperator.Contains,
            FilterOperator.StartsWith => GridFilterOperator.StartsWith,
            FilterOperator.EndsWith => GridFilterOperator.EndsWith,
            FilterOperator.GreaterThan => GridFilterOperator.GreaterThan,
            FilterOperator.LessThan => GridFilterOperator.LessThan,
            FilterOperator.GreaterThanOrEqual => GridFilterOperator.GreaterThanOrEqual,
            FilterOperator.LessThanOrEqual => GridFilterOperator.LessThanOrEqual,
            FilterOperator.Between => GridFilterOperator.Between,
            FilterOperator.In => GridFilterOperator.In,
            FilterOperator.NotIn => GridFilterOperator.NotIn,
            FilterOperator.IsEmpty => GridFilterOperator.IsEmpty,
            FilterOperator.IsNotEmpty => GridFilterOperator.IsNotEmpty,
            _ => GridFilterOperator.Equals
        };
    }
    
    #endregion
    
    #region Inline Filter Methods
    
    private void ToggleColumnFilterDropdown(string columnKey)
    {
        if (_activeFilterDropdown == columnKey)
        {
            _activeFilterDropdown = null;
        }
        else
        {
            _activeFilterDropdown = columnKey;
            
            // Initialize pending filter values with current state
            if (_columnFilterStates.TryGetValue(columnKey, out var state) && state.Value is HashSet<object> values)
            {
                _pendingFilterValues[columnKey] = new HashSet<object>(values);
            }
            else
            {
                _pendingFilterValues[columnKey] = new HashSet<object>();
            }
        }
        StateHasChanged();
    }
    
    private void CloseFilterDropdown()
    {
        _activeFilterDropdown = null;
        StateHasChanged();
    }
    
    private HashSet<object> GetUniqueColumnValues(GridColumnDefinition<TItem> column)
    {
        var values = new HashSet<object>();
        
        if (Items == null || !Items.Any()) return values;
        
        foreach (var item in Items)
        {
            var value = column.GetValue(item);
            values.Add(value);
        }
        
        return values.OrderBy(v => v?.ToString() ?? "").ToHashSet();
    }
    
    private HashSet<object> GetSelectedFilterValues(string columnKey)
    {
        // First check pending values (while dropdown is open)
        if (_pendingFilterValues.TryGetValue(columnKey, out var pendingValues))
        {
            return pendingValues;
        }
        
        // Then check active filter state
        if (_columnFilterStates.TryGetValue(columnKey, out var state) && state.Value is HashSet<object> values)
        {
            return values;
        }
        
        return new HashSet<object>();
    }
    
    private int GetValueCount(GridColumnDefinition<TItem> column, object value)
    {
        if (Items == null) return 0;
        
        return Items.Count(item => 
        {
            var itemValue = column.GetValue(item);
            return Equals(itemValue, value);
        });
    }
    
    private async Task OnInlineFilterSearchChanged(string columnKey, string searchTerm)
    {
        if (!_columnFilterStates.ContainsKey(columnKey))
        {
            _columnFilterStates[columnKey] = new RColumnFilterState();
        }
        
        _columnFilterStates[columnKey].QuickFilterValue = searchTerm;
        StateHasChanged();
    }
    
    private async Task OnFilterValueToggled(string columnKey, object value, bool isChecked)
    {
        if (!_pendingFilterValues.ContainsKey(columnKey))
        {
            _pendingFilterValues[columnKey] = new HashSet<object>();
        }
        
        if (isChecked)
        {
            _pendingFilterValues[columnKey].Add(value);
        }
        else
        {
            _pendingFilterValues[columnKey].Remove(value);
        }
        
        StateHasChanged();
    }
    
    private async Task SelectAllFilterValues(string columnKey)
    {
        var column = Columns.FirstOrDefault(c => c.Key == columnKey);
        if (column == null) return;
        
        var allValues = GetUniqueColumnValues(column);
        _pendingFilterValues[columnKey] = new HashSet<object>(allValues);
        StateHasChanged();
    }
    
    private async Task ClearAllFilterValues(string columnKey)
    {
        _pendingFilterValues[columnKey] = new HashSet<object>();
        StateHasChanged();
    }
    
    private async Task ApplyColumnFilter(string columnKey)
    {
        if (!_pendingFilterValues.TryGetValue(columnKey, out var selectedValues))
        {
            selectedValues = new HashSet<object>();
        }
        
        var column = Columns.FirstOrDefault(c => c.Key == columnKey);
        if (column == null) return;
        
        // Create or update filter state
        var filterState = new RColumnFilterState
        {
            ColumnKey = columnKey,
            FilterType = FilterType.MultiSelect,
            Operator = FilterOperator.In,
            Value = selectedValues,
            IsActive = selectedValues.Any(),
            QuickFilterValue = _columnFilterStates.TryGetValue(columnKey, out var existing) ? existing.QuickFilterValue : null
        };
        
        _columnFilterStates[columnKey] = filterState;
        
        // Update grid state
        await OnColumnFilterChanged(columnKey, filterState);
        
        // Close dropdown
        _activeFilterDropdown = null;
        _pendingFilterValues.Remove(columnKey);
        StateHasChanged();
    }
    
    private async Task ClearColumnFilter(string columnKey)
    {
        _columnFilterStates.Remove(columnKey);
        _pendingFilterValues.Remove(columnKey);
        
        await OnColumnFilterCleared(columnKey);
        
        _activeFilterDropdown = null;
        StateHasChanged();
    }
    
    #endregion

    #region Advanced Filter Methods
    
    private ColumnDataType GetColumnDataType(GridColumnDefinition<TItem> column)
    {
        if (column.DataType != null) return column.DataType.Value;
        
        // Infer from property type if available
        if (column.Property != null)
        {
            var propertyType = GetPropertyType(column.Property);
            if (propertyType == typeof(string)) return ColumnDataType.Text;
            if (propertyType == typeof(int) || propertyType == typeof(decimal) || propertyType == typeof(double) || propertyType == typeof(float)) return ColumnDataType.Number;
            if (propertyType == typeof(DateTime) || propertyType == typeof(DateTime?)) return ColumnDataType.Date;
            if (propertyType == typeof(bool) || propertyType == typeof(bool?)) return ColumnDataType.Boolean;
        }
        
        // Default to text
        return ColumnDataType.Text;
    }
    
    private List<FilterOperator> GetAvailableOperators(ColumnDataType dataType)
    {
        return dataType switch
        {
            ColumnDataType.Text => new List<FilterOperator>
            {
                FilterOperator.Contains,
                FilterOperator.Equals,
                FilterOperator.NotEquals,
                FilterOperator.StartsWith,
                FilterOperator.EndsWith,
                FilterOperator.IsEmpty,
                FilterOperator.IsNotEmpty
            },
            ColumnDataType.Number => new List<FilterOperator>
            {
                FilterOperator.Equals,
                FilterOperator.NotEquals,
                FilterOperator.GreaterThan,
                FilterOperator.LessThan,
                FilterOperator.GreaterThanOrEqual,
                FilterOperator.LessThanOrEqual,
                FilterOperator.Between,
                FilterOperator.Top10Percent,
                FilterOperator.Bottom10Percent
            },
            ColumnDataType.Date => new List<FilterOperator>
            {
                FilterOperator.On,
                FilterOperator.Before,
                FilterOperator.After,
                FilterOperator.Between,
                FilterOperator.Today,
                FilterOperator.ThisWeek,
                FilterOperator.ThisMonth,
                FilterOperator.Last30Days
            },
            ColumnDataType.Boolean => new List<FilterOperator>
            {
                FilterOperator.IsTrue,
                FilterOperator.IsFalse
            },
            _ => new List<FilterOperator> { FilterOperator.Equals, FilterOperator.NotEquals }
        };
    }
    
    private string GetOperatorDisplayText(FilterOperator op, ColumnDataType dataType)
    {
        return op switch
        {
            FilterOperator.Contains => "Contains",
            FilterOperator.Equals => "Equals",
            FilterOperator.NotEquals => "Not Equals",
            FilterOperator.StartsWith => "Starts With",
            FilterOperator.EndsWith => "Ends With",
            FilterOperator.IsEmpty => "Is Empty",
            FilterOperator.IsNotEmpty => "Is Not Empty",
            FilterOperator.GreaterThan => "Greater Than",
            FilterOperator.LessThan => "Less Than",
            FilterOperator.GreaterThanOrEqual => "Greater Than or Equal",
            FilterOperator.LessThanOrEqual => "Less Than or Equal",
            FilterOperator.Between => "Between",
            FilterOperator.On => "On",
            FilterOperator.Before => "Before",
            FilterOperator.After => "After",
            FilterOperator.Today => "Today",
            FilterOperator.ThisWeek => "This Week",
            FilterOperator.ThisMonth => "This Month",
            FilterOperator.Last30Days => "Last 30 Days",
            FilterOperator.IsTrue => "Yes",
            FilterOperator.IsFalse => "No",
            FilterOperator.Top10Percent => "Top 10%",
            FilterOperator.Bottom10Percent => "Bottom 10%",
            _ => op.ToString()
        };
    }
    
    private bool IsTextSearchOperator(FilterOperator op)
    {
        return op == FilterOperator.Contains || op == FilterOperator.StartsWith || op == FilterOperator.EndsWith;
    }
    
    private string GetOperatorPlaceholder(FilterOperator op)
    {
        return op switch
        {
            FilterOperator.Contains => "Search text...",
            FilterOperator.StartsWith => "Starts with...",
            FilterOperator.EndsWith => "Ends with...",
            _ => "Enter value..."
        };
    }
    
    private void RenderOperatorSpecificUI(RenderTreeBuilder builder, GridColumnDefinition<TItem> column, FilterOperator op, ColumnDataType dataType, ref int sequence)
    {
        switch (op)
        {
            case FilterOperator.Between:
                RenderBetweenFilter(builder, column, dataType, ref sequence);
                break;
            case FilterOperator.In:
            case FilterOperator.NotIn:
                // Multi-select UI will be rendered below
                break;
            case FilterOperator.IsEmpty:
            case FilterOperator.IsNotEmpty:
            case FilterOperator.Today:
            case FilterOperator.ThisWeek:
            case FilterOperator.ThisMonth:
            case FilterOperator.Last30Days:
            case FilterOperator.IsTrue:
            case FilterOperator.IsFalse:
            case FilterOperator.Top10Percent:
            case FilterOperator.Bottom10Percent:
                // No additional UI needed
                break;
            default:
                if (dataType == ColumnDataType.Number)
                {
                    RenderNumberInput(builder, column, ref sequence);
                }
                else if (dataType == ColumnDataType.Date)
                {
                    RenderDateInput(builder, column, ref sequence);
                }
                break;
        }
    }
    
    private void RenderBetweenFilter(RenderTreeBuilder builder, GridColumnDefinition<TItem> column, ColumnDataType dataType, ref int sequence)
    {
        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__between");
        
        var filterState = _columnFilterStates.TryGetValue(column.Key, out var fs) ? fs : new RColumnFilterState();
        
        // From value
        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__between-input");
        
        builder.OpenElement(sequence++, "label");
        builder.AddContent(sequence++, "From:");
        builder.CloseElement();
        
        builder.OpenElement(sequence++, "input");
        builder.AddAttribute(sequence++, "type", dataType == ColumnDataType.Date ? "date" : "number");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__input");
        builder.AddAttribute(sequence++, "value", filterState.Value?.ToString() ?? "");
        builder.AddAttribute(sequence++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this,
            async (e) => await OnFilterValueChanged(column.Key, e.Value, true)));
        builder.CloseElement();
        
        builder.CloseElement();
        
        // To value
        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__between-input");
        
        builder.OpenElement(sequence++, "label");
        builder.AddContent(sequence++, "To:");
        builder.CloseElement();
        
        builder.OpenElement(sequence++, "input");
        builder.AddAttribute(sequence++, "type", dataType == ColumnDataType.Date ? "date" : "number");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__input");
        builder.AddAttribute(sequence++, "value", filterState.SecondValue?.ToString() ?? "");
        builder.AddAttribute(sequence++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this,
            async (e) => await OnFilterValueChanged(column.Key, e.Value, false)));
        builder.CloseElement();
        
        builder.CloseElement();
        
        builder.CloseElement(); // between div
    }
    
    private void RenderNumberInput(RenderTreeBuilder builder, GridColumnDefinition<TItem> column, ref int sequence)
    {
        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__number");
        
        var filterState = _columnFilterStates.TryGetValue(column.Key, out var fs) ? fs : new RColumnFilterState();
        
        builder.OpenElement(sequence++, "input");
        builder.AddAttribute(sequence++, "type", "number");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__input");
        builder.AddAttribute(sequence++, "placeholder", "Enter number...");
        builder.AddAttribute(sequence++, "value", filterState.Value?.ToString() ?? "");
        builder.AddAttribute(sequence++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this,
            async (e) => await OnFilterValueChanged(column.Key, e.Value, true)));
        builder.CloseElement();
        
        builder.CloseElement();
    }
    
    private void RenderDateInput(RenderTreeBuilder builder, GridColumnDefinition<TItem> column, ref int sequence)
    {
        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__date");
        
        var filterState = _columnFilterStates.TryGetValue(column.Key, out var fs) ? fs : new RColumnFilterState();
        
        builder.OpenElement(sequence++, "input");
        builder.AddAttribute(sequence++, "type", "date");
        builder.AddAttribute(sequence++, "class", "grid-filter-dropdown__input");
        builder.AddAttribute(sequence++, "value", filterState.Value?.ToString() ?? "");
        builder.AddAttribute(sequence++, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this,
            async (e) => await OnFilterValueChanged(column.Key, e.Value, true)));
        builder.CloseElement();
        
        builder.CloseElement();
    }
    
    private async Task OnOperatorChanged(string columnKey, string operatorString)
    {
        if (Enum.TryParse<FilterOperator>(operatorString, out var op))
        {
            _columnActiveOperators[columnKey] = op;
            
            // Clear values if operator doesn't need them
            if (op == FilterOperator.IsEmpty || op == FilterOperator.IsNotEmpty ||
                op == FilterOperator.Today || op == FilterOperator.ThisWeek ||
                op == FilterOperator.ThisMonth || op == FilterOperator.Last30Days ||
                op == FilterOperator.IsTrue || op == FilterOperator.IsFalse)
            {
                if (_columnFilterStates.TryGetValue(columnKey, out var state))
                {
                    state.Value = null;
                    state.SecondValue = null;
                }
            }
            
            StateHasChanged();
        }
    }
    
    private async Task OnFilterValueChanged(string columnKey, object value, bool isPrimary)
    {
        if (!_columnFilterStates.ContainsKey(columnKey))
        {
            _columnFilterStates[columnKey] = new RColumnFilterState { ColumnKey = columnKey };
        }
        
        if (isPrimary)
        {
            _columnFilterStates[columnKey].Value = value;
        }
        else
        {
            _columnFilterStates[columnKey].SecondValue = value;
        }
        
        StateHasChanged();
    }
    
    private bool HasActiveFilters()
    {
        return _columnFilterStates.Any(fs => fs.Value?.IsActive == true);
    }
    
    private string GetFilterChipText(string columnKey, RColumnFilterState filterState)
    {
        var column = Columns.FirstOrDefault(c => c.Key == columnKey);
        if (column == null) return "";
        
        var op = _columnActiveOperators.TryGetValue(columnKey, out var activeOp) ? activeOp : filterState.Operator;
        var columnName = column.Title;
        
        return op switch
        {
            FilterOperator.IsEmpty => $"{columnName} is empty",
            FilterOperator.IsNotEmpty => $"{columnName} is not empty",
            FilterOperator.Today => $"{columnName} is today",
            FilterOperator.ThisWeek => $"{columnName} this week",
            FilterOperator.ThisMonth => $"{columnName} this month",
            FilterOperator.Last30Days => $"{columnName} last 30 days",
            FilterOperator.IsTrue => $"{columnName} is Yes",
            FilterOperator.IsFalse => $"{columnName} is No",
            FilterOperator.Between when filterState.SecondValue != null => 
                $"{columnName} between {filterState.Value} and {filterState.SecondValue}",
            FilterOperator.In when filterState.Value is HashSet<object> values => 
                $"{columnName} in ({values.Count} values)",
            _ => $"{columnName} {GetOperatorDisplayText(op, GetColumnDataType(column))} {filterState.Value ?? filterState.QuickFilterValue}"
        };
    }
    
    private async Task RemoveColumnFilter(string columnKey)
    {
        await ClearColumnFilter(columnKey);
    }
    
    private async Task ClearAllFilters()
    {
        _columnFilterStates.Clear();
        _columnActiveOperators.Clear();
        _pendingFilterValues.Clear();
        _activeFilterDropdown = null;
        
        State.FilterCriteria.ColumnFilters.Clear();
        await ProcessDataAsync();
    }
    
    private List<object> GetSavedFilterSetItems()
    {
        return _savedFilterSets.Select(fs => new
        {
            Value = fs.Id,
            Text = fs.Name,
            Description = fs.Description
        }).Cast<object>().ToList();
    }
    
    private async Task LoadFilterSet(object filterSetId)
    {
        if (filterSetId == null) return;
        
        var filterSet = _savedFilterSets.FirstOrDefault(fs => fs.Id == filterSetId.ToString());
        if (filterSet == null) return;
        
        // Clear current filters
        await ClearAllFilters();
        
        // Apply saved filters
        foreach (var filter in filterSet.Filters)
        {
            var columnKey = filter.ColumnKey ?? filterSet.ColumnKey;
            _columnFilterStates[columnKey] = new RColumnFilterState
            {
                ColumnKey = columnKey,
                Operator = filter.Operator,
                Value = filter.Value,
                SecondValue = filter.SecondValue,
                IsActive = filter.IsActive,
                FilterType = filter.Type
            };
            _columnActiveOperators[columnKey] = filter.Operator;
        }
        
        _selectedFilterSetId = filterSetId.ToString();
        await ProcessDataAsync();
    }
    
    private void ShowSaveFilterSetModal()
    {
        _showSaveFilterSetModal = true;
        _newFilterSetName = $"Filter Set {DateTime.Now:yyyy-MM-dd HH:mm}";
        _newFilterSetDescription = "";
    }
    
    private async Task SaveFilterSet()
    {
        if (string.IsNullOrWhiteSpace(_newFilterSetName)) return;
        
        var filterSet = new FilterConfiguration
        {
            Id = Guid.NewGuid().ToString(),
            Name = _newFilterSetName,
            Description = _newFilterSetDescription,
            CreatedAt = DateTime.UtcNow,
            LastModified = DateTime.UtcNow,
            Filters = new List<AdvancedFilterState>()
        };
        
        foreach (var filterState in _columnFilterStates.Where(fs => fs.Value?.IsActive == true))
        {
            filterSet.Filters.Add(new AdvancedFilterState
            {
                Id = Guid.NewGuid().ToString(),
                Operator = filterState.Value.Operator,
                Value = filterState.Value.Value,
                SecondValue = filterState.Value.SecondValue,
                IsActive = filterState.Value.IsActive,
                FilterType = filterState.Value.FilterType,
                Label = filterState.Key
            });
        }
        
        // Save to persistence service
        await FilterPersistence.SaveConfigurationAsync($"{Configuration.GridId}-{filterSet.Id}", filterSet);
        
        // Add to local list
        _savedFilterSets.Add(filterSet);
        
        _showSaveFilterSetModal = false;
        StateHasChanged();
    }
    
    #endregion
    
    #region Filter Persistence
    
    private async Task LoadSavedFilterSets()
    {
        try
        {
            var gridKey = Configuration.GridId ?? typeof(TItem).Name;
            _savedFilterSets = await FilterPersistence.GetConfigurationsAsync(gridKey);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load saved filter sets: {ex.Message}");
        }
    }
    
    private async Task RestoreFilterState()
    {
        try
        {
            var gridKey = Configuration.GridId ?? typeof(TItem).Name;
            var savedState = await FilterPersistence.LoadFilterStateAsync(gridKey);
            
            if (savedState != null)
            {
                foreach (var columnFilter in savedState.ColumnFilters)
                {
                    _columnFilterStates[columnFilter.Key] = columnFilter.Value;
                    _columnActiveOperators[columnFilter.Key] = columnFilter.Value.Operator;
                }
                
                await ProcessDataAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to restore filter state: {ex.Message}");
        }
    }
    
    private async Task SaveFilterState()
    {
        if (!Configuration.EnableFilterPersistence) return;
        
        try
        {
            var gridKey = Configuration.GridId ?? typeof(TItem).Name;
            var state = new GridFilterState
            {
                GridId = gridKey,
                ColumnFilters = _columnFilterStates,
                LastSaved = DateTime.UtcNow
            };
            
            await FilterPersistence.SaveFilterStateAsync(gridKey, state);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to save filter state: {ex.Message}");
        }
    }
    
    #endregion

    #region Cleanup

    public async ValueTask DisposeAsync()
    {
        // Unsubscribe from BindFilter if subscribed
        if (_lastBindFilter != null)
        {
            _lastBindFilter.OnFilterChanged -= OnBindFilterChanged;
        }
        
        _filterLoadCancellation?.Cancel();
        _filterLoadCancellation?.Dispose();
        
        // Save filter state before disposing
        await SaveFilterState();
        
        if (_jsModule != null)
        {
            try
            {
                await _jsModule.InvokeVoidAsync("cleanup", Configuration.GridId);
                await _jsModule.DisposeAsync();
            }
            catch (Exception)
            {
                // Ignore disposal errors
            }
        }
        
        await GridService.DisposeAsync();
    }

    #endregion
    
    #region IFilterable Implementation - SOLID Compliant Inverted Control
    
    /// <summary>
    /// Component applies the provided predicate to its own data
    /// This implements proper inverted control - filter provides predicate, component applies it
    /// </summary>
    public async Task ApplyPredicateAsync(Expression<Func<TItem, bool>>? predicate)
    {
        // This method is called when external code wants to apply a predicate
        // For RGrid, we trigger a reprocess which will use BindFilter.GetPredicate()
        await ProcessDataAsync();
    }
    
    /// <summary>
    /// Notifies component that bound filter state has changed
    /// Component reprocesses data using BindFilter.GetPredicate()
    /// </summary>
    public async Task OnFilterChangedAsync()
    {
        await ProcessDataAsync();
    }
    
    /// <summary>
    /// Handle BindFilter change events - reprocess data when filter changes
    /// </summary>
    private async void OnBindFilterChanged(FilterStateChangedEventArgs args)
    {
        await OnFilterChangedAsync();
    }
    
    /// <summary>
    /// Non-generic IFilterable implementation
    /// </summary>
    async Task IFilterable.ApplyPredicateAsync(object predicate)
    {
        if (predicate is Expression<Func<TItem, bool>> typedPredicate)
        {
            await ApplyPredicateAsync(typedPredicate);
        }
    }
    
    /// <summary>
    /// Non-generic filter change handler
    /// </summary>
    async Task IFilterable.OnFilterChangedAsync() => await OnFilterChangedAsync();
    
    /// <summary>
    /// Apply filter to non-generic data
    /// </summary>
    async Task IFilterable.ApplyFilterAsync(object filteredData)
    {
        if (filteredData is IEnumerable<TItem> typedData)
        {
            await InvokeAsync(() =>
            {
                Items = typedData.ToList();
                StateHasChanged();
            });
        }
    }
    
    /// <summary>
    /// Get filterable data as non-generic enumerable
    /// </summary>
    IEnumerable<object> IFilterable.GetFilterableData() => Items.Cast<object>();
    
    /// <summary>
    /// Get strongly-typed filterable data
    /// </summary>
    IEnumerable<TItem> IFilterable<TItem>.GetTypedFilterableData() => Items;
    
    /// <summary>
    /// Get filterable field names
    /// </summary>
    IEnumerable<string> IFilterable.GetFilterableFields() => 
        typeof(TItem).GetProperties().Where(p => p.CanRead).Select(p => p.Name);
    
    #endregion
}