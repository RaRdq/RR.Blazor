@using Microsoft.AspNetCore.Components
@using RR.Blazor.Components.Core
@using RR.Blazor.Components.Form
@using RR.Blazor.Components.Data
@using RR.Blazor.Components.Data.Filters
@using RR.Blazor.Components.Display
@using RR.Blazor.Components.Feedback
@using RR.Blazor.Enums
@using RR.Blazor.Models
@using RR.Blazor.Services
@using RR.Blazor.Configuration
@using System.Linq.Expressions
@using System.Collections.Concurrent
@using System.Reflection
@typeparam TItem where TItem : class
@inherits RTableBase
@implements ITableParent
@implements IAsyncDisposable

@* Data table with sorting, filtering, pagination, and row selection *@

<CascadingValue Value="@_tableContext" IsFixed="true">
    <CascadingValue Value="@((ITableParent)this)" IsFixed="true">
        <div class="r-table-container @GetContainerClasses()" data-table-id="@TableId">
            @* Header Section *@
            @if (ShowTitle && (!string.IsNullOrEmpty(Title) || HeaderContent != null))
            {
                <div class="table-header">
                    <div class="table-header-content">
                        @if (!string.IsNullOrEmpty(Title))
                        {
                            <div class="text-h5 font-semibold">
                                @if (!string.IsNullOrEmpty(Icon))
                                {
                                    <i class="material-symbols-rounded">@Icon</i>
                                }
                                @Title
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(Subtitle))
                        {
                            <p class="table-subtitle">@Subtitle</p>
                        }
                    </div>
                    @if (HeaderContent != null)
                    {
                        <div class="table-header-actions">
                            @HeaderContent
                        </div>
                    }
                </div>
            }

            @if (ShowToolbar && (ShowSearch || ShowFilters || ShowChartButton || ShowColumnManager || ToolbarContent != null))
            {
                <div class="table-toolbar">
                    @if (ShowSearch)
                    {
                        <div class="table-search">
                            <i class="material-symbols-rounded">search</i>
                            <input type="text" 
                                   class="table-search-input" 
                                   placeholder="@SearchPlaceholder"
                                   value="@_searchTerm"
                                   disabled="@Disabled"
                                   @oninput="@OnSearchInput" />
                        </div>
                    }
                    @if (ShowChartButton)
                    {
                        <button class="button button-outline button-sm" @onclick="@ShowChartModal" disabled="@(!FilteredData.Any())">
                            <i class="material-symbols-rounded mr-2">analytics</i>
                            @ChartButtonText
                        </button>
                    }
                    @if (ShowColumnManager)
                    {
                        <RTableColumnManager Columns="@GetEffectiveColumns()"
                                           Preferences="@ColumnPreferences"
                                           PreferencesChanged="@OnColumnPreferencesChanged"
                                           EnableReordering="@EnableColumnReordering"
                                           SupportsStickyColumns="@EnableStickyColumns"
                                           TableId="@TableId" />
                    }
                    @if (ToolbarContent != null)
                    {
                        @ToolbarContent
                    }
                </div>
            }

            <div class="table-scroll-container @(FixedHeader ? "table-fixed-header" : "") @(EnableHorizontalScroll ? "table-horizontal-scroll" : "")" 
                 style="@GetScrollContainerStyle()">
                @if (Loading && !Items.Any())
                {
                    <div class="table-loading">
                        <RProgressCircular Indeterminate="true" Size="40" />
                        <p>@LoadingText</p>
                    </div>
                }
                else if (!_processedItems.Any())
                {
                    @* Empty state *@
                    <div class="empty-state">
                        @if (EmptyContent != null)
                        {
                            @EmptyContent
                        }
                        else
                        {
                            <i class="material-symbols-rounded empty-icon">inbox</i>
                            <p class="empty-description">@EmptyMessage</p>
                        }
                    </div>
                }
                else
                {
                    <table class="r-table @GetTableClasses()" style="@GetTableStyle()">
                        <thead>
                            <tr>
                                @if (Selectable)
                                {
                                    <th class="r-table-header-cell r-table-cell-checkbox">
                                        @if (MultiSelect)
                                        {
                                            <input type="checkbox"
                                                   checked="@IsAllSelected()"
                                                   disabled="@Disabled"
                                                   @onchange="@OnSelectAllChanged" />
                                        }
                                    </th>
                                }
                                @foreach (var column in GetVisibleColumns())
                                {
                                    <th class="r-table-header-cell @(column.Sortable ? "is-sortable" : "") @column.HeaderClass"
                                        style="@GetColumnStyle(column)">
                                        @if (column.HeaderTemplate != null)
                                        {
                                            @column.HeaderTemplate
                                        }
                                        else
                                        {
                                            @if (column.Sortable)
                                            {
                                                <button class="table-header-content table-header-sortable @GetSortClass(column.Key)"
                                                        @onclick="@(() => OnSort(column.Key))">
                                                    <span>@column.Title</span>
                                                    <i class="material-symbols-rounded table-sort-icon">@GetSortIcon(column.Key)</i>
                                                </button>
                                            }
                                            else
                                            {
                                                <div class="table-header-content">
                                                    <span>@column.Title</span>
                                                </div>
                                            }
                                        }
                                    </th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in GetPagedItems())
                            {
                                <tr class="r-table-row @GetRowClass(item)" 
                                    @onclick="@(() => OnRowClick(item))">
                                    @if (Selectable)
                                    {
                                        <td class="r-table-cell r-table-cell-checkbox">
                                            <input type="@(MultiSelect ? "checkbox" : "radio")"
                                                   name="@(MultiSelect ? null : $"table-{TableId}")"
                                                   checked="@IsSelected(item)"
                                                   disabled="@Disabled"
                                                   @onclick:stopPropagation="true"
                                                   @onchange="@((e) => OnSelectionChanged(item, (bool)e.Value!))" />
                                        </td>
                                    }
                                    @foreach (var column in GetVisibleColumns())
                                    {
                                        <td class="r-table-cell @column.CellClass" style="@GetColumnStyle(column)">
                                            @{
                                                var cellContent = column.GetCellContent(item);
                                                if (cellContent != null)
                                                {
                                                    @cellContent
                                                }
                                            }
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>

            @* Footer Section *@
            @if (ShowPagination && _processedItems.Any())
            {
                <div class="table-footer">
                    <div class="table-footer-desktop d-flex justify-between items-center px-4 py-3">
                        <div class="table-footer-left d-flex items-center gap-3">
                            <div class="text-sm text-secondary">
                                Showing @GetStartIndex() to @GetEndIndex() of @_processedItems.Count() results
                            </div>
                            @if (_selectedItems.Any())
                            {
                                <RChip Style="ChipStyle.Badge" Variant="VariantType.Primary" Size="@TableConfig.GetPaginationChipSize(Density)">
                                    @_selectedItems.Count selected
                                </RChip>
                            }
                        </div>
                        <div class="table-footer-right d-flex items-center gap-3">
                            @if (_effectivePageSizeOptions?.Any() == true)
                            {
                                <div class="page-size-selector d-flex items-center gap-2">
                                    <span class="text-sm text-secondary">Show:</span>
                                    <select class="form-select form-select-sm" value="@PageSize" @onchange="OnPageSizeChangedEvent">
                                        @foreach (var size in _effectivePageSizeOptions)
                                        {
                                            <option value="@size">@size</option>
                                        }
                                    </select>
                                    <span class="text-sm text-secondary">per page</span>
                                </div>
                            }
                            <div class="d-flex items-center @TableConfig.GetTableGap(Density)">
                                <RButton Variant="ButtonVariant.Ghost"
                                        Size="@TableConfig.GetPaginationButtonSize(Density)"
                                        Disabled="@(CurrentPage <= 1)"
                                        OnClick="@(() => OnPageChanged(1))"
                                        Dense="true">
                                    <i class="material-symbols-rounded">first_page</i>
                                </RButton>
                                <RButton Variant="ButtonVariant.Ghost"
                                        Size="@TableConfig.GetPaginationButtonSize(Density)"
                                        Disabled="@(CurrentPage <= 1)"
                                        OnClick="@(() => OnPageChanged(CurrentPage - 1))"
                                        Dense="true">
                                    <i class="material-symbols-rounded">chevron_left</i>
                                </RButton>
                                <div class="text-sm font-medium @TableConfig.GetTablePadding(Density)">
                                    Page @CurrentPage of @TotalPages
                                </div>
                                <RButton Variant="ButtonVariant.Ghost"
                                        Size="@TableConfig.GetPaginationButtonSize(Density)"
                                        Disabled="@(CurrentPage >= TotalPages)"
                                        OnClick="@(() => OnPageChanged(CurrentPage + 1))"
                                        Dense="true">
                                    <i class="material-symbols-rounded">chevron_right</i>
                                </RButton>
                                <RButton Variant="ButtonVariant.Ghost"
                                        Size="@TableConfig.GetPaginationButtonSize(Density)"
                                        Disabled="@(CurrentPage >= TotalPages)"
                                        OnClick="@(() => OnPageChanged(TotalPages))"
                                        Dense="true">
                                    <i class="material-symbols-rounded">last_page</i>
                                </RButton>
                            </div>
                        </div>
                    </div>
                </div>
            }

            @* Column definitions from child content *@
            <div style="display: none;">
                @ChildContent
            </div>
        </div>
    </CascadingValue>
</CascadingValue>

@* Chart Modal *@
@if (_showChartModal && _chartModalReady)
{
    <RModal @bind-Visible="_showChartModal" 
            Header="Chart Visualization" 
            Size="SizeType.Large">
        
        <HeaderContent>
            <div class="d-flex items-center gap-2">
                <i class="material-symbols-rounded text-primary">analytics</i>
                <span>@Title Chart</span>
            </div>
        </HeaderContent>

        <ChildContent>
            @if (FilteredData.Any())
            {
                <div class="pa-4">
                    <RChartSmart Data="@FilteredData" 
                                Type="@DefaultChartType"
                                Title="@($"{Title} Analysis")"
                                Height="400px"
                                UseCanvas="true"
                                EnableTouchInteractions="true" />
                    
                    <div class="text-sm text-secondary mt-4">
                        Showing @FilteredData.Count() of @Items.Count() records
                        @if (!string.IsNullOrEmpty(_searchTerm))
                        {
                            <span> filtered by "@_searchTerm"</span>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="d-flex flex-col items-center justify-center pa-12 text-center">
                    <i class="material-symbols-rounded text-6xl text-secondary mb-4">insert_chart</i>
                    <div class="text-lg font-semibold text-secondary">No Data Available</div>
                    <p class="text-secondary mt-2">There's no data to display in the chart.</p>
                </div>
            }
        </ChildContent>

        <FooterContent>
            <div class="d-flex justify-end gap-2">
                <RButton Text="Close" Variant="ButtonVariant.Ghost" OnClick="@(() => _showChartModal = false)" />
            </div>
        </FooterContent>
    </RModal>
}

@code {
    #region Parameters

    [Parameter] public IEnumerable<TItem> Items { get; set; } = Enumerable.Empty<TItem>();
    // ChildContent inherited from RTableBase
    
    // Header - Title, Subtitle, ShowTitle inherited from RTableBase
    [Parameter] public string Icon { get; set; }
    [Parameter] public RenderFragment HeaderContent { get; set; }
    
    // Toolbar - ShowToolbar, ShowSearch inherited from RTableBase
    [Parameter] public string SearchPlaceholder { get; set; } = "Search...";
    [Parameter] public bool ShowFilters { get; set; }
    [Parameter] public RenderFragment ToolbarContent { get; set; }
    
    [Parameter] public Dictionary<string, ColumnPreferences> ColumnPreferences { get; set; } = new();
    [Parameter] public EventCallback<Dictionary<string, ColumnPreferences>> ColumnPreferencesChanged { get; set; }
    
    
    [Parameter] public string EmptyMessage { get; set; } = "No data available";
    
    [Parameter] public bool Selectable { get; set; }
    [Parameter] public bool MultiSelect { get; set; }
    [Parameter] public IEnumerable<TItem> SelectedItems { get; set; } = Enumerable.Empty<TItem>();
    [Parameter] public EventCallback<IEnumerable<TItem>> SelectedItemsChanged { get; set; }
    [Parameter] public TItem SelectedItem { get; set; }
    [Parameter] public EventCallback<TItem> SelectedItemChanged { get; set; }
    
    // Sorting
    [Parameter] public string SortBy { get; set; }
    [Parameter] public bool SortDescending { get; set; }
    [Parameter] public EventCallback<string> SortByChanged { get; set; }
    [Parameter] public EventCallback<bool> SortDescendingChanged { get; set; }
    
    // Pagination - ShowPagination inherited from RTableBase
    // PageSize is inherited from RTableBase with default value of 50
    [Parameter] public EventCallback<int> PageSizeChanged { get; set; }
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public EventCallback<int> CurrentPageChanged { get; set; }
    [Parameter] public int[] PageSizeOptions { get; set; }
    
    // Row customization
    [Parameter] public Func<TItem, string> RowClass { get; set; }
    [Parameter] public EventCallback<TItem> OnRowClicked { get; set; }
    [Parameter] public bool RowClickable { get; set; }
    
    // Styling - Class and Style inherited from RTableBase
    [Parameter] public bool Disabled { get; set; }
    
    // Auto-generation - AutoGenerateColumns inherited from RTableBase
    [Parameter] public List<string> ExcludeColumns { get; set; } = new();

    #endregion

    #region Private Fields

    private TableContext _tableContext;
    private readonly List<ColumnDefinition<TItem>> _columns = new();
    private readonly List<ColumnDefinition<TItem>> _autoGeneratedColumns = new();
    private readonly HashSet<TItem> _selectedItems = new();
    private string _searchTerm = "";
    private IEnumerable<TItem> _processedItems = Enumerable.Empty<TItem>();
    private string TableId => $"table-{GetHashCode()}";
    private int[] _effectivePageSizeOptions = TableConfig.DefaultPageSizeOptions;

    private bool _showChartModal = false;
    private bool _chartModalReady = false;
    private readonly ChartDataAnalyzer _chartAnalyzer = new();

    // Performance: Cache compiled expressions
    private static readonly ConcurrentDictionary<string, Func<TItem, object>> _propertyGetterCache = new();
    private static readonly ConcurrentDictionary<string, PropertyInfo> _propertyInfoCache = new();

    #endregion

    #region Public Properties for Chart Integration

    /// <summary>Gets the filtered and sorted data for chart integration</summary>
    public IEnumerable<TItem> FilteredData => _processedItems;

    #endregion

    #region Lifecycle

    protected override void OnInitialized()
    {
        _tableContext = new TableContext(typeof(TItem), TableId, true);
        
        if (AutoGenerateColumns || (ChildContent == null && !_columns.Any()))
        {
            var generatedColumns = PropertyColumnGenerator.GenerateColumns<TItem>();
            
            // Filter out excluded columns
            if (ExcludeColumns?.Any() == true)
            {
                generatedColumns = generatedColumns
                    .Where(c => !ExcludeColumns.Contains(c.Key, StringComparer.OrdinalIgnoreCase))
                    .ToList();
            }
            
            foreach (var column in generatedColumns)
            {
                _autoGeneratedColumns.Add(column);
            }
        }
        
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        // Auto-generate columns if no ChildContent and no columns exist
        if (ChildContent == null && !_columns.Any())
        {
            var generatedColumns = PropertyColumnGenerator.GenerateColumns<TItem>();
            foreach (var column in generatedColumns)
            {
                _columns.Add(column);
            }
        }
        
        ProcessItems();
        UpdateSelection();
        UpdatePageSizeOptions();
        base.OnParametersSet();
    }

    #endregion

    #region ITableParent Implementation

    public Type ItemType => typeof(TItem);

    public void AddColumn(object columnInfo)
    {
        if (columnInfo is ColumnDefinition<TItem> column)
        {
            _columns.Add(column);
            StateHasChanged();
        }
    }

    public void UpdateColumn(object columnInfo)
    {
        if (columnInfo is ColumnDefinition<TItem> column)
        {
            var index = _columns.FindIndex(c => c.Key == column.Key);
            if (index >= 0)
            {
                _columns[index] = column;
                StateHasChanged();
            }
        }
    }

    #endregion

    #region Column Management
    
    private IEnumerable<ColumnDefinition<TItem>> GetVisibleColumns()
    {
        return GetEffectiveColumns().Where(c => 
            !ColumnPreferences.ContainsKey(c.Key) || 
            ColumnPreferences[c.Key].Visible != false);
    }
    
    private async Task OnColumnPreferencesChanged(Dictionary<string, ColumnPreferences> preferences)
    {
        ColumnPreferences = preferences;
        await ColumnPreferencesChanged.InvokeAsync(preferences);
        StateHasChanged();
    }
    
    private IEnumerable<ColumnDefinition<TItem>> GetEffectiveColumns()
    {
        // If AutoGenerateColumns is true, merge manual columns with auto-generated ones
        if (AutoGenerateColumns && _autoGeneratedColumns.Any())
        {
            // Manual columns take precedence - they override auto-generated columns with same key
            var manualKeys = _columns.Select(c => c.Key).ToHashSet(StringComparer.OrdinalIgnoreCase);
            
            // First add all manual columns
            foreach (var column in _columns)
            {
                yield return column;
            }
            
            // Then add auto-generated columns that aren't already manually defined
            foreach (var autoColumn in _autoGeneratedColumns)
            {
                if (!manualKeys.Contains(autoColumn.Key))
                {
                    yield return autoColumn;
                }
            }
        }
        else if (_columns.Any())
        {
            // Only manual columns
            foreach (var column in _columns)
            {
                yield return column;
            }
        }
        else
        {
            // Only auto-generated columns (when no manual columns defined)
            foreach (var column in _autoGeneratedColumns)
            {
                yield return column;
            }
        }
    }
    
    #endregion

    #region Data Processing

    private void ProcessItems()
    {
        if (Items == null)
        {
            _processedItems = Enumerable.Empty<TItem>();
            return;
        }

        var query = Items.AsQueryable();

        // Apply search
        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            query = ApplySearch(query, _searchTerm);
        }

        // Apply sorting
        if (!string.IsNullOrEmpty(SortBy))
        {
            query = ApplySort(query, SortBy, SortDescending);
        }

        _processedItems = query.ToList();
    }

    private IQueryable<TItem> ApplySearch(IQueryable<TItem> query, string searchTerm)
    {
        var searchableColumns = GetEffectiveColumns().Where(c => c.Searchable).ToList();
        if (!searchableColumns.Any())
        {
            // If no columns are marked searchable, search all string properties
            searchableColumns = GetEffectiveColumns().Where(c => 
                GetPropertyType(c.Key) == typeof(string)).ToList();
        }

        if (!searchableColumns.Any())
            return query;

        var lowerSearchTerm = searchTerm.ToLower();
        
        // For better performance with large datasets, we search in memory
        // This is acceptable for client-side Blazor where data is already loaded
        var items = query.ToList();
        var filteredItems = items.Where(item =>
            searchableColumns.Any(column =>
            {
                var value = GetPropertyValue(item, column.Key);
                return value?.ToString()?.ToLower().Contains(lowerSearchTerm) ?? false;
            }));
        return filteredItems.AsQueryable();
    }

    private IQueryable<TItem> ApplySort(IQueryable<TItem> query, string sortBy, bool descending)
    {
        var getter = GetPropertyGetter(sortBy);
        if (getter == null)
            return query;

        return descending
            ? query.OrderByDescending(item => getter(item))
            : query.OrderBy(item => getter(item));
    }

    #endregion

    #region Property Access

    private static Func<TItem, object> GetPropertyGetter(string propertyName)
    {
        return _propertyGetterCache.GetOrAdd(propertyName, key =>
        {
            var param = Expression.Parameter(typeof(TItem), "item");
            var property = Expression.Property(param, key);
            var convert = Expression.Convert(property, typeof(object));
            var lambda = Expression.Lambda<Func<TItem, object>>(convert, param);
            return lambda.Compile();
        });
    }

    private static object GetPropertyValue(TItem item, string propertyName)
    {
        var getter = GetPropertyGetter(propertyName);
        return getter(item);
    }

    private static Type GetPropertyType(string propertyName)
    {
        var propInfo = _propertyInfoCache.GetOrAdd(propertyName, key =>
            typeof(TItem).GetProperty(key));
        return propInfo?.PropertyType;
    }

    #endregion

    #region Selection

    private void UpdateSelection()
    {
        _selectedItems.Clear();
        
        if (MultiSelect && SelectedItems != null)
        {
            foreach (var item in SelectedItems)
            {
                _selectedItems.Add(item);
            }
        }
        else if (!MultiSelect && SelectedItem != null)
        {
            _selectedItems.Add(SelectedItem);
        }
    }

    private bool IsSelected(TItem item)
    {
        return _selectedItems.Contains(item);
    }

    private bool IsAllSelected()
    {
        var pagedItems = GetPagedItems().ToList();
        return pagedItems.Any() && pagedItems.All(item => _selectedItems.Contains(item));
    }

    private async Task OnSelectionChanged(TItem item, bool selected)
    {
        if (MultiSelect)
        {
            if (selected)
                _selectedItems.Add(item);
            else
                _selectedItems.Remove(item);

            await SelectedItemsChanged.InvokeAsync(_selectedItems.ToList());
        }
        else
        {
            _selectedItems.Clear();
            if (selected)
            {
                _selectedItems.Add(item);
                await SelectedItemChanged.InvokeAsync(item);
            }
            else
            {
                await SelectedItemChanged.InvokeAsync(default(TItem));
            }
        }
    }

    private async Task OnSelectAllChanged(ChangeEventArgs e)
    {
        var selected = (bool)e.Value;
        var pagedItems = GetPagedItems().ToList();

        if (selected)
        {
            foreach (var item in pagedItems)
            {
                _selectedItems.Add(item);
            }
        }
        else
        {
            foreach (var item in pagedItems)
            {
                _selectedItems.Remove(item);
            }
        }

        await SelectedItemsChanged.InvokeAsync(_selectedItems.ToList());
    }

    #endregion

    #region Sorting

    private async Task OnSort(string columnKey)
    {
        if (SortBy == columnKey)
        {
            SortDescending = !SortDescending;
            await SortDescendingChanged.InvokeAsync(SortDescending);
        }
        else
        {
            SortBy = columnKey;
            SortDescending = false;
            await SortByChanged.InvokeAsync(SortBy);
            await SortDescendingChanged.InvokeAsync(SortDescending);
        }

        ProcessItems();
    }

    private string GetSortClass(string columnKey)
    {
        if (SortBy != columnKey)
            return "";

        return SortDescending ? "table-header-active-sort table-sort-desc" : "table-header-active-sort table-sort-asc";
    }

    private string GetSortIcon(string columnKey)
    {
        if (SortBy != columnKey)
            return "unfold_more";

        return SortDescending ? "arrow_drop_down" : "arrow_drop_up";
    }

    #endregion

    #region Pagination

    private IEnumerable<TItem> GetPagedItems()
    {
        if (!ShowPagination)
            return _processedItems;

        return _processedItems
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize);
    }

    private int TotalPages => Math.Max(1, (int)Math.Ceiling(_processedItems.Count() / (double)PageSize));

    private int GetStartIndex()
    {
        if (!_processedItems.Any())
            return 0;
        return ((CurrentPage - 1) * PageSize) + 1;
    }

    private int GetEndIndex()
    {
        var endIndex = CurrentPage * PageSize;
        var totalCount = _processedItems.Count();
        return Math.Min(endIndex, totalCount);
    }

    private async Task OnPageSizeChanged(int newSize)
    {
        PageSize = newSize;
        CurrentPage = 1; // Reset to first page
        await PageSizeChanged.InvokeAsync(newSize);
        await CurrentPageChanged.InvokeAsync(CurrentPage);
        ProcessItems();
        StateHasChanged();
    }

    private async Task OnPageChanged(int newPage)
    {
        CurrentPage = Math.Max(1, Math.Min(newPage, TotalPages));
        await CurrentPageChanged.InvokeAsync(CurrentPage);
        StateHasChanged();
    }

    private async Task OnPageSizeChangedEvent(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newSize))
        {
            await OnPageSizeChanged(newSize);
            StateHasChanged();
        }
    }

    #endregion

    #region Event Handlers

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        _searchTerm = e.Value?.ToString() ?? "";
        CurrentPage = 1; // Reset to first page on search
        ProcessItems();
        await CurrentPageChanged.InvokeAsync(CurrentPage);
    }

    private async Task OnRowClick(TItem item)
    {
        if (RowClickable && OnRowClicked.HasDelegate)
        {
            await OnRowClicked.InvokeAsync(item);
        }
    }

    private async Task ShowChartModal()
    {
        _chartModalReady = true;
        await Task.Delay(50); // Small delay to ensure DOM is ready
        _showChartModal = true;
        await InvokeAsync(StateHasChanged);
    }

    #endregion

    #region Styling

    private string GetContainerClasses()
    {
        var classes = new List<string> { "r-table-container", "w-full" };
        
        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);

        if (!string.IsNullOrEmpty(Height))
            classes.Add("table-fixed-height");

        if (Disabled)
            classes.Add("disabled");

        return string.Join(" ", classes);
    }

    private string GetTableClasses()
    {
        var classes = new List<string>();

        if (Hover)
            classes.Add("has-hover");

        if (Striped)
            classes.Add("is-striped");

        if (Bordered)
            classes.Add("is-bordered");

        classes.Add($"r-table-{Density.ToString().ToLower()}");

        return string.Join(" ", classes);
    }

    private string GetRowClass(TItem item)
    {
        var classes = new List<string>();

        if (IsSelected(item))
            classes.Add("r-is-selected");

        if (RowClickable)
            classes.Add("r-table-row-clickable");

        if (RowClass != null)
        {
            var customClass = RowClass(item);
            if (!string.IsNullOrEmpty(customClass))
                classes.Add(customClass);
        }

        return string.Join(" ", classes);
    }

    private string GetColumnStyle(ColumnDefinition<TItem> column)
    {
        var styles = new List<string>();

        if (!string.IsNullOrEmpty(column.Width))
            styles.Add($"width: {column.Width}");

        if (!string.IsNullOrEmpty(column.MinWidth))
            styles.Add($"min-width: {column.MinWidth}");

        if (!string.IsNullOrEmpty(column.MaxWidth))
            styles.Add($"max-width: {column.MaxWidth}");

        return string.Join("; ", styles);
    }

    private string GetScrollContainerStyle()
    {
        var styles = new List<string>();
        
        if (!string.IsNullOrEmpty(Height))
            styles.Add($"height: {Height}");
            
        if (!string.IsNullOrEmpty(MaxHeight))
            styles.Add($"max-height: {MaxHeight}");
            
        if (EnableHorizontalScroll)
            styles.Add("overflow-x: auto");
            
        return string.Join("; ", styles);
    }

    private string GetTableStyle()
    {
        var styles = new List<string>();
        
        if (!string.IsNullOrEmpty(Style))
            styles.Add(Style);
            
        return string.Join("; ", styles);
    }

    #endregion

    #region Smart PageSize Options
    
    private void UpdatePageSizeOptions()
    {
        // If user explicitly provided PageSizeOptions, use them
        if (PageSizeOptions?.Any() == true)
        {
            _effectivePageSizeOptions = PageSizeOptions;
            return;
        }
        
        var totalCount = _processedItems.Count();
        
        var breakpoint = TableConfig.SmartPageSizeBreakpoints.FirstOrDefault(b => totalCount <= b.threshold);
        _effectivePageSizeOptions = breakpoint.options ?? TableConfig.DefaultPageSizeOptions;
        
        if (totalCount > TableConfig.SmartPageSizeBreakpoints[3].threshold) // > 1000 records
        {
            var options = _effectivePageSizeOptions.ToList();
            
            var smartOption = (int)Math.Round(totalCount * TableConfig.SmartOptionPercentage / TableConfig.SmartOptionRounding) * TableConfig.SmartOptionRounding;
            if (smartOption > options.Max() && smartOption <= TableConfig.MaxPageSize)
            {
                options.Add(smartOption);
            }
            
            if (totalCount > TableConfig.SmartPageSizeBreakpoints[4].threshold) // > 10K records
            {
                var log = Math.Log10(totalCount);
                var factor = (int)Math.Pow(10, Math.Floor(log - 1));
                
                var logOption = (factor / 100) * 100;
                if (logOption > options.Max() && logOption <= TableConfig.MaxPageSize)
                {
                    options.Add(logOption);
                }
            }
            
            _effectivePageSizeOptions = options.Distinct().OrderBy(x => x).Take(TableConfig.MaxSmartOptions).ToArray();
        }
        
        if (PageSize > 0 && !_effectivePageSizeOptions.Contains(PageSize))
        {
            var list = _effectivePageSizeOptions.ToList();
            list.Add(PageSize);
            _effectivePageSizeOptions = list.OrderBy(x => x).ToArray();
        }
        
        if (PageSize <= TableConfig.MinPageSize)
        {
            PageSize = _effectivePageSizeOptions.Length > 0 ? _effectivePageSizeOptions[0] : TableConfig.DefaultPageSize;
        }
    }
    
    #endregion

    #region Cleanup

    public ValueTask DisposeAsync()
    {
        // Cleanup if needed
        return ValueTask.CompletedTask;
    }

    #endregion
}