@using Microsoft.AspNetCore.Components
@using RR.Blazor.Components.Core
@using RR.Blazor.Components.Form
@using RR.Blazor.Components.Data.Filters
@using RR.Blazor.Enums
@using RR.Blazor.Models
@using RR.Blazor.Services
@using System.Linq.Expressions
@using System.Collections.Concurrent
@using System.Reflection
@typeparam TItem where TItem : class
@inherits ComponentBase
@implements ITableParent
@implements IAsyncDisposable

@* 
    RTable<T> - Next-generation type-safe table component with built-in templates
    
    Usage:
    <RTable Items="@employees">
        <RColumn For="@(e => e.Name)" />
        <RColumn For="@(e => e.Email)" Template="Email" />
        <RColumn For="@(e => e.Salary)" Template="Currency" />
        <RColumn For="@(e => e.Status)" Template="Status" />
        <RColumn For="@(e => e.StartDate)" Template="Date" />
        <RColumn Title="Actions" Template="Actions" Width="100px">
            <ActionTemplate>
                <button @onclick="@(() => EditEmployee(context))">Edit</button>
            </ActionTemplate>
        </RColumn>
    </RTable>
*@

<CascadingValue Value="@_tableContext" IsFixed="true">
    <CascadingValue Value="@((ITableParent)this)" IsFixed="true">
        <div class="r-table-container @GetContainerClasses()" data-table-id="@TableId">
            @* Header Section *@
            @if (ShowHeader && (!string.IsNullOrEmpty(Title) || HeaderContent != null))
            {
                <div class="table-header">
                    <div class="table-header-content">
                        @if (!string.IsNullOrEmpty(Title))
                        {
                            <div class="text-h5 font-semibold">
                                @if (!string.IsNullOrEmpty(Icon))
                                {
                                    <i class="material-symbols-rounded">@Icon</i>
                                }
                                @Title
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(Subtitle))
                        {
                            <p class="table-subtitle">@Subtitle</p>
                        }
                    </div>
                    @if (HeaderContent != null)
                    {
                        <div class="table-header-actions">
                            @HeaderContent
                        </div>
                    }
                </div>
            }

            @* Toolbar Section *@
            @if (ShowToolbar && (ShowSearch || ShowFilters || ToolbarContent != null))
            {
                <div class="table-toolbar">
                    @if (ShowSearch)
                    {
                        <div class="table-search">
                            <i class="material-symbols-rounded">search</i>
                            <input type="text" 
                                   class="table-search-input" 
                                   placeholder="@SearchPlaceholder"
                                   value="@_searchTerm"
                                   @oninput="@OnSearchInput" />
                        </div>
                    }
                    @if (ToolbarContent != null)
                    {
                        @ToolbarContent
                    }
                </div>
            }

            @* Table Section *@
            <div class="table-scroll-container @(FixedHeader ? "table-fixed-header" : "")">
                @if (Loading && !Items.Any())
                {
                    @* Initial loading state *@
                    <div class="table-loading">
                        <RProgressCircular Indeterminate="true" Size="40" />
                        <p>@LoadingMessage</p>
                    </div>
                }
                else if (!_processedItems.Any())
                {
                    @* Empty state *@
                    <div class="table-empty-state">
                        @if (EmptyContent != null)
                        {
                            @EmptyContent
                        }
                        else
                        {
                            <i class="material-symbols-rounded empty-icon">inbox</i>
                            <p class="empty-description">@EmptyMessage</p>
                        }
                    </div>
                }
                else
                {
                    <table class="r-table @GetTableClasses()">
                        <thead>
                            <tr>
                                @if (Selectable)
                                {
                                    <th class="r-table-header-cell r-table-cell-checkbox">
                                        @if (MultiSelect)
                                        {
                                            <input type="checkbox"
                                                   checked="@IsAllSelected()"
                                                   @onchange="@OnSelectAllChanged" />
                                        }
                                    </th>
                                }
                                @foreach (var column in _columns.Where(c => c.Visible))
                                {
                                    <th class="r-table-header-cell @(column.Sortable ? "is-sortable" : "") @column.HeaderClass"
                                        style="@GetColumnStyle(column)">
                                        @if (column.HeaderTemplate != null)
                                        {
                                            @column.HeaderTemplate
                                        }
                                        else
                                        {
                                            <div class="table-header-content">
                                                <span>@column.Title</span>
                                                @if (column.Sortable)
                                                {
                                                    <button class="table-sort-button @GetSortClass(column.Key)"
                                                            @onclick="@(() => OnSort(column.Key))">
                                                        <i class="material-symbols-rounded">@GetSortIcon(column.Key)</i>
                                                    </button>
                                                }
                                            </div>
                                        }
                                    </th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in GetPagedItems())
                            {
                                <tr class="r-table-row @GetRowClass(item)" 
                                    @onclick="@(() => OnRowClick(item))">
                                    @if (Selectable)
                                    {
                                        <td class="r-table-cell r-table-cell-checkbox">
                                            <input type="@(MultiSelect ? "checkbox" : "radio")"
                                                   name="@(MultiSelect ? null : $"table-{TableId}")"
                                                   checked="@IsSelected(item)"
                                                   @onclick:stopPropagation="true"
                                                   @onchange="@((e) => OnSelectionChanged(item, (bool)e.Value!))" />
                                        </td>
                                    }
                                    @foreach (var column in _columns.Where(c => c.Visible))
                                    {
                                        <td class="r-table-cell @column.CellClass" style="@GetColumnStyle(column)">
                                            @{
                                                var cellContent = column.GetCellContent(item);
                                                if (cellContent != null)
                                                {
                                                    @cellContent
                                                }
                                            }
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>

            @* Footer Section *@
            @if (ShowPagination && _processedItems.Any())
            {
                <div class="table-footer">
                    <div class="table-pagination-info">
                        Showing @GetStartIndex() to @GetEndIndex() of @_processedItems.Count() results
                        @if (_selectedItems.Any())
                        {
                            <span class="table-selection-count">(@_selectedItems.Count selected)</span>
                        }
                    </div>
                    <div class="table-pagination">
                        <button class="table-pagination-button"
                                disabled="@(CurrentPage <= 1)"
                                @onclick="@(() => CurrentPage = 1)">
                            <i class="material-symbols-rounded">first_page</i>
                        </button>
                        <button class="table-pagination-button"
                                disabled="@(CurrentPage <= 1)"
                                @onclick="@(() => CurrentPage--)">
                            <i class="material-symbols-rounded">chevron_left</i>
                        </button>
                        <span class="table-pagination-pages">
                            Page @CurrentPage of @TotalPages
                        </span>
                        <button class="table-pagination-button"
                                disabled="@(CurrentPage >= TotalPages)"
                                @onclick="@(() => CurrentPage++)">
                            <i class="material-symbols-rounded">chevron_right</i>
                        </button>
                        <button class="table-pagination-button"
                                disabled="@(CurrentPage >= TotalPages)"
                                @onclick="@(() => CurrentPage = TotalPages)">
                            <i class="material-symbols-rounded">last_page</i>
                        </button>
                        @if (PageSizeOptions?.Any() == true)
                        {
                            <select class="table-page-size-select"
                                    value="@PageSize"
                                    @onchange="@OnPageSizeChanged">
                                @foreach (var size in PageSizeOptions)
                                {
                                    <option value="@size">@size per page</option>
                                }
                            </select>
                        }
                    </div>
                </div>
            }

            @* Column definitions from child content *@
            <div style="display: none;">
                @ChildContent
            </div>
        </div>
    </CascadingValue>
</CascadingValue>

@code {
    #region Parameters

    [Parameter] public IEnumerable<TItem> Items { get; set; } = Enumerable.Empty<TItem>();
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    // Header
    [Parameter] public bool ShowHeader { get; set; } = true;
    [Parameter] public string Title { get; set; }
    [Parameter] public string Subtitle { get; set; }
    [Parameter] public string Icon { get; set; }
    [Parameter] public RenderFragment HeaderContent { get; set; }
    
    // Toolbar
    [Parameter] public bool ShowToolbar { get; set; } = true;
    [Parameter] public bool ShowSearch { get; set; } = true;
    [Parameter] public string SearchPlaceholder { get; set; } = "Search...";
    [Parameter] public bool ShowFilters { get; set; }
    [Parameter] public RenderFragment ToolbarContent { get; set; }
    
    // Table
    [Parameter] public bool Loading { get; set; }
    [Parameter] public string LoadingMessage { get; set; } = "Loading...";
    [Parameter] public string EmptyMessage { get; set; } = "No data available";
    [Parameter] public RenderFragment EmptyContent { get; set; }
    [Parameter] public bool FixedHeader { get; set; }
    [Parameter] public string Height { get; set; }
    [Parameter] public bool Hover { get; set; } = true;
    [Parameter] public bool Striped { get; set; }
    [Parameter] public bool Bordered { get; set; }
    [Parameter] public TableDensity Density { get; set; } = TableDensity.Normal;
    
    // Selection
    [Parameter] public bool Selectable { get; set; }
    [Parameter] public bool MultiSelect { get; set; }
    [Parameter] public IEnumerable<TItem> SelectedItems { get; set; } = Enumerable.Empty<TItem>();
    [Parameter] public EventCallback<IEnumerable<TItem>> SelectedItemsChanged { get; set; }
    [Parameter] public TItem SelectedItem { get; set; }
    [Parameter] public EventCallback<TItem> SelectedItemChanged { get; set; }
    
    // Sorting
    [Parameter] public string SortBy { get; set; }
    [Parameter] public bool SortDescending { get; set; }
    [Parameter] public EventCallback<string> SortByChanged { get; set; }
    [Parameter] public EventCallback<bool> SortDescendingChanged { get; set; }
    
    // Pagination
    [Parameter] public bool ShowPagination { get; set; } = true;
    [Parameter] public int PageSize { get; set; } = 10;
    [Parameter] public EventCallback<int> PageSizeChanged { get; set; }
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public EventCallback<int> CurrentPageChanged { get; set; }
    [Parameter] public int[] PageSizeOptions { get; set; } = new[] { 10, 25, 50, 100 };
    
    // Row customization
    [Parameter] public Func<TItem, string> RowClass { get; set; }
    [Parameter] public EventCallback<TItem> OnRowClicked { get; set; }
    [Parameter] public bool RowClickable { get; set; }
    
    // Styling
    [Parameter] public string Class { get; set; }
    [Parameter] public string Style { get; set; }

    #endregion

    #region Private Fields

    private TableContext _tableContext;
    private readonly List<ColumnDefinition<TItem>> _columns = new();
    private readonly HashSet<TItem> _selectedItems = new();
    private string _searchTerm = "";
    private IEnumerable<TItem> _processedItems = Enumerable.Empty<TItem>();
    private string TableId => $"table-{GetHashCode()}";

    // Performance: Cache compiled expressions
    private static readonly ConcurrentDictionary<string, Func<TItem, object>> _propertyGetterCache = new();
    private static readonly ConcurrentDictionary<string, PropertyInfo> _propertyInfoCache = new();

    #endregion

    #region Lifecycle

    protected override void OnInitialized()
    {
        _tableContext = new TableContext(typeof(TItem), TableId, true);
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        ProcessItems();
        UpdateSelection();
        base.OnParametersSet();
    }

    #endregion

    #region ITableParent Implementation

    public Type ItemType => typeof(TItem);

    public void AddColumn(object columnInfo)
    {
        if (columnInfo is ColumnDefinition<TItem> column)
        {
            _columns.Add(column);
            StateHasChanged();
        }
    }

    public void UpdateColumn(object columnInfo)
    {
        if (columnInfo is ColumnDefinition<TItem> column)
        {
            var index = _columns.FindIndex(c => c.Key == column.Key);
            if (index >= 0)
            {
                _columns[index] = column;
                StateHasChanged();
            }
        }
    }

    #endregion

    #region Data Processing

    private void ProcessItems()
    {
        if (Items == null)
        {
            _processedItems = Enumerable.Empty<TItem>();
            return;
        }

        var query = Items.AsQueryable();

        // Apply search
        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            query = ApplySearch(query, _searchTerm);
        }

        // Apply sorting
        if (!string.IsNullOrEmpty(SortBy))
        {
            query = ApplySort(query, SortBy, SortDescending);
        }

        _processedItems = query.ToList();
    }

    private IQueryable<TItem> ApplySearch(IQueryable<TItem> query, string searchTerm)
    {
        var searchableColumns = _columns.Where(c => c.Searchable).ToList();
        if (!searchableColumns.Any())
        {
            // If no columns are marked searchable, search all string properties
            searchableColumns = _columns.Where(c => 
                GetPropertyType(c.Key) == typeof(string)).ToList();
        }

        if (!searchableColumns.Any())
            return query;

        var lowerSearchTerm = searchTerm.ToLower();
        
        var filteredItems = query.AsEnumerable().Where(item =>
            searchableColumns.Any(column =>
            {
                var value = GetPropertyValue(item, column.Key);
                return value?.ToString()?.ToLower().Contains(lowerSearchTerm) ?? false;
            }));
        return filteredItems.AsQueryable();
    }

    private IQueryable<TItem> ApplySort(IQueryable<TItem> query, string sortBy, bool descending)
    {
        var getter = GetPropertyGetter(sortBy);
        if (getter == null)
            return query;

        return descending
            ? query.OrderByDescending(item => getter(item))
            : query.OrderBy(item => getter(item));
    }

    #endregion

    #region Property Access

    private static Func<TItem, object> GetPropertyGetter(string propertyName)
    {
        return _propertyGetterCache.GetOrAdd(propertyName, key =>
        {
            var param = Expression.Parameter(typeof(TItem), "item");
            var property = Expression.Property(param, key);
            var convert = Expression.Convert(property, typeof(object));
            var lambda = Expression.Lambda<Func<TItem, object>>(convert, param);
            return lambda.Compile();
        });
    }

    private static object GetPropertyValue(TItem item, string propertyName)
    {
        if (item == null || string.IsNullOrEmpty(propertyName))
            return null;

        try
        {
            var getter = GetPropertyGetter(propertyName);
            return getter(item);
        }
        catch
        {
            return null;
        }
    }

    private static Type GetPropertyType(string propertyName)
    {
        var propInfo = _propertyInfoCache.GetOrAdd(propertyName, key =>
            typeof(TItem).GetProperty(key));
        return propInfo?.PropertyType;
    }

    #endregion

    #region Selection

    private void UpdateSelection()
    {
        _selectedItems.Clear();
        
        if (MultiSelect && SelectedItems != null)
        {
            foreach (var item in SelectedItems)
            {
                _selectedItems.Add(item);
            }
        }
        else if (!MultiSelect && SelectedItem != null)
        {
            _selectedItems.Add(SelectedItem);
        }
    }

    private bool IsSelected(TItem item)
    {
        return _selectedItems.Contains(item);
    }

    private bool IsAllSelected()
    {
        var pagedItems = GetPagedItems().ToList();
        return pagedItems.Any() && pagedItems.All(item => _selectedItems.Contains(item));
    }

    private async Task OnSelectionChanged(TItem item, bool selected)
    {
        if (MultiSelect)
        {
            if (selected)
                _selectedItems.Add(item);
            else
                _selectedItems.Remove(item);

            await SelectedItemsChanged.InvokeAsync(_selectedItems.ToList());
        }
        else
        {
            _selectedItems.Clear();
            if (selected)
            {
                _selectedItems.Add(item);
                await SelectedItemChanged.InvokeAsync(item);
            }
            else
            {
                await SelectedItemChanged.InvokeAsync(default(TItem));
            }
        }
    }

    private async Task OnSelectAllChanged(ChangeEventArgs e)
    {
        var selected = (bool)e.Value;
        var pagedItems = GetPagedItems().ToList();

        if (selected)
        {
            foreach (var item in pagedItems)
            {
                _selectedItems.Add(item);
            }
        }
        else
        {
            foreach (var item in pagedItems)
            {
                _selectedItems.Remove(item);
            }
        }

        await SelectedItemsChanged.InvokeAsync(_selectedItems.ToList());
    }

    #endregion

    #region Sorting

    private async Task OnSort(string columnKey)
    {
        if (SortBy == columnKey)
        {
            SortDescending = !SortDescending;
            await SortDescendingChanged.InvokeAsync(SortDescending);
        }
        else
        {
            SortBy = columnKey;
            SortDescending = false;
            await SortByChanged.InvokeAsync(SortBy);
            await SortDescendingChanged.InvokeAsync(SortDescending);
        }

        ProcessItems();
    }

    private string GetSortClass(string columnKey)
    {
        if (SortBy != columnKey)
            return "";

        return SortDescending ? "table-header-active-sort table-sort-desc" : "table-header-active-sort table-sort-asc";
    }

    private string GetSortIcon(string columnKey)
    {
        if (SortBy != columnKey)
            return "unfold_more";

        return SortDescending ? "arrow_drop_down" : "arrow_drop_up";
    }

    #endregion

    #region Pagination

    private IEnumerable<TItem> GetPagedItems()
    {
        if (!ShowPagination)
            return _processedItems;

        return _processedItems
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize);
    }

    private int TotalPages => Math.Max(1, (int)Math.Ceiling(_processedItems.Count() / (double)PageSize));

    private int GetStartIndex()
    {
        if (!_processedItems.Any())
            return 0;
        return ((CurrentPage - 1) * PageSize) + 1;
    }

    private int GetEndIndex()
    {
        var endIndex = CurrentPage * PageSize;
        var totalCount = _processedItems.Count();
        return Math.Min(endIndex, totalCount);
    }

    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newSize))
        {
            PageSize = newSize;
            CurrentPage = 1; // Reset to first page
            await PageSizeChanged.InvokeAsync(PageSize);
            await CurrentPageChanged.InvokeAsync(CurrentPage);
        }
    }

    #endregion

    #region Event Handlers

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        _searchTerm = e.Value?.ToString() ?? "";
        CurrentPage = 1; // Reset to first page on search
        ProcessItems();
        await CurrentPageChanged.InvokeAsync(CurrentPage);
    }

    private async Task OnRowClick(TItem item)
    {
        if (RowClickable && OnRowClicked.HasDelegate)
        {
            await OnRowClicked.InvokeAsync(item);
        }
    }

    #endregion

    #region Styling

    private string GetContainerClasses()
    {
        var classes = new List<string> { "r-table-container", "w-full" };
        
        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);

        if (!string.IsNullOrEmpty(Height))
            classes.Add("table-fixed-height");

        return string.Join(" ", classes);
    }

    private string GetTableClasses()
    {
        var classes = new List<string>();

        if (Hover)
            classes.Add("has-hover");

        if (Striped)
            classes.Add("is-striped");

        if (Bordered)
            classes.Add("is-bordered");

        classes.Add($"r-table-{Density.ToString().ToLower()}");

        return string.Join(" ", classes);
    }

    private string GetRowClass(TItem item)
    {
        var classes = new List<string>();

        if (IsSelected(item))
            classes.Add("r-is-selected");

        if (RowClickable)
            classes.Add("r-table-row-clickable");

        if (RowClass != null)
        {
            var customClass = RowClass(item);
            if (!string.IsNullOrEmpty(customClass))
                classes.Add(customClass);
        }

        return string.Join(" ", classes);
    }

    private string GetColumnStyle(ColumnDefinition<TItem> column)
    {
        var styles = new List<string>();

        if (!string.IsNullOrEmpty(column.Width))
            styles.Add($"width: {column.Width}");

        if (!string.IsNullOrEmpty(column.MinWidth))
            styles.Add($"min-width: {column.MinWidth}");

        if (!string.IsNullOrEmpty(column.MaxWidth))
            styles.Add($"max-width: {column.MaxWidth}");

        return string.Join("; ", styles);
    }

    #endregion

    #region Cleanup

    public ValueTask DisposeAsync()
    {
        // Cleanup if needed
        return ValueTask.CompletedTask;
    }

    #endregion
}