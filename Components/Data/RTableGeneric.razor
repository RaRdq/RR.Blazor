@using Microsoft.AspNetCore.Components
@using RR.Blazor.Components.Core
@using RR.Blazor.Components.Form
@using RR.Blazor.Components.Data
@using RR.Blazor.Components.Display
@using RR.Blazor.Components.Feedback
@using RR.Blazor.Enums
@using RR.Blazor.Configuration
@using RR.Blazor.Models
@using RR.Blazor.Services
@using RR.Blazor.Templates
@using RR.Blazor.Interfaces
@using System.Linq.Expressions
@using System.Collections.Concurrent
@using System.Reflection
@using Microsoft.JSInterop
@typeparam TItem where TItem : class
@inherits RTableBase
@implements ITableParent
@implements IFilterable<TItem>
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

@* Data table with sorting, filtering, pagination, and row selection *@

<CascadingValue Value="@_tableContext" IsFixed="true">
    <CascadingValue Value="@((ITableParent)this)" IsFixed="true">
        <div class="table-container @GetContainerClasses()" data-table-id="@TableId">
            @* Header Section *@
            @if (ShowTitle && (!string.IsNullOrEmpty(Title) || HeaderContent != null))
            {
                <div class="table-header">
                    <div class="table-header-content">
                        @if (!string.IsNullOrEmpty(Title))
                        {
                            <div class="text-h5 font-semibold">
                                @if (!string.IsNullOrEmpty(Icon))
                                {
                                    <i class="icon">@Icon</i>
                                }
                                @Title
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(Subtitle))
                        {
                            <p class="table-subtitle">@Subtitle</p>
                        }
                    </div>
                    @if (HeaderContent != null)
                    {
                        <div class="table-header-actions">
                            @HeaderContent
                        </div>
                    }
                </div>
            }
            
            @* Enhanced Filter Integration *@
            @if (ShowEnhancedFilters && EnhancementsEnabled)
            {
                <div class="table-enhanced-filters mb-4">
                    <RFilter DataSource="@Items.AsQueryable()" 
                            InitialCriteria="@_initialFilterCriteria"
                            OnPredicateChanged="@(async (predicate) => await OnFilterPredicateChanged(predicate))"
                            OnCriteriaChanged="@(async (criteria) => await OnFilterCriteriaChanged(criteria))"
                            Config="@GetFilterConfig()" />
                </div>
            }

            @if (ShowToolbar && (ShowSearch || ShowFilters || ShowChartButton || ShowExportButton || ShowColumnManager || ToolbarContent != null))
            {
                <div class="table-toolbar">
                    <div class="table-toolbar-left">
                        @if (ShowSearch)
                        {
                            <div class="table-search">
                                <i class="icon">search</i>
                                <input type="text" 
                                       class="table-search-input" 
                                       placeholder="@SearchPlaceholder"
                                       value="@_searchTerm"
                                       disabled="@Disabled"
                                       @oninput="@OnSearchInput" />
                            </div>
                        }
                        @if (ShowFilters)
                        {
                            <div class="table-filters">
                                <button class="button-outline button-sm" @onclick="@ToggleFilterPanel">
                                    <i class="icon mr-2">filter_list</i>
                                    Filters
                                    @if (_filterPanelExpanded)
                                    {
                                        <i class="icon ml-2">expand_less</i>
                                    }
                                    else
                                    {
                                        <i class="icon ml-2">expand_more</i>
                                    }
                                </button>
                            </div>
                        }
                        @if (ShowChartButton)
                        {
                            <button class="button-outline button-sm" @onclick="@ShowChartModal" disabled="@(!FilteredData.Any())">
                                <i class="icon mr-2">analytics</i>
                                @ChartButtonText
                            </button>
                        }
                        @if (ToolbarContent != null)
                        {
                            @ToolbarContent
                        }
                    </div>
                    <div class="table-toolbar-right">
                        @if (ShowExportButton)
                        {
                            <RExportButton DataSource="@FilteredData" 
                                          ButtonClass="button-outline button-sm"
                                          Text=""
                                          Icon="download"
                                          AriaLabel="Export data" />
                        }
                        @if (ShowColumnManager)
                        {
                            <RTableColumnManager Columns="@GetEffectiveColumns()"
                                               Preferences="@ColumnPreferences"
                                               PreferencesChanged="@OnColumnPreferencesChanged"
                                               EnableReordering="@EnableColumnReordering"
                                               SupportsStickyColumns="@EnableStickyColumns"
                                               TableId="@TableId" />
                        }
                    </div>
                </div>
            }

            @* Filter Panel (shown when expanded) *@
            @if (ShowFilters && _filterPanelExpanded)
            {
                <div class="table-filter-panel pa-4 border-b border-surface-outline bg-surface-elevated">
                    <RFilterGeneric TItem="TItem" 
                             DataSource="@_allData.AsQueryable()"
                             OnDataFiltered="@OnFilterApplied"
                             Config="@(new UniversalFilterConfig { ShowAdvancedPanel = true, ShowSearch = false })" />
                </div>
            }

            <div class="table-scroll-container @(EnableHorizontalScroll ? "table-content table-content-scroll-container-x" : "") @(FixedHeader ? "table-scroll-container-fixed-header" : "") @(EnableHorizontalScroll ? "overflow-x-auto" : "")"
                 style="--scroll-height: @Height; height: @Height; max-height: @MaxHeight;">
                @if (Loading && !Items.Any())
                {
                    <div class="table-loading">
                        <RProgressCircular Indeterminate="true" Size="SizeType.Medium" />
                        <p>@LoadingText</p>
                    </div>
                }
                else if (!_processedItems.Any())
                {
                    @* Empty state *@
                    <div class="empty-state">
                        @if (EmptyContent != null)
                        {
                            @EmptyContent
                        }
                        else
                        {
                            <i class="icon empty-icon">inbox</i>
                            <p class="empty-description">@EmptyMessage</p>
                        }
                    </div>
                }
                else
                {
                    <table class="@GetTableClasses() @GetEnhancedTableClasses() @(EnhancementsEnabled ? "table-advanced" : "") " 
                           data-table-id="@TableId">
                        <thead>
                            <tr>
                                @if (Selectable)
                                {
                                    <th class="table-header-cell table-cell-checkbox">
                                        @if (MultiSelect)
                                        {
                                            <input type="checkbox"
                                                   checked="@IsAllSelected()"
                                                   disabled="@Disabled"
                                                   @onchange="@OnSelectAllChanged" />
                                        }
                                    </th>
                                }
                                @foreach (var column in GetVisibleColumns())
                                {
                                    <th class="table-header-cell @(column.Sortable ? "table-header-cell-sortable" : "") @column.HeaderClass @GetEnhancedHeaderClasses(column) "
                                        data-sticky="@(column.Sticky != StickyColumnType.None ? column.Sticky.ToString().ToLower() : null)"
                                        data-sticky-order="@(column.Sticky != StickyColumnType.None ? column.StickyOrder : null)"
                                        data-column-key="@column.Key"
                                        style="--cell-width: @column.Width; width: @column.Width; min-width: @column.MinWidth; max-width: @column.MaxWidth;">
                                        @if (column.HeaderTemplate != null)
                                        {
                                            @column.HeaderTemplate
                                        }
                                        else
                                        {
                                            <div class="table-header-wrapper">
                                                <div class="table-header-content-group">
                                                    @if (column.Sortable)
                                                    {
                                                        <button class="table-header-content table-header-sortable @GetSortClass(column.Key)"
                                                                @onclick="@((e) => OnSortClick(column.Key))">
                                                            <span>@column.Title</span>
                                                            <i class="icon table-sort-icon">@GetSortIcon(column.Key)</i>
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <div class="table-header-content">
                                                            <span>@column.Title</span>
                                                        </div>
                                                    }
                                                    
                                                    @if (EnableColumnFilters && column.Filterable)
                                                    {
                                                        @* Tiny filter icon button next to sort *@
                                                        <button class="table-header-filter-icon @(_activeColumnFilters.ContainsKey(column.Key) ? "active" : "")"
                                                                data-filter-column="@column.Key"
                                                                @onclick="@((e) => OnFilterClick(column.Key))"
                                                                title="Filter @column.Title">
                                                            <i class="icon">@(_activeColumnFilters.ContainsKey(column.Key) ? "filter_alt" : "filter_list")</i>
                                                            @if (_activeColumnFilters.ContainsKey(column.Key) && GetColumnFilterCount(column.Key) > 0)
                                                            {
                                                                <span class="filter-badge">@GetColumnFilterCount(column.Key)</span>
                                                            }
                                                        </button>
                                                    }
                                                </div>
                                                
                                            </div>
                                        }
                                    </th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var (item, index) in GetPagedItems().Select((item, index) => (item, index)))
                            {
                                <tr class="table-row @GetEnhancedRowClass(item, index)" 
                                    data-row-index="@index"
                                    tabindex="@(EnhancementsConfig.SelectionConfig.KeyboardNavigation ? "0" : "-1")"
                                    @onclick="@(() => HandleEnhancedRowClick(item, index))">
                                    @if (Selectable)
                                    {
                                        <td class="table-cell table-cell-checkbox">
                                            <input type="@(MultiSelect ? "checkbox" : "radio")"
                                                   name="@(MultiSelect ? null : $"table-{TableId}")"
                                                   checked="@IsSelected(item)"
                                                   disabled="@Disabled"
                                                   @onclick:stopPropagation="true"
                                                   @onchange="@((e) => OnSelectionChanged(item, (bool)e.Value!))" />
                                        </td>
                                    }
                                    @foreach (var column in GetVisibleColumns())
                                    {
                                        <td class="table-cell @column.CellClass @GetEnhancedCellClasses(column) "
                                            data-sticky="@(column.Sticky != StickyColumnType.None ? column.Sticky.ToString().ToLower() : null)"
                                            data-sticky-order="@(column.Sticky != StickyColumnType.None ? column.StickyOrder : null)"
                                            style="--cell-width: @column.Width; width: @column.Width; min-width: @column.MinWidth; max-width: @column.MaxWidth;">
                                            @{
                                                var cellContent = column.GetCellContent(item);
                                                if (cellContent != null)
                                                {
                                                    @cellContent
                                                }
                                            }
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>

            @* Footer Section *@
            @if (ShowPagination && _processedItems.Any())
            {
                <RPaginationFooter CurrentPage="@CurrentPage"
                                  CurrentPageChanged="@OnPageChanged"
                                  PageSize="@PageSize"
                                  PageSizeChanged="@OnPageSizeChanged"
                                  TotalItems="@_processedItems.Count()"
                                  SelectedCount="@_selectedItems.Count"
                                  PageSizeOptions="@_effectivePageSizeOptions?.ToList()"
                                  ShowPageSizeSelector="@(_effectivePageSizeOptions?.Any() == true)"
                                  UseDropdown="false"
                                  Class="@GetFooterClass()" />
            }

            @* Column definitions from child content *@
            <div class="d-none">
                @ChildContent
            </div>
        </div>
    </CascadingValue>
</CascadingValue>

@* Column Filter Dropdown Portal *@
@if (EnableColumnFilters && !string.IsNullOrEmpty(_openFilterColumn))
{
    <div class="table-column-filter-portal" @onclick:stopPropagation="true">
        <div class="table-column-filter-backdrop" @onclick="@(() => OpenFilterColumn = null)"></div>
        <div class="table-column-filter-dropdown z-max" id="@($"filter-dropdown-{_openFilterColumn}")" 
             style="position: fixed !important; top: 200px; left: 200px; width: 300px; z-index: 10000;">
            <div class="filter-dropdown-header">
                <div class="filter-dropdown-title">Filter: @_openFilterColumn</div>
                <button class="filter-dropdown-close" @onclick="@(() => OpenFilterColumn = null)">
                    <i class="icon">close</i>
                </button>
            </div>
            <div class="filter-dropdown-body">
                <div class="filter-input-group">
                    <label>Search @_openFilterColumn</label>
                    <input type="text" class="filter-text-input" placeholder="Enter text..." />
                </div>
                <div class="debug-info text-xs text-muted mt-2">
                    Debug: EnableColumnFilters=@EnableColumnFilters, _openFilterColumn="@_openFilterColumn"
                </div>
            </div>
        </div>
    </div>
}

@* Chart Modal *@
@if (_showChartModal && _chartModalReady)
{
    <RModal @bind-Visible="_showChartModal" 
            Header="Chart Visualization" 
            Size="SizeType.Large">
        
        <HeaderContent>
            <div class="d-flex items-center gap-2">
                <i class="icon text-primary">analytics</i>
                <span>@Title Chart</span>
            </div>
        </HeaderContent>

        <ChildContent>
            @if (FilteredData.Any())
            {
                <div class="pa-4">
                    <RChartSmart Data="@FilteredData" 
                                Type="@DefaultChartType"
                                Title="@($"{Title} Analysis")"
                                Height="400px"
                                UseCanvas="true"
                                EnableTouchInteractions="true" />
                    
                    <div class="text-sm  text-muted mt-4">
                        Showing @FilteredData.Count() of @Items.Count() records
                        @if (!string.IsNullOrEmpty(_searchTerm))
                        {
                            <span> filtered by "@_searchTerm"</span>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="d-flex flex-col items-center justify-center pa-12 text-center">
                    <i class="icon text-6xl  text-muted mb-4">insert_chart</i>
                    <div class="text-lg font-semibold text-secondary">No Data Available</div>
                    <p class="text-secondary mt-2">There's no data to display in the chart.</p>
                </div>
            }
        </ChildContent>

        <FooterContent>
            <div class="d-flex justify-end gap-2">
                <RButton Text="Close" Variant="VariantType.Secondary" OnClick="@(() => _showChartModal = false)" />
            </div>
        </FooterContent>
    </RModal>
}

@code {
    #region Parameters

    [Parameter] public IEnumerable<TItem> Items { get; set; } = Enumerable.Empty<TItem>();
    // ChildContent inherited from RTableBase
    
    // Header - Title, Subtitle, ShowTitle inherited from RTableBase
    [Parameter] public string Icon { get; set; }
    [Parameter] public RenderFragment HeaderContent { get; set; }
    
    // Toolbar - ShowToolbar, ShowSearch inherited from RTableBase
    [Parameter] public string SearchPlaceholder { get; set; } = "Search...";
    [Parameter] public bool ShowFilters { get; set; }
    [Parameter] public RenderFragment ToolbarContent { get; set; }
    
    [Parameter] public Dictionary<string, ColumnPreferences> ColumnPreferences { get; set; } = new();
    [Parameter] public EventCallback<Dictionary<string, ColumnPreferences>> ColumnPreferencesChanged { get; set; }
    
    
    [Parameter] public string EmptyMessage { get; set; } = "No data available";
    
    [Parameter] public bool Selectable { get; set; }
    [Parameter] public bool MultiSelect { get; set; }
    [Parameter] public IEnumerable<TItem> SelectedItems { get; set; } = Enumerable.Empty<TItem>();
    [Parameter] public EventCallback<IEnumerable<TItem>> SelectedItemsChanged { get; set; }
    [Parameter] public TItem SelectedItem { get; set; }
    [Parameter] public EventCallback<TItem> SelectedItemChanged { get; set; }
    
    // Sorting
    [Parameter] public string SortBy { get; set; }
    [Parameter] public bool SortDescending { get; set; }
    [Parameter] public EventCallback<string> SortByChanged { get; set; }
    [Parameter] public EventCallback<bool> SortDescendingChanged { get; set; }
    
    // Pagination - ShowPagination inherited from RTableBase
    // PageSize is inherited from RTableBase with default value of 50
    [Parameter] public EventCallback<int> PageSizeChanged { get; set; }
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public EventCallback<int> CurrentPageChanged { get; set; }
    [Parameter] public int[] PageSizeOptions { get; set; }
    
    // Row customization
    [Parameter] public Func<TItem, string> RowClass { get; set; }
    [Parameter] public EventCallback<TItem> OnRowClicked { get; set; }
    [Parameter] public bool RowClickable { get; set; }
    
    // Styling: Class, Style, Disabled inherited from RForwardingComponentBase
    
    // Auto-generation - AutoGenerateColumns inherited from RTableBase
    [Parameter] public List<string> ExcludeColumns { get; set; } = new();
    
    // Enhanced Table Features
    [Parameter] public bool EnhancementsEnabled { get; set; } = true;
    [Parameter] public RR.Blazor.Models.TableConfiguration EnhancementsConfig { get; set; } = new();
    [Parameter] public bool ShowEnhancedFilters { get; set; }
    [Parameter] public EventCallback<ColumnResizeEventArgs> OnColumnResized { get; set; }
    [Parameter] public EventCallback<RowClickEventArgs<TItem>> OnEnhancedRowClick { get; set; }
    
    // RFilter Integration - SOLID Compliant Inverted Control Pattern
    [Parameter] public IFilterProvider<TItem>? BindFilter { get; set; }
    [Parameter] public bool EnableColumnFilters { get; set; } = false;
    [Parameter] public FilterLogic ColumnFilterLogic { get; set; } = FilterLogic.And;
    [Parameter] public bool ShowFilterBadges { get; set; } = true;

    #endregion

    #region Private Fields

    private TableContext _tableContext;
    private readonly List<ColumnDefinition<TItem>> _columns = new();
    private readonly List<ColumnDefinition<TItem>> _autoGeneratedColumns = new();
    private readonly HashSet<TItem> _selectedItems = new();
    private string _searchTerm = "";
    private bool _filterPanelExpanded = false;
    private IEnumerable<TItem> _processedItems = Enumerable.Empty<TItem>();
    private IEnumerable<TItem> _allData => Items ?? Enumerable.Empty<TItem>();
    private int _filteredCount = 0;
    private string TableId => $"table-{GetHashCode()}";
    private int[] _effectivePageSizeOptions = TableConstants.DefaultPageSizeOptions;

    private bool _showChartModal = false;
    private bool _chartModalReady = false;
    private readonly ChartDataAnalyzer _chartAnalyzer = new();

    // Enhanced table features
    private ElementReference _selectAllCheckbox;
    private IJSObjectReference _jsModule;
    private Dictionary<string, string> _persistedColumnWidths = new();
    private RowSelectionState<TItem> _selectionState = new();
    private UniversalFilterCriteria<TItem> _initialFilterCriteria = new();
    private TableFilterContext<TItem> _filterContext = new();

    // Performance: Cache compiled expressions
    private static readonly ConcurrentDictionary<string, Func<TItem, object>> _propertyGetterCache = new();
    private static readonly ConcurrentDictionary<string, PropertyInfo> _propertyInfoCache = new();
    
    private IFilterProvider<TItem>? _lastBindFilter;
    
    // Column filter UI state
    private string? _openFilterColumn = null;
    
    protected string? OpenFilterColumn
    {
        get => _openFilterColumn;
        set
        {
            if (_openFilterColumn != value)
            {
                _openFilterColumn = value;
                InvokeAsync(StateHasChanged);
            }
        }
    }
    private readonly Dictionary<string, HashSet<string>> _activeColumnFilters = new();
    private readonly Dictionary<string, string> _columnFilterSearchTerms = new();
    private readonly Dictionary<string, string> _columnFilterValues = new();
    private readonly Dictionary<string, string> _columnFilterOperators = new();
    private readonly Dictionary<string, DateTime?> _columnFilterDates = new();

    #endregion

    #region Public Properties for Chart Integration

    /// <summary>Gets the filtered and sorted data for chart integration</summary>
    public IEnumerable<TItem> FilteredData => _processedItems;

    #endregion

    #region Lifecycle

    protected override void OnInitialized()
    {
        _tableContext = new TableContext(typeof(TItem), TableId, true);
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        // Subscribe to BindFilter changes if bound - SOLID inverted control pattern
        if (BindFilter != null && _lastBindFilter != BindFilter)
        {
            // Unsubscribe from previous filter
            if (_lastBindFilter != null)
            {
                _lastBindFilter.OnFilterChanged -= OnBindFilterChanged;
            }
            
            // Subscribe to new filter
            BindFilter.OnFilterChanged += OnBindFilterChanged;
            _lastBindFilter = BindFilter;
        }
        
        ProcessItems();
        UpdateSelection();
        UpdatePageSizeOptions();
        base.OnParametersSet();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize JavaScript module for enhanced features
            if (EnhancementsEnabled)
            {
                try
                {
                    // Initialize the RTableManager from table.js
                    var jsConfig = new
                    {
                        minColumnWidth = EnhancementsConfig.ResizeConfig.MinColumnWidth,
                        maxColumnWidth = EnhancementsConfig.ResizeConfig.MaxColumnWidth,
                        liveResize = EnhancementsConfig.ResizeConfig.LiveResize,
                        persistWidths = EnhancementsConfig.ResizeConfig.PersistWidths,
                        rowClickSelection = EnhancementsConfig.SelectionConfig.RowClickSelection,
                        stickyColumns = GetStickyColumnsConfig()
                    };
                    
                    await SafeInvokeAsync("RTableManager.initialize", TableId, jsConfig);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Failed to initialize table enhancements: {ex.Message}");
                }
            }
            
            // Initialize horizontal scroll manager if enabled
            if (EnableHorizontalScroll)
            {
                try
                {
                    await JSRuntime.InvokeAsync<bool>("RRBlazor.TableScroll.initialize", TableId);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Failed to initialize table scroll manager: {ex.Message}");
                }
            }
            
            // Only auto-generate after first render when component tree is built
            if (AutoGenerateColumns && !_columns.Any())
            {
                PropertyColumnGenerator.ClearCache();
                var generatedColumns = PropertyColumnGenerator.GenerateColumns<TItem>();
                
                // Filter out excluded columns
                if (ExcludeColumns?.Any() == true)
                {
                    generatedColumns = generatedColumns
                        .Where(c => !ExcludeColumns.Contains(c.Key, StringComparer.OrdinalIgnoreCase))
                        .ToList();
                }
                
                foreach (var column in generatedColumns)
                {
                    _autoGeneratedColumns.Add(column);
                }
                
                StateHasChanged();
            }
            else if (!AutoGenerateColumns)
            {
                // Ensure auto-generated columns are cleared when disabled
                _autoGeneratedColumns.Clear();
            }
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }

    #endregion

    #region ITableParent Implementation

    public Type ItemType => typeof(TItem);

    public void AddColumn(object columnInfo)
    {
        if (columnInfo is ColumnDefinition<TItem> column)
        {
            _columns.Add(column);
            StateHasChanged();
        }
    }

    public void UpdateColumn(object columnInfo)
    {
        if (columnInfo is ColumnDefinition<TItem> column)
        {
            var index = _columns.FindIndex(c => c.Key == column.Key);
            if (index >= 0)
            {
                _columns[index] = column;
                StateHasChanged();
            }
        }
    }

    #endregion

    #region Column Management
    
    private IEnumerable<ColumnDefinition<TItem>> GetVisibleColumns()
    {
        return GetEffectiveColumns().Where(c => 
            !ColumnPreferences.ContainsKey(c.Key) || 
            ColumnPreferences[c.Key].Visible != false);
    }
    
    private async Task OnColumnPreferencesChanged(Dictionary<string, ColumnPreferences> preferences)
    {
        ColumnPreferences = preferences;
        await ColumnPreferencesChanged.InvokeAsync(preferences);
        StateHasChanged();
    }
    
    private IEnumerable<ColumnDefinition<TItem>> GetEffectiveColumns()
    {
        if (!AutoGenerateColumns)
        {
            // When auto-generation is disabled, only return manual columns
            foreach (var column in _columns)
                yield return column;

            yield break;
        }
        
        // When auto-generation is enabled, merge manual and auto-generated columns
        var manualKeys = _columns.Select(c => c.Key).ToHashSet(StringComparer.OrdinalIgnoreCase);
        
        // Return manual columns first
        foreach (var column in _columns)
            yield return column;
        
        // Then add non-conflicting auto-generated columns
        foreach (var autoColumn in _autoGeneratedColumns)
        {
            if (!manualKeys.Contains(autoColumn.Key))
            {
                yield return autoColumn;
            }
        }
    }
    
    #endregion

    #region Data Processing

    private void ProcessItems()
    {
        if (Items == null)
        {
            _processedItems = Enumerable.Empty<TItem>();
            return;
        }

        var query = Items.AsQueryable();

        // Apply search
        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            query = ApplySearch(query, _searchTerm);
        }

        // Apply BindFilter predicate - SOLID compliant: component controls its own filtering
        if (BindFilter != null)
        {
            var filterPredicate = BindFilter.GetPredicate();
            query = query.Where(filterPredicate);
        }

        // Apply column filters
        if (EnableColumnFilters && (_activeColumnFilters.Any() || _columnFilterSearchTerms.Any()))
        {
            var columnFilterPredicate = BuildColumnFilterPredicate();
            query = query.Where(columnFilterPredicate);
        }

        // Apply sorting
        if (!string.IsNullOrEmpty(SortBy))
        {
            query = ApplySort(query, SortBy, SortDescending);
        }

        _processedItems = query.ToList();
    }

    private IQueryable<TItem> ApplySearch(IQueryable<TItem> query, string searchTerm)
    {
        var searchableColumns = GetEffectiveColumns()
            .Where(c => c.Searchable && c.Property != null) // Only include columns with actual property bindings
            .ToList();
        if (!searchableColumns.Any())
        {
            // If no columns are marked searchable, search all string properties that have bindings
            searchableColumns = GetEffectiveColumns()
                .Where(c => c.Property != null && GetPropertyType(c.Key) == typeof(string))
                .ToList();
        }

        if (!searchableColumns.Any())
            return query;

        var lowerSearchTerm = searchTerm.ToLower();
        
        // For better performance with large datasets, we search in memory
        // This is acceptable for client-side Blazor where data is already loaded
        var items = query.ToList();
        var filteredItems = items.Where(item =>
            searchableColumns.Any(column =>
            {
                var value = GetPropertyValue(item, column.Key);
                return value?.ToString()?.ToLower().Contains(lowerSearchTerm) ?? false;
            }));
        return filteredItems.AsQueryable();
    }

    private IQueryable<TItem> ApplySort(IQueryable<TItem> query, string sortBy, bool descending)
    {
        var getter = GetPropertyGetter(sortBy);
        if (getter == null)
            return query;

        return descending
            ? query.OrderByDescending(item => getter(item))
            : query.OrderBy(item => getter(item));
    }
    

    #endregion

    #region Property Access

    private static Func<TItem, object> GetPropertyGetter(string propertyName)
    {
        return _propertyGetterCache.GetOrAdd(propertyName, key =>
        {
            try
            {
                var param = Expression.Parameter(typeof(TItem), "item");
                var property = Expression.Property(param, key);
                var convert = Expression.Convert(property, typeof(object));
                var lambda = Expression.Lambda<Func<TItem, object>>(convert, param);
                return lambda.Compile();
            }
            catch (ArgumentException)
            {
                // Property doesn't exist, return null getter
                return null;
            }
        });
    }

    private static object GetPropertyValue(TItem item, string propertyName)
    {
        var getter = GetPropertyGetter(propertyName);
        return getter?.Invoke(item);
    }

    private static Type GetPropertyType(string propertyName)
    {
        var propInfo = _propertyInfoCache.GetOrAdd(propertyName, key =>
            typeof(TItem).GetProperty(key));
        return propInfo?.PropertyType;
    }

    #endregion

    #region Selection

    private void UpdateSelection()
    {
        _selectedItems.Clear();
        
        if (MultiSelect && SelectedItems != null)
        {
            foreach (var item in SelectedItems)
            {
                _selectedItems.Add(item);
            }
        }
        else if (!MultiSelect && SelectedItem != null)
        {
            _selectedItems.Add(SelectedItem);
        }
    }

    private bool IsSelected(TItem item)
    {
        return _selectedItems.Contains(item);
    }

    private bool IsAllSelected()
    {
        var pagedItems = GetPagedItems().ToList();
        return pagedItems.Any() && pagedItems.All(item => _selectedItems.Contains(item));
    }

    private async Task OnSelectionChanged(TItem item, bool selected)
    {
        if (MultiSelect)
        {
            if (selected)
                _selectedItems.Add(item);
            else
                _selectedItems.Remove(item);

            await SelectedItemsChanged.InvokeAsync(_selectedItems.ToList());
        }
        else
        {
            _selectedItems.Clear();
            if (selected)
            {
                _selectedItems.Add(item);
                await SelectedItemChanged.InvokeAsync(item);
            }
            else
            {
                await SelectedItemChanged.InvokeAsync(default(TItem));
            }
        }
    }

    private async Task OnSelectAllChanged(ChangeEventArgs e)
    {
        var selected = (bool)e.Value;
        var pagedItems = GetPagedItems().ToList();

        if (selected)
        {
            foreach (var item in pagedItems)
            {
                _selectedItems.Add(item);
            }
        }
        else
        {
            foreach (var item in pagedItems)
            {
                _selectedItems.Remove(item);
            }
        }

        await SelectedItemsChanged.InvokeAsync(_selectedItems.ToList());
    }

    #endregion

    #region Sorting

    private async Task OnSort(string columnKey)
    {
        if (SortBy == columnKey)
        {
            SortDescending = !SortDescending;
            await SortDescendingChanged.InvokeAsync(SortDescending);
        }
        else
        {
            SortBy = columnKey;
            SortDescending = false;
            await SortByChanged.InvokeAsync(SortBy);
            await SortDescendingChanged.InvokeAsync(SortDescending);
        }

        ProcessItems();
    }

    private string GetSortClass(string columnKey)
    {
        if (SortBy != columnKey)
            return "";

        return SortDescending ? "table-header-active-sort table-sort-desc" : "table-header-active-sort table-sort-asc";
    }

    private string GetSortIcon(string columnKey)
    {
        if (SortBy != columnKey)
            return "unfold_more";

        return SortDescending ? "arrow_drop_down" : "arrow_drop_up";
    }

    #endregion

    #region Pagination

    private IEnumerable<TItem> GetPagedItems()
    {
        if (!ShowPagination)
            return _processedItems;

        return _processedItems
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize);
    }

    private int TotalPages => Math.Max(1, (int)Math.Ceiling(_processedItems.Count() / (double)PageSize));

    private int GetStartIndex()
    {
        if (!_processedItems.Any())
            return 0;
        return ((CurrentPage - 1) * PageSize) + 1;
    }

    private int GetEndIndex()
    {
        var endIndex = CurrentPage * PageSize;
        var totalCount = _processedItems.Count();
        return Math.Min(endIndex, totalCount);
    }

    private async Task OnPageSizeChanged(int newSize)
    {
        PageSize = newSize;
        CurrentPage = 1; // Reset to first page
        await PageSizeChanged.InvokeAsync(newSize);
        await CurrentPageChanged.InvokeAsync(CurrentPage);
        ProcessItems();
        StateHasChanged();
    }

    private async Task OnPageChanged(int newPage)
    {
        CurrentPage = Math.Max(1, Math.Min(newPage, TotalPages));
        await CurrentPageChanged.InvokeAsync(CurrentPage);
        StateHasChanged();
    }

    private async Task OnPageSizeChangedEvent(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newSize))
        {
            await OnPageSizeChanged(newSize);
            StateHasChanged();
        }
    }

    #endregion

    #region Event Handlers

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        _searchTerm = e.Value?.ToString() ?? "";
        CurrentPage = 1; // Reset to first page on search
        ProcessItems();
        await CurrentPageChanged.InvokeAsync(CurrentPage);
    }

    private void ToggleFilterPanel()
    {
        _filterPanelExpanded = !_filterPanelExpanded;
        StateHasChanged();
    }

    private void OnFilterApplied(object result)
    {
        if (result is FilterResult<TItem> filterResult)
        {
            _processedItems = filterResult.Data ?? _allData;
            CurrentPage = 1; // Reset to first page on filter
            StateHasChanged();
        }
    }

    private async Task OnRowClick(TItem item)
    {
        if (RowClickable && OnRowClicked.HasDelegate)
        {
            await OnRowClicked.InvokeAsync(item);
        }
    }

    private async Task ShowChartModal()
    {
        _chartModalReady = true;
        await Task.Delay(50); // Small delay to ensure DOM is ready
        _showChartModal = true;
        await InvokeAsync(StateHasChanged);
    }

    #endregion

    #region Styling

    private string GetContainerClasses()
    {
        var classes = new List<string> { "table-container", "w-full" };
        
        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);

        if (!string.IsNullOrEmpty(Height))
            classes.Add("table-fixed-height");

        if (Disabled)
            classes.Add("disabled");

        return string.Join(" ", classes);
    }

    private string GetTableClasses()
    {
        var classes = new List<string> { "table" };

        if (Hover)
            classes.Add("table-has-hover");

        if (Striped)
            classes.Add("table-striped");

        if (Bordered)
            classes.Add("table-bordered");

        classes.Add($"table-{Density.ToString().ToLower()}");

        return string.Join(" ", classes);
    }

    private string GetRowClass(TItem item)
    {
        var classes = new List<string>();

        if (IsSelected(item))
            classes.Add("table-row-selected");

        if (RowClickable)
            classes.Add("table-row-clickable");

        if (RowClass != null)
        {
            var customClass = RowClass(item);
            if (!string.IsNullOrEmpty(customClass))
                classes.Add(customClass);
        }

        return string.Join(" ", classes);
    }

    // Note: GetColumnStyle and GetScrollContainerStyle removed - use CSS classes instead
    
    private string GetFooterClass()
    {
        var classes = new List<string>();
        
        if (Density == DensityType.Dense)
            classes.Add("dense");
        else if (Density == DensityType.Spacious)
            classes.Add("comfortable");
            
        return string.Join(" ", classes);
    }

    #endregion

    #region Smart PageSize Options
    
    private void UpdatePageSizeOptions()
    {
        // If user explicitly provided PageSizeOptions, use them
        if (PageSizeOptions?.Any() == true)
        {
            _effectivePageSizeOptions = PageSizeOptions;
            return;
        }
        
        var totalCount = _processedItems.Count();
        
        var breakpoint = TableConstants.SmartPageSizeBreakpoints.FirstOrDefault(b => totalCount <= b.threshold);
        _effectivePageSizeOptions = breakpoint.options ?? TableConstants.DefaultPageSizeOptions;
        
        if (totalCount > TableConstants.SmartPageSizeBreakpoints[3].threshold) // > 1000 records
        {
            var options = _effectivePageSizeOptions.ToList();
            
            var smartOption = (int)Math.Round(totalCount * TableConstants.SmartOptionPercentage / TableConstants.SmartOptionRounding) * TableConstants.SmartOptionRounding;
            if (smartOption > options.Max() && smartOption <= TableConstants.MaxPageSize)
            {
                options.Add(smartOption);
            }
            
            if (totalCount > TableConstants.SmartPageSizeBreakpoints[4].threshold) // > 10K records
            {
                var log = Math.Log10(totalCount);
                var factor = (int)Math.Pow(10, Math.Floor(log - 1));
                
                var logOption = (factor / 100) * 100;
                if (logOption > options.Max() && logOption <= TableConstants.MaxPageSize)
                {
                    options.Add(logOption);
                }
            }
            
            _effectivePageSizeOptions = options.Distinct().OrderBy(x => x).Take(TableConstants.MaxSmartOptions).ToArray();
        }
        
        if (PageSize > 0 && !_effectivePageSizeOptions.Contains(PageSize))
        {
            var list = _effectivePageSizeOptions.ToList();
            list.Add(PageSize);
            _effectivePageSizeOptions = list.OrderBy(x => x).ToArray();
        }
        
        if (PageSize <= TableConstants.MinPageSize)
        {
            PageSize = _effectivePageSizeOptions.Length > 0 ? _effectivePageSizeOptions[0] : TableConstants.DefaultPageSize;
        }
    }
    
    #endregion

    #region Enhanced Features

    private string GetEnhancedTableClasses()
    {
        var classes = new List<string>();
        
        if (EnhancementsEnabled)
        {
            classes.Add("table-enhanced");
            
            if (EnhancementsConfig.SelectionConfig.Enabled)
                classes.Add("table-container-hover-enhanced");
                
            if (EnhancementsConfig.ResizeConfig.Enabled)
                classes.Add("table-resizable");
                
            if (EnhancementsConfig.StickyConfig.Enabled)
                classes.Add("table-sticky-enabled");
        }
        
        return string.Join(" ", classes);
    }

    private string GetEnhancedHeaderClasses(ColumnDefinition<TItem> column)
    {
        var classes = new List<string>();
        
        if (column.Resizable && EnhancementsConfig.ResizeConfig.Enabled)
            classes.Add("table-header-resizable");
            
        if (column.Sticky != StickyColumnType.None)
            classes.Add($"table-column-sticky-{column.Sticky.ToString().ToLower()}");
            
        return string.Join(" ", classes);
    }
    
    private object GetStickyColumnsConfig()
    {
        var stickyColumns = GetVisibleColumns()
            .Where(c => c.Sticky != StickyColumnType.None)
            .Select(c => new
            {
                key = c.Key,
                sticky = c.Sticky.ToString().ToLower(),
                order = c.StickyOrder,
                width = c.Width ?? c.MinWidth
            })
            .ToList();
            
        return new
        {
            enabled = EnhancementsConfig.StickyConfig.Enabled,
            columns = stickyColumns,
            hasCheckbox = Selectable
        };
    }

    private string GetEnhancedCellClasses(ColumnDefinition<TItem> column)
    {
        var classes = new List<string>();
        
        if (column.Sticky != StickyColumnType.None)
            classes.Add($"table-column-sticky-{column.Sticky.ToString().ToLower()}");
            
        return string.Join(" ", classes);
    }

    private string GetEnhancedRowClass(TItem item, int index)
    {
        var classes = new List<string> { GetRowClass(item) };
        
        if (Selectable && EnhancementsConfig.SelectionConfig.Enabled && IsSelected(item))
            classes.Add("table-row-selected-enhanced");
            
        return string.Join(" ", classes);
    }

    private RenderFragment GetEnhancedCellContent(ColumnDefinition<TItem> column, TItem item)
    {
        // First try the existing cell content
        var content = column.GetCellContent(item);
        if (content != null)
            return content;
            
        // If no content and universal templates are enabled, try universal template rendering
        return builder =>
        {
            var context = new UniversalTemplateContext<TItem>
            {
                Item = item,
                Column = column,
                IsSelected = IsSelected(item)
            };
            
            // Use column's universal template if available
            if (column.BadgeTemplate != null)
                column.BadgeTemplate.Render(item)(builder);
            else if (column.CurrencyTemplate != null)
                column.CurrencyTemplate.Render(item)(builder);
            else if (column.StackTemplate != null)
                column.StackTemplate.Render(item)(builder);
            else
            {
                // Fall back to standard rendering
                var value = column.GetValue(item);
                builder.AddContent(0, value?.ToString() ?? column.EmptyText);
            }
        };
    }

    private async Task HandleEnhancedRowClick(TItem item, int index)
    {
        // First handle the standard row click
        await OnRowClick(item);
        
        // Then handle enhanced row click if enabled
        if (OnEnhancedRowClick.HasDelegate)
        {
            var args = new RowClickEventArgs<TItem>
            {
                Item = item,
                Index = index,
                IsSelected = IsSelected(item),
                Timestamp = DateTime.UtcNow
            };
            
            await OnEnhancedRowClick.InvokeAsync(args);
        }
        
        // Handle row selection if enabled and selectable
        if (Selectable && EnhancementsConfig.SelectionConfig.RowClickSelection && !Disabled)
        {
            var isCurrentlySelected = IsSelected(item);
            await OnSelectionChanged(item, !isCurrentlySelected);
        }
    }

    private UniversalFilterConfig GetFilterConfig()
    {
        return new UniversalFilterConfig()
        {
            ShowSearch = true,
            ShowQuickFilters = true,
            ShowDateRange = false,
            ShowAdvancedPanel = true,
            ShowClearButton = true,
            ShowFilterCount = true
        };
    }

    private async Task OnDataFiltered(FilterResult<TItem> result)
    {
        // Update items with filtered data
        _processedItems = result.Data.ToList();
        
        // Update filter context
        _filterContext.FilteredCount = _processedItems.Count();
        _filterContext.TotalCount = Items?.Count() ?? 0;
        
        // Reset to first page if we have items but current page is invalid
        if (TotalPages > 0 && CurrentPage > TotalPages)
        {
            CurrentPage = 1;
        }
        StateHasChanged();
    }

    private async Task OnFilterPredicateChanged(object predicate)
    {
        // Handle predicate changes from RFilter
        ProcessItems();
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task ProcessDataAsync()
    {
        ProcessItems();
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task OnFilterCriteriaChanged(UniversalFilterCriteria<TItem> criteria)
    {
        _initialFilterCriteria = criteria;
        
        // Update filter context with extracted active filters
        _filterContext.ActiveFilters = ExtractActiveFilters(criteria);
        
        // The actual filtering is handled by OnDataFiltered
        await Task.CompletedTask;
    }
    
    private async Task OnFilterCriteriaChanged(object criteria)
    {
        if (criteria is UniversalFilterCriteria<TItem> typedCriteria)
        {
            await OnFilterCriteriaChanged(typedCriteria);
        }
    }

    private Dictionary<string, object> ExtractActiveFilters(UniversalFilterCriteria<TItem> criteria)
    {
        var filters = new Dictionary<string, object>();
        
        if (criteria != null)
        {
            if (!string.IsNullOrEmpty(criteria.SearchTerm))
                filters["SearchTerm"] = criteria.SearchTerm;
                
            if (criteria.DateFrom != null || criteria.DateTo != null)
                filters["DateRange"] = (criteria.DateFrom, criteria.DateTo);
                
            if (criteria.QuickFilters?.Any(qf => qf.IsActive) == true)
                filters["QuickFilters"] = criteria.QuickFilters.Where(qf => qf.IsActive);
                
            if (criteria.Filters?.Any() == true)
                filters["FieldFilters"] = criteria.Filters;
        }
        
        return filters;
    }

    private bool IsDefaultValue(object value)
    {
        if (value == null) return true;
        if (value is string str) return string.IsNullOrEmpty(str);
        if (value is DateTime date) return date == default;
        if (value is bool) return false; // bools are always significant
        if (value.GetType().IsValueType) return value.Equals(Activator.CreateInstance(value.GetType()));
        return false;
    }

    #endregion

    #region Cleanup

    public async ValueTask DisposeAsync()
    {
        // Unsubscribe from BindFilter if subscribed
        if (_lastBindFilter != null)
        {
            _lastBindFilter.OnFilterChanged -= OnBindFilterChanged;
        }
        
        // Dispose table scroll manager if initialized
        if (EnableHorizontalScroll)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("RRBlazor.TableScroll.dispose", TableId);
            }
            catch (Exception)
            {
                // Ignore disposal errors
            }
        }
        
        if (_jsModule != null)
        {
            try
            {
                await _jsModule.InvokeVoidAsync("cleanup", TableId);
                await _jsModule.DisposeAsync();
            }
            catch (Exception)
            {
                // Ignore disposal errors
            }
        }
    }

    #endregion
    
    #region IFilterable Implementation - SOLID Compliant Inverted Control
    
    /// <summary>
    /// Component applies the provided predicate to its own data
    /// This implements proper inverted control - filter provides predicate, component applies it
    /// </summary>
    public async Task ApplyPredicateAsync(Expression<Func<TItem, bool>>? predicate)
    {
        // This method is called when external code wants to apply a predicate
        // For RTable, we trigger a reprocess which will use BindFilter.GetPredicate()
        ProcessItems();
        await InvokeAsync(StateHasChanged);
    }
    
    /// <summary>
    /// Notifies component that bound filter state has changed
    /// Component reprocesses data using BindFilter.GetPredicate()
    /// </summary>
    public async Task OnFilterChangedAsync()
    {
        ProcessItems();
        await InvokeAsync(StateHasChanged);
    }
    
    /// <summary>
    /// Handle BindFilter change events - reprocess data when filter changes
    /// </summary>
    private async void OnBindFilterChanged(FilterStateChangedEventArgs args)
    {
        await OnFilterChangedAsync();
    }
    
    /// <summary>
    /// Non-generic IFilterable implementation
    /// </summary>
    async Task IFilterable.ApplyPredicateAsync(object predicate)
    {
        if (predicate is Expression<Func<TItem, bool>> typedPredicate)
        {
            await ApplyPredicateAsync(typedPredicate);
        }
    }
    
    /// <summary>
    /// Non-generic filter change handler
    /// </summary>
    async Task IFilterable.OnFilterChangedAsync() => await OnFilterChangedAsync();
    
    /// <summary>
    /// Apply filter to non-generic data
    /// </summary>
    async Task IFilterable.ApplyFilterAsync(object filteredData)
    {
        if (filteredData is IEnumerable<TItem> typedData)
        {
            await InvokeAsync(() =>
            {
                Items = typedData.ToList();
                StateHasChanged();
            });
        }
    }
    
    /// <summary>
    /// Get filterable data as non-generic enumerable
    /// </summary>
    IEnumerable<object> IFilterable.GetFilterableData() => Items.Cast<object>();
    
    /// <summary>
    /// Get strongly-typed filterable data
    /// </summary>
    IEnumerable<TItem> IFilterable<TItem>.GetTypedFilterableData() => Items;
    
    /// <summary>
    /// Get filterable field names
    /// </summary>
    IEnumerable<string> IFilterable.GetFilterableFields() => 
        typeof(TItem).GetProperties().Where(p => p.CanRead).Select(p => p.Name);
    
    #endregion

    #region Button Click Handlers
    
    private void OnSortClick(string columnKey)
    {
        Console.WriteLine($"SORT CLICK: {columnKey}");
        OnSort(columnKey);
    }
    
    #endregion
    
    #region Column Filter Methods

    private async Task OnFilterClick(string columnKey)
    {
        Console.WriteLine($"FILTER CLICK: {columnKey}");
        await HandleFilterClick(columnKey);
    }
    
    private async Task HandleFilterClick(string columnKey)
    {
        Console.WriteLine($"HandleFilterClick called with columnKey: {columnKey}");
        Console.WriteLine($"BEFORE: _openFilterColumn = '{_openFilterColumn}'");
        
        if (_openFilterColumn == columnKey)
        {
            OpenFilterColumn = null;
        }
        else  
        {
            OpenFilterColumn = columnKey;
        }
        
        Console.WriteLine($"AFTER: _openFilterColumn = '{_openFilterColumn}'");
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task ToggleColumnFilter(string columnKey)
    {
        if (_openFilterColumn == columnKey)
        {
            _openFilterColumn = null;
        }
        else
        {
            _openFilterColumn = columnKey;
            // Position dropdown after render
            StateHasChanged();
            await Task.Yield();
            await PositionFilterDropdown(columnKey);
        }
        StateHasChanged();
    }

    private async Task PositionFilterDropdown(string columnKey)
    {
        if (JSRuntime != null)
        {
            await JSRuntime.InvokeVoidAsync("eval", $@"
                (function() {{
                    const filterIcon = document.querySelector('[data-filter-column=""{columnKey}""]');
                    const dropdown = document.getElementById('filter-dropdown-{columnKey}');
                    if (filterIcon && dropdown) {{
                        const rect = filterIcon.getBoundingClientRect();
                        dropdown.style.top = (rect.bottom + 4) + 'px';
                        dropdown.style.left = Math.min(rect.left, window.innerWidth - 280) + 'px';
                        dropdown.style.position = 'fixed';
                        dropdown.style.zIndex = '10010';
                    }}
                }})();
            ");
        }
    }

    private int GetColumnFilterCount(string columnKey)
    {
        return _activeColumnFilters.TryGetValue(columnKey, out var filters) ? filters.Count : 0;
    }

    private List<string> GetColumnUniqueValues(string columnKey)
    {
        var column = GetVisibleColumns().FirstOrDefault(c => c.Key == columnKey);
        if (column == null) return new List<string>();

        var values = new HashSet<string>();
        foreach (var item in FilteredData)
        {
            var value = column.GetValue(item);
            if (value != null)
            {
                values.Add(value.ToString() ?? "");
            }
        }
        return values.OrderBy(v => v).ToList();
    }

    private void ApplyColumnFilter(string columnKey)
    {
        _openFilterColumn = null;
        ProcessItems();
        StateHasChanged();
    }

    private void ClearColumnFilter(string columnKey)
    {
        _activeColumnFilters.Remove(columnKey);
        _columnFilterSearchTerms.Remove(columnKey);
        _columnFilterValues.Remove(columnKey);
        _columnFilterOperators.Remove(columnKey);
        _columnFilterDates.Remove(columnKey);
        _openFilterColumn = null;
        ProcessItems();
        StateHasChanged();
    }

    private void UpdateColumnFilterSearch(string columnKey, string searchTerm)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            _columnFilterSearchTerms.Remove(columnKey);
        }
        else
        {
            _columnFilterSearchTerms[columnKey] = searchTerm;
        }
    }

    private void ToggleColumnFilterValue(string columnKey, string value, bool isChecked)
    {
        if (!_activeColumnFilters.TryGetValue(columnKey, out var filters))
        {
            filters = new HashSet<string>();
            _activeColumnFilters[columnKey] = filters;
        }

        if (isChecked)
        {
            filters.Add(value);
        }
        else
        {
            filters.Remove(value);
            if (filters.Count == 0)
            {
                _activeColumnFilters.Remove(columnKey);
            }
        }
    }

    private bool IsColumnValueSelected(string columnKey, string value)
    {
        return _activeColumnFilters.TryGetValue(columnKey, out var filters) && filters.Contains(value);
    }

    private bool IsValueSelected(string columnKey, string value)
    {
        return IsColumnValueSelected(columnKey, value);
    }

    private void ToggleColumnValue(string columnKey, string value, bool isChecked)
    {
        ToggleColumnFilterValue(columnKey, value, isChecked);
    }

    private void SelectAllColumnValues(string columnKey)
    {
        var values = GetColumnUniqueValues(columnKey);
        if (!_activeColumnFilters.TryGetValue(columnKey, out var filters))
        {
            filters = new HashSet<string>();
            _activeColumnFilters[columnKey] = filters;
        }
        filters.Clear();
        foreach (var value in values)
        {
            filters.Add(value);
        }
    }

    private void OnColumnFilterKeyUp(KeyboardEventArgs e, string columnKey)
    {
        if (e.Key == "Enter")
        {
            ApplyColumnFilter(columnKey);
        }
    }

    private string GetColumnFilterDate(string columnKey, bool isFrom)
    {
        var key = $"{columnKey}_{(isFrom ? "from" : "to")}";
        return _columnFilterDates.TryGetValue(key, out var date) && date.HasValue 
            ? date.Value.ToString("yyyy-MM-dd") 
            : string.Empty;
    }

    private void SetColumnFilterDate(string columnKey, bool isFrom, string? value)
    {
        var key = $"{columnKey}_{(isFrom ? "from" : "to")}";
        if (string.IsNullOrEmpty(value))
        {
            _columnFilterDates.Remove(key);
        }
        else if (DateTime.TryParse(value, out var date))
        {
            _columnFilterDates[key] = date;
        }
    }

    private Expression<Func<TItem, bool>> BuildColumnFilterPredicate()
    {
        if (!_activeColumnFilters.Any() && !_columnFilterSearchTerms.Any() && 
            !_columnFilterValues.Any() && !_columnFilterDates.Any())
        {
            return item => true;
        }

        var parameter = Expression.Parameter(typeof(TItem), "item");
        Expression? combinedExpression = null;

        foreach (var column in GetVisibleColumns().Where(c => c.Filterable))
        {
            Expression? columnExpression = null;

            // Handle checkbox filters
            if (_activeColumnFilters.TryGetValue(column.Key, out var selectedValues) && selectedValues.Any())
            {
                var property = Expression.Property(parameter, column.Key);
                Expression? valuesExpression = null;

                foreach (var value in selectedValues)
                {
                    var constant = Expression.Constant(value);
                    var toString = Expression.Call(property, "ToString", null);
                    var equals = Expression.Equal(toString, constant);
                    
                    valuesExpression = valuesExpression == null ? equals : 
                        Expression.OrElse(valuesExpression, equals);
                }

                columnExpression = valuesExpression;
            }

            // Handle search filters
            if (_columnFilterSearchTerms.TryGetValue(column.Key, out var searchTerm) && !string.IsNullOrWhiteSpace(searchTerm))
            {
                var property = Expression.Property(parameter, column.Key);
                var toString = Expression.Call(property, "ToString", null);
                var toLower = Expression.Call(toString, "ToLower", null);
                var searchConstant = Expression.Constant(searchTerm.ToLower());
                var contains = Expression.Call(toLower, "Contains", null, searchConstant);
                
                columnExpression = columnExpression == null ? contains : 
                    Expression.AndAlso(columnExpression, contains);
            }

            // Combine column expressions
            if (columnExpression != null)
            {
                combinedExpression = combinedExpression == null ? columnExpression :
                    (ColumnFilterLogic == FilterLogic.And ? 
                        Expression.AndAlso(combinedExpression, columnExpression) :
                        Expression.OrElse(combinedExpression, columnExpression));
            }
        }

        if (combinedExpression == null)
        {
            return item => true;
        }

        return Expression.Lambda<Func<TItem, bool>>(combinedExpression, parameter);
    }

    #endregion
    
}