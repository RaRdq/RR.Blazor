@* RVirtualList - High-performance virtualized list component using Blazor Virtualize *@
@typeparam T
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using System.Collections.Generic
@inject IJSRuntime JS

<div class="@GetContainerClasses() virtual-container" style="--container-height: @(ContainerHeight)px;">
    @if (Loading && Items.Count == 0)
    {
        <div class="flex flex-col justify-center items-center pa-8">
            @if (LoadingTemplate != null)
            {
                @LoadingTemplate
            }
            else
            {
                <div class="flex flex-col gap-3 w-full">
                    @for (int i = 0; i < SkeletonCount; i++)
                    {
                        <RSkeleton Height="@SkeletonHeight" />
                    }
                </div>
            }
        </div>
    }
    else if (Items.Count == 0 && !Loading)
    {
        <div class="flex justify-center items-center pa-8">
            @if (EmptyTemplate != null)
            {
                @EmptyTemplate
            }
            else
            {
                <REmptyState Text="No items" Description="No items to display" />
            }
        </div>
    }
    else
    {
        <Virtualize Items="@Items" 
                   ItemSize="@ItemHeight" 
                   Context="item"
                   OverscanCount="@BufferSize">
            <ItemContent>
                <div class="@GetItemClasses() virtual-item" style="--item-height: @(ItemHeight)px;">
                    @ItemTemplate(item)
                </div>
            </ItemContent>
            <Placeholder>
                <div class="@GetItemClasses() virtual-item" style="--item-height: @(ItemHeight)px;">
                    <RSkeleton Height="@SkeletonHeight" />
                </div>
            </Placeholder>
        </Virtualize>
        
        @if (HasMoreItems)
        {
            <div class="text-center pa-4 @GetLoadMoreClasses()">
                @if (isLoadingMore)
                {
                    @if (LoadingMoreTemplate != null)
                    {
                        @LoadingMoreTemplate
                    }
                    else
                    {
                        <div class="flex flex-col gap-2">
                            <RSkeleton Height="40px" />
                            <RSkeleton Height="40px" />
                        </div>
                    }
                }
                else
                {
                    @if (LoadMoreTemplate != null)
                    {
                        @LoadMoreTemplate
                    }
                    else if (AutoLoadMore)
                    {
                        <div @ref="loadMoreTrigger" class="load-more-trigger">
                            <RSkeleton Height="40px" />
                        </div>
                    }
                    else
                    {
                        <RButton Text="Load More" 
                                Variant="ButtonVariant.Outline"
                                Icon="expand_more"
                                OnClick="LoadMoreAsync" />
                    }
                }
            </div>
        }
    }
</div>

@code {
    /// <summary>Items to display in the virtual list</summary>
    [Parameter] public List<T> Items { get; set; } = new();
    
    /// <summary>Template for rendering each item</summary>
    [Parameter] public RenderFragment<T> ItemTemplate { get; set; }
    
    /// <summary>Template for loading state</summary>
    [Parameter] public RenderFragment LoadingTemplate { get; set; }
    
    /// <summary>Template for empty state</summary>
    [Parameter] public RenderFragment EmptyTemplate { get; set; }
    
    /// <summary>Template for load more button</summary>
    [Parameter] public RenderFragment LoadMoreTemplate { get; set; }
    
    /// <summary>Template for loading more items</summary>
    [Parameter] public RenderFragment LoadingMoreTemplate { get; set; }
    
    /// <summary>Height of each item in pixels</summary>
    [Parameter] public int ItemHeight { get; set; } = 120;
    
    /// <summary>Height of the container in pixels</summary>
    [Parameter] public int ContainerHeight { get; set; } = 400;
    
    /// <summary>Whether there are more items to load</summary>
    [Parameter] public bool HasMoreItems { get; set; } = true;
    
    /// <summary>Whether currently loading initial items</summary>
    [Parameter] public bool Loading { get; set; } = false;
    
    /// <summary>Number of skeleton items to show when loading</summary>
    [Parameter] public int SkeletonCount { get; set; } = 3;
    
    /// <summary>Height of skeleton items</summary>
    [Parameter] public string SkeletonHeight { get; set; } = "120px";
    
    /// <summary>Callback when more items need to be loaded</summary>
    [Parameter] public EventCallback OnLoadMore { get; set; }
    
    /// <summary>Additional CSS classes</summary>
    [Parameter] public string Class { get; set; }
    
    /// <summary>Buffer size for items outside visible area</summary>
    [Parameter] public int BufferSize { get; set; } = 5;
    
    /// <summary>Auto-load more when scrolling near bottom</summary>
    [Parameter] public bool AutoLoadMore { get; set; } = true;
    
    /// <summary>Size variant for spacing</summary>
    [Parameter] public string Size { get; set; } = "default"; // compact, default, spacious
    
    /// <summary>Additional HTML attributes</summary>
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> AdditionalAttributes { get; set; }
    
    private ElementReference loadMoreTrigger;
    private IJSObjectReference intersectionObserver;
    private bool isLoadingMore = false;
    private bool observerInitialized = false;
    
    private string GetContainerClasses()
    {
        var classes = new List<string> { "list" };
        
        if (Size == "compact")
            classes.Add("list-compact");
        else if (Size == "spacious") 
            classes.Add("list-spacious");
            
        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);
            
        return string.Join(" ", classes);
    }
    
    private string GetItemClasses()
    {
        var classes = new List<string> { "list-item" };
        
        if (Size == "compact")
            classes.Add("mb-1");
        else if (Size == "spacious")
            classes.Add("mb-4");
        else
            classes.Add("mb-2");
            
        return string.Join(" ", classes);
    }
    
    private string GetLoadMoreClasses()
    {
        var classes = new List<string>();
        
        if (AutoLoadMore)
        {
            classes.Add("load-more-sticky");
        }
        
        return string.Join(" ", classes);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && AutoLoadMore && HasMoreItems)
        {
            await InitializeIntersectionObserver();
        }
    }
    
    private async Task InitializeIntersectionObserver()
    {
        if (observerInitialized) return;
        
        try
        {
            var module = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/RR.Blazor/js/intersection-observer.js");
            
            await module.InvokeVoidAsync("observe", 
                loadMoreTrigger, 
                DotNetObjectReference.Create(this),
                new { rootMargin = "100px" });
                
            intersectionObserver = module;
            observerInitialized = true;
        }
        catch (Exception ex)
        {

        }
    }
    
    [JSInvokable]
    public async Task OnIntersectionChanged(bool isIntersecting)
    {
        if (isIntersecting && HasMoreItems && !isLoadingMore && AutoLoadMore)
        {
            await LoadMoreAsync();
        }
    }
    
    private async Task LoadMoreAsync()
    {
        if (isLoadingMore || !HasMoreItems) return;
        
        isLoadingMore = true;
        
        try
        {
            await OnLoadMore.InvokeAsync();
        }
        catch (Exception ex)
        {

        }
        finally
        {
            isLoadingMore = false;
        }
    }
    
    /// <summary>Refresh the virtual list after items change</summary>
    public void Refresh()
    {
        InvokeAsync(StateHasChanged);
    }
    
    /// <summary>Reset loading state (call after adding new items)</summary>
    public void ResetLoadingState()
    {
        isLoadingMore = false;
        InvokeAsync(StateHasChanged);
    }
    
    public async ValueTask DisposeAsync()
    {
        if (intersectionObserver != null)
        {
            try
            {
                await intersectionObserver.InvokeVoidAsync("disconnect");
                await intersectionObserver.DisposeAsync();
            }
            catch (Exception)
            {

            }
        }
    }
}