@* RList - Professional list container component *@
@using RR.Blazor.Enums
@using RR.Blazor.Components.Base
@inherits RForwardingComponentBase

<CascadingValue Value="Variant" Name="ParentListVariant">
    <div class="@GetListClasses()" @attributes="GetSafeAttributes()">
        @if (!string.IsNullOrEmpty(Title) && Variant == ListVariant.Menu)
        {
            <div class="menu-list-header">@Title</div>
        }
        @ChildContent
    </div>
</CascadingValue>

@code {
    /// <summary>List title (for menu variant)</summary>
    [Parameter] public string Title { get; set; }
    
    /// <summary>List size variant</summary>
    [Parameter] public SizeType Size { get; set; } = SizeType.Default;
    
    // Density inherited from RForwardingComponentBase
    
    /// <summary>List layout variant</summary>
    [Parameter] public ListLayout Layout { get; set; } = ListLayout.Vertical;
    
    /// <summary>Whether to show dividers between items</summary>
    [Parameter] public bool Divided { get; set; }
    
    /// <summary>List style variant</summary>
    [Parameter] public ListVariant Variant { get; set; } = ListVariant.Default;
    
    // Class and ChildContent inherited from RForwardingComponentBase
    
    private string GetListClasses()
    {
        var classes = new List<string>();
        

        classes.Add(Variant switch
        {
            ListVariant.Menu => "menu-list",
            ListVariant.Avatar => "avatar-list",
            ListVariant.Content => "content-list",
            _ => "list"
        });
        

        if (Size != SizeType.Default)
        {
            classes.Add(Size switch
            {
                SizeType.Compact => "list-compact",
                SizeType.Spacious => "list-spacious",
                SizeType.Loose => "list-loose",
                _ => ""
            });
        }
        

        classes.Add(GetDensityClasses());
        

        if (Layout == ListLayout.Horizontal)
        {
            classes.Add("list-horizontal");
        }
        else if (Layout == ListLayout.Grid && Variant == ListVariant.Content)
        {
            classes.Add("content-list-grid");
        }
        else if (Layout == ListLayout.Cards && Variant == ListVariant.Content)
        {
            classes.Add("content-list-cards");
        }
        

        if (Divided)
        {
            classes.Add("list-divided");
        }
        

        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }

    protected override string GetDensityClasses()
    {
        return Density switch
        {
            DensityType.Compact => "gap-1 pt-1 pb-1",
            DensityType.Dense => "gap-2 pt-2 pb-2",
            DensityType.Normal => "gap-3 pt-3 pb-3",
            DensityType.Spacious => "gap-4 pt-4 pb-4",
            _ => "gap-3 pt-3 pb-3"
        };
    }
}

@* Usage Examples:

<!-- Basic list -->
<RList>
    <RListItem Text="Item 1" Subtitle="Description 1" />
    <RListItem Text="Item 2" Subtitle="Description 2" />
</RList>

<!-- Menu list with title -->
<RList Variant="ListVariant.Menu" Header="Navigation">
    <RListItem Text="Dashboard" Icon="dashboard" />
    <RListItem Text="Settings" Icon="settings" />
    <RDivider />
    <RListItem Text="Logout" Icon="logout" ItemVariant="ListItemVariant.Error" />
</RList>

<!-- Avatar list -->
<RList Variant="ListVariant.Avatar">
    <RListItem Text="John Doe" Subtitle="Admin" AvatarText="JD" />
    <RListItem Text="Jane Smith" Subtitle="User" AvatarText="JS" />
</RList>

<!-- Content grid -->
<RList Variant="ListVariant.Content" Layout="ListLayout.Grid">
    <RListItem Text="Card 1" ItemVariant="ListItemVariant.Card" />
    <RListItem Text="Card 2" ItemVariant="ListItemVariant.Card" />
</RList>
*@