@using RR.Blazor.Enums
@using RR.Blazor.Components.Base
@inherits RForwardingComponentBase
@* RListItem - Professional list item component *@

@if (Clickable || OnClick.HasDelegate)
{
    <button class="@GetItemClasses()" 
            type="button" 
            @onclick="HandleClick" 
            disabled="@Disabled"
            aria-label="@Text"
            @attributes="GetSafeAttributes()">
    @if (!string.IsNullOrEmpty(Icon) && IconPosition == IconPosition.Start || !string.IsNullOrEmpty(AvatarText) || AvatarContent != null)
    {
        <div class="@GetIconClasses()">
            @if (!string.IsNullOrEmpty(AvatarText))
            {
                @AvatarText
            }
            else if (AvatarContent != null)
            {
                @AvatarContent
            }
            else if (!string.IsNullOrEmpty(Icon) && IconPosition == IconPosition.Start)
            {
                <i class="icon">@Icon</i>
            }
        </div>
    }
    
    <div class="@GetContentClasses()">
        @if (!string.IsNullOrEmpty(Text))
        {
            <h4 class="@GetTitleClasses() d-flex items-center">@Text</h4>
        }
        
        @if (!string.IsNullOrEmpty(Subtitle))
        {
            <p class="@GetSubtitleClasses() d-flex items-center">@Subtitle</p>
        }
        
        @if (!string.IsNullOrEmpty(Description))
        {
            <p class="text-sm text-muted d-flex items-center">@Description</p>
        }
        
        @if (MetaContent != null || !string.IsNullOrEmpty(MetaText))
        {
            <div class="text-xs text-muted d-flex items-center">
                @if (!string.IsNullOrEmpty(MetaText))
                {
                    @MetaText
                }
                @MetaContent
            </div>
        }
        
        @ChildContent
    </div>
    
    @if (BadgeContent != null || !string.IsNullOrEmpty(BadgeText))
    {
        <div class="ml-auto d-flex items-center">
            @if (!string.IsNullOrEmpty(BadgeText))
            {
                <RChip Text="@BadgeText" StyleVariant="ChipStyle.Badge" Variant="@BadgeVariant" />
            }
            else
            {
                @BadgeContent
            }
        </div>
    }
    
    @if (Actions != null)
    {
        <div class="action-group d-flex items-center gap-2">
            @Actions
        </div>
    }
    
    @if (!string.IsNullOrEmpty(Icon) && IconPosition == IconPosition.End)
    {
        <i class="icon text-muted d-flex items-center">@Icon</i>
    }
    </button>
}
else
{
    <div class="@GetItemClasses()" @attributes="GetSafeAttributes()">
        @if (!string.IsNullOrEmpty(Icon) && IconPosition == IconPosition.Start || !string.IsNullOrEmpty(AvatarText) || AvatarContent != null)
        {
            <div class="@GetIconClasses()">
                @if (!string.IsNullOrEmpty(AvatarText))
                {
                    @AvatarText
                }
                else if (AvatarContent != null)
                {
                    @AvatarContent
                }
                else if (!string.IsNullOrEmpty(Icon) && IconPosition == IconPosition.Start)
                {
                    <i class="icon">@Icon</i>
                }
            </div>
        }
        
        <div class="@GetContentClasses()">
            @if (!string.IsNullOrEmpty(Text))
            {
                <h4 class="@GetTitleClasses() d-flex items-center">@Text</h4>
            }
            
            @if (!string.IsNullOrEmpty(Subtitle))
            {
                <p class="@GetSubtitleClasses() d-flex items-center">@Subtitle</p>
            }
            
            @if (!string.IsNullOrEmpty(Description))
            {
                <p class="text-sm text-muted d-flex items-center">@Description</p>
            }
            
            @if (MetaContent != null || !string.IsNullOrEmpty(MetaText))
            {
                <div class="text-xs text-muted d-flex items-center">
                    @if (!string.IsNullOrEmpty(MetaText))
                    {
                        @MetaText
                    }
                    @MetaContent
                </div>
            }
            
            @ChildContent
        </div>
        
        @if (BadgeContent != null || !string.IsNullOrEmpty(BadgeText))
        {
            <div class="ml-auto d-flex items-center">
                @if (!string.IsNullOrEmpty(BadgeText))
                {
                    <RChip Text="@BadgeText" StyleVariant="ChipStyle.Badge" Variant="@BadgeVariant" />
                }
                else
                {
                    @BadgeContent
                }
            </div>
        }
        
        @if (Actions != null)
        {
            <div class="action-group d-flex items-center gap-2">
                @Actions
            </div>
        }
        
        @if (!string.IsNullOrEmpty(Icon) && IconPosition == IconPosition.End)
        {
            <i class="icon text-muted d-flex items-center">@Icon</i>
        }
    </div>
}

@code {
    /// <summary>Primary text content (standardized parameter)</summary>
    [Parameter] public string Text { get; set; }
    
    /// <summary>Item subtitle</summary>
    [Parameter] public string Subtitle { get; set; }
    
    /// <summary>Item description</summary>
    [Parameter] public string Description { get; set; }
    
    /// <summary>Meta text</summary>
    [Parameter] public string MetaText { get; set; }
    
    /// <summary>Icon</summary>
    [Parameter] public string Icon { get; set; }
    
    /// <summary>Icon position</summary>
    [Parameter] public IconPosition IconPosition { get; set; } = IconPosition.Start;
    
    /// <summary>Avatar text (for avatar lists)</summary>
    [Parameter] public string AvatarText { get; set; }
    
    /// <summary>Badge text</summary>
    [Parameter] public string BadgeText { get; set; }
    
    /// <summary>Badge variant</summary>
    [Parameter] public VariantType BadgeVariant { get; set; } = VariantType.Primary;
    
    /// <summary>Whether item is clickable</summary>
    [Parameter] public bool Clickable { get; set; }
    
    /// <summary>Whether item is active/selected</summary>
    [Parameter] public bool Active { get; set; }
    
    // Disabled inherited from RForwardingComponentBase
    
    /// <summary>Item style variant</summary>
    [Parameter] public ListItemVariant ItemVariant { get; set; } = ListItemVariant.Default;
    
    /// <summary>Icon color variant</summary>
    [Parameter] public string IconVariant { get; set; }
    
    /// <summary>Icon size</summary>
    [Parameter] public SizeType IconSize { get; set; } = SizeType.Medium;
    
    // Class and ChildContent inherited from RForwardingComponentBase
    
    /// <summary>Avatar content</summary>
    [Parameter] public RenderFragment AvatarContent { get; set; }
    
    /// <summary>Meta content</summary>
    [Parameter] public RenderFragment MetaContent { get; set; }
    
    /// <summary>Badge content</summary>
    [Parameter] public RenderFragment BadgeContent { get; set; }
    
    /// <summary>Action buttons</summary>
    [Parameter] public RenderFragment Actions { get; set; }
    
    /// <summary>Click event handler</summary>
    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
    
    /// <summary>Parent list variant (cascaded)</summary>
    [CascadingParameter(Name = "ParentListVariant")] private ListVariant? ParentListVariant { get; set; }
    
    private string GetItemClasses()
    {
        var classes = new List<string>();
        

        if (ParentListVariant == ListVariant.Menu)
        {
            classes.Add("menu-list-item");
        }
        else if (ParentListVariant == ListVariant.Avatar)
        {
            classes.Add("avatar-list-item");
        }
        else
        {
            classes.Add("list-item");
        }
        

        if (ItemVariant != ListItemVariant.Default)
        {
            classes.Add($"list-item-{ItemVariant.ToString().ToLower()}");
        }
        

        if (Active)
        {
            classes.Add(ParentListVariant == ListVariant.Menu ? "menu-list-item-active" : "list-item-active");
        }
        
        if (Clickable || OnClick.HasDelegate)
        {
            classes.Add("list-item-clickable");
        }
        
        if (Disabled)
        {
            classes.Add(ParentListVariant == ListVariant.Menu ? "menu-list-item-disabled" : "list-item-disabled");
        }
        

        if (ParentListVariant == ListVariant.Menu && ItemVariant == ListItemVariant.Error)
        {
            classes.Add("menu-list-item-error");
        }
        

        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetIconClasses()
    {
        var classes = new List<string>();
        
        if (!string.IsNullOrEmpty(AvatarText) && ParentListVariant == ListVariant.Avatar)
        {
            classes.Add("avatar");
        }
        else
        {
            classes.Add("list-icon");
            

            if (!string.IsNullOrEmpty(IconVariant))
            {
                classes.Add($"list-icon-{IconVariant}");
            }
            

            classes.Add(IconSize switch
            {
                SizeType.Small => "list-icon-small",
                SizeType.Large => "list-icon-large",
                _ => ""
            });
        }
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }
    
    private string GetContentClasses()
    {
        return ParentListVariant == ListVariant.Avatar ? "avatar-list-content" : "list-content";
    }
    
    private string GetTitleClasses()
    {
        return ParentListVariant == ListVariant.Avatar ? "avatar-list-name" : "list-title";
    }
    
    private string GetSubtitleClasses()
    {
        return ParentListVariant == ListVariant.Avatar ? "avatar-list-role" : "list-subtitle";
    }
    
    private async Task HandleClick(MouseEventArgs e)
    {
        if (!Disabled && OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync(e);
        }
    }
}

@* Usage Examples:

<!-- Basic list item -->
<RListItem Text="Dashboard" 
           SubText="View your analytics" 
           Icon="dashboard" />

<!-- Clickable item with actions -->
<RListItem Text="John Doe" 
           SubText="john@example.com"
           Clickable="true"
           OnClick="@HandleItemClick">
    <Actions>
        <RButton Variant="VariantType.Secondary" Icon="edit" IconPosition="IconPosition.Start" Size="SizeType.Small" />
        <RButton Variant="VariantType.Secondary" Icon="delete" IconPosition="IconPosition.Start" Size="SizeType.Small" />
    </Actions>
</RListItem>

<!-- Avatar list item -->
<RListItem Text="Jane Smith" 
           SubText="Admin"
           AvatarText="JS"
           BadgeText="Active" />

<!-- Card variant -->
<RListItem Text="Project Alpha" 
           Description="Main development project"
           ItemVariant="ListItemVariant.Card"
           MetaText="Updated 2 hours ago" />

<!-- Backward compatibility: Title parameter still works -->
<RListItem Text="Legacy Usage" 
           Subtitle="Still supported but deprecated" 
           Icon="warning" />
*@