@using RR.Blazor.Enums
@using RR.Blazor.Models
@using Microsoft.AspNetCore.Components.Rendering
@using System.Globalization
@inherits RFilterBase<decimal?>

@code {
    [Parameter] public decimal? MinValue { get; set; }
    [Parameter] public decimal? MaxValue { get; set; }
    [Parameter] public decimal? Step { get; set; } = 1;
    [Parameter] public int DecimalPlaces { get; set; } = 2;
    [Parameter] public string? Format { get; set; }
    
    protected override FilterType FilterType => FilterType.Number;
    
    protected override List<FilterOperator> AvailableOperators => new()
    {
        FilterOperator.Equals,
        FilterOperator.NotEquals,
        FilterOperator.GreaterThan,
        FilterOperator.LessThan,
        FilterOperator.GreaterThanOrEqual,
        FilterOperator.LessThanOrEqual,
        FilterOperator.Between,
        FilterOperator.NotBetween,
        FilterOperator.IsEmpty,
        FilterOperator.IsNotEmpty
    };
    
    protected override void RenderFilterInput(RenderTreeBuilder builder)
    {
        var sequence = 50;
        
        if (RequiresNoValue())
        {
            RenderNoValuePlaceholder(builder, sequence);
        }
        else if (RequiresSecondValue())
        {
            RenderRangeInputs(builder, sequence);
        }
        else
        {
            RenderSingleInput(builder, sequence);
        }
    }
    
    private void RenderNoValuePlaceholder(RenderTreeBuilder builder, int sequence)
    {
        builder.OpenElement(sequence++, "input");
        builder.AddAttribute(sequence++, "type", "text");
        builder.AddAttribute(sequence++, "class", GetInputClasses());
        builder.AddAttribute(sequence++, "value", GetNoValuePlaceholder());
        builder.AddAttribute(sequence++, "disabled", true);
        builder.AddAttribute(sequence++, "readonly", true);
        builder.CloseElement();
    }
    
    private void RenderSingleInput(RenderTreeBuilder builder, int sequence)
    {
        builder.OpenElement(sequence++, "input");
        builder.AddAttribute(sequence++, "type", "number");
        builder.AddAttribute(sequence++, "class", GetInputClasses());
        builder.AddAttribute(sequence++, "value", FormatValue(Value));
        builder.AddAttribute(sequence++, "placeholder", Placeholder ?? GetDefaultPlaceholder());
        builder.AddAttribute(sequence++, "disabled", Disabled);
        
        if (MinValue.HasValue)
            builder.AddAttribute(sequence++, "min", MinValue.Value);
        if (MaxValue.HasValue)
            builder.AddAttribute(sequence++, "max", MaxValue.Value);
        if (Step.HasValue)
            builder.AddAttribute(sequence++, "step", Step.Value);
            
        builder.AddAttribute(sequence++, "oninput", EventCallback.Factory.Create<ChangeEventArgs>(
            this, async args => await HandleNumericInput(args, true)));
        builder.CloseElement();
    }
    
    private void RenderRangeInputs(RenderTreeBuilder builder, int sequence)
    {
        // Container for range inputs
        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "d-flex items-center gap-2");
        
        // First input
        builder.OpenElement(sequence++, "input");
        builder.AddAttribute(sequence++, "type", "number");
        builder.AddAttribute(sequence++, "class", GetInputClasses());
        builder.AddAttribute(sequence++, "value", FormatValue(Value));
        builder.AddAttribute(sequence++, "placeholder", "From");
        builder.AddAttribute(sequence++, "disabled", Disabled);
        
        if (MinValue.HasValue)
            builder.AddAttribute(sequence++, "min", MinValue.Value);
        if (MaxValue.HasValue)
            builder.AddAttribute(sequence++, "max", MaxValue.Value);
        if (Step.HasValue)
            builder.AddAttribute(sequence++, "step", Step.Value);
            
        builder.AddAttribute(sequence++, "oninput", EventCallback.Factory.Create<ChangeEventArgs>(
            this, async args => await HandleNumericInput(args, true)));
        builder.CloseElement();
        
        // Separator
        builder.OpenElement(sequence++, "span");
        builder.AddAttribute(sequence++, "class", "text-secondary text-sm");
        builder.AddContent(sequence++, "to");
        builder.CloseElement();
        
        // Second input
        builder.OpenElement(sequence++, "input");
        builder.AddAttribute(sequence++, "type", "number");
        builder.AddAttribute(sequence++, "class", GetInputClasses());
        builder.AddAttribute(sequence++, "value", FormatValue(SecondValue));
        builder.AddAttribute(sequence++, "placeholder", "To");
        builder.AddAttribute(sequence++, "disabled", Disabled);
        
        if (MinValue.HasValue)
            builder.AddAttribute(sequence++, "min", MinValue.Value);
        if (MaxValue.HasValue)
            builder.AddAttribute(sequence++, "max", MaxValue.Value);
        if (Step.HasValue)
            builder.AddAttribute(sequence++, "step", Step.Value);
            
        builder.AddAttribute(sequence++, "oninput", EventCallback.Factory.Create<ChangeEventArgs>(
            this, async args => await HandleNumericInput(args, false)));
        builder.CloseElement();
        
        builder.CloseElement(); // range container
    }
    
    private string GetInputClasses()
    {
        var classes = new List<string>
        {
            "filter-input",
            "form-input",
            "border",
            "border-border",
            "rounded",
            "px-3",
            "py-1",
            "bg-surface",
            "text-foreground",
            "focus:border-primary",
            "focus:ring-1",
            "focus:ring-primary/20",
            "transition-colors",
            "text-right" // Numbers look better right-aligned
        };
        
        classes.Add(Density switch
        {
            DensityType.Compact => "text-xs px-2 py-0.5 w-20",
            DensityType.Dense => "text-sm px-2 py-1 w-24",
            DensityType.Spacious => "text-base px-4 py-2 w-32",
            _ => "text-sm px-3 py-1 w-28"
        });
        
        if (Disabled)
        {
            classes.Add("opacity-60");
            classes.Add("cursor-not-allowed");
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetDefaultPlaceholder() => Operator switch
    {
        FilterOperator.Equals => "Enter exact value...",
        FilterOperator.NotEquals => "Enter value to exclude...",
        FilterOperator.GreaterThan => "Enter minimum value...",
        FilterOperator.LessThan => "Enter maximum value...",
        FilterOperator.GreaterThanOrEqual => "Enter minimum value...",
        FilterOperator.LessThanOrEqual => "Enter maximum value...",
        _ => "Enter number..."
    };
    
    private string GetNoValuePlaceholder() => Operator switch
    {
        FilterOperator.IsEmpty => "Will show empty values",
        FilterOperator.IsNotEmpty => "Will show non-empty values",
        _ => ""
    };
    
    private string? FormatValue(decimal? value)
    {
        if (!value.HasValue) return null;
        
        if (!string.IsNullOrEmpty(Format))
        {
            try
            {
                return value.Value.ToString(Format);
            }
            catch
            {
                // Fall back to default formatting
            }
        }
        
        return DecimalPlaces > 0 
            ? Math.Round(value.Value, DecimalPlaces).ToString($"F{DecimalPlaces}")
            : value.Value.ToString("F0");
    }
    
    private async Task HandleNumericInput(ChangeEventArgs args, bool isFirstValue)
    {
        var stringValue = args.Value?.ToString();
        decimal? numericValue = null;
        
        if (!string.IsNullOrEmpty(stringValue) && 
            decimal.TryParse(stringValue, NumberStyles.Number, CultureInfo.InvariantCulture, out var parsed))
        {
            numericValue = parsed;
            
            // Apply min/max constraints
            if (MinValue.HasValue && numericValue < MinValue.Value)
                numericValue = MinValue.Value;
            if (MaxValue.HasValue && numericValue > MaxValue.Value)
                numericValue = MaxValue.Value;
        }
        
        if (isFirstValue)
        {
            await HandleValueChange(numericValue);
        }
        else
        {
            await HandleSecondValueChange(numericValue);
        }
    }
}