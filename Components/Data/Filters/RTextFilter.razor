@using RR.Blazor.Enums
@using RR.Blazor.Models
@using Microsoft.AspNetCore.Components.Rendering
@inherits RFilterBase<string>

@code {
    protected override FilterType FilterType => FilterType.Text;
    
    protected override List<FilterOperator> AvailableOperators => new()
    {
        FilterOperator.Contains,
        FilterOperator.StartsWith,
        FilterOperator.EndsWith,
        FilterOperator.Equals,
        FilterOperator.NotEquals,
        FilterOperator.IsEmpty,
        FilterOperator.IsNotEmpty
    };
    
    protected override void RenderFilterInput(RenderTreeBuilder builder)
    {
        var sequence = 50;
        
        if (RequiresNoValue())
        {
            // Show a disabled placeholder for operators that don't need input
            builder.OpenElement(sequence++, "input");
            builder.AddAttribute(sequence++, "type", "text");
            builder.AddAttribute(sequence++, "class", GetInputClasses());
            builder.AddAttribute(sequence++, "value", GetNoValuePlaceholder());
            builder.AddAttribute(sequence++, "disabled", true);
            builder.AddAttribute(sequence++, "readonly", true);
            builder.CloseElement();
        }
        else
        {
            // Regular text input
            builder.OpenElement(sequence++, "input");
            builder.AddAttribute(sequence++, "type", "text");
            builder.AddAttribute(sequence++, "class", GetInputClasses());
            builder.AddAttribute(sequence++, "value", Value ?? "");
            builder.AddAttribute(sequence++, "placeholder", Placeholder ?? GetDefaultPlaceholder());
            builder.AddAttribute(sequence++, "disabled", Disabled);
            builder.AddAttribute(sequence++, "oninput", EventCallback.Factory.Create<ChangeEventArgs>(
                this, async args => await HandleValueChange(args.Value?.ToString())));
            builder.CloseElement();
        }
    }
    
    private string GetInputClasses()
    {
        var classes = new List<string>
        {
            "filter-input",
            "form-input",
            "border",
            "border-border",
            "rounded",
            "px-3",
            "py-1",
            "bg-surface",
            "text-foreground",
            "focus:border-primary",
            "focus:ring-1",
            "focus:ring-primary/20",
            "transition-colors"
        };
        
        classes.Add(Density switch
        {
            ComponentDensity.Compact => "text-xs px-2 py-0.5",
            ComponentDensity.Dense => "text-sm px-2 py-1",
            ComponentDensity.Spacious => "text-base px-4 py-2",
            _ => "text-sm px-3 py-1"
        });
        
        if (Disabled)
        {
            classes.Add("opacity-60");
            classes.Add("cursor-not-allowed");
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetDefaultPlaceholder() => Operator switch
    {
        FilterOperator.Contains => "Enter text to search for...",
        FilterOperator.StartsWith => "Enter beginning text...",
        FilterOperator.EndsWith => "Enter ending text...",
        FilterOperator.Equals => "Enter exact text...",
        FilterOperator.NotEquals => "Enter text to exclude...",
        _ => "Enter text..."
    };
    
    private string GetNoValuePlaceholder() => Operator switch
    {
        FilterOperator.IsEmpty => "Will show empty values",
        FilterOperator.IsNotEmpty => "Will show non-empty values",
        _ => ""
    };
}