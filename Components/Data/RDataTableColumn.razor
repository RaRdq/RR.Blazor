@* RDataTableColumn - Column definition for RDataTable *@
@typeparam TItem
@implements IDisposable

<th class="pa-3 text-left font-semibold text-primary text-sm @(Sortable ? "cursor-pointer hover:bg-secondary transition-colors" : "") @HeaderClass"
    style="@GetColumnStyle()"
    @onclick="() => Sortable && Parent != null ? Parent.OnSort.InvokeAsync(Key) : Task.CompletedTask">
    @if (HeaderTemplate != null)
    {
        @HeaderTemplate
    }
    else
    {
        <div class="d-flex align-center gap-2">
            @Header
            @if (Sortable && Parent?.SortColumn == Key)
            {
                <i class="material-symbols-rounded text-base text-secondary">
                    @(Parent.SortDescending ? "arrow_drop_down" : "arrow_drop_up")
                </i>
            }
        </div>
    }
</th>

@code {
    [Parameter] public string Key { get; set; } = "";
    [Parameter] public string Header { get; set; } = "";
    [Parameter] public bool Sortable { get; set; }
    [Parameter] public RenderFragment<TItem> CellTemplate { get; set; }
    [Parameter] public RenderFragment HeaderTemplate { get; set; }
    [Parameter] public string Width { get; set; }
    [Parameter] public string MinWidth { get; set; }
    [Parameter] public string MaxWidth { get; set; }
    [Parameter] public string CellClass { get; set; } = "";
    [Parameter] public string HeaderClass { get; set; } = "";
    
    [CascadingParameter] public RDataTable<TItem> Parent { get; set; }
    
    protected override void OnInitialized()
    {
        if (Parent != null)
        {
            var column = new RDataTable<TItem>.RDataTableColumn<TItem>
            {
                Key = Key,
                Header = Header,
                Sortable = Sortable,
                CellTemplate = CellTemplate,
                HeaderTemplate = HeaderTemplate,
                Width = Width,
                MinWidth = MinWidth,
                MaxWidth = MaxWidth,
                CellClass = CellClass,
                HeaderClass = HeaderClass
            };
            Parent.AddColumn(column);
        }
    }

    private string GetColumnStyle()
    {
        var styles = new List<string>();
        
        if (!string.IsNullOrEmpty(Width)) styles.Add($"width: {Width}");
        if (!string.IsNullOrEmpty(MinWidth)) styles.Add($"min-width: {MinWidth}");
        if (!string.IsNullOrEmpty(MaxWidth)) styles.Add($"max-width: {MaxWidth}");
        
        return string.Join("; ", styles);
    }
    
    public void Dispose()
    {
        // Column cleanup handled by parent
    }
}