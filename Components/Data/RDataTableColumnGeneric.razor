@using RR.Blazor.Enums
@using RR.Blazor.Models
@* RDataTableColumn - Column definition for RDataTable *@
@typeparam TItem
@implements IDisposable

<th class="pa-3 text-left font-semibold text-primary text-sm relative @HeaderClass @GetColumnCssClasses()">
    @if (HeaderTemplate != null)
    {
        @HeaderTemplate
    }
    else
    {
        <div class="flex items-center justify-between gap-2">
            <div class="flex items-center gap-2 @(Sortable ? "cursor-pointer hover:text-interactive transition-colors" : "")"
                 @onclick="() => Sortable && Parent != null ? Parent.OnSort.InvokeAsync(Key) : Task.CompletedTask">
                @Header
                @if (Sortable && Parent?.SortColumn == Key)
                {
                    <i class="material-symbols-rounded text-base text-secondary">
                        @(Parent.SortDescending ? "arrow_drop_down" : "arrow_drop_up")
                    </i>
                }
            </div>
            
            @if (Filterable)
            {
                <div class="flex items-center">
                    <RButton Size="ButtonSize.Small" 
                             Variant="@(HasActiveFilter ? ButtonVariant.Primary : ButtonVariant.Ghost)"
                             Icon="@(HasActiveFilter ? "filter_alt" : "filter_list")" 
                             Title="Filter column"
                             Class="@(HasActiveFilter ? "scale-110" : "")"
                             OnClick="ToggleFilterDropdown" />
                </div>
                
                @if (showFilterDropdown)
                {
                    <div class="column-filter-dropdown glass-light shadow-lg absolute z-50 min-w-64 right-0 top-100">
                        <div class="pa-4 flex flex-col gap-3">
                            <div class="flex justify-between items-center">
                                <span class="text-sm font-semibold">Filter @Header</span>
                                <RButton Size="ButtonSize.Small" 
                                         Variant="ButtonVariant.Ghost" 
                                         Icon="close" 
                                         OnClick="CloseFilterDropdown" />
                            </div>
                            
                            @if (FilterType == FilterType.Search || FilterType == FilterType.Text)
                            {
                                <RInput Type="FieldType.Search"
                                           Value="@currentFilterValue"
                                           ValueChanged="@(value => OnFilterValueChanged(value?.ToString()))"
                                           Placeholder="@($"Search {Header}...")"
                                           Size="TextInputSize.Small" />
                            }
                            else if (FilterType == FilterType.Select && FilterOptions?.Any() == true)
                            {
                                <select class="rr-select"
                                        @bind="currentFilterValue"
                                        @bind:after="@(async () => await OnFilterValueChanged(currentFilterValue))">
                                    <option value="">All @Header</option>
                                    @foreach (var option in FilterOptions)
                                    {
                                        <option value="@option.Value">@option.Label</option>
                                    }
                                </select>
                            }
                            else if (FilterType == FilterType.MultiSelect && FilterOptions?.Any() == true)
                            {
                                <div class="max-h-200 overflow-y-auto flex flex-col gap-2">
                                    @foreach (var option in FilterOptions)
                                    {
                                        <label class="flex items-center gap-2 cursor-pointer pa-2 rounded hover:bg-surface-secondary transition-colors">
                                            <input type="checkbox" 
                                                   checked="@selectedMultiValues.Contains(option.Value)"
                                                   @onchange="@((e) => ToggleMultiSelectValue(option.Value, (bool)e.Value!))" />
                                            <span class="text-sm">@option.Label</span>
                                        </label>
                                    }
                                </div>
                            }
                            
                            <div class="flex gap-2 pt-2 border-t">
                                <RButton Text="Clear" 
                                         Size="ButtonSize.Small" 
                                         Variant="ButtonVariant.Ghost"
                                         OnClick="ClearFilter" />
                                @if (FilterType == FilterType.MultiSelect)
                                {
                                    <RButton Text="Apply" 
                                             Size="ButtonSize.Small" 
                                             Variant="ButtonVariant.Primary"
                                             OnClick="ApplyMultiSelectFilter" />
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    }
</th>

@code {
    [Parameter] public string Key { get; set; } = "";
    [Parameter] public string Header { get; set; } = "";
    [Parameter] public bool Sortable { get; set; }
    [Parameter] public RenderFragment<TItem> CellTemplate { get; set; }
    [Parameter] public RenderFragment HeaderTemplate { get; set; }
    [Parameter] public string Width { get; set; }
    [Parameter] public string MinWidth { get; set; }
    [Parameter] public string MaxWidth { get; set; }
    [Parameter] public string CellClass { get; set; } = "";
    [Parameter] public string HeaderClass { get; set; } = "";
    
    // New filtering parameters
    [Parameter] public bool Filterable { get; set; }
    [Parameter] public FilterType FilterType { get; set; } = FilterType.Search;
    [Parameter] public List<FilterOption> FilterOptions { get; set; } = new();
    [Parameter] public string FilterValue { get; set; } = "";
    [Parameter] public EventCallback<ColumnFilterEventArgs> OnFilterChanged { get; set; }
    
    [CascadingParameter] public RDataTableGeneric<TItem> Parent { get; set; }
    
    // Filter state
    private bool showFilterDropdown = false;
    private string currentFilterValue = "";
    private HashSet<string> selectedMultiValues = new();
    
    private bool HasActiveFilter => !string.IsNullOrEmpty(currentFilterValue) || selectedMultiValues.Any();
    
    protected override void OnInitialized()
    {
        currentFilterValue = FilterValue;
        if (Parent != null)
        {
            var column = new RDataTableGeneric<TItem>.RDataTableColumn<TItem>
            {
                Key = Key,
                Header = Header,
                Sortable = Sortable,
                CellTemplate = CellTemplate,
                HeaderTemplate = HeaderTemplate,
                Width = Width,
                MinWidth = MinWidth,
                MaxWidth = MaxWidth,
                CellClass = CellClass,
                HeaderClass = HeaderClass,
                Filterable = Filterable,
                FilterType = FilterType,
                FilterOptions = FilterOptions
            };
            Parent.AddColumn(column);
        }
    }
    
    protected override void OnParametersSet()
    {
        if (currentFilterValue != FilterValue)
        {
            currentFilterValue = FilterValue;
            StateHasChanged();
        }
    }

    private async Task ToggleFilterDropdown()
    {
        showFilterDropdown = !showFilterDropdown;
        if (showFilterDropdown)
        {
            // Close other filter dropdowns
            if (Parent != null)
            {
                await Parent.CloseAllFilterDropdowns(Key);
            }
        }
        StateHasChanged();
    }
    
    private void CloseFilterDropdown()
    {
        showFilterDropdown = false;
        StateHasChanged();
    }
    
    public void CloseDropdownFromParent()
    {
        showFilterDropdown = false;
        StateHasChanged();
    }

    private async Task OnFilterValueChanged(string value)
    {
        currentFilterValue = value;
        var filterArgs = new ColumnFilterEventArgs
        {
            ColumnKey = Key,
            FilterValue = value,
            FilterType = FilterType
        };
        await OnFilterChanged.InvokeAsync(filterArgs);
        if (Parent != null)
        {
            await Parent.OnColumnFilterChanged(filterArgs);
        }
    }

    private void ToggleMultiSelectValue(string value, bool selected)
    {
        if (selected)
        {
            selectedMultiValues.Add(value);
        }
        else
        {
            selectedMultiValues.Remove(value);
        }
        StateHasChanged();
    }

    private async Task ApplyMultiSelectFilter()
    {
        var filterValue = string.Join(",", selectedMultiValues);
        currentFilterValue = filterValue;
        var filterArgs = new ColumnFilterEventArgs
        {
            ColumnKey = Key,
            FilterValue = filterValue,
            FilterType = FilterType,
            SelectedValues = selectedMultiValues.ToList()
        };
        await OnFilterChanged.InvokeAsync(filterArgs);
        if (Parent != null)
        {
            await Parent.OnColumnFilterChanged(filterArgs);
        }
        showFilterDropdown = false;
        StateHasChanged();
    }

    private async Task ClearFilter()
    {
        currentFilterValue = "";
        selectedMultiValues.Clear();
        var filterArgs = new ColumnFilterEventArgs
        {
            ColumnKey = Key,
            FilterValue = "",
            FilterType = FilterType
        };
        await OnFilterChanged.InvokeAsync(filterArgs);
        if (Parent != null)
        {
            await Parent.OnColumnFilterChanged(filterArgs);
        }
        showFilterDropdown = false;
        StateHasChanged();
    }

    private string GetColumnCssClasses()
    {
        var classes = new List<string>();
        
        if (!string.IsNullOrEmpty(Width)) classes.Add($"w-{Width.Replace("px", "").Replace("%", "p")}");
        if (!string.IsNullOrEmpty(MinWidth)) classes.Add($"min-w-{MinWidth.Replace("px", "").Replace("%", "p")}");
        if (!string.IsNullOrEmpty(MaxWidth)) classes.Add($"max-w-{MaxWidth.Replace("px", "").Replace("%", "p")}");
        
        return string.Join(" ", classes);
    }
    
    public void Dispose()
    {
        // Column cleanup handled by parent
    }
}