@*
    Select dropdown component with validation and multiple variants.
    
    Usage Examples:
    <RSelectField @bind-value="selectedValue" Label="Select Option">
        <option value="">Select...</option>
        <option value="1">Option 1</option>
        <option value="2">Option 2</option>
    </RSelectField>
    <RSelectField @bind-value="category" Variant="TextInputVariant.Clean" Size="SizeType.Large">
        <option value="">Select Category...</option>
        <option value="A">Category A</option>
        <option value="B">Category B</option>
    </RSelectField>
*@

@using RR.Blazor.Enums
@using RR.Blazor.Models
@using RR.Blazor.Components.Base
@using Microsoft.AspNetCore.Components.Web
@inherits RInputBase
@attribute [Component("RSelectField", Category = "Form", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(
    Prompt = "Use for dropdown selection with validation, utility-first styling and professional form integration",
    CommonUse = "Dropdown selection, category selection, status selection, enum selection",
    AvoidUsage = "Complex multi-select (use dedicated multi-select component), searchable dropdowns (use RDropdown)"
)]

<div class="@GetContainerClasses()">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label class="@GetLabelClasses()" for="@inputId">@Label</label>
    }
    
    <div class="relative">
        <select id="@inputId"
                class="@GetSelectClasses()"
                value="@Value"
                disabled="@Disabled"
                required="@Required"
                data-field="@FieldName"
                @onchange="@HandleSelectChange"
                @onfocus="@HandleFocus"
                @onblur="@HandleBlur"
                @attributes="GetSafeAttributes()">
            @if (!string.IsNullOrEmpty(Placeholder))
            {
                <option value="" disabled selected>@Placeholder</option>
            }
            @ChildContent
        </select>
        
        @if (Loading)
        {
            <div class="absolute inset-0 d-flex items-center justify-center bg-surface bg-opacity-75">
                <i class="material-symbols-rounded text-primary animate-spin">progress_activity</i>
            </div>
        }
    </div>
    
    @if (IsInErrorState && !string.IsNullOrEmpty(GetEffectiveErrorMessage()))
    {
        <div class="@GetErrorMessageClasses()">
            <i class="material-symbols-rounded text-error mr-1">error</i>
            @GetEffectiveErrorMessage()
        </div>
    }
    
    @if (!string.IsNullOrEmpty(HelpText))
    {
        <div class="@GetHelpTextClasses()">@HelpText</div>
    }
</div>

@code {
    private string inputId = $"select-{Guid.NewGuid():N}";
    
    #region Parameters
    
    [Parameter] 
    [AIParameter("Select value", Example = "\"option1\"")]
    public string? Value { get; set; }
    
    [Parameter] 
    [AIParameter("Value changed callback")]
    public EventCallback<string> ValueChanged { get; set; }
    

    
    #endregion
    
    #region Events
    
    [Parameter] public EventCallback<ChangeEventArgs> OnValueChange { get; set; }
    
    #endregion
    
    #region Methods
    
    private async Task HandleSelectChange(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString() ?? "";
        Value = newValue;
        await ValueChanged.InvokeAsync(newValue);
        await OnValueChange.InvokeAsync(e);
        await OnChange.InvokeAsync(e); // Use the inherited OnChange callback
        await HandleUserInteraction();
    }
    
    
    protected override async Task HandleBlur(FocusEventArgs e)
    {
        await HandleBlurEvent(e, OnBlur);
    }
    

    
    private string GetContainerClasses()
    {
        var classes = new List<string> { "input-group" };
        
        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);
            
        return string.Join(" ", classes);
    }
    
    private string GetSelectClasses()
    {
        var classes = new List<string>
        {
            "w-full",
            "border",
            "rounded-md",
            "text-primary",
            "bg-surface",
            "transition",
            "focus:outline-none",
            "focus:ring-2",
            "focus:ring-primary",
            "focus:border-transparent",
            "appearance-none",
            "cursor-pointer",
            "select-field"
        };
        

        classes.Add(GetSizeClasses());
        

        if (HasError)
        {
            classes.Add("border-error");
            classes.Add("focus:ring-error");
        }
        else
        {
            classes.Add("border-light");
        }
        
        if (Disabled)
        {
            classes.Add("opacity-50");
            classes.Add("cursor-not-allowed");
        }
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }
    
    private string GetSizeClasses()
    {
        var baseSizeClasses = Size switch
        {
            Small => "px-3 py-2 text-sm h-8",
            Medium => "px-4 py-3 text-base h-10",
            Large => "px-5 py-4 text-lg h-12",
            _ => "px-4 py-3 text-base h-10"
        };
        

        return Density switch
        {
            DensityType.Compact => ApplyCompactDensity(),
            DensityType.Dense => ApplyDenseDensity(),
            DensityType.Normal => baseSizeClasses,
            DensityType.Spacious => ApplySpacious(),
            _ => baseSizeClasses
        };
    }
    
    private string ApplyCompactDensity()
    {
        return Size switch
        {
            Small => "px-2 py-1 text-xs h-6",
            Medium => "px-3 py-2 text-sm h-8",
            Large => "px-4 py-3 text-base h-10",
            _ => "px-3 py-2 text-sm h-8"
        };
    }
    
    private string ApplyDenseDensity()
    {
        return Size switch
        {
            Small => "px-2 py-1 text-sm h-7",
            Medium => "px-3 py-2 text-base h-9",
            Large => "px-4 py-3 text-lg h-11",
            _ => "px-3 py-2 text-base h-9"
        };
    }
    
    private string ApplySpacious()
    {
        return Size switch
        {
            Small => "px-4 py-3 text-sm h-10",
            Medium => "px-6 py-4 text-base h-12",
            Large => "px-8 py-5 text-lg h-16",
            _ => "px-6 py-4 text-base h-12"
        };
    }
    
    
    private string GetLabelClasses()
    {
        return Density switch
        {
            DensityType.Compact => "d-block text-xs font-medium text-primary mb-1",
            DensityType.Dense => "d-block text-sm font-medium text-primary mb-1",
            DensityType.Normal => "d-block text-sm font-medium text-primary mb-2",
            DensityType.Spacious => "d-block text-base font-medium text-primary mb-3",
            _ => "d-block text-sm font-medium text-primary mb-2"
        };
    }
    
    private string GetErrorMessageClasses()
    {
        return Density switch
        {
            DensityType.Compact => "text-xs text-error mt-1",
            DensityType.Dense => "text-xs text-error mt-1",
            DensityType.Normal => "text-sm text-error mt-2",
            DensityType.Spacious => "text-base text-error mt-3",
            _ => "text-sm text-error mt-2"
        };
    }
    
    private string GetHelpTextClasses()
    {
        return Density switch
        {
            DensityType.Compact => "text-xs text-secondary mt-1",
            DensityType.Dense => "text-xs text-secondary mt-1",
            DensityType.Normal => "text-sm text-secondary mt-2",
            DensityType.Spacious => "text-base text-secondary mt-3",
            _ => "text-sm text-secondary mt-2"
        };
    }
    
    #endregion
    
    #region Attribute Filtering
    
    /// <summary>
    /// Returns safely filtered HTML attributes using centralized RAttributeForwarder.
    /// </summary>
    private Dictionary<string, object> GetSafeAttributes()
    {
        return RAttributeForwarder.GetSafeAttributes(AdditionalAttributes);
    }
    
    #endregion
}