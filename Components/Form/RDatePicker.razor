@**
<summary>Professional date picker with calendar popup</summary>
<category>Form</category>
<complexity>Medium</complexity>
<ai-prompt>Create a clean date picker with calendar popup</ai-prompt>
<ai-common-use>date selection, form inputs, scheduling</ai-common-use>
<ai-pattern name="basic">@bind-value="selectedDate"</ai-pattern>
<ai-pattern name="range">@bind-value="startDate" @bind-EndValue="endDate" Range="true"</ai-pattern>
<ai-pattern name="datetime">@bind-value="dateTime" ShowTime="true"</ai-pattern>
**@

@attribute [Component("RDatePicker", Category = "Form")]
@using System.Globalization
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="rr-datepicker @GetClasses()" @ref="elementRef">
    <div class="rr-datepicker-trigger" @onclick="ToggleCalendar">
        <input type="text" 
               class="rr-datepicker-input @GetInputClasses()"
               value="@GetDisplayValue()"
               placeholder="@GetPlaceholder()"
               readonly
               disabled="@Disabled"
               required="@Required"
               @onfocus="HandleFocus"
               @onblur="HandleBlur" />
        
        @if (!string.IsNullOrEmpty(GetStartIcon()))
        {
            <i class="rr-datepicker-icon rr-datepicker-icon-start material-symbols-rounded">@GetStartIcon()</i>
        }
        
        <i class="rr-datepicker-icon rr-datepicker-icon-end material-symbols-rounded" @onclick="HandleEndIconClick">
            @GetEndIcon()
        </i>
    </div>
    
    @if (isOpen)
    {
        <div class="rr-datepicker-popup" 
             @onclick:stopPropagation="true">
            <div class="rr-datepicker-header">
                <button type="button" class="rr-datepicker-nav" @onclick="PreviousMonth">
                    <i class="material-symbols-rounded">chevron_left</i>
                </button>
                
                <button type="button" class="rr-datepicker-title" @onclick="ToggleYearPicker">
                    @currentViewDate.ToString("MMMM yyyy")
                </button>
                
                <button type="button" class="rr-datepicker-nav" @onclick="NextMonth">
                    <i class="material-symbols-rounded">chevron_right</i>
                </button>
            </div>
            
            @if (showYearPicker)
            {
                <div class="rr-datepicker-years">
                    @for (var year = currentViewDate.Year - 10; year <= currentViewDate.Year + 10; year++)
                    {
                        var yearValue = year;
                        <button type="button" 
                                class="rr-datepicker-year @(year == currentViewDate.Year ? "selected" : "")"
                                @onclick="() => SelectYear(yearValue)">
                            @year
                        </button>
                    }
                </div>
            }
            else
            {
                <div class="rr-datepicker-calendar">
                    <div class="rr-datepicker-weekdays">
                        @foreach (var day in GetWeekdayNames())
                        {
                            <div class="rr-datepicker-weekday">@day</div>
                        }
                    </div>
                    
                    <div class="rr-datepicker-days">
                        @foreach (var day in GetCalendarDays())
                        {
                            <button type="button" 
                                    class="rr-datepicker-day @GetDayClasses(day)"
                                    disabled="@IsDateDisabled(day.Date)"
                                    @onclick="() => SelectDate(day.Date)">
                                @day.Date.Day
                            </button>
                        }
                    </div>
                </div>
                
                @if (ShowTime)
                {
                    <div class="rr-datepicker-time">
                        <select class="rr-datepicker-time-select" value="@selectedHour" @onchange="HandleHourChange">
                            @for (int h = 0; h < (Use24HourFormat ? 24 : 12); h++)
                            {
                                var displayHour = Use24HourFormat ? h : (h == 0 ? 12 : h);
                                <option value="@h">@displayHour.ToString("00")</option>
                            }
                        </select>
                        
                        <select class="rr-datepicker-time-select" value="@selectedMinute" @onchange="HandleMinuteChange">
                            @for (int m = 0; m < 60; m += MinuteInterval)
                            {
                                <option value="@m">@m.ToString("00")</option>
                            }
                        </select>
                        
                        @if (!Use24HourFormat)
                        {
                            <select class="rr-datepicker-time-select" value="@selectedPeriod" @onchange="HandlePeriodChange">
                                <option value="AM">AM</option>
                                <option value="PM">PM</option>
                            </select>
                        }
                    </div>
                }
                
                <div class="rr-datepicker-footer">
                    @if (ShowTodayButton)
                    {
                        <button type="button" class="rr-datepicker-btn secondary" @onclick="SelectToday">
                            Today
                        </button>
                    }
                    
                    @if (Range)
                    {
                        <button type="button" class="rr-datepicker-btn primary" @onclick="ApplyRange">
                            Apply
                        </button>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    private ElementReference elementRef;
    private bool isOpen;
    private bool showYearPicker;
    private bool isOpening;
    private DateTime currentViewDate = DateTime.Today;
    private int selectedHour;
    private int selectedMinute;
    private string selectedPeriod = "AM";
    private DateTime? tempStartDate;
    private DateTime? tempEndDate;
    private bool isSelectingEndDate;
    private IJSObjectReference jsModule;

    [Parameter] public DateTime? Value { get; set; }
    [Parameter] public EventCallback<DateTime?> ValueChanged { get; set; }
    [Parameter] public DateTime? EndValue { get; set; }
    [Parameter] public EventCallback<DateTime?> EndValueChanged { get; set; }
    
    [Parameter] public string Label { get; set; }
    [Parameter] public string Placeholder { get; set; }
    [Parameter] public string Format { get; set; }
    [Parameter] public FieldSize Size { get; set; } = FieldSize.Medium;
    [Parameter] public string Icon { get; set; } = "calendar_today";
    [Parameter] public IconPosition IconPosition { get; set; } = IconPosition.Start;
    [Parameter] public string Class { get; set; }
    
    [Parameter] public bool Range { get; set; }
    [Parameter] public bool ShowTime { get; set; }
    [Parameter] public bool Use24HourFormat { get; set; } = true;
    [Parameter] public int MinuteInterval { get; set; } = 1;
    [Parameter] public bool ShowTodayButton { get; set; } = true;
    [Parameter] public bool ShowClearButton { get; set; } = true;
    
    [Parameter] public DateTime? MinDate { get; set; }
    [Parameter] public DateTime? MaxDate { get; set; }
    [Parameter] public Func<DateTime, bool> DisabledDates { get; set; }
    [Parameter] public DayOfWeek[] DisabledDaysOfWeek { get; set; }
    
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool HasError { get; set; }
    [Parameter] public string ErrorMessage { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public string HelperText { get; set; }
    
    [Parameter] public EventCallback<DateTime?> OnDateSelected { get; set; }

    protected override void OnInitialized()
    {
        if (ShowTime && Value.HasValue)
        {
            var time = Value.Value;
            selectedHour = Use24HourFormat ? time.Hour : (time.Hour % 12);
            selectedMinute = time.Minute;
            selectedPeriod = time.Hour >= 12 ? "PM" : "AM";
        }
        
        if (Value.HasValue)
        {
            currentViewDate = new DateTime(Value.Value.Year, Value.Value.Month, 1);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/RR.Blazor/js/datepicker.js");
                
                // Setup click-outside event listener
                await jsModule.InvokeVoidAsync("setupDatepickerEvents", elementRef, DotNetObjectReference.Create(this));
            }
            catch
            {
                // JavaScript module failed to load - component will work without positioning
            }
        }
    }

    private async Task ToggleCalendar()
    {
        if (Disabled) return;
        
        if (isOpen)
        {
            await CloseCalendar();
        }
        else
        {
            await OpenCalendar();
        }
    }

    private async Task OpenCalendar()
    {
        if (isOpening) return; // Prevent double-opening
        
        isOpening = true;
        isOpen = true;
        
        if (Range)
        {
            tempStartDate = Value;
            tempEndDate = EndValue;
            isSelectingEndDate = false;
        }
        
        StateHasChanged();
        
        if (jsModule != null)
        {
            try
            {
                await Task.Yield();
                await jsModule.InvokeVoidAsync("positionPopup", elementRef, true);
            }
            catch
            {
                // Positioning failed - popup will use CSS fallback
            }
        }
        
        // Delay to prevent immediate closure from the same click event
        await Task.Delay(100);
        isOpening = false;
        StateHasChanged();
    }

    private async Task CloseCalendar()
    {
        if (isOpening) return; // Don't close while opening
        
        isOpen = false;
        showYearPicker = false;
        isOpening = false;
        
        // Cleanup JavaScript click-outside handling
        if (jsModule != null)
        {
            try
            {
                await jsModule.InvokeVoidAsync("cleanupDatepicker", elementRef);
            }
            catch
            {
                // Cleanup failed - ignore
            }
        }
        
        StateHasChanged();
    }
    
    [JSInvokable]
    public async Task HandleClickOutside()
    {
        await CloseCalendar();
    }

    private async Task SelectDate(DateTime date)
    {
        if (IsDateDisabled(date)) return;

        if (ShowTime)
        {
            date = new DateTime(date.Year, date.Month, date.Day, 
                               Use24HourFormat ? selectedHour : ConvertTo24Hour(selectedHour, selectedPeriod), 
                               selectedMinute, 0);
        }

        if (Range)
        {
            if (!isSelectingEndDate)
            {
                tempStartDate = date;
                tempEndDate = null;
                isSelectingEndDate = true;
            }
            else
            {
                if (date < tempStartDate)
                {
                    tempEndDate = tempStartDate;
                    tempStartDate = date;
                }
                else
                {
                    tempEndDate = date;
                }
                isSelectingEndDate = false;
            }
        }
        else
        {
            Value = date;
            await ValueChanged.InvokeAsync(Value);
            await OnDateSelected.InvokeAsync(Value);
            await CloseCalendar();
        }
        
        StateHasChanged();
    }

    private async Task ApplyRange()
    {
        if (tempStartDate.HasValue)
        {
            Value = tempStartDate;
            EndValue = tempEndDate;
            await ValueChanged.InvokeAsync(Value);
            await EndValueChanged.InvokeAsync(EndValue);
            await OnDateSelected.InvokeAsync(Value);
        }
        
        await CloseCalendar();
    }

    private async Task SelectToday()
    {
        await SelectDate(DateTime.Today);
    }

    private void PreviousMonth()
    {
        currentViewDate = currentViewDate.AddMonths(-1);
    }

    private void NextMonth()
    {
        currentViewDate = currentViewDate.AddMonths(1);
    }

    private void ToggleYearPicker()
    {
        showYearPicker = !showYearPicker;
    }

    private void SelectYear(int year)
    {
        currentViewDate = new DateTime(year, currentViewDate.Month, 1);
        showYearPicker = false;
    }

    private async Task HandleHourChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var hour))
        {
            selectedHour = hour;
            await UpdateTimeIfNeeded();
        }
    }

    private async Task HandleMinuteChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var minute))
        {
            selectedMinute = minute;
            await UpdateTimeIfNeeded();
        }
    }

    private async Task HandlePeriodChange(ChangeEventArgs e)
    {
        selectedPeriod = e.Value?.ToString() ?? "AM";
        await UpdateTimeIfNeeded();
    }

    private async Task UpdateTimeIfNeeded()
    {
        if (Value.HasValue && ShowTime && !Range)
        {
            var date = Value.Value.Date;
            var time = new DateTime(date.Year, date.Month, date.Day,
                                   Use24HourFormat ? selectedHour : ConvertTo24Hour(selectedHour, selectedPeriod),
                                   selectedMinute, 0);
            Value = time;
            await ValueChanged.InvokeAsync(Value);
        }
    }

    private bool isClickingTrigger;
    
    private async Task HandleFocus()
    {
        // Don't auto-open on focus to prevent conflicts with click
    }

    private async Task HandleBlur()
    {
        // Don't auto-close on blur to prevent conflicts with click
        await Task.CompletedTask;
    }

    private async Task HandleEndIconClick()
    {
        if (ShowClearButton && HasValue())
        {
            Value = null;
            EndValue = null;
            await ValueChanged.InvokeAsync(Value);
            await EndValueChanged.InvokeAsync(EndValue);
        }
        else
        {
            await ToggleCalendar();
        }
    }

    private bool HasValue() => Value.HasValue || EndValue.HasValue;

    private string GetDisplayValue()
    {
        if (!HasValue()) return "";

        var format = Format ?? GetDefaultFormat();
        
        if (Range)
        {
            var start = Value?.ToString(format) ?? "";
            var end = EndValue?.ToString(format) ?? "";
            return string.IsNullOrEmpty(end) ? start : $"{start} - {end}";
        }
        
        return Value?.ToString(format) ?? "";
    }

    private string GetPlaceholder()
    {
        if (!string.IsNullOrEmpty(Placeholder)) return Placeholder;
        
        if (Range)
            return "Select date range...";
        
        if (ShowTime)
            return "Select date and time...";
            
        return "Select date...";
    }

    private string GetDefaultFormat()
    {
        if (ShowTime)
            return Use24HourFormat ? "dd/MM/yyyy HH:mm" : "dd/MM/yyyy hh:mm tt";
        return "dd/MM/yyyy";
    }

    private bool IsDateDisabled(DateTime date)
    {
        if (MinDate.HasValue && date < MinDate.Value.Date) return true;
        if (MaxDate.HasValue && date > MaxDate.Value.Date) return true;
        if (DisabledDaysOfWeek?.Contains(date.DayOfWeek) == true) return true;
        if (DisabledDates?.Invoke(date) == true) return true;
        return false;
    }

    private int ConvertTo24Hour(int hour, string period)
    {
        if (hour == 12) return period == "AM" ? 0 : 12;
        return period == "PM" ? hour + 12 : hour;
    }

    private string[] GetWeekdayNames()
    {
        var culture = CultureInfo.CurrentCulture;
        var dayNames = culture.DateTimeFormat.AbbreviatedDayNames;
        var firstDay = (int)culture.DateTimeFormat.FirstDayOfWeek;
        
        return Enumerable.Range(0, 7)
            .Select(i => dayNames[(firstDay + i) % 7])
            .ToArray();
    }

    private IEnumerable<CalendarDay> GetCalendarDays()
    {
        var firstDayOfMonth = new DateTime(currentViewDate.Year, currentViewDate.Month, 1);
        var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
        var firstDayOfWeek = CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek;
        
        var startDate = firstDayOfMonth;
        while (startDate.DayOfWeek != firstDayOfWeek)
            startDate = startDate.AddDays(-1);

        var endDate = lastDayOfMonth;
        while (endDate.DayOfWeek != (DayOfWeek)(((int)firstDayOfWeek + 6) % 7))
            endDate = endDate.AddDays(1);

        for (var date = startDate; date <= endDate; date = date.AddDays(1))
        {
            yield return new CalendarDay
            {
                Date = date,
                IsCurrentMonth = date.Month == currentViewDate.Month,
                IsToday = date.Date == DateTime.Today,
                IsWeekend = date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday
            };
        }
    }

    private string GetClasses()
    {
        var classes = new List<string> { "rr-datepicker" };
        
        if (!string.IsNullOrEmpty(Class)) classes.Add(Class);
        if (HasError) classes.Add("error");
        if (Disabled) classes.Add("disabled");
        if (isOpen) classes.Add("open");
        if (Size != FieldSize.Medium) classes.Add(Size.ToString().ToLower());
        
        return string.Join(" ", classes);
    }

    private string GetInputClasses()
    {
        var classes = new List<string>();
        
        if (HasError) classes.Add("error");
        if (Disabled) classes.Add("disabled");
        
        return string.Join(" ", classes);
    }

    private string GetStartIcon()
    {
        if (!string.IsNullOrEmpty(Icon) && IconPosition == IconPosition.Start)
            return Icon;
        return null;
    }

    private string GetEndIcon()
    {
        if (ShowClearButton && HasValue())
            return "close";
        
        if (!string.IsNullOrEmpty(Icon) && IconPosition == IconPosition.End)
            return Icon;
            
        return ShowTime ? "schedule" : "calendar_month";
    }

    private string GetDayClasses(CalendarDay day)
    {
        var classes = new List<string>();

        if (!day.IsCurrentMonth) classes.Add("other-month");
        if (day.IsToday) classes.Add("today");
        if (day.IsWeekend) classes.Add("weekend");
        if (IsDateDisabled(day.Date)) classes.Add("disabled");

        if (Range)
        {
            var start = tempStartDate ?? Value;
            var end = tempEndDate ?? EndValue;

            if (start.HasValue && day.Date.Date == start.Value.Date)
                classes.Add("range-start");

            if (end.HasValue && day.Date.Date == end.Value.Date && start.HasValue && end.Value.Date != start.Value.Date)
                classes.Add("range-end");

            if (start.HasValue && end.HasValue && day.Date.Date > start.Value.Date && day.Date.Date < end.Value.Date)
                classes.Add("range-middle");
        }
        else
        {
            if (Value.HasValue && day.Date.Date == Value.Value.Date)
                classes.Add("selected");
        }

        return string.Join(" ", classes);
    }

    private record CalendarDay
    {
        public DateTime Date { get; init; }
        public bool IsCurrentMonth { get; init; }
        public bool IsToday { get; init; }
        public bool IsWeekend { get; init; }
    }

    public async ValueTask DisposeAsync()
    {
        if (jsModule != null)
        {
            try
            {
                await jsModule.DisposeAsync();
            }
            catch
            {
                // Module disposal failed - ignore
            }
        }
    }
}