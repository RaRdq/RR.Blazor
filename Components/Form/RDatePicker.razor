@** 
<summary>Professional date and time picker with calendar popup and time selection</summary>
<category>Form</category>
<complexity>Complex</complexity>
<ai-prompt>Create a date/time picker with calendar popup and validation</ai-prompt>
<ai-common-use>date selection, appointment scheduling, event planning, form dates</ai-common-use>
<ai-avoid>Use appropriate Size parameter for different complexity levels</ai-avoid>
<ai-pattern name="date-only">@bind-value="selectedDate" ShowTime="false"</ai-pattern>
<ai-pattern name="datetime">@bind-value="dateTime" ShowTime="true" Use24HourFormat="false"</ai-pattern>
<ai-pattern name="date-range">@bind-value="startDate" @bind-EndValue="endDate" Range="true"</ai-pattern>
<ai-pattern name="restricted-dates">MinDate="@DateTime.Today" MaxDate="@futureDate"</ai-pattern>
<ai-pattern name="business-days">DisabledDaysOfWeek="@weekends" MinDate="@DateTime.Today"</ai-pattern>
**@

@attribute [Component("RDatePicker", Category = "Form")]
@attribute [AIOptimized(Prompt = "Create date/time picker with calendar")]

@using System.Globalization
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="datepicker @GetWrapperClasses()" @ref="elementRef">
    @* Input Field - RR.Blazor RTextInput Pattern *@
    <div class="datepicker-trigger" @onclick="ToggleCalendar">
        <RTextInput Value="@GetDisplayValue()"
                   ValueChanged="@(_ => { })"
                   Type="FieldType.Text"
                   Placeholder="@GetPlaceholder()"
                   Label="@Label"
                   Size="@GetTextInputSize()"
                   Disabled="@Disabled"
                   ReadOnly="true"
                   Required="@Required"
                   HasError="@HasError"
                   ErrorMessage="@ErrorMessage"
                   HelpText="@HelperText"
                   Class="@GetTriggerInputClass()"
                   StartIcon="@GetEffectiveStartIcon()"
                   EndIcon="@GetEffectiveEndIcon()"
                   OnFocus="@HandleInputFocus"
                   OnBlur="@HandleInputBlur"
                   OnEndIconClick="@HandleEndIconClick"
                   AdditionalAttributes="@GetTriggerAttributes()" />
    </div>
    
    @* Calendar Popup *@
    @if (isOpen)
    {
        <div class="datepicker-backdrop" @onclick="CloseCalendar"></div>
        <div class="datepicker-popup @GetPopupPositionClass()">
            @* Calendar Header *@
            <div class="datepicker-header">
                <button type="button" class="datepicker-nav-btn" @onclick="PreviousMonth">
                    <i class="material-symbols-rounded">chevron_left</i>
                </button>
                
                <div class="datepicker-header-info">
                    <button type="button" class="datepicker-month-year" @onclick="ToggleYearPicker">
                        @currentViewDate.ToString("MMMM yyyy", CultureInfo.CurrentCulture)
                    </button>
                </div>
                
                <button type="button" class="datepicker-nav-btn" @onclick="NextMonth">
                    <i class="material-symbols-rounded">chevron_right</i>
                </button>
            </div>
            
            @if (showYearPicker)
            {
                @* Year Picker *@
                <div class="datepicker-year-picker">
                    @for (var year = currentViewDate.Year - 10; year <= currentViewDate.Year + 10; year++)
                    {
                        var yearValue = year;
                        <button type="button" 
                                class="datepicker-year-option @(year == currentViewDate.Year ? "datepicker-year-option-current" : "")"
                                @onclick="() => SelectYear(yearValue)">
                            @year
                        </button>
                    }
                </div>
            }
            else
            {
                @* Calendar Grid *@
                <div class="datepicker-calendar">
                    @* Day Headers *@
                    <div class="datepicker-day-headers">
                        @foreach (var dayName in GetDayNames())
                        {
                            <div class="datepicker-day-header">@dayName</div>
                        }
                    </div>
                    
                    @* Calendar Days *@
                    <div class="datepicker-days">
                        @foreach (var day in GetCalendarDays())
                        {
                            <button type="button" 
                                    class="datepicker-day @GetDayClasses(day)"
                                    disabled="@IsDateDisabled(day.Date)"
                                    @onclick="() => SelectDate(day.Date)"
                                    @onmouseenter="() => HandleDayHover(day.Date)">
                                @day.Date.Day
                            </button>
                        }
                    </div>
                </div>
                
                @* Time Picker *@
                @if (ShowTime)
                {
                    <div class="datepicker-time-picker">
                        <div class="datepicker-time-section">
                            <label class="datepicker-time-label">Hour</label>
                            <select class="datepicker-time-select" 
                                    value="@selectedHour" 
                                    @onchange="HandleHourChange">
                                @for (int h = 0; h < (Use24HourFormat ? 24 : 12); h++)
                                {
                                    var hour = Use24HourFormat ? h : (h == 0 ? 12 : h);
                                    <option value="@h">@hour.ToString("00")</option>
                                }
                            </select>
                        </div>
                        
                        <div class="datepicker-time-section">
                            <label class="datepicker-time-label">Minute</label>
                            <select class="datepicker-time-select" 
                                    value="@selectedMinute" 
                                    @onchange="HandleMinuteChange">
                                @for (int m = 0; m < 60; m += MinuteInterval)
                                {
                                    <option value="@m">@m.ToString("00")</option>
                                }
                            </select>
                        </div>
                        
                        @if (!Use24HourFormat)
                        {
                            <div class="datepicker-time-section">
                                <label class="datepicker-time-label">Period</label>
                                <select class="datepicker-time-select" 
                                        value="@selectedPeriod" 
                                        @onchange="HandlePeriodChange">
                                    <option value="AM">AM</option>
                                    <option value="PM">PM</option>
                                </select>
                            </div>
                        }
                    </div>
                }
                
                @* Footer Actions *@
                <div class="datepicker-footer">
                    @if (ShowTodayButton)
                    {
                        <button type="button" class="datepicker-action-btn datepicker-action-btn-secondary" @onclick="SelectToday">
                            Today
                        </button>
                    }
                    
                    @if (Range && !string.IsNullOrEmpty(GetDisplayValue()))
                    {
                        <button type="button" class="datepicker-action-btn datepicker-action-btn-secondary" @onclick="ClearValue">
                            Clear
                        </button>
                    }
                    
                    <button type="button" class="datepicker-action-btn datepicker-action-btn-primary" @onclick="ApplySelection">
                        @(Range ? "Apply" : "Select")
                    </button>
                </div>
            }
        </div>
    }
</div>

@code {
    private ElementReference elementRef;
    private bool isOpen;
    private bool showYearPicker;
    private DateTime currentViewDate = DateTime.Today;
    private DateTime? hoverDate;
    private int selectedHour;
    private int selectedMinute;
    private string selectedPeriod = "AM";
    private DateTime? tempStartDate;
    private DateTime? tempEndDate;
    private bool isSelectingEndDate;


    [Parameter] public string InputId { get; set; } = Guid.NewGuid().ToString("N")[..8];
    [Parameter] [AIParameter("Selected date/time value", Example = "DateTime.Today")] public DateTime? Value { get; set; }
    [Parameter] [AIParameter("Callback when date/time value changes", Example = "OnDateChanged")] public EventCallback<DateTime?> ValueChanged { get; set; }
    [Parameter] [AIParameter("End date for range selection", Example = "endDate")] public DateTime? EndValue { get; set; }
    [Parameter] [AIParameter("Callback when end date changes", Example = "OnEndDateChanged")] public EventCallback<DateTime?> EndValueChanged { get; set; }
    

    [Parameter] [AIParameter("Label text displayed above the picker", Example = "Select Date")] public string Label { get; set; }
    [Parameter] [AIParameter("Placeholder text when no date selected", Example = "Choose a date...")] public string Placeholder { get; set; }
    [Parameter] [AIParameter("Date format string", Example = "dd/MM/yyyy")] public string Format { get; set; }
    [Parameter] [AIParameter("Size of the picker input (Small, Medium, Large)", Example = "FieldSize.Medium")] public FieldSize Size { get; set; } = FieldSize.Medium;
    /// <summary>Icon for the component</summary>
    [Parameter] public string Icon { get; set; }
    
    /// <summary>Position of the icon</summary>
    [Parameter] public IconPosition IconPosition { get; set; } = IconPosition.Start;
    
    /// <summary>Start icon (deprecated - use Icon + IconPosition)</summary>
    [Parameter] public string StartIcon { get; set; }
    [Parameter] public string Class { get; set; }
    

    [Parameter] [AIParameter("Enable date range selection", Example = "true")] public bool Range { get; set; }
    [Parameter] [AIParameter("Show time picker alongside date", Example = "true")] public bool ShowTime { get; set; }
    [Parameter] [AIParameter("Use 24-hour time format instead of AM/PM", Example = "false")] public bool Use24HourFormat { get; set; } = true;
    [Parameter] [AIParameter("Minute interval for time picker", Example = "15")] public int MinuteInterval { get; set; } = 1;
    [Parameter] public bool ShowClearButton { get; set; } = true;
    [Parameter] public bool ShowTodayButton { get; set; } = true;
    [Parameter] public bool ShowWeekNumbers { get; set; }
    

    [Parameter] [AIParameter("Minimum selectable date", Example = "DateTime.Today")] public DateTime? MinDate { get; set; }
    [Parameter] [AIParameter("Maximum selectable date", Example = "DateTime.Today.AddYears(1)")] public DateTime? MaxDate { get; set; }
    [Parameter] [AIParameter("Function to disable specific dates", Example = "date => IsHoliday(date)")] public Func<DateTime, bool> DisabledDates { get; set; }
    [Parameter] [AIParameter("Array of disabled days of week", Example = "new[] { DayOfWeek.Saturday, DayOfWeek.Sunday }")] public DayOfWeek[] DisabledDaysOfWeek { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public string HelperText { get; set; }
    

    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool ReadOnly { get; set; }
    [Parameter] public bool HasError { get; set; }
    [Parameter] public string ErrorMessage { get; set; }
    

    [Parameter] public EventCallback<DateTime?> OnDateSelected { get; set; }
    [Parameter] public EventCallback OnCalendarOpen { get; set; }
    [Parameter] public EventCallback OnCalendarClose { get; set; }

    protected override void OnInitialized()
    {
        if (ShowTime && Value.HasValue)
        {
            var time = Value.Value;
            selectedHour = Use24HourFormat ? time.Hour : (time.Hour % 12);
            selectedMinute = time.Minute;
            selectedPeriod = time.Hour >= 12 ? "PM" : "AM";
        }
        
        if (Value.HasValue)
        {
            currentViewDate = new DateTime(Value.Value.Year, Value.Value.Month, 1);
        }
    }

    private async Task ToggleCalendar()
    {
        if (Disabled || ReadOnly) return;
        
        if (isOpen)
        {
            await CloseCalendar();
        }
        else
        {
            await OpenCalendar();
        }
    }

    private async Task OpenCalendar()
    {
        isOpen = true;
        
        if (Range)
        {
            tempStartDate = Value;
            tempEndDate = EndValue;
            isSelectingEndDate = false;
        }
        
        await OnCalendarOpen.InvokeAsync();
        StateHasChanged();
    }

    private async Task CloseCalendar()
    {
        isOpen = false;
        showYearPicker = false;
        await OnCalendarClose.InvokeAsync();
        StateHasChanged();
    }

    private async Task SelectDate(DateTime date)
    {
        if (IsDateDisabled(date)) return;

        if (ShowTime)
        {
            date = new DateTime(date.Year, date.Month, date.Day, 
                               Use24HourFormat ? selectedHour : ConvertTo24Hour(selectedHour, selectedPeriod), 
                               selectedMinute, 0);
        }

        if (Range)
        {
            if (!isSelectingEndDate)
            {
                tempStartDate = date;
                tempEndDate = null;
                isSelectingEndDate = true;
            }
            else
            {
                if (date < tempStartDate)
                {
                    tempEndDate = tempStartDate;
                    tempStartDate = date;
                }
                else
                {
                    tempEndDate = date;
                }
                isSelectingEndDate = false;
            }
        }
        else
        {
            Value = date;
            await ValueChanged.InvokeAsync(Value);
            await OnDateSelected.InvokeAsync(Value);
            await CloseCalendar();
        }
        
        StateHasChanged();
    }

    private async Task ApplySelection()
    {
        if (Range && tempStartDate.HasValue)
        {
            Value = tempStartDate;
            EndValue = tempEndDate;
            await ValueChanged.InvokeAsync(Value);
            await EndValueChanged.InvokeAsync(EndValue);
            await OnDateSelected.InvokeAsync(Value);
        }
        
        await CloseCalendar();
    }

    private async Task ClearValue()
    {
        Value = null;
        EndValue = null;
        tempStartDate = null;
        tempEndDate = null;
        await ValueChanged.InvokeAsync(Value);
        await EndValueChanged.InvokeAsync(EndValue);
        StateHasChanged();
    }

    private async Task SelectToday()
    {
        await SelectDate(DateTime.Today);
    }

    private void PreviousMonth()
    {
        currentViewDate = currentViewDate.AddMonths(-1);
        StateHasChanged();
    }

    private void NextMonth()
    {
        currentViewDate = currentViewDate.AddMonths(1);
        StateHasChanged();
    }

    private void ToggleYearPicker()
    {
        showYearPicker = !showYearPicker;
        StateHasChanged();
    }

    private void SelectYear(int year)
    {
        currentViewDate = new DateTime(year, currentViewDate.Month, 1);
        showYearPicker = false;
        StateHasChanged();
    }

    private void HandleDayHover(DateTime date)
    {
        if (Range && isSelectingEndDate && tempStartDate.HasValue)
        {
            hoverDate = date;
            StateHasChanged();
        }
    }

    private async Task HandleHourChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var hour))
        {
            selectedHour = hour;
            await UpdateTimeIfNeeded();
        }
    }

    private async Task HandleMinuteChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var minute))
        {
            selectedMinute = minute;
            await UpdateTimeIfNeeded();
        }
    }

    private async Task HandlePeriodChange(ChangeEventArgs e)
    {
        selectedPeriod = e.Value?.ToString() ?? "AM";
        await UpdateTimeIfNeeded();
    }

    private async Task UpdateTimeIfNeeded()
    {
        if (Value.HasValue && ShowTime && !Range)
        {
            var date = Value.Value.Date;
            var time = new DateTime(date.Year, date.Month, date.Day,
                                   Use24HourFormat ? selectedHour : ConvertTo24Hour(selectedHour, selectedPeriod),
                                   selectedMinute, 0);
            Value = time;
            await ValueChanged.InvokeAsync(Value);
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Enter":
            case " ":
            case "ArrowDown":
                if (!isOpen)
                {
                    await OpenCalendar();
                }
                break;
            case "Escape":
                if (isOpen) 
                {
                    await CloseCalendar();
                }
                break;
            case "Tab":
                if (isOpen)
                {
                    await CloseCalendar();
                }
                break;
        }
    }

    private async Task HandleInputFocus()
    {
        if (!Disabled && !ReadOnly && !isOpen)
        {
            await OpenCalendar();
        }
    }

    private async Task HandleInputBlur()
    {
        // Delay to allow clicks on calendar to register first
        await Task.Delay(150);
        if (isOpen)
        {
            await CloseCalendar();
        }
    }

    private async Task HandleEndIconClick()
    {
        if (ShowClearButton && HasValue())
        {
            // Clear button clicked
            await ClearValue();
        }
        else
        {
            // Calendar icon clicked - toggle calendar
            await ToggleCalendar();
        }
    }

    private bool HasValue() => Value.HasValue || EndValue.HasValue;

    private string GetDisplayValue()
    {
        if (!HasValue()) return "";

        var format = Format ?? GetDefaultFormat();
        
        if (Range)
        {
            var start = Value?.ToString(format) ?? "";
            var end = EndValue?.ToString(format) ?? "";
            return string.IsNullOrEmpty(end) ? start : $"{start} - {end}";
        }
        
        return Value?.ToString(format) ?? "";
    }

    private string GetPlaceholder()
    {
        if (!string.IsNullOrEmpty(Placeholder)) return Placeholder;
        
        var format = Format ?? GetDefaultFormat();
        return Range ? $"Select date range... ({format})" : $"Select date... ({format})";
    }

    private string GetDefaultFormat()
    {
        if (ShowTime)
            return Use24HourFormat ? "dd/MM/yyyy HH:mm" : "dd/MM/yyyy hh:mm tt";
        return "dd/MM/yyyy";
    }

    private bool IsDateDisabled(DateTime date)
    {
        if (MinDate.HasValue && date < MinDate.Value.Date) return true;
        if (MaxDate.HasValue && date > MaxDate.Value.Date) return true;
        if (DisabledDaysOfWeek?.Contains(date.DayOfWeek) == true) return true;
        if (DisabledDates?.Invoke(date) == true) return true;
        return false;
    }

    private int ConvertTo24Hour(int hour, string period)
    {
        if (hour == 12) return period == "AM" ? 0 : 12;
        return period == "PM" ? hour + 12 : hour;
    }

    private string[] GetDayNames()
    {
        var dayNames = CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames;
        var firstDayOfWeek = CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek;
        var startIndex = (int)firstDayOfWeek;
        
        return Enumerable.Range(0, 7)
            .Select(i => dayNames[(startIndex + i) % 7])
            .ToArray();
    }

    private IEnumerable<CalendarDay> GetCalendarDays()
    {
        var firstDayOfMonth = new DateTime(currentViewDate.Year, currentViewDate.Month, 1);
        var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
        var firstDayOfWeek = CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek;
        
        var startDate = firstDayOfMonth;
        while (startDate.DayOfWeek != firstDayOfWeek)
            startDate = startDate.AddDays(-1);

        var endDate = lastDayOfMonth;
        while (endDate.DayOfWeek != (DayOfWeek)(((int)firstDayOfWeek + 6) % 7))
            endDate = endDate.AddDays(1);

        var days = new List<CalendarDay>();
        for (var date = startDate; date <= endDate; date = date.AddDays(1))
        {
            days.Add(new CalendarDay
            {
                Date = date,
                IsCurrentMonth = date.Month == currentViewDate.Month,
                IsToday = date.Date == DateTime.Today,
                IsWeekend = date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday
            });
        }

        return days;
    }

    private string GetWrapperClasses()
    {
        var classes = new List<string> { "datepicker" };
        
        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);
            
        if (HasError)
            classes.Add("datepicker-error");
            
        if (isOpen)
            classes.Add("datepicker-open");
            
        return string.Join(" ", classes);
    }


    private string GetPopupPositionClass()
    {
        // JavaScript positioning handles dynamic classes via applyDynamicPositioning
        // This method provides a fallback class for initial rendering
        return "datepicker-popup-bottom";
    }


    private string GetDayClasses(CalendarDay day)
    {
        var classes = new List<string> { "datepicker-day" };

        if (!day.IsCurrentMonth)
            classes.Add("datepicker-day-other-month");

        if (day.IsToday)
            classes.Add("datepicker-day-today");

        if (day.IsWeekend)
            classes.Add("datepicker-day-weekend");

        if (IsDateDisabled(day.Date))
            classes.Add("datepicker-day-disabled");


        if (Range)
        {
            var start = tempStartDate ?? Value;
            var end = tempEndDate ?? EndValue ?? hoverDate;

            if (start.HasValue && day.Date.Date == start.Value.Date)
                classes.Add("datepicker-day-range-start");

            if (end.HasValue && day.Date.Date == end.Value.Date && start.HasValue && end.Value.Date != start.Value.Date)
                classes.Add("datepicker-day-range-end");

            if (start.HasValue && end.HasValue && day.Date.Date > start.Value.Date && day.Date.Date < end.Value.Date)
                classes.Add("datepicker-day-range-middle");
        }
        else
        {
            if (Value.HasValue && day.Date.Date == Value.Value.Date)
                classes.Add("datepicker-day-selected");
        }

        return string.Join(" ", classes);
    }

    /// <summary>Gets the effective start icon for RTextInput integration</summary>
    private string GetEffectiveStartIcon()
    {
        if (!string.IsNullOrEmpty(Icon) && IconPosition == IconPosition.Start)
            return Icon;
            
        if (!string.IsNullOrEmpty(StartIcon))
            return StartIcon;
            
        return null;
    }

    /// <summary>Gets the effective end icon for RTextInput integration</summary>
    private string GetEffectiveEndIcon()
    {
        // Show clear button if has value and clear button is enabled
        if (ShowClearButton && HasValue())
        {
            return "close";
        }
        
        // Otherwise show the calendar/time icon
        return ShowTime ? "schedule" : "calendar_month";
    }

    /// <summary>Gets CSS class for the trigger input</summary>
    private string GetTriggerInputClass()
    {
        return "datepicker-input";
    }

    /// <summary>Gets additional attributes for the trigger input</summary>
    private Dictionary<string, object> GetTriggerAttributes()
    {
        var attrs = new Dictionary<string, object>
        {
            ["role"] = "button",
            ["aria-label"] = Label ?? "Select date",
            ["aria-expanded"] = isOpen.ToString().ToLower(),
            ["aria-haspopup"] = "dialog",
            ["tabindex"] = Disabled || ReadOnly ? -1 : 0
        };

        return attrs;
    }

    /// <summary>Converts FieldSize to TextInputSize for RTextInput compatibility</summary>
    private TextInputSize GetTextInputSize()
    {
        return Size switch
        {
            FieldSize.Small => TextInputSize.Small,
            FieldSize.Medium => TextInputSize.Medium,
            FieldSize.Large => TextInputSize.Large,
            _ => TextInputSize.Medium
        };
    }

    private record CalendarDay
    {
        public DateTime Date { get; init; }
        public bool IsCurrentMonth { get; init; }
        public bool IsToday { get; init; }
        public bool IsWeekend { get; init; }
    }

    private IJSObjectReference jsModule;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/RR.Blazor/js/datepicker.js");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"RDatePicker JS initialization failed: {ex.Message}");
            }
        }
        
        // Apply positioning when popup opens
        if (isOpen && jsModule != null)
        {
            try
            {
                await Task.Yield(); // Small delay for DOM updates
                await jsModule.InvokeVoidAsync("RDatePicker.positionPopup", elementRef);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"RDatePicker positioning failed: {ex.Message}");
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (jsModule != null)
            {
                await jsModule.DisposeAsync();
            }
        }
        catch (Exception)
        {

        }
    }
}

