@** 
<summary>Professional date and time picker with calendar popup and time selection</summary>
<category>Form</category>
<complexity>Complex</complexity>
<ai-prompt>Create a date/time picker with calendar popup and validation</ai-prompt>
<ai-common-use>date selection, appointment scheduling, event planning, form dates</ai-common-use>
<ai-avoid>Don't use for simple date input - use RDatePickerBasic instead</ai-avoid>
<ai-pattern name="date-only">@bind-value="selectedDate" ShowTime="false"</ai-pattern>
<ai-pattern name="datetime">@bind-value="dateTime" ShowTime="true" Use24HourFormat="false"</ai-pattern>
<ai-pattern name="date-range">@bind-value="startDate" @bind-EndValue="endDate" Range="true"</ai-pattern>
<ai-pattern name="restricted-dates">MinDate="@DateTime.Today" MaxDate="@futureDate"</ai-pattern>
<ai-pattern name="business-days">DisabledDaysOfWeek="@weekends" MinDate="@DateTime.Today"</ai-pattern>
**@

@attribute [Component("RDatePicker", Category = "Form")]
@attribute [AIOptimized(Prompt = "Create date/time picker with calendar")]

@using System.Globalization
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="rdatepicker @GetWrapperClasses()" @ref="elementRef">
    @* Input Field *@
    <div class="rdatepicker-trigger" @onclick="ToggleCalendar" @onkeydown="HandleKeyDown">
        <input type="text" 
               id="@InputId"
               class="@GetInputClasses()" 
               value="@GetDisplayValue()"
               placeholder="@GetPlaceholder()"
               readonly="true"
               disabled="@Disabled"
               @onfocus="HandleFocus"
               @onblur="HandleBlur" />
        
        @if (!string.IsNullOrEmpty(GetEffectiveIcon()) && IconPosition == IconPosition.Start)
        {
            <div class="rdatepicker-icon rdatepicker-icon-start">
                <i class="material-symbols-rounded @GetIconSizeClass()">@GetEffectiveIcon()</i>
            </div>
        }
        
        <div class="rdatepicker-icon rdatepicker-icon-end">
            <i class="material-symbols-rounded @GetIconSizeClass()">@(ShowTime ? "schedule" : "calendar_month")</i>
        </div>
        
        @if (ShowClearButton && HasValue())
        {
            <button type="button" 
                    class="rdatepicker-clear"
                    @onclick="ClearValue" 
                    @onclick:stopPropagation="true">
                <i class="material-symbols-rounded text-sm">close</i>
            </button>
        }
    </div>
    
    @* Calendar Popup *@
    @if (isOpen)
    {
        <div class="rdatepicker-backdrop" @onclick="CloseCalendar"></div>
        <div class="rdatepicker-popup @GetPopupPositionClass()">
            @* Calendar Header *@
            <div class="rdatepicker-header">
                <button type="button" class="rdatepicker-nav-btn" @onclick="PreviousMonth">
                    <i class="material-symbols-rounded">chevron_left</i>
                </button>
                
                <div class="rdatepicker-header-info">
                    <button type="button" class="rdatepicker-month-year" @onclick="ToggleYearPicker">
                        @currentViewDate.ToString("MMMM yyyy", CultureInfo.CurrentCulture)
                    </button>
                </div>
                
                <button type="button" class="rdatepicker-nav-btn" @onclick="NextMonth">
                    <i class="material-symbols-rounded">chevron_right</i>
                </button>
            </div>
            
            @if (showYearPicker)
            {
                @* Year Picker *@
                <div class="rdatepicker-year-picker">
                    @for (var year = currentViewDate.Year - 10; year <= currentViewDate.Year + 10; year++)
                    {
                        var yearValue = year;
                        <button type="button" 
                                class="rdatepicker-year-option @(year == currentViewDate.Year ? "rdatepicker-year-option-current" : "")"
                                @onclick="() => SelectYear(yearValue)">
                            @year
                        </button>
                    }
                </div>
            }
            else
            {
                @* Calendar Grid *@
                <div class="rdatepicker-calendar">
                    @* Day Headers *@
                    <div class="rdatepicker-day-headers">
                        @foreach (var dayName in GetDayNames())
                        {
                            <div class="rdatepicker-day-header">@dayName</div>
                        }
                    </div>
                    
                    @* Calendar Days *@
                    <div class="rdatepicker-days">
                        @foreach (var day in GetCalendarDays())
                        {
                            <button type="button" 
                                    class="rdatepicker-day @GetDayClasses(day)"
                                    disabled="@IsDateDisabled(day.Date)"
                                    @onclick="() => SelectDate(day.Date)"
                                    @onmouseenter="() => HandleDayHover(day.Date)">
                                @day.Date.Day
                            </button>
                        }
                    </div>
                </div>
                
                @* Time Picker *@
                @if (ShowTime)
                {
                    <div class="rdatepicker-time-picker">
                        <div class="rdatepicker-time-section">
                            <label class="rdatepicker-time-label">Hour</label>
                            <select class="rdatepicker-time-select" 
                                    value="@selectedHour" 
                                    @onchange="HandleHourChange">
                                @for (int h = 0; h < (Use24HourFormat ? 24 : 12); h++)
                                {
                                    var hour = Use24HourFormat ? h : (h == 0 ? 12 : h);
                                    <option value="@h">@hour.ToString("00")</option>
                                }
                            </select>
                        </div>
                        
                        <div class="rdatepicker-time-section">
                            <label class="rdatepicker-time-label">Minute</label>
                            <select class="rdatepicker-time-select" 
                                    value="@selectedMinute" 
                                    @onchange="HandleMinuteChange">
                                @for (int m = 0; m < 60; m += MinuteInterval)
                                {
                                    <option value="@m">@m.ToString("00")</option>
                                }
                            </select>
                        </div>
                        
                        @if (!Use24HourFormat)
                        {
                            <div class="rdatepicker-time-section">
                                <label class="rdatepicker-time-label">Period</label>
                                <select class="rdatepicker-time-select" 
                                        value="@selectedPeriod" 
                                        @onchange="HandlePeriodChange">
                                    <option value="AM">AM</option>
                                    <option value="PM">PM</option>
                                </select>
                            </div>
                        }
                    </div>
                }
                
                @* Footer Actions *@
                <div class="rdatepicker-footer">
                    @if (ShowTodayButton)
                    {
                        <button type="button" class="rdatepicker-action-btn rdatepicker-action-btn-secondary" @onclick="SelectToday">
                            Today
                        </button>
                    }
                    
                    @if (Range && !string.IsNullOrEmpty(GetDisplayValue()))
                    {
                        <button type="button" class="rdatepicker-action-btn rdatepicker-action-btn-secondary" @onclick="ClearValue">
                            Clear
                        </button>
                    }
                    
                    <button type="button" class="rdatepicker-action-btn rdatepicker-action-btn-primary" @onclick="ApplySelection">
                        @(Range ? "Apply" : "Select")
                    </button>
                </div>
            }
        </div>
    }
</div>

@code {
    private ElementReference elementRef;
    private bool isOpen;
    private bool showYearPicker;
    private DateTime currentViewDate = DateTime.Today;
    private DateTime? hoverDate;
    private int selectedHour;
    private int selectedMinute;
    private string selectedPeriod = "AM";
    private DateTime? tempStartDate;
    private DateTime? tempEndDate;
    private bool isSelectingEndDate;

    // Core Parameters
    [Parameter] public string InputId { get; set; } = Guid.NewGuid().ToString("N")[..8];
    [Parameter] [AIParameter("Selected date/time value", Example = "DateTime.Today")] public DateTime? Value { get; set; }
    [Parameter] [AIParameter("Callback when date/time value changes", Example = "OnDateChanged")] public EventCallback<DateTime?> ValueChanged { get; set; }
    [Parameter] [AIParameter("End date for range selection", Example = "endDate")] public DateTime? EndValue { get; set; }
    [Parameter] [AIParameter("Callback when end date changes", Example = "OnEndDateChanged")] public EventCallback<DateTime?> EndValueChanged { get; set; }
    
    // Display Parameters
    [Parameter] [AIParameter("Label text displayed above the picker", Example = "Select Date")] public string Label { get; set; }
    [Parameter] [AIParameter("Placeholder text when no date selected", Example = "Choose a date...")] public string Placeholder { get; set; }
    [Parameter] [AIParameter("Date format string", Example = "dd/MM/yyyy")] public string Format { get; set; }
    [Parameter] [AIParameter("Size of the picker input (Small, Medium, Large)", Example = "FieldSize.Medium")] public FieldSize Size { get; set; } = FieldSize.Medium;
    /// <summary>Icon for the component</summary>
    [Parameter] public string Icon { get; set; }
    
    /// <summary>Position of the icon</summary>
    [Parameter] public IconPosition IconPosition { get; set; } = IconPosition.Start;
    
    /// <summary>Start icon (deprecated - use Icon + IconPosition)</summary>
    [Parameter] public string StartIcon { get; set; }
    [Parameter] public string Class { get; set; }
    
    // Feature Parameters
    [Parameter] [AIParameter("Enable date range selection", Example = "true")] public bool Range { get; set; }
    [Parameter] [AIParameter("Show time picker alongside date", Example = "true")] public bool ShowTime { get; set; }
    [Parameter] [AIParameter("Use 24-hour time format instead of AM/PM", Example = "false")] public bool Use24HourFormat { get; set; } = true;
    [Parameter] [AIParameter("Minute interval for time picker", Example = "15")] public int MinuteInterval { get; set; } = 1;
    [Parameter] public bool ShowClearButton { get; set; } = true;
    [Parameter] public bool ShowTodayButton { get; set; } = true;
    [Parameter] public bool ShowWeekNumbers { get; set; }
    
    // Validation Parameters
    [Parameter] [AIParameter("Minimum selectable date", Example = "DateTime.Today")] public DateTime? MinDate { get; set; }
    [Parameter] [AIParameter("Maximum selectable date", Example = "DateTime.Today.AddYears(1)")] public DateTime? MaxDate { get; set; }
    [Parameter] [AIParameter("Function to disable specific dates", Example = "date => IsHoliday(date)")] public Func<DateTime, bool> DisabledDates { get; set; }
    [Parameter] [AIParameter("Array of disabled days of week", Example = "new[] { DayOfWeek.Saturday, DayOfWeek.Sunday }")] public DayOfWeek[] DisabledDaysOfWeek { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public string HelperText { get; set; }
    
    // State Parameters
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool ReadOnly { get; set; }
    [Parameter] public bool HasError { get; set; }
    [Parameter] public string ErrorMessage { get; set; }
    
    // Event Parameters
    [Parameter] public EventCallback<DateTime?> OnDateSelected { get; set; }
    [Parameter] public EventCallback OnCalendarOpen { get; set; }
    [Parameter] public EventCallback OnCalendarClose { get; set; }

    protected override void OnInitialized()
    {
        if (ShowTime && Value.HasValue)
        {
            var time = Value.Value;
            selectedHour = Use24HourFormat ? time.Hour : (time.Hour % 12);
            selectedMinute = time.Minute;
            selectedPeriod = time.Hour >= 12 ? "PM" : "AM";
        }
        
        if (Value.HasValue)
        {
            currentViewDate = new DateTime(Value.Value.Year, Value.Value.Month, 1);
        }
    }

    private async Task ToggleCalendar()
    {
        if (Disabled || ReadOnly) return;
        
        if (isOpen)
        {
            await CloseCalendar();
        }
        else
        {
            await OpenCalendar();
        }
    }

    private async Task OpenCalendar()
    {
        isOpen = true;
        
        if (Range)
        {
            tempStartDate = Value;
            tempEndDate = EndValue;
            isSelectingEndDate = false;
        }
        
        await OnCalendarOpen.InvokeAsync();
        StateHasChanged();
    }

    private async Task CloseCalendar()
    {
        isOpen = false;
        showYearPicker = false;
        await OnCalendarClose.InvokeAsync();
        StateHasChanged();
    }

    private async Task SelectDate(DateTime date)
    {
        if (IsDateDisabled(date)) return;

        if (ShowTime)
        {
            date = new DateTime(date.Year, date.Month, date.Day, 
                               Use24HourFormat ? selectedHour : ConvertTo24Hour(selectedHour, selectedPeriod), 
                               selectedMinute, 0);
        }

        if (Range)
        {
            if (!isSelectingEndDate)
            {
                tempStartDate = date;
                tempEndDate = null;
                isSelectingEndDate = true;
            }
            else
            {
                if (date < tempStartDate)
                {
                    tempEndDate = tempStartDate;
                    tempStartDate = date;
                }
                else
                {
                    tempEndDate = date;
                }
                isSelectingEndDate = false;
            }
        }
        else
        {
            Value = date;
            await ValueChanged.InvokeAsync(Value);
            await OnDateSelected.InvokeAsync(Value);
            await CloseCalendar();
        }
        
        StateHasChanged();
    }

    private async Task ApplySelection()
    {
        if (Range && tempStartDate.HasValue)
        {
            Value = tempStartDate;
            EndValue = tempEndDate;
            await ValueChanged.InvokeAsync(Value);
            await EndValueChanged.InvokeAsync(EndValue);
            await OnDateSelected.InvokeAsync(Value);
        }
        
        await CloseCalendar();
    }

    private async Task ClearValue()
    {
        Value = null;
        EndValue = null;
        tempStartDate = null;
        tempEndDate = null;
        await ValueChanged.InvokeAsync(Value);
        await EndValueChanged.InvokeAsync(EndValue);
        StateHasChanged();
    }

    private async Task SelectToday()
    {
        await SelectDate(DateTime.Today);
    }

    private void PreviousMonth()
    {
        currentViewDate = currentViewDate.AddMonths(-1);
        StateHasChanged();
    }

    private void NextMonth()
    {
        currentViewDate = currentViewDate.AddMonths(1);
        StateHasChanged();
    }

    private void ToggleYearPicker()
    {
        showYearPicker = !showYearPicker;
        StateHasChanged();
    }

    private void SelectYear(int year)
    {
        currentViewDate = new DateTime(year, currentViewDate.Month, 1);
        showYearPicker = false;
        StateHasChanged();
    }

    private void HandleDayHover(DateTime date)
    {
        if (Range && isSelectingEndDate && tempStartDate.HasValue)
        {
            hoverDate = date;
            StateHasChanged();
        }
    }

    private async Task HandleHourChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var hour))
        {
            selectedHour = hour;
            await UpdateTimeIfNeeded();
        }
    }

    private async Task HandleMinuteChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var minute))
        {
            selectedMinute = minute;
            await UpdateTimeIfNeeded();
        }
    }

    private async Task HandlePeriodChange(ChangeEventArgs e)
    {
        selectedPeriod = e.Value?.ToString() ?? "AM";
        await UpdateTimeIfNeeded();
    }

    private async Task UpdateTimeIfNeeded()
    {
        if (Value.HasValue && ShowTime && !Range)
        {
            var date = Value.Value.Date;
            var time = new DateTime(date.Year, date.Month, date.Day,
                                   Use24HourFormat ? selectedHour : ConvertTo24Hour(selectedHour, selectedPeriod),
                                   selectedMinute, 0);
            Value = time;
            await ValueChanged.InvokeAsync(Value);
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Enter" or " ":
                await ToggleCalendar();
                break;
            case "Escape":
                if (isOpen) await CloseCalendar();
                break;
        }
    }

    private async Task HandleFocus(FocusEventArgs e)
    {
        // Handle focus events if needed
    }

    private async Task HandleBlur(FocusEventArgs e)
    {
        // Handle blur events if needed
    }

    private bool HasValue() => Value.HasValue || EndValue.HasValue;

    private string GetDisplayValue()
    {
        if (!HasValue()) return "";

        var format = Format ?? GetDefaultFormat();
        
        if (Range)
        {
            var start = Value?.ToString(format) ?? "";
            var end = EndValue?.ToString(format) ?? "";
            return string.IsNullOrEmpty(end) ? start : $"{start} - {end}";
        }
        
        return Value?.ToString(format) ?? "";
    }

    private string GetPlaceholder()
    {
        if (!string.IsNullOrEmpty(Placeholder)) return Placeholder;
        
        var format = Format ?? GetDefaultFormat();
        return Range ? $"Select date range... ({format})" : $"Select date... ({format})";
    }

    private string GetDefaultFormat()
    {
        if (ShowTime)
            return Use24HourFormat ? "dd/MM/yyyy HH:mm" : "dd/MM/yyyy hh:mm tt";
        return "dd/MM/yyyy";
    }

    private bool IsDateDisabled(DateTime date)
    {
        if (MinDate.HasValue && date < MinDate.Value.Date) return true;
        if (MaxDate.HasValue && date > MaxDate.Value.Date) return true;
        if (DisabledDaysOfWeek?.Contains(date.DayOfWeek) == true) return true;
        if (DisabledDates?.Invoke(date) == true) return true;
        return false;
    }

    private int ConvertTo24Hour(int hour, string period)
    {
        if (hour == 12) return period == "AM" ? 0 : 12;
        return period == "PM" ? hour + 12 : hour;
    }

    private string[] GetDayNames()
    {
        var dayNames = CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames;
        var firstDayOfWeek = CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek;
        var startIndex = (int)firstDayOfWeek;
        
        return Enumerable.Range(0, 7)
            .Select(i => dayNames[(startIndex + i) % 7])
            .ToArray();
    }

    private IEnumerable<CalendarDay> GetCalendarDays()
    {
        var firstDayOfMonth = new DateTime(currentViewDate.Year, currentViewDate.Month, 1);
        var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
        var firstDayOfWeek = CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek;
        
        var startDate = firstDayOfMonth;
        while (startDate.DayOfWeek != firstDayOfWeek)
            startDate = startDate.AddDays(-1);

        var endDate = lastDayOfMonth;
        while (endDate.DayOfWeek != (DayOfWeek)(((int)firstDayOfWeek + 6) % 7))
            endDate = endDate.AddDays(1);

        var days = new List<CalendarDay>();
        for (var date = startDate; date <= endDate; date = date.AddDays(1))
        {
            days.Add(new CalendarDay
            {
                Date = date,
                IsCurrentMonth = date.Month == currentViewDate.Month,
                IsToday = date.Date == DateTime.Today,
                IsWeekend = date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday
            });
        }

        return days;
    }

    private string GetWrapperClasses()
    {
        var classes = new List<string> { "rdatepicker" };
        
        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);
            
        if (HasError)
            classes.Add("rdatepicker-error");
            
        if (isOpen)
            classes.Add("rdatepicker-open");
            
        return string.Join(" ", classes);
    }

    private string GetInputClasses()
    {
        var classes = new List<string>
        {
            "rdatepicker-input",
            "w-full",
            "border",
            "rounded-md",
            "bg-surface-elevated",
            "text-primary",
            "transition",
            "focus:border-primary",
            "focus:shadow-primary",
            "cursor-pointer"
        };

        classes.Add(Size switch
        {
            FieldSize.Small => "pl-3 pr-3 pt-1 pb-1 text-sm h-8",
            FieldSize.Medium => "pl-3 pr-3 pt-2 pb-2 text-base h-10",
            FieldSize.Large => "pl-4 pr-4 pt-3 pb-3 text-lg h-12",
            _ => "pl-3 pr-3 pt-2 pb-2 text-base h-10"
        });

        if (!string.IsNullOrEmpty(GetEffectiveIcon()) && IconPosition == IconPosition.Start)
        {
            classes.Add(Size switch
            {
                FieldSize.Small => "pl-8",
                FieldSize.Medium => "pl-10",
                FieldSize.Large => "pl-12",
                _ => "pl-10"
            });
        }

        classes.Add(Size switch
        {
            FieldSize.Small => "pr-16",
            FieldSize.Medium => "pr-20",
            FieldSize.Large => "pr-24",
            _ => "pr-20"
        });

        if (HasError)
        {
            classes.AddRange(new[] { "border-error", "focus:border-error", "focus:shadow-error" });
        }
        else
        {
            classes.Add("border-medium");
        }

        if (Disabled)
        {
            classes.AddRange(new[] { "bg-disabled", "text-muted", "cursor-not-allowed" });
        }
        else
        {
            classes.Add("hover:border-strong");
        }

        return string.Join(" ", classes);
    }

    private string GetPopupPositionClass()
    {
        return "rdatepicker-popup-bottom"; // TODO: Add dynamic positioning
    }

    private string GetIconSizeClass()
    {
        return Size switch
        {
            FieldSize.Small => "text-sm",
            FieldSize.Medium => "text-base",
            FieldSize.Large => "text-lg",
            _ => "text-base"
        };
    }

    private string GetDayClasses(CalendarDay day)
    {
        var classes = new List<string> { "rdatepicker-day" };

        if (!day.IsCurrentMonth)
            classes.Add("rdatepicker-day-other-month");

        if (day.IsToday)
            classes.Add("rdatepicker-day-today");

        if (day.IsWeekend)
            classes.Add("rdatepicker-day-weekend");

        if (IsDateDisabled(day.Date))
            classes.Add("rdatepicker-day-disabled");

        // Range selection styling
        if (Range)
        {
            var start = tempStartDate ?? Value;
            var end = tempEndDate ?? EndValue ?? hoverDate;

            if (start.HasValue && day.Date.Date == start.Value.Date)
                classes.Add("rdatepicker-day-range-start");

            if (end.HasValue && day.Date.Date == end.Value.Date && start.HasValue && end.Value.Date != start.Value.Date)
                classes.Add("rdatepicker-day-range-end");

            if (start.HasValue && end.HasValue && day.Date.Date > start.Value.Date && day.Date.Date < end.Value.Date)
                classes.Add("rdatepicker-day-range-middle");
        }
        else
        {
            if (Value.HasValue && day.Date.Date == Value.Value.Date)
                classes.Add("rdatepicker-day-selected");
        }

        return string.Join(" ", classes);
    }

    /// <summary>Gets the effective icon, supporting both new and legacy patterns</summary>
    private string GetEffectiveIcon()
    {
        // New unified pattern takes precedence
        if (!string.IsNullOrEmpty(Icon))
            return Icon;
            
        // Legacy fallback for backward compatibility
        if (!string.IsNullOrEmpty(StartIcon))
            return StartIcon;
            
        return null;
    }

    private record CalendarDay
    {
        public DateTime Date { get; init; }
        public bool IsCurrentMonth { get; init; }
        public bool IsToday { get; init; }
        public bool IsWeekend { get; init; }
    }

    private IJSObjectReference jsModule;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/RR.Blazor/js/rdatepicker.js");
                await jsModule.InvokeVoidAsync("init", InputId, new { });
            }
            catch (Exception ex)
            {
                // Graceful fallback - datepicker will work without JS enhancements
                Console.WriteLine($"RDatePicker JS initialization failed: {ex.Message}");
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (jsModule != null)
            {
                await jsModule.InvokeVoidAsync("RDatePicker.destroy", InputId);
                await jsModule.DisposeAsync();
            }
        }
        catch (Exception)
        {
            // Ignore disposal errors
        }
    }
}

<style>
.rdatepicker {
    position: relative;
    display: inline-block;
    width: 100%;
}

.rdatepicker-trigger {
    position: relative;
    cursor: pointer;
}

.rdatepicker-input {
    padding-right: 2.5rem !important;
}

.rdatepicker-icon {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    color: var(--color-text-tertiary);
    pointer-events: none;
    display: flex;
    align-items: center;
    justify-content: center;
}

.rdatepicker-icon-start {
    left: 0.75rem;
}

.rdatepicker-icon-end {
    right: 2.5rem;
}

.rdatepicker-clear {
    position: absolute;
    top: 50%;
    right: 0.5rem;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: var(--color-text-tertiary);
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
}

.rdatepicker-clear:hover {
    background: var(--color-background-elevated);
    color: var(--color-text-primary);
}

.rdatepicker-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 999;
    background: transparent;
}

.rdatepicker-popup {
    position: absolute;
    z-index: 1000;
    background: var(--color-background-elevated);
    border: 1px solid var(--color-border-light);
    border-radius: 0.5rem;
    box-shadow: var(--shadow-lg);
    min-width: 320px;
    max-width: 400px;
}

.rdatepicker-popup-bottom {
    top: calc(100% + 0.5rem);
    left: 0;
}

.rdatepicker-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem;
    border-bottom: 1px solid var(--color-border-light);
}

.rdatepicker-nav-btn {
    background: none;
    border: none;
    padding: 0.5rem;
    border-radius: 0.25rem;
    cursor: pointer;
    color: var(--color-text-secondary);
    transition: all 0.2s ease;
}

.rdatepicker-nav-btn:hover {
    background: var(--color-background-secondary);
    color: var(--color-text-primary);
}

.rdatepicker-month-year {
    background: none;
    border: none;
    font-weight: 600;
    font-size: 1rem;
    color: var(--color-text-primary);
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 0.25rem;
    transition: all 0.2s ease;
}

.rdatepicker-month-year:hover {
    background: var(--color-background-secondary);
}

.rdatepicker-year-picker {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 0.5rem;
    padding: 1rem;
    max-height: 200px;
    overflow-y: auto;
}

.rdatepicker-year-option {
    background: none;
    border: none;
    padding: 0.75rem;
    border-radius: 0.25rem;
    cursor: pointer;
    color: var(--color-text-secondary);
    transition: all 0.2s ease;
    font-size: 0.875rem;
}

.rdatepicker-year-option:hover {
    background: var(--color-background-secondary);
    color: var(--color-text-primary);
}

.rdatepicker-year-option-current {
    background: var(--color-interactive-primary);
    color: white;
}

.rdatepicker-calendar {
    padding: 1rem;
}

.rdatepicker-day-headers {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 0.25rem;
    margin-bottom: 0.5rem;
}

.rdatepicker-day-header {
    text-align: center;
    font-size: 0.75rem;
    font-weight: 600;
    color: var(--color-text-tertiary);
    padding: 0.5rem;
    text-transform: uppercase;
}

.rdatepicker-days {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    gap: 0.125rem;
}

.rdatepicker-day {
    background: none;
    border: none;
    aspect-ratio: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.875rem;
    cursor: pointer;
    border-radius: 0.25rem;
    color: var(--color-text-primary);
    transition: all 0.2s ease;
    position: relative;
}

.rdatepicker-day:hover:not(:disabled) {
    background: var(--color-background-secondary);
}

.rdatepicker-day-other-month {
    color: var(--color-text-tertiary);
}

.rdatepicker-day-today {
    font-weight: 600;
    color: var(--color-interactive-primary);
}

.rdatepicker-day-weekend {
    color: var(--color-text-secondary);
}

.rdatepicker-day-disabled {
    color: var(--color-text-disabled);
    cursor: not-allowed;
    opacity: 0.5;
}

.rdatepicker-day-selected {
    background: var(--color-interactive-primary);
    color: white;
}

.rdatepicker-day-range-start,
.rdatepicker-day-range-end {
    background: var(--color-interactive-primary);
    color: white;
}

.rdatepicker-day-range-middle {
    background: var(--color-interactive-primary);
    color: white;
    opacity: 0.7;
}

.rdatepicker-time-picker {
    display: flex;
    gap: 1rem;
    padding: 1rem;
    border-top: 1px solid var(--color-border-light);
}

.rdatepicker-time-section {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    flex: 1;
}

.rdatepicker-time-label {
    font-size: 0.75rem;
    font-weight: 600;
    color: var(--color-text-secondary);
    text-transform: uppercase;
}

.rdatepicker-time-select {
    padding: 0.5rem;
    border: 1px solid var(--color-border-medium);
    border-radius: 0.25rem;
    background: var(--color-background-elevated);
    color: var(--color-text-primary);
    font-size: 0.875rem;
}

.rdatepicker-footer {
    display: flex;
    gap: 0.5rem;
    padding: 1rem;
    border-top: 1px solid var(--color-border-light);
    justify-content: flex-end;
}

.rdatepicker-action-btn {
    padding: 0.5rem 1rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    border: 1px solid transparent;
}

.rdatepicker-action-btn-primary {
    background: var(--color-interactive-primary);
    color: white;
}

.rdatepicker-action-btn-primary:hover {
    background: var(--color-interactive-primary-hover);
}

.rdatepicker-action-btn-secondary {
    background: none;
    color: var(--color-text-secondary);
    border-color: var(--color-border-medium);
}

.rdatepicker-action-btn-secondary:hover {
    background: var(--color-background-secondary);
    color: var(--color-text-primary);
}

.rdatepicker-error .rdatepicker-input {
    border-color: var(--color-error);
}

.rdatepicker-error .rdatepicker-input:focus {
    border-color: var(--color-error);
    box-shadow: 0 0 0 3px hsla(0, 84%, 60%, 0.1);
}
</style>

