@*
    Text input component with floating labels, validation, and multiple variants.
    
    Usage Examples:
    <RTextInput @bind-Value="name" Placeholder="Enter your name" />
    <RTextInput @bind-Value="email" Type="FieldType.Email" StartIcon="mail" />
    <RTextInput @bind-Value="password" Type="FieldType.Password" />
    <RTextInput @bind-Value="notes" IsMultiLine="true" Rows="4" />
    <RTextInput @bind-Value="description" IsMultiLine="true" ShowCharacterCount="true" MaxLength="500" />
*@

@inherits RInputBase
@implements IDisposable
@inject IJSRuntime JSRuntime
@using RR.Blazor.Components.Base
@attribute [Component("RTextInput", Category = "Form", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(
    Prompt = "Specific text input component - single line, multi-line, with icons, validation, and modern styling",
    CommonUse = "Text inputs when you need specific control, textareas, notes, descriptions",
    AvoidUsage = "Use RInput smart wrapper for automatic type detection, Rich text editing (use dedicated editor)"
)]

<div class="@GetContainerClasses()">
    @if (!string.IsNullOrEmpty(Label) && !IsFloatingLabel())
    {
        <label class="@GetLabelClasses()" for="@inputId">@Label</label>
    }
    
    <div class="@GetWrapperClasses()">
        @if (!string.IsNullOrEmpty(StartIcon))
        {
            <div class="@GetStartIconContainerClasses()">
                <i class="material-symbols-rounded @GetIconClasses()" @onclick="@OnStartIconClick">@StartIcon</i>
            </div>
        }
        
        @if (IsMultiLine)
        {
            <textarea id="@inputId"
                      class="@GetInputClasses()"
                      @bind="@CurrentValue"
                      @bind:event="oninput"
                      placeholder="@GetEffectivePlaceholder()"
                      disabled="@Disabled"
                      readonly="@ReadOnly"
                      required="@Required"
                      rows="@Rows"
                      maxlength="@MaxLength"
                      data-field="@GetEffectiveFieldName()"
                      data-has-value="@(HasValue().ToString().ToLower())"
                      @onfocus="@HandleFocus"
                      @onblur="@HandleBlur"
                      @onkeypress="@OnKeyPress"
                      @onkeydown="@OnKeyDown"
                      @attributes="GetSafeAttributes()"></textarea>
        }
        else
        {
            <input id="@inputId"
                   type="@GetEffectiveInputType()"
                   min="@(Min?.ToString())"
                   max="@(Max?.ToString())"
                   step="@(Step?.ToString())"
                   class="@GetInputClasses()"
                   @bind="@CurrentValue"
                   @bind:event="oninput"
                   placeholder="@GetEffectivePlaceholder()"
                   disabled="@Disabled"
                   readonly="@ReadOnly"
                   required="@Required"
                   autocomplete="@AutoComplete"
                   data-field="@GetEffectiveFieldName()"
                   data-has-value="@(HasValue().ToString().ToLower())"
                   @onfocus="@HandleFocus"
                   @onblur="@HandleBlur"
                   @onkeypress="@OnKeyPress"
                   @onkeydown="@OnKeyDown"
                   @attributes="GetSafeAttributes()" />
        }
        
        @if (!string.IsNullOrEmpty(Label) && IsFloatingLabel())
        {
            <label class="floating-label" for="@inputId">@Label</label>
        }
        
        @if (IsPasswordField && ShowPasswordToggle)
        {
            <div class="input-group-icon-end">
                <button type="button" 
                        @onclick="TogglePasswordVisibility"
                        title="@(showPassword ? "Hide password" : "Show password")"
                        aria-label="@(showPassword ? "Hide password" : "Show password")"
                        class="touch-target hover-scale-sm active-scale-sm transition-transform opacity-75 hover:opacity-100">
                    <i class="material-symbols-rounded">@(showPassword ? "visibility_off" : "visibility")</i>
                </button>
            </div>
        }
        else if (!string.IsNullOrEmpty(EndIcon))
        {
            <div class="@GetEndIconContainerClasses()">
                <i class="material-symbols-rounded @GetIconClasses()" @onclick="@OnEndIconClick">@EndIcon</i>
            </div>
        }
        
        @if (IsMultiLine && ShowCharacterCount && MaxLength.HasValue)
        {
            <div class="@GetCharacterCountClasses()">
                @((Value?.Length ?? 0).ToString("N0")) / @(MaxLength.Value.ToString("N0"))
            </div>
        }
        
        @if (Loading)
        {
            <div class="absolute inset-0 d-flex items-center justify-center bg-surface opacity-75">
                <i class="material-symbols-rounded text-primary animate-spin">progress_activity</i>
            </div>
        }
    </div>
    
    @if (IsInErrorState && !string.IsNullOrEmpty(GetEffectiveErrorMessage()))
    {
        <div class="@GetErrorMessageClasses()">
            <i class="material-symbols-rounded text-error text-sm mr-1">error</i>
            @GetEffectiveErrorMessage()
        </div>
    }
    
    @if (!string.IsNullOrEmpty(HelpText))
    {
        <div class="@GetHelpTextClasses()">@HelpText</div>
    }
</div>

@code {
    private string inputId = $"text-input-{Guid.NewGuid():N}";
    
    #region Parameters
    
    [Parameter] 
    [AIParameter("Input value", Example = "\"John Doe\"")]
    public string Value { get; set; } = "";
    
    [Parameter] 
    [AIParameter("Value changed callback")]
    public EventCallback<string> ValueChanged { get; set; }
    
    [Parameter] 
    [AIParameter("Input type", SuggestedValues = new[] { "Text", "Email", "Password", "Number", "Tel", "Url", "Search" }, Example = "FieldType.Email")]
    public FieldType Type { get; set; } = FieldType.Text;
    
    [Parameter]
    [AIParameter("Minimum value for number inputs", Example = "0")]
    public decimal? Min { get; set; }
    
    [Parameter]
    [AIParameter("Maximum value for number inputs", Example = "100")]
    public decimal? Max { get; set; }
    
    [Parameter]
    [AIParameter("Step value for number inputs", Example = "0.01")]
    public decimal? Step { get; set; }
    
    [Parameter]
    [AIParameter("Show password toggle for password fields")]
    public bool ShowPasswordToggle { get; set; } = true;
    
    [Parameter]
    [AIParameter("Use textarea instead of input (multi-line)", Example = "true")]
    public bool IsMultiLine { get; set; }
    
    [Parameter]
    [AIParameter("Number of visible rows for textarea", Example = "4")]
    public int Rows { get; set; } = 3;
    
    [Parameter]
    [AIParameter("Show character count indicator for textareas")]
    public bool ShowCharacterCount { get; set; }
    
    [Parameter]
    [AIParameter("Textarea resize behavior", SuggestedValues = new[] { "none", "vertical", "horizontal", "both", "auto" })]
    public string Resize { get; set; } = "vertical";
    
    [Parameter]
    [AIParameter("Auto-complete attribute for forms")]
    public string? AutoComplete { get; set; }
    
    [Parameter]
    [AIParameter("Field name for form submission")]
    public string? Name { get; set; }
    
    #endregion
    
    #region Private Fields
    
    private bool showPassword;
    private Timer? debounceTimer;
    
    private bool IsPasswordField => Type == FieldType.Password;
    
    private string GetEffectiveInputType()
    {
        if (IsPasswordField && showPassword)
            return "text";
        return Type.ToString().ToLower();
    }
    
    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }
    

    
    #endregion
    
    #region Methods
    
    
    protected string CurrentValue
    {
        get => Value ?? "";
        set
        {
            if (Value != value)
            {
                Value = value;
                
                // Fire ValueChanged only when needed, not on every keystroke  
                if (ValueChanged.HasDelegate)
                    _ = ValueChanged.InvokeAsync(Value);
                    
                _ = HandleUserInteraction(!string.IsNullOrEmpty(value));
            }
        }
    }
    
    
    protected override async Task HandleFocus(FocusEventArgs e)
    {
        await base.HandleFocus(e);
    }
    
    protected override async Task HandleBlur(FocusEventArgs e)
    {
        await base.HandleBlur(e);
        
        // Fire OnTextChanged callback if available (blur event only)
        if (OnTextChanged.HasDelegate)
            await OnTextChanged.InvokeAsync(Value);
    }
    
    
    private string GetContainerClasses()
    {
        var classes = new List<string> { "input-group" };
        
        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);
            
        return string.Join(" ", classes);
    }
    
    private string GetWrapperClasses()
    {
        var classes = new List<string> { "relative" };
        
        if (IsFloatingLabel())
        {
            classes.Add("input-floating");
        }
        


        
        return string.Join(" ", classes);
    }
    
    private string GetInputClasses()
    {
        var classes = new List<string>
        {
            "input",  // Base input component class for essentials
            "w-full",
            "border",
            "rounded-lg",
            "transition-all",
            "outline-none",
            "focus:outline-none"
        };
        
        // Base styling with utilities
        classes.Add("bg-surface-elevated");
        classes.Add("text-primary");
        
        // Variant-specific utilities
        classes.AddRange(GetVariantUtilities());
        
        // Size and density utilities
        classes.Add(GetSizeDensityUtilities());
        
        // Icon padding utilities - use proper input modifiers for better control
        if (!string.IsNullOrEmpty(StartIcon))
        {
            classes.Add("input-with-start-icon");  // Proper icon-aware padding
        }
        if (!string.IsNullOrEmpty(EndIcon) || (IsPasswordField && ShowPasswordToggle))
        {
            classes.Add("input-with-end-icon");  // Proper icon-aware padding
        }
        
        // State utilities
        if (HasError)
        {
            classes.Add("input-error");
            classes.Add("border-error");
            classes.Add("border-2");
            classes.Add("bg-error-light");
        }
        else
        {
            classes.Add("border-light");
            classes.Add("hover:border-secondary");
            classes.Add("focus:border-primary");
            classes.Add("focus:border-2");
        }
        
        // Focus ring utilities
        classes.Add("focus:ring-2");
        classes.Add("focus:ring-primary");
        classes.Add("focus:ring-opacity-25");
        
        if (Disabled)
        {
            classes.Add("state-disabled");
        }
        
        if (ReadOnly)
        {
            classes.Add("cursor-default");
            classes.Add("opacity-80");
        }
        
        if (Loading)
        {
            classes.Add("loading");
        }
        
        // Hover effects
        if (!Disabled && !ReadOnly)
        {
            classes.Add("hover:shadow-sm");
            classes.Add("hover:-translate-y-px");
        }
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }
    
    private string GetEffectivePlaceholder()
    {
        return IsFloatingLabel() ? "" : Placeholder ?? "";
    }
    
    private List<string> GetVariantUtilities()
    {
        return Variant switch
        {
            TextInputVariant.Outlined => new List<string> { "bg-transparent", "border-2" },
            TextInputVariant.Filled => new List<string> { "bg-surface", "border-transparent" },
            TextInputVariant.Clean => new List<string> { "bg-surface", "border-transparent", "hover:bg-surface-elevated" },
            TextInputVariant.Glass => new List<string> { "glass-light", "backdrop-blur-sm", "bg-overlay" },
            _ => new List<string>()
        };
    }
    
    private string GetSizeDensityUtilities()
    {
        return (Size, Density) switch
        {
            // Small size variations
            (SizeType.Small, DensityType.Compact) => "px-2 py-1 text-xs",
            (SizeType.Small, DensityType.Dense) => "px-3 py-1 text-sm",
            (SizeType.Small, DensityType.Normal) => "px-3 py-2 text-sm",
            (SizeType.Small, DensityType.Spacious) => "px-4 py-2 text-sm",
            
            // Medium size variations (default)
            (SizeType.Medium, DensityType.Compact) => "px-3 py-1 text-sm",
            (SizeType.Medium, DensityType.Dense) => "px-3 py-2 text-base",
            (SizeType.Medium, DensityType.Normal) => "px-4 py-3 text-base",
            (SizeType.Medium, DensityType.Spacious) => "px-5 py-4 text-base",
            
            // Large size variations
            (SizeType.Large, DensityType.Compact) => "px-3 py-2 text-base",
            (SizeType.Large, DensityType.Dense) => "px-4 py-2 text-lg",
            (SizeType.Large, DensityType.Normal) => "px-5 py-3 text-lg",
            (SizeType.Large, DensityType.Spacious) => "px-6 py-4 text-lg",
            
            _ => "px-4 py-3 text-base" // Default to medium/normal
        };
    }
    
    
    
    private string GetStartIconContainerClasses()
    {
        return "input-group-icon text-secondary";
    }
    
    private string GetEndIconContainerClasses()
    {
        return "input-group-icon-end text-secondary";
    }
    
    private string GetIconClasses()
    {
        return Size switch
        {
            SizeType.Small => "text-sm",
            SizeType.Large => "text-xl",
            _ => "text-lg"
        };
    }
    
    private string GetLabelClasses()
    {
        return "block text-sm font-medium text-secondary uppercase tracking-wide mb-1";
    }
    
    private string GetErrorMessageClasses()
    {
        return "d-flex align-center gap-1 text-error text-sm mt-1";
    }
    
    private string GetHelpTextClasses()
    {
        return "text-secondary text-sm mt-1";
    }
    
    private string GetPasswordToggleButtonClasses()
    {
        return ""; // Styling handled in SCSS for better consistency
    }
    
    private bool IsFloatingLabel()
    {
        return Variant == TextInputVariant.Outlined || Variant == TextInputVariant.Filled;
    }
    
    private bool HasValue()
    {
        return !string.IsNullOrEmpty(Value);
    }
    
    private string GetFloatingLabelClasses()
    {

        return "form-label form-label-floating";
    }
    
    private string GetCharacterCountClasses()
    {
        return Density switch
        {
            DensityType.Compact => "absolute bottom-1 right-2 text-xs text-secondary",
            DensityType.Dense => "absolute bottom-1 right-2 text-xs text-secondary",
            DensityType.Normal => "absolute bottom-2 right-3 text-sm text-secondary",
            DensityType.Spacious => "absolute bottom-3 right-4 text-base text-secondary",
            _ => "absolute bottom-2 right-3 text-sm text-secondary"
        };
    }
    
    #endregion
    
    #region Attribute Filtering
    
    /// <summary>
    /// Returns safely filtered HTML attributes using centralized RAttributeForwarder.
    /// </summary>
    private Dictionary<string, object> GetSafeAttributes()
    {
        return RAttributeForwarder.GetSafeAttributes(AdditionalAttributes);
    }
    
    #endregion
    
    #region IDisposable
    
    public void Dispose()
    {
        debounceTimer?.Dispose();
    }
    
    #endregion
}