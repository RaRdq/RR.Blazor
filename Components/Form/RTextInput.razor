@*
    RTextInput - Specific text input component implementation
    
    A specialized component that handles both single-line and multi-line text inputs
    with comprehensive styling, validation, and modern UX features.
    
    Key Features:
    - Single component for text inputs and textareas
    - Utility-first CSS composition with gradient animations
    - Revolutionary floating labels with perfect background blending
    - Perfect icon positioning with 60px clearance
    - Comprehensive validation states with error/success gradients
    - Touch-friendly mobile design with iOS zoom prevention
    - Multiple style variants (Clean, Filled, Outlined, Glass)
    - Size variants (Small, Medium, Large) with proper density
    - Password toggle functionality
    - Character counting for textareas
    - Auto-resize capability for textareas
    
    Usage Examples:
    <RTextInput @bind-Value="name" Placeholder="Enter your name" />
    <RTextInput @bind-Value="email" Type="FieldType.Email" StartIcon="mail" />
    <RTextInput @bind-Value="password" Type="FieldType.Password" />
    <RTextInput @bind-Value="notes" IsMultiLine="true" Rows="4" />
    <RTextInput @bind-Value="description" IsMultiLine="true" ShowCharacterCount="true" MaxLength="500" />
*@

@using RR.Blazor.Enums
@using RR.Blazor.Models
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inherits RInputBase
@inject IJSRuntime JSRuntime
@attribute [Component("RTextInput", Category = "Form", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(
    Prompt = "Specific text input component - single line, multi-line, with icons, validation, and modern styling",
    CommonUse = "Text inputs when you need specific control, textareas, notes, descriptions",
    AvoidUsage = "Use RInput smart wrapper for automatic type detection, Rich text editing (use dedicated editor)"
)]

<div class="@GetContainerClasses()">
    @if (!string.IsNullOrEmpty(Label) && !IsFloatingLabel())
    {
        <label class="@GetLabelClasses()" for="@inputId">@Label</label>
    }
    
    <div class="@GetWrapperClasses()">
        @if (!string.IsNullOrEmpty(StartIcon))
        {
            <div class="@GetStartIconContainerClasses()">
                <i class="material-symbols-rounded @GetIconClasses()" @onclick="@OnStartIconClick">@StartIcon</i>
            </div>
        }
        
        @if (IsMultiLine)
        {
            <textarea id="@inputId"
                      class="@GetInputClasses()"
                      value="@Value"
                      placeholder="@GetEffectivePlaceholder()"
                      disabled="@Disabled"
                      readonly="@ReadOnly"
                      required="@Required"
                      rows="@Rows"
                      maxlength="@MaxLength"
                      data-field="@GetEffectiveFieldName()"
                      data-has-value="@(HasValue().ToString().ToLower())"
                      @oninput="@HandleInput"
                      @onchange="@HandleValueChange"
                      @onfocus="@HandleFocus"
                      @onblur="@HandleBlur"
                      @onkeypress="@OnKeyPress"
                      @onkeydown="@OnKeyDown"></textarea>
        }
        else
        {
            <input id="@inputId"
                   type="@GetEffectiveInputType()"
                   min="@(Min?.ToString())"
                   max="@(Max?.ToString())"
                   step="@(Step?.ToString())"
                   class="@GetInputClasses()"
                   value="@Value"
                   placeholder="@GetEffectivePlaceholder()"
                   disabled="@Disabled"
                   readonly="@ReadOnly"
                   required="@Required"
                   autocomplete="@AutoComplete"
                   data-field="@GetEffectiveFieldName()"
                   data-has-value="@(HasValue().ToString().ToLower())"
                   @oninput="@HandleInput"
                   @onchange="@HandleValueChange"
                   @onfocus="@HandleFocus"
                   @onblur="@HandleBlur"
                   @onkeypress="@OnKeyPress"
                   @onkeydown="@OnKeyDown" />
        }
        
        @if (!string.IsNullOrEmpty(Label) && IsFloatingLabel())
        {
            <label class="floating-label" for="@inputId">@Label</label>
        }
        
        @if (IsPasswordField && ShowPasswordToggle)
        {
            <div class="input-group-icon-end">
                <button type="button" 
                        @onclick="TogglePasswordVisibility"
                        title="@(showPassword ? "Hide password" : "Show password")"
                        aria-label="@(showPassword ? "Hide password" : "Show password")"
                        class="touch-target min-h-11 min-w-11">
                    <i class="material-symbols-rounded">@(showPassword ? "visibility_off" : "visibility")</i>
                </button>
            </div>
        }
        else if (!string.IsNullOrEmpty(EndIcon))
        {
            <div class="@GetEndIconContainerClasses()">
                <i class="material-symbols-rounded @GetIconClasses()" @onclick="@OnEndIconClick">@EndIcon</i>
            </div>
        }
        
        @if (IsMultiLine && ShowCharacterCount && MaxLength > 0)
        {
            <div class="@GetCharacterCountClasses()">
                @((Value?.Length ?? 0).ToString("N0")) / @(MaxLength?.ToString("N0") ?? "0")
            </div>
        }
        
        @if (Loading)
        {
            <div class="absolute inset-0 d-flex items-center justify-center bg-surface bg-opacity-75">
                <i class="material-symbols-rounded text-primary animate-spin">progress_activity</i>
            </div>
        }
    </div>
    
    @if (IsInErrorState && !string.IsNullOrEmpty(GetEffectiveErrorMessage()))
    {
        <div class="@GetErrorMessageClasses()">
            <i class="material-symbols-rounded text-error mr-1">error</i>
            @GetEffectiveErrorMessage()
        </div>
    }
    
    @if (!string.IsNullOrEmpty(HelpText))
    {
        <div class="@GetHelpTextClasses()">@HelpText</div>
    }
</div>

@code {
    private string inputId = $"text-input-{Guid.NewGuid():N}";
    
    #region Parameters
    
    [Parameter] 
    [AIParameter("Input value", Example = "\"John Doe\"")]
    public string? Value { get; set; }
    
    [Parameter] 
    [AIParameter("Value changed callback")]
    public EventCallback<string> ValueChanged { get; set; }
    
    [Parameter] 
    [AIParameter("Input type", SuggestedValues = new[] { "Text", "Email", "Password", "Number", "Tel", "Url", "Search" }, Example = "FieldType.Email")]
    public FieldType Type { get; set; } = FieldType.Text;
    
    [Parameter]
    [AIParameter("Minimum value for number inputs", Example = "0")]
    public decimal? Min { get; set; }
    
    [Parameter]
    [AIParameter("Maximum value for number inputs", Example = "100")]
    public decimal? Max { get; set; }
    
    [Parameter]
    [AIParameter("Step value for number inputs", Example = "0.01")]
    public decimal? Step { get; set; }
    
    [Parameter]
    [AIParameter("Show password toggle for password fields")]
    public bool ShowPasswordToggle { get; set; } = true;
    
    [Parameter]
    [AIParameter("Use textarea instead of input (multi-line)", Example = "true")]
    public bool IsMultiLine { get; set; } = false;
    
    [Parameter]
    [AIParameter("Number of visible rows for textarea", Example = "4")]
    public int Rows { get; set; } = 3;
    
    [Parameter]
    [AIParameter("Show character count indicator for textareas")]
    public bool ShowCharacterCount { get; set; } = false;
    
    [Parameter]
    [AIParameter("Textarea resize behavior", SuggestedValues = new[] { "none", "vertical", "horizontal", "both", "auto" })]
    public string Resize { get; set; } = "vertical";
    
    [Parameter]
    [AIParameter("Auto-complete attribute for forms")]
    public string? AutoComplete { get; set; }
    
    [Parameter]
    [AIParameter("Field name for form submission")]
    public string? Name { get; set; }
    
    #endregion
    
    #region Password State
    
    private bool showPassword = false;
    
    private bool IsPasswordField => Type == FieldType.Password;
    
    private string GetEffectiveInputType()
    {
        if (IsPasswordField && showPassword)
            return "text";
        return Type.ToString().ToLower();
    }
    
    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
        StateHasChanged();
    }
    
    // Field name functionality removed - use explicit naming if needed
    
    #endregion
    
    #region Methods
    
    private async Task OnInputChange(ChangeEventArgs e)
    {
        Value = e.Value?.ToString();
        await ValueChanged.InvokeAsync(Value);
    }
    
    private async Task HandleInput(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString() ?? "";
        Value = newValue;
        
        await ValueChanged.InvokeAsync(Value);
        
        // Use base class method for user interaction handling
        await HandleUserInteraction(!string.IsNullOrEmpty(newValue));
    }
    
    private async Task HandleValueChange(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString() ?? "";
        Value = newValue;
        await ValueChanged.InvokeAsync(newValue);
        await HandleUserInteraction();
    }
    
    private async Task HandleFocus(FocusEventArgs e)
    {
        await HandleFocusEvent(e, OnFocus);
    }
    
    private async Task HandleBlur(FocusEventArgs e)
    {
        await HandleBlurEvent(e, OnBlur);
    }
    
    
    private string GetContainerClasses()
    {
        var classes = new List<string> { "input-group" };
        
        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);
            
        return string.Join(" ", classes);
    }
    
    private string GetWrapperClasses()
    {
        var classes = new List<string> { "relative" };
        
        if (IsFloatingLabel())
        {
            classes.Add("input-floating");
        }
        
        // Don't add input-specific classes to the wrapper - they belong on the input element
        // The wrapper should only have structural classes
        
        return string.Join(" ", classes);
    }
    
    private string GetInputClasses()
    {
        var classes = new List<string>
        {
            "input",
            "w-full"
        };
        
        // Add variant-specific styling
        classes.AddRange(GetVariantClasses());
        
        // Size and density classes - only for input element
        var sizeClass = Size switch
        {
            TextInputSize.Small => "input-sm",
            TextInputSize.Large => "input-lg",
            _ => ""
        };
        
        var densityClass = Density switch
        {
            ComponentDensity.Compact => "input-compact",
            ComponentDensity.Dense => "input-dense", 
            ComponentDensity.Spacious => "input-spacious",
            ComponentDensity.Normal => "input-normal",
            _ => "input-normal"
        };
        
        if (!string.IsNullOrEmpty(sizeClass))
            classes.Add(sizeClass);
        if (!string.IsNullOrEmpty(densityClass))
            classes.Add(densityClass);
        
        // Icon classes - MUST be added to input for proper padding
        if (!string.IsNullOrEmpty(StartIcon))
        {
            classes.Add("input-with-start-icon");
        }
        if (!string.IsNullOrEmpty(EndIcon) || (IsPasswordField && ShowPasswordToggle))
        {
            classes.Add("input-with-end-icon");
        }
        
        // State classes
        if (HasError)
        {
            classes.Add("input-error");
        }
        
        if (Disabled)
        {
            classes.Add("opacity-50");
            classes.Add("cursor-not-allowed");
        }
        
        if (ReadOnly)
        {
            classes.Add("cursor-default");
        }
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }
    
    private string GetEffectivePlaceholder()
    {
        return IsFloatingLabel() ? "" : Placeholder ?? "";
    }
    
    private List<string> GetVariantClasses()
    {
        return Variant switch
        {
            TextInputVariant.Outlined => new List<string> { "input-outlined" },
            TextInputVariant.Filled => new List<string> { "input-filled" },
            TextInputVariant.Clean => new List<string> { "input-clean" },
            TextInputVariant.Glass => new List<string> { "input-glass" },
            _ => new List<string>()
        };
    }
    
    
    
    private string GetStartIconContainerClasses()
    {
        return "input-group-icon";
    }
    
    private string GetEndIconContainerClasses()
    {
        return "input-group-icon-end";
    }
    
    private string GetIconClasses()
    {
        return "text-lg text-secondary";
    }
    
    private string GetLabelClasses()
    {
        return "input-group-label";
    }
    
    private string GetErrorMessageClasses()
    {
        return "input-group-error";
    }
    
    private string GetHelpTextClasses()
    {
        return "input-group-help";
    }
    
    private string GetPasswordToggleButtonClasses()
    {
        return ""; // Styling handled in SCSS for better consistency
    }
    
    private bool IsFloatingLabel()
    {
        return Variant == TextInputVariant.Outlined || Variant == TextInputVariant.Filled;
    }
    
    private bool HasValue()
    {
        return !string.IsNullOrEmpty(Value);
    }
    
    private string GetFloatingLabelClasses()
    {
        // Using the existing RR.Blazor form field system
        return "form-field__label form-field__label--floating";
    }
    
    private string GetCharacterCountClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "absolute bottom-1 right-2 text-xs text-secondary",
            ComponentDensity.Dense => "absolute bottom-1 right-2 text-xs text-secondary",
            ComponentDensity.Normal => "absolute bottom-2 right-3 text-sm text-secondary",
            ComponentDensity.Spacious => "absolute bottom-3 right-4 text-base text-secondary",
            _ => "absolute bottom-2 right-3 text-sm text-secondary"
        };
    }
    
    #endregion
}

@* CSS removed per project conventions - styles should be in SCSS files *@