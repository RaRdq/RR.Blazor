@*
    RTextInput - Lightweight, focused text input component
    
    A specialized text input component that extends the utility-first design system
    with comprehensive glassmorphism effects and enterprise-grade styling.
    
    Key Features:
    - Utility-first CSS composition
    - Glassmorphism and elevation effects
    - Comprehensive validation states
    - Touch-friendly mobile design
    - Icon support with flexible positioning
    - Multiple style variants (Clean, Filled, Outlined, Glass)
    - Size variants (Small, Medium, Large)
    - Professional hover/focus animations
    
    Usage Examples:
    <RTextInput @bind-Value="name" Placeholder="Enter your name" />
    <RTextInput @bind-Value="email" Variant="TextInputVariant.Clean" Size="TextInputSize.Large" />
    <RTextInput @bind-Value="search" StartIcon="search" Placeholder="Search..." />
    <RTextInput @bind-Value="password" Type="password" HasError="true" ErrorMessage="Password required" />
*@

@using RR.Blazor.Enums
@using RR.Blazor.Models
@using Microsoft.AspNetCore.Components.Web
@inherits RInputBase
@attribute [Component("RTextInput", Category = "Form", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(
    Prompt = "Use for text input with validation, utility-first styling and professional form integration",
    CommonUse = "Form inputs with validation, search fields, email/password inputs, real-time validation",
    AvoidUsage = "Multi-line text (use RTextArea), complex multi-field forms (use RFormGeneric)"
)]

<div class="@GetContainerClasses()">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label class="@GetLabelClasses()" for="@inputId">@Label</label>
    }
    
    <div class="relative">
        @if (!string.IsNullOrEmpty(StartIcon))
        {
            <div class="@GetStartIconContainerClasses()">
                <i class="material-symbols-rounded @GetIconClasses()" @onclick="@OnStartIconClick">@StartIcon</i>
            </div>
        }
        
        <input id="@inputId"
               type="@GetEffectiveInputType()"
               min="@(Min?.ToString())"
               max="@(Max?.ToString())"
               step="@(Step?.ToString())"
               class="@GetInputClasses()"
               value="@Value"
               placeholder="@Placeholder"
               disabled="@Disabled"
               readonly="@ReadOnly"
               required="@Required"
               autocomplete="@AutoComplete"
               data-field="@GetEffectiveFieldName()"
               @oninput="@HandleInput"
               @onchange="@HandleValueChange"
               @onfocus="@HandleFocus"
               @onblur="@HandleBlur"
               @onkeypress="@OnKeyPress"
               @onkeydown="@OnKeyDown" />
        
        @if (IsPasswordField && ShowPasswordToggle)
        {
            <div class="@GetEndIconContainerClasses()">
                <button type="button" 
                        class="@GetPasswordToggleButtonClasses()"
                        @onclick="TogglePasswordVisibility"
                        title="@(showPassword ? "Hide password" : "Show password")"
                        aria-label="@(showPassword ? "Hide password" : "Show password")"
                        tabindex="-1">
                    <i class="material-symbols-rounded @GetIconClasses()">@(showPassword ? "visibility_off" : "visibility")</i>
                </button>
            </div>
        }
        else if (!string.IsNullOrEmpty(EndIcon))
        {
            <div class="@GetEndIconContainerClasses()">
                <i class="material-symbols-rounded @GetIconClasses()" @onclick="@OnEndIconClick">@EndIcon</i>
            </div>
        }
        
        @if (Loading)
        {
            <div class="absolute inset-0 d-flex items-center justify-center bg-surface bg-opacity-75">
                <i class="material-symbols-rounded text-primary animate-spin">progress_activity</i>
            </div>
        }
    </div>
    
    @if (IsInErrorState && !string.IsNullOrEmpty(GetEffectiveErrorMessage()))
    {
        <div class="@GetErrorMessageClasses()">
            <i class="material-symbols-rounded text-error mr-1">error</i>
            @GetEffectiveErrorMessage()
        </div>
    }
    
    @if (!string.IsNullOrEmpty(HelpText))
    {
        <div class="@GetHelpTextClasses()">@HelpText</div>
    }
</div>

@code {
    private string inputId = $"text-input-{Guid.NewGuid():N}";
    
    #region Parameters
    
    [Parameter] 
    [AIParameter("Input value", Example = "\"John Doe\"")]
    public string? Value { get; set; }
    
    [Parameter] 
    [AIParameter("Value changed callback")]
    public EventCallback<string> ValueChanged { get; set; }
    
    [Parameter] 
    [AIParameter("Input type", SuggestedValues = new[] { "Text", "Email", "Password", "Number", "Tel", "Url", "Search" }, Example = "FieldType.Email")]
    public FieldType Type { get; set; } = FieldType.Text;
    
    [Parameter]
    [AIParameter("Minimum value for number inputs", Example = "0")]
    public decimal? Min { get; set; }
    
    [Parameter]
    [AIParameter("Maximum value for number inputs", Example = "100")]
    public decimal? Max { get; set; }
    
    [Parameter]
    [AIParameter("Step value for number inputs", Example = "0.01")]
    public decimal? Step { get; set; }
    
    [Parameter] 
    [AIParameter("Placeholder text", Example = "\"Enter your email...\"")]
    public string? Placeholder { get; set; }
    
    [Parameter] 
    [AIParameter("Field label", Example = "\"Email Address\"")]
    public string? Label { get; set; }
    
    [Parameter] 
    [AIParameter("Start icon name", Example = "\"search\"")]
    public string? StartIcon { get; set; }
    
    [Parameter] 
    [AIParameter("End icon name", Example = "\"visibility\"")]
    public string? EndIcon { get; set; }
    
    [Parameter]
    [AIParameter("Show password toggle for password fields")]
    public bool ShowPasswordToggle { get; set; } = true;
    
    [Parameter] 
    [AIParameter("Input variant", SuggestedValues = new[] { "Default", "Clean", "Filled", "Outlined", "Glass" })]
    public TextInputVariant Variant { get; set; } = TextInputVariant.Default;
    
    [Parameter] 
    [AIParameter("Input size", SuggestedValues = new[] { "Small", "Medium", "Large" })]
    public TextInputSize Size { get; set; } = TextInputSize.Medium;
    
    
    [Parameter]
    [AIParameter("Auto-complete attribute for forms")]
    public string? AutoComplete { get; set; }
    
    #endregion
    
    #region Events
    
    [Parameter] public EventCallback<FocusEventArgs> OnFocus { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> OnBlur { get; set; }
    [Parameter] public EventCallback<KeyboardEventArgs> OnKeyPress { get; set; }
    [Parameter] public EventCallback<KeyboardEventArgs> OnKeyDown { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnStartIconClick { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnEndIconClick { get; set; }
    
    #endregion
    
    #region Password State
    
    private bool showPassword = false;
    
    private bool IsPasswordField => Type == FieldType.Password;
    
    private string GetEffectiveInputType()
    {
        if (IsPasswordField && showPassword)
            return "text";
        return Type.ToString().ToLower();
    }
    
    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
        StateHasChanged();
    }
    
    protected override string GetEffectiveFieldName()
    {
        if (!string.IsNullOrEmpty(FieldName))
            return FieldName;
            
        // Auto-derive field name from Label by removing spaces and making camelCase
        if (!string.IsNullOrEmpty(Label))
        {
            var fieldName = Label.Replace(" ", "").Replace(":", "");
            if (!string.IsNullOrEmpty(fieldName))
            {
                return char.ToLowerInvariant(fieldName[0]) + fieldName[1..];
            }
        }
        
        return "";
    }
    
    #endregion
    
    #region Methods
    
    private async Task OnInputChange(ChangeEventArgs e)
    {
        Value = e.Value?.ToString();
        await ValueChanged.InvokeAsync(Value);
    }
    
    private async Task HandleInput(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString() ?? "";
        Value = newValue;
        
        await ValueChanged.InvokeAsync(Value);
        
        // Use base class method for user interaction handling
        await HandleUserInteraction(!string.IsNullOrEmpty(newValue));
    }
    
    private async Task HandleValueChange(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString() ?? "";
        Value = newValue;
        await ValueChanged.InvokeAsync(newValue);
        await HandleUserInteraction();
    }
    
    private async Task HandleFocus(FocusEventArgs e)
    {
        await HandleFocusEvent(e, OnFocus);
    }
    
    private async Task HandleBlur(FocusEventArgs e)
    {
        await HandleBlurEvent(e, OnBlur);
    }
    
    
    private string GetContainerClasses()
    {
        var classes = new List<string> { "input-group" };
        
        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);
            
        return string.Join(" ", classes);
    }
    
    private string GetInputClasses()
    {
        var classes = new List<string>
        {
            "w-full",
            "border",
            "rounded-md",
            "text-primary",
            "bg-surface",
            "transition",
            "focus:outline-none",
            "focus:ring-2",
            "focus:ring-primary",
            "focus:border-transparent"
        };
        
        // Size and density classes
        classes.Add(GetSizeClasses());
        
        // Icon padding adjustments
        if (!string.IsNullOrEmpty(StartIcon))
            classes.Add(GetStartIconPadding());
        if (!string.IsNullOrEmpty(EndIcon))
            classes.Add(GetEndIconPadding());
        
        // State classes
        if (HasError)
        {
            classes.Add("border-error");
            classes.Add("focus:ring-error");
        }
        else
        {
            classes.Add("border-light");
        }
        
        if (Disabled)
        {
            classes.Add("opacity-50");
            classes.Add("cursor-not-allowed");
        }
        
        if (ReadOnly)
        {
            classes.Add("bg-surface-elevated");
            classes.Add("cursor-default");
        }
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }
    
    private string GetSizeClasses()
    {
        var baseSizeClasses = Size switch
        {
            TextInputSize.Small => "pl-3 pr-3 pt-2 pb-2 text-sm h-8",
            TextInputSize.Medium => "pl-4 pr-4 pt-3 pb-3 text-base h-10",
            TextInputSize.Large => "pl-5 pr-5 pt-4 pb-4 text-lg h-12",
            _ => "pl-4 pr-4 pt-3 pb-3 text-base h-10"
        };
        
        // Apply density modifiers
        return Density switch
        {
            ComponentDensity.Compact => ApplyCompactDensity(),
            ComponentDensity.Dense => ApplyDenseDensity(),
            ComponentDensity.Normal => baseSizeClasses,
            ComponentDensity.Spacious => ApplySpacious(),
            _ => baseSizeClasses
        };
    }
    
    private string ApplyCompactDensity()
    {
        return Size switch
        {
            TextInputSize.Small => "pl-2 pr-2 pt-1 pb-1 text-xs h-6",
            TextInputSize.Medium => "pl-3 pr-3 pt-2 pb-2 text-sm h-8",
            TextInputSize.Large => "pl-4 pr-4 pt-3 pb-3 text-base h-10",
            _ => "pl-3 pr-3 pt-2 pb-2 text-sm h-8"
        };
    }
    
    private string ApplyDenseDensity()
    {
        return Size switch
        {
            TextInputSize.Small => "pl-2 pr-2 pt-1 pb-1 text-sm h-7",
            TextInputSize.Medium => "pl-3 pr-3 pt-2 pb-2 text-base h-9",
            TextInputSize.Large => "pl-4 pr-4 pt-3 pb-3 text-lg h-11",
            _ => "pl-3 pr-3 pt-2 pb-2 text-base h-9"
        };
    }
    
    private string ApplySpacious()
    {
        return Size switch
        {
            TextInputSize.Small => "pl-4 pr-4 pt-3 pb-3 text-sm h-10",
            TextInputSize.Medium => "pl-6 pr-6 pt-4 pb-4 text-base h-12",
            TextInputSize.Large => "pl-8 pr-8 pt-5 pb-5 text-lg h-16",
            _ => "pl-6 pr-6 pt-4 pb-4 text-base h-12"
        };
    }
    
    private string GetStartIconPadding()
    {
        return Density switch
        {
            ComponentDensity.Compact => "pl-8",
            ComponentDensity.Dense => "pl-10",
            ComponentDensity.Normal => "pl-12",
            ComponentDensity.Spacious => "pl-16",
            _ => "pl-12"
        };
    }
    
    private string GetEndIconPadding()
    {
        return Density switch
        {
            ComponentDensity.Compact => "pr-8",
            ComponentDensity.Dense => "pr-10",
            ComponentDensity.Normal => "pr-12",
            ComponentDensity.Spacious => "pr-16",
            _ => "pr-12"
        };
    }
    
    private string GetStartIconContainerClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "absolute left-2 top-1/2 transform -translate-y-1/2 pointer-events-none",
            ComponentDensity.Dense => "absolute left-3 top-1/2 transform -translate-y-1/2 pointer-events-none",
            ComponentDensity.Normal => "absolute left-4 top-1/2 transform -translate-y-1/2 pointer-events-none",
            ComponentDensity.Spacious => "absolute left-5 top-1/2 transform -translate-y-1/2 pointer-events-none",
            _ => "absolute left-4 top-1/2 transform -translate-y-1/2 pointer-events-none"
        };
    }
    
    private string GetEndIconContainerClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "absolute right-2 top-1/2 transform -translate-y-1/2 pointer-events-none",
            ComponentDensity.Dense => "absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none",
            ComponentDensity.Normal => "absolute right-4 top-1/2 transform -translate-y-1/2 pointer-events-none",
            ComponentDensity.Spacious => "absolute right-5 top-1/2 transform -translate-y-1/2 pointer-events-none",
            _ => "absolute right-4 top-1/2 transform -translate-y-1/2 pointer-events-none"
        };
    }
    
    private string GetIconClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "text-sm text-secondary",
            ComponentDensity.Dense => "text-base text-secondary",
            ComponentDensity.Normal => "text-lg text-secondary",
            ComponentDensity.Spacious => "text-xl text-secondary",
            _ => "text-lg text-secondary"
        };
    }
    
    private string GetLabelClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "d-block text-xs font-medium text-primary mb-1",
            ComponentDensity.Dense => "d-block text-sm font-medium text-primary mb-1",
            ComponentDensity.Normal => "d-block text-sm font-medium text-primary mb-2",
            ComponentDensity.Spacious => "d-block text-base font-medium text-primary mb-3",
            _ => "d-block text-sm font-medium text-primary mb-2"
        };
    }
    
    private string GetErrorMessageClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "text-xs text-error mt-1",
            ComponentDensity.Dense => "text-xs text-error mt-1",
            ComponentDensity.Normal => "text-sm text-error mt-2",
            ComponentDensity.Spacious => "text-base text-error mt-3",
            _ => "text-sm text-error mt-2"
        };
    }
    
    private string GetHelpTextClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "text-xs text-secondary mt-1",
            ComponentDensity.Dense => "text-xs text-secondary mt-1",
            ComponentDensity.Normal => "text-sm text-secondary mt-2",
            ComponentDensity.Spacious => "text-base text-secondary mt-3",
            _ => "text-sm text-secondary mt-2"
        };
    }
    
    private string GetPasswordToggleButtonClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "pa-1 rounded hover:bg-surface-variant transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-opacity-50",
            ComponentDensity.Dense => "pa-1 rounded hover:bg-surface-variant transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-opacity-50", 
            ComponentDensity.Normal => "pa-2 rounded hover:bg-surface-variant transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-opacity-50",
            ComponentDensity.Spacious => "pa-3 rounded hover:bg-surface-variant transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-opacity-50",
            _ => "pa-2 rounded hover:bg-surface-variant transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-opacity-50"
        };
    }
    
    #endregion
}

@* CSS removed per project conventions - styles should be in SCSS files *@