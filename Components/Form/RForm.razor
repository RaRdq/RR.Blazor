@**
<summary>
Unified form component that intelligently detects model types and eliminates the need for explicit TModel specification.
This is the primary form component for RR.Blazor - use this instead of RFormGeneric.
</summary>
<category>Form</category>
<complexity>Simple</complexity>
<ai-prompt>Create smart form for any model type</ai-prompt>
<ai-common-use>any form scenario - automatically detects model type</ai-common-use>
<ai-pattern name="auto-detection">Model parameter automatically detects type</ai-pattern>
<ai-pattern name="explicit-type">TModel="MyModel" for explicit type control</ai-pattern>
<ai-pattern name="binding">@bind-Model automatically infers type</ai-pattern>
**@

@using System.Reflection
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Rendering
@using RR.Blazor.Enums
@using RR.Blazor.Models
@using RR.Blazor.Attributes
@implements IDisposable

@attribute [Component("RForm", Category = "Form", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(Prompt = "Create smart form for any model type", 
                       CommonUse = "any form scenario - automatically detects model type", 
                       AvoidUsage = "None - this is the universal form component")]

@(RenderForm())

@code {
    // Type detection parameters
    [Parameter] public Type TModel { get; set; }
    
    // Core form parameters
    [Parameter] public object Model { get; set; }
    [Parameter] public object ModelChanged { get; set; }
    
    // Form configuration
    [Parameter] public ValidationMode ValidationMode { get; set; } = ValidationMode.DataAnnotations;
    [Parameter] public FormLayout Layout { get; set; } = FormLayout.Default;
    [Parameter] public FormDensity Density { get; set; } = FormDensity.Comfortable;
    [Parameter] public FormOptions Options { get; set; }
    
    // UI parameters
    [Parameter] public string Title { get; set; }
    [Parameter] public string Description { get; set; }
    [Parameter] public string Icon { get; set; }
    [Parameter] public bool ShowFormHeader { get; set; } = true;
    [Parameter] public bool ShowDefaultActions { get; set; } = true;
    [Parameter] public bool ShowCancelButton { get; set; } = true;
    [Parameter] public string SubmitText { get; set; } = "Submit";
    [Parameter] public string CancelText { get; set; } = "Cancel";
    [Parameter] public bool RequireValidation { get; set; } = true;
    [Parameter] public ButtonSize SubmitButtonSize { get; set; } = ButtonSize.Medium;
    
    // Event callbacks - use object to accept any typed callback
    [Parameter] public object OnValidSubmit { get; set; }
    [Parameter] public object OnInvalidSubmit { get; set; }
    [Parameter] public object OnStateChanged { get; set; }
    
    // Content
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public RenderFragment FormFields { get; set; }
    [Parameter] public RenderFragment HeaderContent { get; set; }
    [Parameter] public RenderFragment FooterContent { get; set; }
    [Parameter] public string Class { get; set; }
    [Parameter] public string AdditionalClass { get; set; }

    // Private fields for type detection
    private Type _detectedType;
    private bool _typeResolved = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        
        if (!_typeResolved)
        {
            _detectedType = DetectType();
            _typeResolved = true;
        }
    }

    private Type DetectType()
    {
        // 1. Explicit TModel parameter takes precedence
        if (TModel != null)
        {
            return TModel;
        }

        // 2. Try to detect from Model parameter
        if (Model != null)
        {
            var modelType = Model.GetType();
            
            // Don't use object type if we have a more specific type
            if (modelType != typeof(object))
            {
                return modelType;
            }
        }

        // 3. Default to object type
        return typeof(object);
    }

    private RenderFragment RenderForm()
    {
        return builder =>
        {
            if (_detectedType == null)
            {
                _detectedType = DetectType();
            }

            // Create the generic form component type
            var genericFormType = typeof(RFormGeneric<>).MakeGenericType(_detectedType);

            builder.OpenComponent(0, genericFormType);

            var parameterIndex = 1;

            // Convert and forward Model
            if (Model != null)
            {
                var convertedModel = ConvertValue(Model, _detectedType);
                builder.AddAttribute(parameterIndex++, "Model", convertedModel);
            }

            // Convert and forward ModelChanged
            if (ModelChanged != null)
            {
                builder.AddAttribute(parameterIndex++, "ModelChanged", ModelChanged);
            }

            // Convert and forward event callbacks
            if (OnValidSubmit != null)
            {
                builder.AddAttribute(parameterIndex++, "OnValidSubmit", OnValidSubmit);
            }

            if (OnInvalidSubmit != null)
            {
                builder.AddAttribute(parameterIndex++, "OnInvalidSubmit", OnInvalidSubmit);
            }

            if (OnStateChanged != null)
            {
                builder.AddAttribute(parameterIndex++, "OnStateChanged", OnStateChanged);
            }

            // Forward configuration parameters directly
            builder.AddAttribute(parameterIndex++, "ValidationMode", ValidationMode);
            builder.AddAttribute(parameterIndex++, "Layout", Layout);
            builder.AddAttribute(parameterIndex++, "Density", Density);
            builder.AddAttribute(parameterIndex++, "Options", Options);
            builder.AddAttribute(parameterIndex++, "Title", Title);
            builder.AddAttribute(parameterIndex++, "Description", Description);
            builder.AddAttribute(parameterIndex++, "Icon", Icon);
            builder.AddAttribute(parameterIndex++, "ShowFormHeader", ShowFormHeader);
            builder.AddAttribute(parameterIndex++, "ShowDefaultActions", ShowDefaultActions);
            builder.AddAttribute(parameterIndex++, "ShowCancelButton", ShowCancelButton);
            builder.AddAttribute(parameterIndex++, "SubmitText", SubmitText);
            builder.AddAttribute(parameterIndex++, "CancelText", CancelText);
            builder.AddAttribute(parameterIndex++, "RequireValidation", RequireValidation);
            builder.AddAttribute(parameterIndex++, "SubmitButtonSize", SubmitButtonSize);
            builder.AddAttribute(parameterIndex++, "Class", Class);
            builder.AddAttribute(parameterIndex++, "AdditionalClass", AdditionalClass);
            
            // Forward content parameters
            builder.AddAttribute(parameterIndex++, "ChildContent", ChildContent);
            builder.AddAttribute(parameterIndex++, "FormFields", FormFields);
            builder.AddAttribute(parameterIndex++, "HeaderContent", HeaderContent);
            builder.AddAttribute(parameterIndex++, "FooterContent", FooterContent);

            builder.CloseComponent();
        };
    }

    private object ConvertValue(object value, Type targetType)
    {
        if (value == null) return null;
        if (value.GetType() == targetType) return value;

        // Handle basic type conversions
        try
        {
            if (targetType == typeof(object))
            {
                return value;
            }
            else if (targetType.IsAssignableFrom(value.GetType()))
            {
                return value;
            }
            else
            {
                return Convert.ChangeType(value, targetType);
            }
        }
        catch
        {
            return value; // Return original value if conversion fails
        }
    }


    public void Dispose()
    {
        // Cleanup if needed
    }
}