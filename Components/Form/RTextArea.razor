@*
    RTextArea - Textarea alias component
    
    A simple alias component that wraps RTextInput with IsMultiLine="true"
    for semantic clarity and ease of use in forms.
    
    This component exists purely for developer convenience and semantic clarity.
    All functionality is delegated to RTextInput with multiline enabled.
    
    Usage Examples:
    <RTextArea @bind-Value="description" Label="Description" />
    <RTextArea @bind-Value="notes" Placeholder="Enter notes..." Rows="6" />
    <RTextArea @bind-Value="feedback" ShowCharacterCount="true" MaxLength="500" />
*@

@using RR.Blazor.Enums
@using RR.Blazor.Components.Form
@inherits RInputBase
@attribute [Component("RTextArea", Category = "Form", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(
    Prompt = "Textarea component - alias for RTextInput with multiline enabled",
    CommonUse = "Comments, descriptions, feedback, notes, multiline text input",
    AvoidUsage = "Single line text inputs (use RTextInput), Rich text editing (use dedicated editor)"
)]

<RTextInput @bind-Value="Value"
            Label="@Label"
            Placeholder="@Placeholder"
            StartIcon="@StartIcon"
            EndIcon="@EndIcon"
            IsRequired="@Required"
            IsDisabled="@Disabled"
            IsReadOnly="@ReadOnly"
            HasError="@HasError"
            ErrorMessage="@ErrorMessage"
            HelperText="@HelpText"
            Variant="@Variant"
            Size="@Size"
            Density="@Density"
            Class="@Class"
            Style="@Style"
            MaxLength="@MaxLength"
            ShowCharacterCount="@ShowCharacterCount"
            Rows="@Rows"
            AutoResize="@AutoResize"
            IsMultiLine="true"
            Immediate="@Immediate"
            ImmediateDebounce="@ImmediateDebounce"
            OnInput="@OnInput"
            OnChange="@OnChange"
            OnTextInput="@OnTextInput"
            OnTextChanged="@OnTextChanged"
            OnFocus="@OnFocus"
            OnBlur="@OnBlur"
            OnKeyDown="@OnKeyDown"
            OnStartIconClick="@OnStartIconClick"
            OnEndIconClick="@OnEndIconClick"
            @attributes="AdditionalAttributes" />

@code {
    [Parameter] public string Value { get; set; } = "";
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public bool ShowCharacterCount { get; set; }
    [Parameter] public int Rows { get; set; } = 3;
    [Parameter] public bool AutoResize { get; set; }
    
    
    protected override void OnInitialized()
    {
        // Set default variant for textarea if not explicitly set
        if (Variant == TextInputVariant.Default)
        {
            Variant = TextInputVariant.Outlined;
        }
        base.OnInitialized();
    }
}