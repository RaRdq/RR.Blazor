@*
    RTextArea - Professional textarea component with enterprise styling
    
    A specialized textarea component that extends the utility-first design system
    with comprehensive glassmorphism effects and enterprise-grade styling.
    
    Key Features:
    - Utility-first CSS composition
    - Glassmorphism and elevation effects
    - Comprehensive validation states
    - Touch-friendly mobile design
    - Resizable textarea with configurable behavior
    - Multiple style variants (Clean, Filled, Outlined, Glass)
    - Size variants (Small, Medium, Large)
    - Professional hover/focus animations
    
    Usage Examples:
    <RTextArea @bind-value="notes" Placeholder="Enter your notes..." />
    <RTextArea @bind-value="description" Variant="TextInputVariant.Clean" Size="TextInputSize.Large" />
    <RTextArea @bind-value="comments" Rows="5" Placeholder="Add comments..." />
    <RTextArea @bind-value="content" HasError="true" ErrorMessage="Content is required" />
*@

@using RR.Blazor.Enums
@using RR.Blazor.Models
@using Microsoft.AspNetCore.Components.Web
@inherits ComponentBase
@attribute [Component("RTextArea", Category = "Form", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(
    Prompt = "Use for multi-line text input with validation, utility-first styling and professional form integration",
    CommonUse = "Multi-line text inputs, notes, descriptions, comments, long text content",
    AvoidUsage = "Single-line text (use RTextInput), complex rich text editing (use dedicated rich text editor)"
)]

<div class="@GetContainerClasses()">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label class="@GetLabelClasses()" for="@inputId">@Label</label>
    }
    
    <div class="relative">
        <textarea id="@inputId"
                  class="@GetTextAreaClasses()"
                  value="@Value"
                  placeholder="@Placeholder"
                  disabled="@Disabled"
                  readonly="@ReadOnly"
                  required="@Required"
                  rows="@Rows"
                  maxlength="@MaxLength"
                  data-field="@Name"
                  @oninput="@HandleInput"
                  @onchange="@HandleValueChange"
                  @onfocus="@HandleFocus"
                  @onblur="@HandleBlur"
                  @onkeypress="@OnKeyPress"
                  @onkeydown="@OnKeyDown"></textarea>
        
        @if (Loading)
        {
            <div class="absolute inset-0 d-flex items-center justify-center bg-surface bg-opacity-75">
                <i class="material-symbols-rounded text-primary animate-spin">progress_activity</i>
            </div>
        }
        
        @if (ShowCharacterCount && MaxLength > 0)
        {
            <div class="@GetCharacterCountClasses()">
                @((Value?.Length ?? 0).ToString("N0")) / @MaxLength.ToString("N0")
            </div>
        }
    </div>
    
    @if (IsInErrorState && !string.IsNullOrEmpty(GetEffectiveErrorMessage()))
    {
        <div class="@GetErrorMessageClasses()">
            <i class="material-symbols-rounded text-error mr-1">error</i>
            @GetEffectiveErrorMessage()
        </div>
    }
    
    @if (!string.IsNullOrEmpty(HelpText))
    {
        <div class="@GetHelpTextClasses()">@HelpText</div>
    }
</div>

@code {
    private string inputId = $"textarea-{Guid.NewGuid():N}";
    
    #region Parameters
    
    [Parameter] 
    [AIParameter("Textarea value", Example = "\"This is a long text content...\"")]
    public string? Value { get; set; }
    
    [Parameter] 
    [AIParameter("Value changed callback")]
    public EventCallback<string> ValueChanged { get; set; }
    
    [Parameter] 
    [AIParameter("Placeholder text", Example = "\"Enter your notes...\"")]
    public string? Placeholder { get; set; }
    
    [Parameter] 
    [AIParameter("Field label", Example = "\"Notes\"")]
    public string? Label { get; set; }
    
    [Parameter] 
    [AIParameter("Number of visible rows", Example = "3")]
    public int Rows { get; set; } = 3;
    
    [Parameter] 
    [AIParameter("Maximum character length", Example = "1000")]
    public int MaxLength { get; set; } = 0;
    
    [Parameter] 
    [AIParameter("Show character count indicator")]
    public bool ShowCharacterCount { get; set; } = false;
    
    [Parameter] 
    [AIParameter("Textarea resize behavior", SuggestedValues = new[] { "none", "vertical", "horizontal", "both" })]
    public string Resize { get; set; } = "vertical";
    
    [Parameter] 
    [AIParameter("Input variant", SuggestedValues = new[] { "Default", "Clean", "Filled", "Outlined", "Glass" })]
    public TextInputVariant Variant { get; set; } = TextInputVariant.Default;
    
    [Parameter] 
    [AIParameter("Input size", SuggestedValues = new[] { "Small", "Medium", "Large" })]
    public TextInputSize Size { get; set; } = TextInputSize.Medium;
    
    #endregion
    
    #region Events
    
    [Parameter] public EventCallback<FocusEventArgs> OnFocus { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> OnBlur { get; set; }
    [Parameter] public EventCallback<KeyboardEventArgs> OnKeyPress { get; set; }
    [Parameter] public EventCallback<KeyboardEventArgs> OnKeyDown { get; set; }
    
    #endregion
    
    #region Methods
    
    private async Task HandleInput(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString() ?? "";
        Value = newValue;
        
        await ValueChanged.InvokeAsync(Value);
        
        // Use base class method for user interaction handling
        await HandleUserInteraction(!string.IsNullOrEmpty(newValue));
    }
    
    private async Task HandleValueChange(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString() ?? "";
        Value = newValue;
        await ValueChanged.InvokeAsync(newValue);
        await HandleUserInteraction();
    }
    
    private async Task HandleFocus(FocusEventArgs e)
    {
        await HandleFocusEvent(e, OnFocus);
    }
    
    private async Task HandleBlur(FocusEventArgs e)
    {
        await HandleBlurEvent(e, OnBlur);
    }
    
    // Field name functionality removed - use explicit naming if needed
    
    private string GetContainerClasses()
    {
        var classes = new List<string> { "input-group" };
        
        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);
            
        return string.Join(" ", classes);
    }
    
    private string GetTextAreaClasses()
    {
        var classes = new List<string>
        {
            "w-full",
            "border",
            "rounded-md",
            "text-primary",
            "bg-surface",
            "transition",
            "focus:outline-none",
            "focus:ring-2",
            "focus:ring-primary",
            "focus:border-transparent",
            GetResizeClasses()
        };
        
        // Size and density classes
        classes.Add(GetSizeClasses());
        
        // State classes
        if (HasError)
        {
            classes.Add("border-error");
            classes.Add("focus:ring-error");
        }
        else
        {
            classes.Add("border-light");
        }
        
        if (Disabled)
        {
            classes.Add("opacity-50");
            classes.Add("cursor-not-allowed");
        }
        
        if (ReadOnly)
        {
            classes.Add("bg-surface-elevated");
            classes.Add("cursor-default");
        }
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }
    
    private string GetSizeClasses()
    {
        var baseSizeClasses = Size switch
        {
            TextInputSize.Small => "px-3 py-2 text-sm",
            TextInputSize.Medium => "px-4 py-3 text-base",
            TextInputSize.Large => "px-5 py-4 text-lg",
            _ => "px-4 py-3 text-base"
        };
        
        // Apply density modifiers
        return Density switch
        {
            ComponentDensity.Compact => ApplyCompactDensity(),
            ComponentDensity.Dense => ApplyDenseDensity(),
            ComponentDensity.Normal => baseSizeClasses,
            ComponentDensity.Spacious => ApplySpacious(),
            _ => baseSizeClasses
        };
    }
    
    private string ApplyCompactDensity()
    {
        return Size switch
        {
            TextInputSize.Small => "px-2 py-1 text-xs",
            TextInputSize.Medium => "px-3 py-2 text-sm",
            TextInputSize.Large => "px-4 py-3 text-base",
            _ => "px-3 py-2 text-sm"
        };
    }
    
    private string ApplyDenseDensity()
    {
        return Size switch
        {
            TextInputSize.Small => "px-2 py-1 text-sm",
            TextInputSize.Medium => "px-3 py-2 text-base",
            TextInputSize.Large => "px-4 py-3 text-lg",
            _ => "px-3 py-2 text-base"
        };
    }
    
    private string ApplySpacious()
    {
        return Size switch
        {
            TextInputSize.Small => "px-4 py-3 text-sm",
            TextInputSize.Medium => "px-6 py-4 text-base",
            TextInputSize.Large => "px-8 py-5 text-lg",
            _ => "px-6 py-4 text-base"
        };
    }
    
    private string GetResizeClasses()
    {
        return Resize switch
        {
            "none" => "resize-none",
            "vertical" => "resize-y",
            "horizontal" => "resize-x",
            "both" => "resize",
            _ => "resize-y"
        };
    }
    
    private string GetLabelClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "d-block text-xs font-medium text-primary mb-1",
            ComponentDensity.Dense => "d-block text-sm font-medium text-primary mb-1",
            ComponentDensity.Normal => "d-block text-sm font-medium text-primary mb-2",
            ComponentDensity.Spacious => "d-block text-base font-medium text-primary mb-3",
            _ => "d-block text-sm font-medium text-primary mb-2"
        };
    }
    
    private string GetErrorMessageClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "text-xs text-error mt-1",
            ComponentDensity.Dense => "text-xs text-error mt-1",
            ComponentDensity.Normal => "text-sm text-error mt-2",
            ComponentDensity.Spacious => "text-base text-error mt-3",
            _ => "text-sm text-error mt-2"
        };
    }
    
    private string GetHelpTextClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "text-xs text-secondary mt-1",
            ComponentDensity.Dense => "text-xs text-secondary mt-1",
            ComponentDensity.Normal => "text-sm text-secondary mt-2",
            ComponentDensity.Spacious => "text-base text-secondary mt-3",
            _ => "text-sm text-secondary mt-2"
        };
    }
    
    private string GetCharacterCountClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "absolute bottom-1 right-2 text-xs text-secondary",
            ComponentDensity.Dense => "absolute bottom-1 right-2 text-xs text-secondary",
            ComponentDensity.Normal => "absolute bottom-2 right-3 text-sm text-secondary",
            ComponentDensity.Spacious => "absolute bottom-3 right-4 text-base text-secondary",
            _ => "absolute bottom-2 right-3 text-sm text-secondary"
        };
    }
    
    #endregion
}