@* RDatePickerBasic - Simplified date picker for basic scenarios *@
@using RR.Blazor.Enums

<div class="rdatepicker-basic">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label class="rdatepicker-basic__label" for="@InputId">
            @Label
            @if (Required)
            {
                <span class="text-error ml-1">*</span>
            }
        </label>
    }
    
    <div class="rdatepicker-basic__wrapper">
        <input type="@GetInputType()" 
               id="@InputId"
               class="@GetInputClasses()" 
               value="@GetInputValue()"
               placeholder="@Placeholder"
               disabled="@Disabled"
               readonly="@ReadOnly"
               required="@Required"
               min="@GetMinValue()"
               max="@GetMaxValue()"
               @onchange="HandleValueChange"
               @onfocus="HandleFocus"
               @onblur="HandleBlur" />
        
        @if (!string.IsNullOrEmpty(GetEffectiveIcon()) && IconPosition == IconPosition.Start)
        {
            <div class="rdatepicker-basic__icon rdatepicker-basic__icon--start">
                <i class="material-symbols-rounded">@GetEffectiveIcon()</i>
            </div>
        }
        
        <div class="rdatepicker-basic__icon rdatepicker-basic__icon--end">
            <i class="material-symbols-rounded">@(ShowTime ? "schedule" : "calendar_month")</i>
        </div>
    </div>
    
    @if (HasError && !string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="rdatepicker-basic__error">
            <i class="material-symbols-rounded text-xs mr-1">error</i>
            @ErrorMessage
        </div>
    }
    
    @if (!string.IsNullOrEmpty(HelpText))
    {
        <div class="rdatepicker-basic__help">
            @HelpText
        </div>
    }
</div>

@code {
    [Parameter] public string InputId { get; set; } = Guid.NewGuid().ToString("N")[..8];
    [Parameter] public DateTime? Value { get; set; }
    [Parameter] public EventCallback<DateTime?> ValueChanged { get; set; }
    
    [Parameter] public string Label { get; set; }
    [Parameter] public string Placeholder { get; set; }
    [Parameter] public string HelpText { get; set; }
    [Parameter] public string ErrorMessage { get; set; }
    /// <summary>Icon for the component</summary>
    [Parameter] public string Icon { get; set; }
    
    /// <summary>Position of the icon</summary>
    [Parameter] public IconPosition IconPosition { get; set; } = IconPosition.Start;
    
    /// <summary>Start icon (deprecated - use Icon + IconPosition)</summary>
    [Parameter] public string StartIcon { get; set; }
    [Parameter] public string Class { get; set; }
    
    [Parameter] public bool ShowTime { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool ReadOnly { get; set; }
    [Parameter] public bool HasError { get; set; }
    
    [Parameter] public DateTime? MinDate { get; set; }
    [Parameter] public DateTime? MaxDate { get; set; }
    [Parameter] public FieldSize Size { get; set; } = FieldSize.Medium;
    
    [Parameter] public EventCallback<DateTime?> OnDateSelected { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> OnFocus { get; set; }
    [Parameter] public EventCallback<FocusEventArgs> OnBlur { get; set; }

    private string GetInputType()
    {
        return ShowTime ? "datetime-local" : "date";
    }

    private string GetInputValue()
    {
        if (!Value.HasValue) return "";
        
        if (ShowTime)
        {
            return Value.Value.ToString("yyyy-MM-ddTHH:mm");
        }
        
        return Value.Value.ToString("yyyy-MM-dd");
    }

    private string GetMinValue()
    {
        if (!MinDate.HasValue) return "";
        
        if (ShowTime)
        {
            return MinDate.Value.ToString("yyyy-MM-ddTHH:mm");
        }
        
        return MinDate.Value.ToString("yyyy-MM-dd");
    }

    private string GetMaxValue()
    {
        if (!MaxDate.HasValue) return "";
        
        if (ShowTime)
        {
            return MaxDate.Value.ToString("yyyy-MM-ddTHH:mm");
        }
        
        return MaxDate.Value.ToString("yyyy-MM-dd");
    }

    private string GetInputClasses()
    {
        var classes = new List<string>
        {
            "rdatepicker-basic__input",
            "w-full",
            "border",
            "rounded-md",
            "bg-elevated",
            "text-primary",
            "transition",
            "focus:border-primary",
            "focus:shadow-primary"
        };

        classes.Add(Size switch
        {
            FieldSize.Small => "px-3 py-1-5 text-sm h-8",
            FieldSize.Medium => "px-3 py-2 text-base h-10",
            FieldSize.Large => "px-4 py-3 text-lg h-12",
            _ => "px-3 py-2 text-base h-10"
        });

        if (!string.IsNullOrEmpty(GetEffectiveIcon()) && IconPosition == IconPosition.Start)
        {
            classes.Add(Size switch
            {
                FieldSize.Small => "pl-8",
                FieldSize.Medium => "pl-10",
                FieldSize.Large => "pl-12",
                _ => "pl-10"
            });
        }

        classes.Add(Size switch
        {
            FieldSize.Small => "pr-8",
            FieldSize.Medium => "pr-10",
            FieldSize.Large => "pr-12",
            _ => "pr-10"
        });

        if (HasError)
        {
            classes.AddRange(new[] { "border-error", "focus:border-error", "focus:shadow-error" });
        }
        else
        {
            classes.Add("border-medium");
        }

        if (Disabled)
        {
            classes.AddRange(new[] { "bg-disabled", "text-muted", "cursor-not-allowed" });
        }
        else
        {
            classes.Add("hover:border-strong");
        }

        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }

        return string.Join(" ", classes);
    }

    private async Task HandleValueChange(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString();
        
        if (string.IsNullOrEmpty(newValue))
        {
            Value = null;
        }
        else if (DateTime.TryParse(newValue, out var parsedDate))
        {
            Value = parsedDate;
        }
        else
        {
            Value = null;
        }
        
        await ValueChanged.InvokeAsync(Value);
        await OnDateSelected.InvokeAsync(Value);
    }

    private async Task HandleFocus(FocusEventArgs e)
    {
        await OnFocus.InvokeAsync(e);
    }

    private async Task HandleBlur(FocusEventArgs e)
    {
        await OnBlur.InvokeAsync(e);
    }

    /// <summary>Gets the effective icon, supporting both new and legacy patterns</summary>
    private string GetEffectiveIcon()
    {
        // New unified pattern takes precedence
        if (!string.IsNullOrEmpty(Icon))
            return Icon;
            
        // Legacy fallback for backward compatibility
        if (!string.IsNullOrEmpty(StartIcon))
            return StartIcon;
            
        return null;
    }
}

<style>
.rdatepicker-basic {
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
}

.rdatepicker-basic__label {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--color-text-primary);
}

.rdatepicker-basic__wrapper {
    position: relative;
}

.rdatepicker-basic__input {
    position: relative;
}

.rdatepicker-basic__icon {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    color: var(--color-text-tertiary);
    pointer-events: none;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1rem;
}

.rdatepicker-basic__icon--start {
    left: 0.75rem;
}

.rdatepicker-basic__icon--end {
    right: 0.75rem;
}

.rdatepicker-basic__error {
    display: flex;
    align-items: center;
    font-size: 0.75rem;
    color: var(--color-error);
    margin-top: 0.25rem;
}

.rdatepicker-basic__help {
    font-size: 0.75rem;
    color: var(--color-text-tertiary);
    margin-top: 0.25rem;
}
</style>

@* 
Usage Examples:

<!-- Simple date -->
<RDatePickerBasic @bind-Value="date" Label="Select Date" />

<!-- Date with time -->
<RDatePickerBasic @bind-Value="dateTime" Label="Select Date & Time" ShowTime="true" />

<!-- With validation -->
<RDatePickerBasic @bind-Value="requiredDate" 
                  Label="Required Date" 
                  Required="true"
                  HasError="@(!requiredDate.HasValue)"
                  ErrorMessage="Date is required" />

<!-- With restrictions -->
<RDatePickerBasic @bind-Value="futureDate" 
                  Label="Future Date" 
                  MinDate="@DateTime.Today"
                  MaxDate="@DateTime.Today.AddYears(1)" />
*@