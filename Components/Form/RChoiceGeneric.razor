@**
<summary>Universal choice system - adapts between inline and dropdown modes</summary>
<category>Form</category>
**@

@attribute [Component("RChoiceGeneric", Category = "Form")]
@attribute [AIOptimized(Prompt = "Create adaptive choice component")]

@typeparam TValue where TValue : notnull
@inherits RChoiceBase
@using Microsoft.AspNetCore.Components
@using RR.Blazor.Components.Form
@using RR.Blazor.Enums
@using RR.Blazor.Services
@implements IAsyncDisposable

<div class="@GetFormWrapperClasses()">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label class="@GetLabelClasses()">@Label</label>
    }
    
    @if (EffectiveVariant == ChoiceVariant.Dropdown || TriggerContent != null)
    {
        @* Choice element with trigger *@
        <div @ref="choiceElement" class="choice choice-dropdown relative @GetDropdownDensityClass()" 
             data-choice-id="@choiceElementId">
        
            @if (TriggerContent != null)
            {
                <button class="choice-trigger w-full"
                        type="button"
                        aria-haspopup="true"
                        aria-expanded="false"
                        aria-label="@(AriaLabel ?? "Open dropdown")"
                        disabled="@Disabled"
                        @onclick="ToggleDropdown">
                    <div class="d-flex align-center justify-between w-full">
                        @TriggerContent
                    </div>
                </button>
            }
            else
            {
                <button class="choice-trigger w-full"
                        type="button"
                        aria-haspopup="true"
                        aria-expanded="false"
                        aria-label="@(AriaLabel ?? "Open dropdown")"
                        disabled="@Disabled"
                        @onclick="ToggleDropdown">
                    <div class="d-flex align-center gap-2">
                        @if (!string.IsNullOrEmpty(GetSelectedItemIcon()))
                        {
                            <i class="material-symbols-rounded choice-icon">@GetSelectedItemIcon()</i>
                        }
                        <span class="choice-text">@GetSelectedItemLabel()</span>
                    </div>
                </button>
            }
        </div>
        
        @* Viewport as sibling - hidden but present in DOM *@
        <div class="choice-viewport choice-viewport-closed" @ref="viewportElement" data-viewport-id="@choiceElementId" style="position: absolute; top: -9999px; left: -9999px; visibility: hidden;">
            <div class="choice-content">
                @if (Items != null)
                {
                    @foreach (var item in Items)
                    {
                        @if (ItemTemplate != null)
                        {
                            <button class="choice-item @GetItemClass(item)"
                                    type="button"
                                    disabled="@IsItemDisabled(item)"
                                    title="@GetItemTitle(item)"
                                    aria-label="@GetItemAriaLabel(item)"
                                    data-value="@GetItemValue(item)"
                                    @onclick="() => OnItemSelected(item)">
                                @ItemTemplate(item)
                            </button>
                        }
                        else
                        {
                            <button class="choice-item @GetItemClass(item)"
                                    type="button"
                                    disabled="@IsItemDisabled(item)"
                                    title="@GetItemTitle(item)"
                                    aria-label="@GetItemAriaLabel(item)"
                                    data-value="@GetItemValue(item)"
                                    @onclick="() => OnItemSelected(item)">
                                @if (IsItemActive(item) && ShowActiveIndicator)
                                {
                                    <i class="material-symbols-rounded choice-check">check</i>
                                }
                                else if (!string.IsNullOrEmpty(GetItemIcon(item)))
                                {
                                    <i class="material-symbols-rounded choice-icon">@GetItemIcon(item)</i>
                                }
                                <span class="choice-text">@GetItemLabel(item)</span>
                            </button>
                        }
                    }
                }
            </div>
        </div>
    }
    else
    {
        <div class="choice @GetInlineClass()">
            @if (Items != null)
            {
                @foreach (var item in Items)
                {
                    <button class="choice-item @GetItemClass(item)" 
                            type="button"
                            title="@GetItemTitle(item)"
                            aria-label="@GetItemAriaLabel(item)"
                            disabled="@IsItemDisabled(item)"
                            @onclick="() => OnItemSelected(item)">
                        @if (!string.IsNullOrEmpty(GetItemIcon(item)))
                        {
                            <i class="material-symbols-rounded choice-icon">@GetItemIcon(item)</i>
                        }
                        @if (ShowLabels && !string.IsNullOrEmpty(GetItemLabel(item)))
                        {
                            <span class="choice-label">@GetItemLabel(item)</span>
                        }
                        @if (IsItemActive(item) && ShowActiveIndicator)
                        {
                            <i class="material-symbols-rounded choice-check">check</i>
                        }
                        @if (IsItemLoading(item))
                        {
                            <div class="choice-loading">
                                <i class="material-symbols-rounded animate-spin">hourglass_empty</i>
                            </div>
                        }
                    </button>
                }
            }
        </div>
    }
    
    @if (HasError && !string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="@GetErrorMessageClasses()">
            <i class="material-symbols-rounded text-error mr-1">error</i>
            @ErrorMessage
        </div>
    }
    
    @if (!string.IsNullOrEmpty(HelpText))
    {
        <div class="@GetHelpTextClasses()">@HelpText</div>
    }
</div>

@inject IJSRuntime JS

@code {
    private ElementReference choiceElement;
    private ElementReference viewportElement;
    private string choiceElementId = Guid.NewGuid().ToString("N")[..8];
    private bool disposed = false;
    private bool isDropdownOpen = false;

    [Parameter] public IEnumerable<TValue> Items { get; set; }
    [Parameter] public TValue SelectedValue { get; set; }
    [Parameter] public EventCallback<TValue> SelectedValueChangedTyped { get; set; }
    [Parameter] public EventCallback<object> SelectedValueChangedObject { get; set; }
    [Parameter] public Func<TValue, string> ItemLabelSelectorTyped { get; set; }
    [Parameter] public Func<TValue, string> ItemIconSelectorTyped { get; set; }
    [Parameter] public Func<TValue, string> ItemTitleSelectorTyped { get; set; }
    [Parameter] public Func<TValue, string> ItemAriaLabelSelectorTyped { get; set; }
    [Parameter] public Func<TValue, bool> ItemDisabledSelectorTyped { get; set; }
    [Parameter] public Func<TValue, bool> ItemLoadingSelectorTyped { get; set; }
    [Parameter] public ChoiceVariant EffectiveVariant { get; set; } = ChoiceVariant.Inline;
    [Parameter] public ChoiceStyle Style { get; set; } = ChoiceStyle.Standard;
    [Parameter] public RenderFragment TriggerContent { get; set; }
    [Parameter] public RenderFragment<object> ItemTemplate { get; set; }
    [Parameter] public EventCallback<TValue> OnItemClick { get; set; }
    [Parameter] public DropdownDirection DropdownDirection { get; set; } = DropdownDirection.Auto;
    
    [Parameter] public bool UseBackdrop { get; set; } = false;
    [Parameter] public string BackdropClass { get; set; } = "";
    [Parameter] public bool CloseOnBackdropClick { get; set; } = true;
    [Parameter] public bool CloseOnEscape { get; set; } = true;
    [Parameter] public bool EnableVirtualScrolling { get; set; } = true;

    
    protected override bool ShouldRender()
    {
        // Prevent unnecessary re-renders that might remove DOM elements during JS operations
        return true;
    }

    private string GetInlineClass()
    {
        var styleClass = GetStyleClass();
        var densityClass = GetDensityClass();
        var directionClass = Direction == ChoiceDirection.Vertical ? " choice-vertical flex-col" : "";
        
        return $"choice-inline {styleClass} {densityClass}{directionClass}";
    }
    
    private string GetStyleClass() => Style switch
    {
        ChoiceStyle.Pills => "choice-pills d-flex gap-2",
        ChoiceStyle.Tabs => "choice-tabs d-flex border-b border-light", 
        ChoiceStyle.Buttons => "choice-buttons d-flex gap-1",
        ChoiceStyle.Compact => "choice-compact d-flex gap-0-5",
        _ => "choice-switcher d-flex gap-1 p-1 bg-surface rounded-lg"
    };
    
    private string GetDensityClass() => Density switch
    {
        ComponentDensity.Compact => "choice-compact gap-0-5 p-0-5",
        ComponentDensity.Dense => "choice-dense gap-1 p-1", 
        ComponentDensity.Spacious => "choice-spacious gap-3 p-3",
        _ => "choice-normal gap-2 p-2"
    };

    private string GetDropdownDensityClass() => Density switch
    {
        ComponentDensity.Compact => "choice-compact py-1 px-2 text-sm",
        ComponentDensity.Dense => "choice-dense py-2 px-3 text-sm", 
        ComponentDensity.Spacious => "choice-spacious py-4 px-6 text-lg",
        _ => "choice-normal py-3 px-4 text-base"
    };

    private string GetItemClass(TValue item)
    {
        var baseClass = "choice-item d-flex align-center gap-2 px-3 py-2 text-sm cursor-pointer transition-all hover-bg-surface-elevated";
        
        if (IsItemDisabled(item)) return $"{baseClass} choice-item-disabled opacity-50 cursor-not-allowed hover-bg-transparent";
        if (IsItemLoading(item)) return $"{baseClass} choice-item-loading opacity-75";
        if (IsItemActive(item)) return $"{baseClass} choice-item-active bg-primary text-on-primary font-medium";
        
        return $"{baseClass} text-secondary hover-text-primary";
    }

    private bool IsItemActive(TValue item) => EqualityComparer<TValue>.Default.Equals(item, SelectedValue);
    private bool IsItemDisabled(TValue item) => ItemDisabledSelectorTyped?.Invoke(item) ?? false;
    private bool IsItemLoading(TValue item) => ItemLoadingSelectorTyped?.Invoke(item) ?? false;

    private string GetItemLabel(TValue item) => ItemLabelSelectorTyped?.Invoke(item) ?? item.ToString();
    private string GetItemIcon(TValue item) => ItemIconSelectorTyped?.Invoke(item) ?? "";
    private string GetItemTitle(TValue item) => ItemTitleSelectorTyped?.Invoke(item) ?? GetItemLabel(item);
    private string GetItemAriaLabel(TValue item) => ItemAriaLabelSelectorTyped?.Invoke(item) ?? $"Select {GetItemLabel(item)}";
    private string GetItemValue(TValue item) => item.ToString();

    private string GetSelectedItemLabel() => 
        SelectedValue != null ? GetItemLabel(SelectedValue) : "Select an option";

    private string GetSelectedItemIcon() => 
        SelectedValue != null ? GetItemIcon(SelectedValue) : "";

    private async Task ToggleDropdown() 
    {
        if (Disabled) return;
        
        try 
        {
            // Check if this dropdown is currently active using a safer approach
            var isOpen = await JS.InvokeAsync<bool>("RRBlazor.Choice.isDropdownOpen", choiceElementId);
            
            if (isOpen)
                await CloseDropdown();
            else
                await OpenDropdown();
        }
        catch 
        {
            // Fallback to simple toggle based on local state
            if (isDropdownOpen)
                await CloseDropdown();
            else
                await OpenDropdown();
        }
    }

    private async Task OpenDropdown() 
    {
        if (Disabled) return;
        
        // Ensure component is in dropdown mode and rendered
        StateHasChanged(); // Force re-render to ensure viewport is in DOM
        await Task.Yield(); // Let Blazor complete current render cycle
        
        await JS.InvokeVoidAsync("RRBlazor.Choice.openDropdown", choiceElementId, new {
            direction = DropdownDirection.ToString().ToLowerInvariant(),
            useBackdrop = UseBackdrop,
            backdropClass = BackdropClass,
            closeOnBackdropClick = CloseOnBackdropClick,
            closeOnEscape = CloseOnEscape
        });
    }

    private Task CloseDropdown() => JS.InvokeVoidAsync("RRBlazor.Choice.closeDropdown", choiceElementId).AsTask();

    private async Task OnItemSelected(TValue item)
    {
        if (IsItemDisabled(item) || IsItemLoading(item)) return;

        if (OnItemClick.HasDelegate) await OnItemClick.InvokeAsync(item);

        SelectedValue = item;
        
        if (SelectedValueChangedTyped.HasDelegate) await SelectedValueChangedTyped.InvokeAsync(item);
        if (SelectedValueChangedObject.HasDelegate) await SelectedValueChangedObject.InvokeAsync(item);
        
        if (EffectiveVariant == ChoiceVariant.Dropdown && CloseOnSelect) await CloseDropdown();
    }
    
    private string GetFormWrapperClasses()
    {
        var baseClass = "choice-form-wrapper form-wrapper";
        var customClass = !string.IsNullOrEmpty(Class) ? $" {Class}" : "";
        var errorClass = HasError ? " choice-error form-error border-error" : "";
        var disabledClass = Disabled ? " choice-disabled opacity-50 cursor-not-allowed" : "";
        
        return $"{baseClass}{customClass}{errorClass}{disabledClass}";
    }
    
    private string GetLabelClasses() => 
        "choice-label form-label text-sm font-medium text-secondary mb-2" + (Required ? " choice-label-required form-label-required" : "");
    
    private string GetErrorMessageClasses() => "choice-error-message form-error text-error text-sm mt-1 d-flex align-center gap-1";
    private string GetHelpTextClasses() => "choice-help-text form-help text-muted text-sm mt-1";
    
    public async ValueTask DisposeAsync()
    {
        if (disposed) return;
        disposed = true;
        
        // No cleanup needed - JS handles state
    }
}