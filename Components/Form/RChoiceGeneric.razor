@**
<summary>Universal choice system - works with both inline and dropdown modes</summary>
<category>Form</category>
<complexity>Complex</complexity>
<ai-prompt>Universal choice component that adapts between inline and dropdown variants</ai-prompt>
<ai-common-use>role switching, status filters, option selection, context switching</ai-common-use>
<ai-avoid>Don't use for simple on/off toggles (use RToggle) or complex forms</ai-avoid>
<ai-pattern name="auto-detection">RChoice Items="@options" for smart variant detection</ai-pattern>
<ai-pattern name="force-dropdown">RChoiceGeneric EffectiveVariant="ChoiceVariant.Dropdown"</ai-pattern>
<ai-pattern name="force-inline">RChoiceGeneric EffectiveVariant="ChoiceVariant.Inline"</ai-pattern>
<ai-pattern name="role-switcher">RChoiceGeneric with custom TriggerContent</ai-pattern>
**@

@attribute [Component("RChoiceGeneric", Category = "Form")]
@attribute [AIOptimized(Prompt = "Create adaptive choice component")]

@typeparam TValue where TValue : notnull
@inherits RChoiceBase
@using Microsoft.AspNetCore.Components
@using RR.Blazor.Components.Form
@using RR.Blazor.Enums

<!-- Form wrapper with label and validation -->
<div class="@GetFormWrapperClasses()">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label class="@GetLabelClasses()">@Label</label>
    }
    
    @if (EffectiveVariant == ChoiceVariant.Dropdown)
    {
        <!-- Dropdown Mode -->
    <div @ref="choiceElement" class="choice choice-dropdown relative @(IsOpen ? "choice-open" : "") @GetDropdownDensityClass() @Class" 
         data-choice-id="@choiceElementId">
        
        @if (TriggerContent != null)
        {
            <!-- Custom Trigger Content -->
            <button class="choice-trigger touch-target w-full d-flex align-center justify-between px-3 py-2 bg-surface border border-light rounded-md text-left hover-border-primary focus-ring transition-all"
                    @onclick="ToggleDropdown"
                    @onkeydown="OnKeyDown"
                    aria-haspopup="true"
                    aria-expanded="@IsOpen"
                    aria-label="@(AriaLabel ?? "Open dropdown")"
                    disabled="@Disabled">
                @TriggerContent
            </button>
        }
        else
        {
            <!-- Default Trigger -->
            <button class="choice-trigger touch-target w-full d-flex align-center justify-between px-3 py-2 bg-surface border border-light rounded-md text-left hover-border-primary focus-ring transition-all"
                    @onclick="ToggleDropdown"
                    @onkeydown="OnKeyDown"
                    aria-haspopup="true"
                    aria-expanded="@IsOpen"
                    aria-label="@(AriaLabel ?? "Open dropdown")"
                    disabled="@Disabled">
                @if (!string.IsNullOrEmpty(GetSelectedItemIcon()))
                {
                    <i class="material-symbols-rounded">@GetSelectedItemIcon()</i>
                }
                <span>@GetSelectedItemLabel()</span>
            </button>
        }
        
        <!-- Dropdown Content (will be moved to portal when opened) -->
        <div class="choice-viewport" @ref="viewportElement">
            <div class="choice-content">
                @if (Items != null)
                {
                    @foreach (var item in Items)
                    {
                        @if (ItemTemplate != null)
                        {
                            <!-- Custom Item Template -->
                            <button class="choice-item @GetItemClass(item)"
                                    @onclick="() => OnItemSelected(item)"
                                    disabled="@IsItemDisabled(item)"
                                    title="@GetItemTitle(item)"
                                    aria-label="@GetItemAriaLabel(item)">
                                @ItemTemplate(item)
                            </button>
                        }
                        else
                        {
                            <!-- Default Item Template -->
                            <button class="choice-item @GetItemClass(item)"
                                    @onclick="() => OnItemSelected(item)"
                                    disabled="@IsItemDisabled(item)"
                                    title="@GetItemTitle(item)"
                                    aria-label="@GetItemAriaLabel(item)">
                                @if (IsItemActive(item))
                                {
                                    <i class="material-symbols-rounded">check</i>
                                }
                                else if (!string.IsNullOrEmpty(GetItemIcon(item)))
                                {
                                    <i class="material-symbols-rounded">@GetItemIcon(item)</i>
                                }
                                <span>@GetItemLabel(item)</span>
                            </button>
                        }
                    }
                }
            </div>
        </div>
    </div>
}
else
{
    <!-- Inline Mode -->
    <div class="choice @GetInlineClass() @Class">
        @if (Items != null)
        {
            @foreach (var item in Items)
            {
                <button class="choice-item @GetItemClass(item)" 
                        @onclick="() => OnItemSelected(item)"
                        title="@GetItemTitle(item)"
                        aria-label="@GetItemAriaLabel(item)"
                        disabled="@IsItemDisabled(item)">
                    @if (!string.IsNullOrEmpty(GetItemIcon(item)))
                    {
                        <i class="material-symbols-rounded">@GetItemIcon(item)</i>
                    }
                    @if (ShowLabels && !string.IsNullOrEmpty(GetItemLabel(item)))
                    {
                        <span class="choice-label">@GetItemLabel(item)</span>
                    }
                    @if (IsItemActive(item) && ShowActiveIndicator)
                    {
                        <i class="material-symbols-rounded choice-check">check</i>
                    }
                    @if (IsItemLoading(item))
                    {
                        <div class="choice-loading">
                            <i class="material-symbols-rounded animate-spin">hourglass_empty</i>
                        </div>
                    }
                </button>
            }
        }
    </div>
    }
    
    <!-- Validation and Help Text -->
    @if (HasError && !string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="@GetErrorMessageClasses()">
            <i class="material-symbols-rounded text-error mr-1">error</i>
            @ErrorMessage
        </div>
    }
    
    @if (!string.IsNullOrEmpty(HelpText))
    {
        <div class="@GetHelpTextClasses()">@HelpText</div>
    }
</div>

@inject IJSRuntime JS

@code {
    private bool isOpen;
    private ElementReference choiceElement;
    private ElementReference viewportElement;
    private string choiceElementId = Guid.NewGuid().ToString("N")[..8];
    private string? currentPortalId;

    [Parameter] public IEnumerable<TValue> Items { get; set; }
    [Parameter] public TValue SelectedValue { get; set; }
    [Parameter] public EventCallback<TValue> SelectedValueChangedTyped { get; set; }
    [Parameter] public EventCallback<object> SelectedValueChangedObject { get; set; }
    [Parameter] public Func<TValue, string> ItemLabelSelectorTyped { get; set; }
    [Parameter] public Func<TValue, string> ItemIconSelectorTyped { get; set; }
    [Parameter] public Func<TValue, string> ItemTitleSelectorTyped { get; set; }
    [Parameter] public Func<TValue, string> ItemAriaLabelSelectorTyped { get; set; }
    [Parameter] public Func<TValue, bool> ItemDisabledSelectorTyped { get; set; }
    [Parameter] public Func<TValue, bool> ItemLoadingSelectorTyped { get; set; }
    [Parameter] public ChoiceVariant EffectiveVariant { get; set; } = ChoiceVariant.Inline;
    [Parameter] public ChoiceStyle Style { get; set; } = ChoiceStyle.Standard;
    [Parameter] public RenderFragment TriggerContent { get; set; }
    [Parameter] public RenderFragment<object> ItemTemplate { get; set; }
    [Parameter] public EventCallback<TValue> OnItemClick { get; set; }
    [Parameter] public DropdownDirection DropdownDirection { get; set; } = DropdownDirection.Auto;

    private bool IsOpen => isOpen && !Disabled;

    private string GetInlineClass()
    {
        var classes = new List<string> { "choice-inline" };
        
        // Style utility classes
        classes.Add(Style switch
        {
            ChoiceStyle.Standard => "choice-switcher d-flex gap-1 p-1 bg-surface rounded-lg",
            ChoiceStyle.Pills => "choice-pills d-flex gap-2",
            ChoiceStyle.Tabs => "choice-tabs d-flex border-b border-light", 
            ChoiceStyle.Buttons => "choice-buttons d-flex gap-1",
            ChoiceStyle.Compact => "choice-compact d-flex gap-0-5",
            _ => "choice-switcher d-flex gap-1 p-1 bg-surface rounded-lg"
        });
        
        // Density utility classes
        classes.Add(Density switch
        {
            ComponentDensity.Compact => "choice-compact gap-0-5 p-0-5",
            ComponentDensity.Dense => "choice-dense gap-1 p-1",
            ComponentDensity.Normal => "choice-normal gap-2 p-2",
            ComponentDensity.Spacious => "choice-spacious gap-3 p-3",
            _ => "choice-normal gap-2 p-2"
        });
        
        // Direction utility classes
        if (Direction == ChoiceDirection.Vertical)
            classes.Add("choice-vertical flex-col");
            
        return string.Join(" ", classes);
    }

    private string GetDropdownDensityClass()
    {
        return Density switch
        {
            ComponentDensity.Compact => "choice-compact py-1 px-2 text-sm",
            ComponentDensity.Dense => "choice-dense py-2 px-3 text-sm", 
            ComponentDensity.Normal => "choice-normal py-3 px-4 text-base",
            ComponentDensity.Spacious => "choice-spacious py-4 px-6 text-lg",
            _ => "choice-normal py-3 px-4 text-base"
        };
    }

    private string GetItemClass(TValue item)
    {
        var classes = new List<string> { "choice-item", "d-flex", "align-center", "gap-2", "px-3", "py-2", "text-sm", "cursor-pointer", "transition-all", "hover-bg-surface-elevated" };
        
        if (IsItemActive(item)) 
        {
            classes.Add("choice-item-active bg-primary text-on-primary font-medium");
        }
        else
        {
            classes.Add("text-secondary hover-text-primary");
        }
        
        if (IsItemDisabled(item)) 
        {
            classes.Add("choice-item-disabled opacity-50 cursor-not-allowed hover-bg-transparent");
        }
        
        if (IsItemLoading(item)) 
        {
            classes.Add("choice-item-loading opacity-75");
        }
        
        return string.Join(" ", classes);
    }

    private bool IsItemActive(TValue item)
    {
        return EqualityComparer<TValue>.Default.Equals(item, SelectedValue);
    }

    private bool IsItemDisabled(TValue item)
    {
        return ItemDisabledSelectorTyped?.Invoke(item) ?? false;
    }

    private bool IsItemLoading(TValue item)
    {
        return ItemLoadingSelectorTyped?.Invoke(item) ?? false;
    }

    private string GetItemLabel(TValue item)
    {
        return ItemLabelSelectorTyped?.Invoke(item) ?? item?.ToString() ?? "";
    }

    private string GetItemIcon(TValue item)
    {
        return ItemIconSelectorTyped?.Invoke(item) ?? "";
    }

    private string GetItemTitle(TValue item)
    {
        return ItemTitleSelectorTyped?.Invoke(item) ?? GetItemLabel(item);
    }

    private string GetItemAriaLabel(TValue item)
    {
        return ItemAriaLabelSelectorTyped?.Invoke(item) ?? $"Select {GetItemLabel(item)}";
    }

    private string GetSelectedItemLabel()
    {
        if (SelectedValue != null)
        {
            return GetItemLabel(SelectedValue);
        }
        return "Select an option";
    }

    private string GetSelectedItemIcon()
    {
        if (SelectedValue != null)
        {
            return GetItemIcon(SelectedValue);
        }
        return "";
    }

    private async Task ToggleDropdown()
    {
        if (Disabled) return;
        
        if (isOpen)
        {
            await CloseDropdown();
        }
        else
        {
            await OpenDropdown();
        }
    }

    private async Task OpenDropdown()
    {
        isOpen = true;
        StateHasChanged();
        
        await Task.Yield(); // Allow DOM to update
        
        try
        {
            // Create portal using centralized system with click-outside handling
            var portalResult = await JS.InvokeAsync<string>("RRBlazor.Choice.createPortal", choiceElementId);
            if (!string.IsNullOrEmpty(portalResult))
            {
                currentPortalId = portalResult;
                
                // Register event listener for click-outside events
                await JS.InvokeVoidAsync("RRBlazor.Choice.registerClickOutside", choiceElementId, 
                    DotNetObjectReference.Create(this));
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Portal creation failed: {ex.Message}");
        }
    }

    private async Task CloseDropdown()
    {
        isOpen = false;
        StateHasChanged();
        
        // Cleanup portal and unregister from popup-manager system
        try
        {
            if (!string.IsNullOrEmpty(currentPortalId))
            {
                // Clean up portal using centralized system
                await JS.InvokeVoidAsync("RRBlazor.Choice.destroyPortal", currentPortalId);
                currentPortalId = null;
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Portal cleanup failed: {ex.Message}");
        }
    }

    private async Task HandleClickOutside()
    {
        if (isOpen)
        {
            await CloseDropdown();
        }
    }

    [JSInvokable]
    public async Task OnClickOutside()
    {
        await HandleClickOutside();
    }

    private async Task OnItemSelected(TValue item)
    {
        if (IsItemDisabled(item) || IsItemLoading(item))
            return;


        if (OnItemClick.HasDelegate)
            await OnItemClick.InvokeAsync(item);

        SelectedValue = item;
        

        if (SelectedValueChangedTyped.HasDelegate)
            await SelectedValueChangedTyped.InvokeAsync(item);
            

        if (SelectedValueChangedObject.HasDelegate)
            await SelectedValueChangedObject.InvokeAsync(item);
        

        
        if (EffectiveVariant == ChoiceVariant.Dropdown && CloseOnSelect)
        {
            await CloseDropdown();
        }
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (EffectiveVariant != ChoiceVariant.Dropdown) return;
        
        switch (e.Key)
        {
            case "Escape":
                if (IsOpen)
                {
                    await CloseDropdown();
                }
                break;
            case "Enter":
            case " ":
                if (!IsOpen)
                {
                    await OpenDropdown();
                }
                break;
        }
    }
    
    #region Form Integration CSS Methods
    
    private string GetFormWrapperClasses()
    {
        var classes = new List<string> { "choice-form-wrapper", "form-field" };
        
        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);
            
        if (HasError)
            classes.Add("choice-error form-field-error border-error");
            
        if (Disabled)
            classes.Add("choice-disabled opacity-50 cursor-not-allowed");
            
        return string.Join(" ", classes);
    }
    
    private string GetLabelClasses()
    {
        var classes = new List<string> { "choice-label", "form-label", "text-sm", "font-medium", "text-secondary", "mb-2" };
        
        if (Required)
            classes.Add("choice-label-required form-label-required");
            
        return string.Join(" ", classes);
    }
    
    private string GetErrorMessageClasses()
    {
        return "choice-error-message form-field-error text-error text-sm mt-1 d-flex align-center gap-1";
    }
    
    private string GetHelpTextClasses()
    {
        return "choice-help-text form-field-help text-muted text-sm mt-1";
    }
    
    #endregion
}