@attribute [Component("RChoiceGeneric", Category = "Form")]
@attribute [AIOptimized(Prompt = "Create adaptive choice component")]

@typeparam TValue where TValue : notnull
@inherits RChoiceBase
@using Microsoft.AspNetCore.Components
@using RR.Blazor.Components.Form
@using RR.Blazor.Enums
@using RR.Blazor.Services
@using RR.Blazor.Utilities
@implements IAsyncDisposable

<div class="@GetComponentClasses()">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label class="@GetLabelClasses()">@Label</label>
    }
    
    @if (Mode == Dropdown || TriggerContent != null)
    {
        <div @ref="choiceElement" class="choice choice-dropdown relative @(TriggerContent != null ? "w-auto" : "w-full") @(TriggerContent != null ? "" : GetDropdownDensityClass()) @(Loading ? "choice-loading" : "")"
             data-choice-id="@choiceElementId">
        
            @if (TriggerContent != null)
            {
                <div class="choice-trigger-wrapper @Class"
                     @onclick="ToggleDropdown"
                     @onclick:stopPropagation="true">
                    @TriggerContent
                </div>
            }
            else
            {
                <button class="@GetTriggerButtonClasses()"
                        type="button"
                        tabindex="0"
                        aria-haspopup="true"
                        aria-expanded="false"
                        aria-label="@(AriaLabel ?? "Open dropdown")"
                        disabled="@(Disabled || Loading)"
                        @onclick="ToggleDropdown"
                        @onkeydown="HandleTriggerKeyDown"
                        @ref="triggerButtonElement">
                    <div class="@GetTriggerClasses()">
                        @if (Loading)
                        {
                            <i class="@GetLoadingIconClasses()">hourglass_empty</i>
                        }
                        else if (!string.IsNullOrEmpty(GetSelectedItemIcon()))
                        {
                            <i class="@GetIconClasses()">@GetSelectedItemIcon()</i>
                        }
                        <span class="@GetTextClasses()">@(Loading ? LoadingText ?? "Loading..." : GetSelectedItemLabel())</span>
                    </div>
                </button>
            }
            <div class="choice-viewport choice-viewport-closed" @ref="viewportElement">
            <div class="choice-content">
                @if (Loading)
                {
                    <div class="choice-loading-indicator d-flex align-center justify-center pa-4">
                        <i class="@GetLoadingIconClasses() mr-2">hourglass_empty</i>
                        <span class="@GetTextClasses()">@(LoadingText ?? "Loading...")</span>
                    </div>
                }
                else if (Items != null)
                {
                    @foreach (var item in Items)
                    {
                        @if (ItemTemplate != null)
                        {
                            @if (IsItemDivider(item))
                            {
                                @ItemTemplate(item)
                            }
                            else if (OnItemClick.HasDelegate)
                            {
                                <div class="choice-item @GetItemClass(item)"
                                     data-value="@GetItemValue(item)"
                                     @onclick="() => OnItemSelected(item)"
                                     @onclick:stopPropagation="true"
                                     style="cursor: pointer;">
                                    @ItemTemplate(item)
                                </div>
                            }
                            else
                            {
                                @ItemTemplate(item)
                            }
                        }
                        else
                        {
                            <button class="choice-item @GetItemClass(item)"
                                    type="button"
                                    disabled="@IsItemDisabled(item)"
                                    title="@GetItemTitle(item)"
                                    aria-label="@GetItemAriaLabel(item)"
                                    data-value="@GetItemValue(item)"
                                    @onclick="() => OnItemSelected(item)">
                                @if (IsItemActive(item) && ShowActiveIndicator)
                                {
                                    <i class="@GetCheckIconClasses()">check</i>
                                }
                                else if (!string.IsNullOrEmpty(GetItemIcon(item)))
                                {
                                    <i class="@GetItemIconClasses()">@GetItemIcon(item)</i>
                                }
                                <span class="choice-text">@GetItemLabel(item)</span>
                            </button>
                        }
                    }
                }
            </div>
        </div>
        </div>
    }
    else
    {
        <div class="choice @GetInlineClass() @(Loading ? "choice-loading" : "")">
            @if (Loading)
            {
                <div class="choice-loading-indicator d-flex align-center justify-center pa-4">
                    <i class="@GetLoadingIconClasses() mr-2">hourglass_empty</i>
                    <span class="@GetTextClasses()">@(LoadingText ?? "Loading...")</span>
                </div>
            }
            else if (Items != null)
            {
                @foreach (var item in Items)
                {
                    <button class="choice-item @GetItemClass(item)" 
                            type="button"
                            title="@GetItemTitle(item)"
                            aria-label="@GetItemAriaLabel(item)"
                            disabled="@IsItemDisabled(item)"
                            @onclick="() => OnItemSelected(item)">
                        @if (!string.IsNullOrEmpty(GetItemIcon(item)))
                        {
                            <i class="@GetItemIconClasses()">@GetItemIcon(item)</i>
                        }
                        @if (ShowLabels && !string.IsNullOrEmpty(GetItemLabel(item)))
                        {
                            <span class="choice-label">@GetItemLabel(item)</span>
                        }
                        @if (IsItemActive(item) && ShowActiveIndicator)
                        {
                            <i class="@GetCheckIconClasses()">check</i>
                        }
                        @if (IsItemLoading(item))
                        {
                            <div class="choice-loading">
                                <i class="@GetLoadingIconClasses()">hourglass_empty</i>
                            </div>
                        }
                    </button>
                }
            }
        </div>
    }
    
    @if (HasError && !string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="@GetErrorMessageClasses()">
            <i class="@GetErrorIconClasses()">error</i>
            @ErrorMessage
        </div>
    }
    
    @if (!string.IsNullOrEmpty(HelpText))
    {
        <div class="@GetHelpTextClasses()">@HelpText</div>
    }
</div>

@inject IJSRuntime JS

@code {
    private ElementReference choiceElement;
    private ElementReference viewportElement;
    private ElementReference triggerButtonElement;
    private string choiceElementId = Guid.NewGuid().ToString("N");
    private bool disposed = false;

    [Parameter] public IEnumerable<TValue> Items { get; set; }
    [Parameter] public TValue SelectedValue { get; set; }
    [Parameter] public EventCallback<TValue> SelectedValueChangedTyped { get; set; }
    [Parameter] public EventCallback<object> SelectedValueChangedObject { get; set; }
    [Parameter] public Func<TValue, string> ItemLabelSelectorTyped { get; set; }
    [Parameter] public Func<TValue, string> ItemIconSelectorTyped { get; set; }
    [Parameter] public Func<TValue, string> ItemTitleSelectorTyped { get; set; }
    [Parameter] public Func<TValue, string> ItemAriaLabelSelectorTyped { get; set; }
    [Parameter] public Func<TValue, bool> ItemDisabledSelectorTyped { get; set; }
    [Parameter] public Func<TValue, bool> ItemLoadingSelectorTyped { get; set; }
    [Parameter] public ChoiceMode Mode { get; set; } = Inline;
    [Parameter] public RenderFragment TriggerContent { get; set; }
    [Parameter] public RenderFragment<object> ItemTemplate { get; set; }
    [Parameter] public EventCallback<TValue> OnItemClick { get; set; }
    [Parameter] public DropdownDirection DropdownDirection { get; set; } = DropdownDirection.Auto;
    
    [Parameter] public bool UseBackdrop { get; set; } = false;
    [Parameter] public string BackdropClass { get; set; } = "";
    [Parameter] public bool CloseOnBackdropClick { get; set; } = true;
    [Parameter] public bool CloseOnEscape { get; set; } = true;
    [Parameter] public bool EnableVirtualScrolling { get; set; } = true;

    protected override bool ShouldRender() => true;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }
    
    
    private async Task HandleTriggerKeyDown(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case " ":
            case "Enter":
                await ToggleDropdown();
                break;
            case "ArrowDown":
            case "ArrowUp":
                var isOpen = await SafeInvokeAsync<bool>("RRBlazor.Choice.isOpen", choiceElementId);
                if (!isOpen)
                {
                    await OpenDropdown();
                }
                break;
        }
    }

    private string GetInlineClass()
    {
        var styleClass = GetStyleClass();
        var densityClass = DensityHelper.GetGap(Density);
        var directionClass = Direction == Direction.Vertical ? " choice-vertical flex-col" : "";
        
        return $"choice-inline {styleClass} {densityClass}{directionClass}";
    }
    
    private string GetStyleClass() => Type switch
    {
        ChoiceType.Pills => "choice-pills d-flex",
        ChoiceType.Tabs => "choice-tabs d-flex border-b border-light", 
        ChoiceType.Buttons => "choice-buttons d-flex",
        ChoiceType.Compact => "choice-compact d-flex",
        _ => "choice-switcher d-flex p-1 bg-surface rounded-lg"
    };
    
    private string GetDensityClass() => Density switch
    {
        DensityType.Compact => "choice-compact",
        DensityType.Dense => "choice-dense", 
        DensityType.Spacious => "choice-spacious",
        _ => "choice-normal"
    };

    private string GetDropdownDensityClass() => 
        $"choice-dropdown {GetDensityClass()} {DensityHelper.GetInputDensityClasses(Density)}";

    private string GetItemClass(TValue item)
    {
        var baseClasses = new List<string>
        {
            "choice-item",
            GetTextSizeClasses(),
            DensityHelper.GetInputDensityClasses(Density)
        };
        
        if (IsItemDisabled(item)) baseClasses.Add("choice-item-disabled");
        if (IsItemLoading(item)) baseClasses.Add("choice-item-loading");
        if (IsItemActive(item)) baseClasses.Add("choice-item-active");
        
        return string.Join(" ", baseClasses);
    }

    private string GetComponentClasses()
    {
        var classes = new List<string>();

        var needsFormWrapper = !string.IsNullOrEmpty(Label) || !string.IsNullOrEmpty(ErrorMessage) || HasError;
        if (needsFormWrapper) classes.Add("form-wrapper");

        classes.Add(GetBaseClasses());
        classes.Add(GetSizeClassesWithDensity());

        if (HasError) classes.Add("choice-error form-error");
        if (Disabled) classes.Add("choice-disabled");

        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }
    
    private string GetLabelClasses() => 
        $"choice-label form-label {GetTextSizeClasses()} font-medium  text-muted mb-2" + (Required ? " choice-label-required form-label-required" : "");
    
    private string GetErrorMessageClasses() => 
        $"choice-error-message form-error text-error {GetTextSizeClasses()} mt-1 d-flex align-center {DensityHelper.GetGap(Density)}";
        
    private string GetHelpTextClasses() => 
        $"choice-help-text form-help text-muted {GetTextSizeClasses()} mt-1";
    
    private string GetTriggerContentClasses() =>
        $"d-flex align-center justify-between w-full {DensityHelper.GetGap(Density)}";
    
    private string GetTriggerClasses() =>
        $"d-flex align-center {DensityHelper.GetGap(Density)}";
    
    private string GetItemIconClasses() =>
        $"material-symbols-rounded choice-icon {GetIconSizeClasses()}";
    
    private string GetCheckIconClasses() =>
        $"material-symbols-rounded choice-check {GetIconSizeClasses()}";
    
    private string GetLoadingIconClasses() =>
        $"material-symbols-rounded animate-spin {GetIconSizeClasses()}";
    
    private string GetErrorIconClasses() =>
        $"material-symbols-rounded text-error mr-1 {GetIconSizeClasses()}";
    
    private string GetTriggerButtonClasses()
    {
        var classes = new List<string> { "choice-trigger", "w-full" };

        if (HasError)
        {
            classes.Add("choice-trigger-error");
            classes.Add("form-input-error");
        }

        return string.Join(" ", classes);
    }

    private bool IsItemActive(TValue item) => EqualityComparer<TValue>.Default.Equals(item, SelectedValue);
    private bool IsItemDisabled(TValue item) => ItemDisabledSelectorTyped?.Invoke(item) ?? false;
    private bool IsItemLoading(TValue item) => ItemLoadingSelectorTyped?.Invoke(item) ?? false;
    private bool IsItemDivider(TValue item) => item?.ToString()?.StartsWith("divider") ?? false;

    private string GetItemLabel(TValue item) => ItemLabelSelectorTyped?.Invoke(item) ?? item.ToString();
    private string GetItemIcon(TValue item) => ItemIconSelectorTyped?.Invoke(item) ?? "";
    private string GetItemTitle(TValue item) => ItemTitleSelectorTyped?.Invoke(item) ?? GetItemLabel(item);
    private string GetItemAriaLabel(TValue item) => ItemAriaLabelSelectorTyped?.Invoke(item) ?? $"Select {GetItemLabel(item)}";
    private string GetItemValue(TValue item) => item.ToString();

    private string GetSelectedItemLabel() => 
        SelectedValue != null ? GetItemLabel(SelectedValue) : "Select an option";

    private string GetSelectedItemIcon() => 
        SelectedValue != null ? GetItemIcon(SelectedValue) : "";

    private async Task ToggleDropdown()
    {
        if (Disabled || disposed) return;

        var isCurrentlyOpen = await SafeInvokeAsync<bool>("RRBlazor.Choice.isOpen", choiceElementId);

        if (isCurrentlyOpen)
            await CloseDropdown();
        else
            await OpenDropdown();
    }
    
    private async Task OpenDropdown()
    {
        if (Disabled || disposed) return;

        await SafeInvokeAsync<object>("RRBlazor.Choice.open", choiceElementId, new {
            direction = DropdownDirection.ToString().ToLowerInvariant(),
            useBackdrop = UseBackdrop,
            backdropClass = BackdropClass,
            closeOnBackdropClick = CloseOnBackdropClick,
            closeOnEscape = CloseOnEscape,
            dropdownClass = DropdownClass
        });

        StateHasChanged();
    }
    
    private async Task CloseDropdown()
    {
        if (disposed) return;

        await SafeInvokeAsync<object>("RRBlazor.Choice.close", choiceElementId);

        StateHasChanged();
    }

    private async Task OnItemSelected(TValue item)
    {
        if (IsItemDisabled(item) || IsItemLoading(item)) return;

        if (OnItemClick.HasDelegate) await OnItemClick.InvokeAsync(item);

        SelectedValue = item;
        
        if (SelectedValueChangedTyped.HasDelegate) await SelectedValueChangedTyped.InvokeAsync(item);
        if (SelectedValueChangedObject.HasDelegate) await SelectedValueChangedObject.InvokeAsync(item);
        
        if (Mode == Dropdown && CloseOnSelect) await CloseDropdown();
    }
    
    public async ValueTask DisposeAsync()
    {
        if (disposed) return;
        disposed = true;

        if (Mode == Dropdown)
        {
            try
            {
                await SafeInvokeAsync("RRBlazor.Choice.close", choiceElementId);
            }
            catch
            {
            }
        }
    }
}
