@**
<summary>Universal choice system - works with both inline and dropdown modes</summary>
<category>Form</category>
<complexity>Complex</complexity>
<ai-prompt>Universal choice component that adapts between inline and dropdown variants</ai-prompt>
<ai-common-use>role switching, status filters, option selection, context switching</ai-common-use>
<ai-avoid>Don't use for simple on/off toggles (use RToggle) or complex forms</ai-avoid>
<ai-pattern name="auto-detection">RChoice Items="@options" for smart variant detection</ai-pattern>
<ai-pattern name="force-dropdown">RChoiceGeneric EffectiveVariant="ChoiceVariant.Dropdown"</ai-pattern>
<ai-pattern name="force-inline">RChoiceGeneric EffectiveVariant="ChoiceVariant.Inline"</ai-pattern>
<ai-pattern name="role-switcher">RChoiceGeneric with custom TriggerContent</ai-pattern>
**@

@attribute [Component("RChoiceGeneric", Category = "Form")]
@attribute [AIOptimized(Prompt = "Create adaptive choice component")]

@typeparam TValue where TValue : notnull
@inherits RChoiceBase
@using Microsoft.AspNetCore.Components
@using RR.Blazor.Components.Form
@using RR.Blazor.Enums

@if (EffectiveVariant == ChoiceVariant.Dropdown)
{
    <!-- Dropdown Mode -->
    <div @ref="choiceElement" class="choice choice-dropdown @(IsOpen ? "choice-open" : "") @GetDropdownDensityClass() @base.Class">
        
        @if (TriggerContent != null)
        {
            <!-- Custom Trigger Content -->
            <button class="choice-trigger touch-target"
                    @onclick="ToggleDropdown"
                    @onkeydown="OnKeyDown"
                    aria-haspopup="true"
                    aria-expanded="@IsOpen"
                    aria-label="@(AriaLabel ?? "Open dropdown")"
                    disabled="@Disabled">
                @TriggerContent
            </button>
        }
        else
        {
            <!-- Default Trigger -->
            <button class="choice-trigger touch-target"
                    @onclick="ToggleDropdown"
                    @onkeydown="OnKeyDown"
                    aria-haspopup="true"
                    aria-expanded="@IsOpen"
                    aria-label="@(AriaLabel ?? "Open dropdown")"
                    disabled="@Disabled">
                @if (!string.IsNullOrEmpty(GetSelectedItemIcon()))
                {
                    <i class="material-symbols-rounded">@GetSelectedItemIcon()</i>
                }
                <span>@GetSelectedItemLabel()</span>
                <i class="material-symbols-rounded choice-chevron">expand_more</i>
            </button>
        }
        
        <!-- Backdrop -->
        <div class="choice-backdrop" @onclick="CloseDropdown"></div>
        
        <!-- Dropdown Content -->
        <div class="choice-viewport">
            <div class="choice-content">
                @if (Items != null)
                {
                    @foreach (var item in Items)
                    {
                        @if (ItemTemplate != null)
                        {
                            <!-- Custom Item Template -->
                            <button class="choice-item @GetItemClass(item)"
                                    @onclick="() => OnItemSelected(item)"
                                    disabled="@IsItemDisabled(item)"
                                    title="@GetItemTitle(item)"
                                    aria-label="@GetItemAriaLabel(item)">
                                @ItemTemplate(item)
                            </button>
                        }
                        else
                        {
                            <!-- Default Item Template -->
                            <button class="choice-item @GetItemClass(item)"
                                    @onclick="() => OnItemSelected(item)"
                                    disabled="@IsItemDisabled(item)"
                                    title="@GetItemTitle(item)"
                                    aria-label="@GetItemAriaLabel(item)">
                                @if (IsItemActive(item))
                                {
                                    <i class="material-symbols-rounded">check</i>
                                }
                                else if (!string.IsNullOrEmpty(GetItemIcon(item)))
                                {
                                    <i class="material-symbols-rounded">@GetItemIcon(item)</i>
                                }
                                <span>@GetItemLabel(item)</span>
                            </button>
                        }
                    }
                }
            </div>
        </div>
    </div>
}
else
{
    <!-- Inline Mode -->
    <div class="choice @GetInlineClass() @base.Class">
        @if (Items != null)
        {
            @foreach (var item in Items)
            {
                <button class="choice-item @GetItemClass(item)" 
                        @onclick="() => OnItemSelected(item)"
                        title="@GetItemTitle(item)"
                        aria-label="@GetItemAriaLabel(item)"
                        disabled="@IsItemDisabled(item)">
                    @if (!string.IsNullOrEmpty(GetItemIcon(item)))
                    {
                        <i class="material-symbols-rounded">@GetItemIcon(item)</i>
                    }
                    @if (ShowLabels && !string.IsNullOrEmpty(GetItemLabel(item)))
                    {
                        <span class="choice-label">@GetItemLabel(item)</span>
                    }
                    @if (IsItemActive(item) && ShowActiveIndicator)
                    {
                        <i class="material-symbols-rounded choice-check">check</i>
                    }
                    @if (IsItemLoading(item))
                    {
                        <div class="choice-loading">
                            <i class="material-symbols-rounded animate-spin">hourglass_empty</i>
                        </div>
                    }
                </button>
            }
        }
    </div>
}

@inject IJSRuntime JS

@code {
    private bool isOpen = false;
    private ElementReference choiceElement;

    [Parameter] public IEnumerable<TValue> Items { get; set; }
    [Parameter] public TValue SelectedValue { get; set; }
    [Parameter] public EventCallback<TValue> SelectedValueChangedTyped { get; set; }
    [Parameter] public EventCallback<object> SelectedValueChangedObject { get; set; }
    [Parameter] public Func<TValue, string> ItemLabelSelectorTyped { get; set; }
    [Parameter] public Func<TValue, string> ItemIconSelectorTyped { get; set; }
    [Parameter] public Func<TValue, string> ItemTitleSelectorTyped { get; set; }
    [Parameter] public Func<TValue, string> ItemAriaLabelSelectorTyped { get; set; }
    [Parameter] public Func<TValue, bool> ItemDisabledSelectorTyped { get; set; }
    [Parameter] public Func<TValue, bool> ItemLoadingSelectorTyped { get; set; }
    [Parameter] public ChoiceVariant EffectiveVariant { get; set; } = ChoiceVariant.Inline;
    [Parameter] public ChoiceStyle Style { get; set; } = ChoiceStyle.Standard;
    [Parameter] public RenderFragment TriggerContent { get; set; }
    [Parameter] public RenderFragment<object> ItemTemplate { get; set; }
    [Parameter] public EventCallback<TValue> OnItemClick { get; set; }
    [Parameter] public bool Loading { get; set; } = false;
    [Parameter] public string DropdownClass { get; set; }
    [Parameter] public DropdownDirection DropdownDirection { get; set; } = DropdownDirection.Auto;

    private bool IsOpen => isOpen && !Disabled;

    private string GetInlineClass()
    {
        var classes = new List<string>();
        

        classes.Add(Style switch
        {
            ChoiceStyle.Standard => "choice-switcher",
            ChoiceStyle.Pills => "choice-pills",
            ChoiceStyle.Tabs => "choice-tabs", 
            ChoiceStyle.Buttons => "choice-buttons",
            ChoiceStyle.Compact => "choice-compact",
            _ => "choice-switcher"
        });
        

        classes.Add(Density switch
        {
            ComponentDensity.Compact => "choice-compact",
            ComponentDensity.Dense => "choice-dense",
            ComponentDensity.Normal => "choice-normal",
            ComponentDensity.Spacious => "choice-spacious",
            _ => "choice-normal"
        });
        

        if (Direction == ChoiceDirection.Vertical)
            classes.Add("choice-vertical");
            
        return string.Join(" ", classes);
    }

    private string GetDropdownDensityClass()
    {
        var classes = new List<string>();
        
        classes.Add(Density switch
        {
            ComponentDensity.Compact => "choice-compact",
            ComponentDensity.Dense => "choice-dense", 
            ComponentDensity.Normal => "choice-normal",
            ComponentDensity.Spacious => "choice-spacious",
            _ => "choice-normal"
        });
        
        return string.Join(" ", classes);
    }

    private string GetItemClass(TValue item)
    {
        var classes = new List<string> { "choice-item" };
        
        if (IsItemActive(item)) classes.Add("choice-item-active");
        if (IsItemDisabled(item)) classes.Add("choice-item-disabled");
        if (IsItemLoading(item)) classes.Add("choice-item-loading");
        
        return string.Join(" ", classes);
    }

    private bool IsItemActive(TValue item)
    {
        return EqualityComparer<TValue>.Default.Equals(item, SelectedValue);
    }

    private bool IsItemDisabled(TValue item)
    {
        return ItemDisabledSelectorTyped?.Invoke(item) ?? base.ItemDisabledSelector?.Invoke(item) ?? false;
    }

    private bool IsItemLoading(TValue item)
    {
        return ItemLoadingSelectorTyped?.Invoke(item) ?? base.ItemLoadingSelector?.Invoke(item) ?? false;
    }

    private string GetItemLabel(TValue item)
    {
        return ItemLabelSelectorTyped?.Invoke(item) ?? base.ItemLabelSelector?.Invoke(item) ?? item?.ToString() ?? "";
    }

    private string GetItemIcon(TValue item)
    {
        return ItemIconSelectorTyped?.Invoke(item) ?? base.ItemIconSelector?.Invoke(item) ?? "";
    }

    private string GetItemTitle(TValue item)
    {
        return ItemTitleSelectorTyped?.Invoke(item) ?? base.ItemTitleSelector?.Invoke(item) ?? GetItemLabel(item);
    }

    private string GetItemAriaLabel(TValue item)
    {
        return ItemAriaLabelSelectorTyped?.Invoke(item) ?? base.ItemAriaLabelSelector?.Invoke(item) ?? $"Select {GetItemLabel(item)}";
    }

    private string GetSelectedItemLabel()
    {
        if (SelectedValue != null)
        {
            return GetItemLabel(SelectedValue);
        }
        return "Select an option";
    }

    private string GetSelectedItemIcon()
    {
        if (SelectedValue != null)
        {
            return GetItemIcon(SelectedValue);
        }
        return "";
    }

    private async Task ToggleDropdown()
    {
        if (Disabled) return;
        
        if (isOpen)
        {
            await CloseDropdown();
        }
        else
        {
            await OpenDropdown();
        }
    }

    private async Task OpenDropdown()
    {
        isOpen = true;
        StateHasChanged();
        

        if (DropdownDirection == DropdownDirection.Auto)
        {
            await Task.Yield(); // Allow DOM to update
            try
            {
                await JS.InvokeVoidAsync("RRBlazor.Choice.applyDynamicPositioning", choiceElement);
            }
            catch (Exception ex)
            {

                System.Diagnostics.Debug.WriteLine($"Dynamic positioning failed: {ex.Message}");
            }
        }
    }

    private Task CloseDropdown()
    {
        isOpen = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task OnItemSelected(TValue item)
    {
        if (IsItemDisabled(item) || IsItemLoading(item))
            return;


        if (OnItemClick.HasDelegate)
            await OnItemClick.InvokeAsync(item);

        SelectedValue = item;
        

        if (SelectedValueChangedTyped.HasDelegate)
            await SelectedValueChangedTyped.InvokeAsync(item);
            

        if (SelectedValueChangedObject.HasDelegate)
            await SelectedValueChangedObject.InvokeAsync(item);
        

        if (base.SelectedValueChanged.HasDelegate)
            await base.SelectedValueChanged.InvokeAsync(item);
        
        if (EffectiveVariant == ChoiceVariant.Dropdown && CloseOnSelect)
        {
            await CloseDropdown();
        }
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (EffectiveVariant != ChoiceVariant.Dropdown) return;
        
        switch (e.Key)
        {
            case "Escape":
                if (IsOpen)
                {
                    await CloseDropdown();
                }
                break;
            case "Enter":
            case " ":
                if (!IsOpen)
                {
                    await OpenDropdown();
                }
                break;
        }
    }
}