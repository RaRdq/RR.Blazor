@** 
<summary>
Generic autosuggest component using RR.Blazor portal system.
Clean implementation without custom portal code.
</summary>
<category>Form</category>
<complexity>Complex</complexity>
**@

@namespace RR.Blazor.Components
@using RR.Blazor.Models
@using RR.Blazor.Enums
@using RR.Blazor.Attributes
@using RR.Blazor.Components.Base
@using Microsoft.AspNetCore.Components.Web
@typeparam TItem where TItem : notnull
@inherits RComponentBase
@inject IJSRuntime JS
@implements IAsyncDisposable

@attribute [Component("RAutosuggestGeneric", Category = "Form", Complexity = ComponentComplexity.Complex)]

<div class="autosuggest @GetAutosuggestClasses()" 
     data-autosuggest-id="@autosuggestId"
     @ref="containerRef">

    <RTextInput Value="@SearchQuery"
               ValueChanged="@HandleValueChanged"
               Type="@InputType"
               Placeholder="@Placeholder"
               Label="@Label"
               HelpText="@HelpText" 
               Size="@Size"
               Disabled="@Disabled"
               ReadOnly="@ReadOnly"
               Required="@Required"
               Class="@GetInputClasses()"
               StartIcon="@GetEffectiveStartIcon()"
               EndIcon="@GetEndIcon()"
               OnFocus="@HandleInputFocus"
               OnBlur="@HandleInputBlur"
               @onkeydown="@HandleKeyDown"
               @ref="inputRef" />

    <!-- Viewport stays in DOM but moves to portal when open -->
    <div class="autosuggest-viewport @(isDropdownOpen ? "autosuggest-viewport-open" : "autosuggest-viewport-closed")" 
         @ref="dropdownRef"
         style="position: absolute; top: -9999px; left: -9999px; visibility: hidden;">
        <div class="autosuggest-dropdown">
            @if (ShowLoading && IsLoading)
            {
                <div class="autosuggest-loading">
                    <div class="loading-indicator">
                        <i class="icon animate-spin">refresh</i>
                        <span>Searching...</span>
                    </div>
                </div>
            }
            else if (FilteredItems.Any())
            {
                @foreach (var (item, index) in FilteredItems.Take(MaxSuggestions).Select((item, idx) => (item, idx)))
                {
                    <div class="autosuggest-item @GetItemClasses(index)"
                         @onclick="() => HandleItemSelect(item)"
                         @onmouseenter="() => SetSelectedIndex(index)"
                         data-item-index="@index">
                        @if (ItemTemplate != null)
                        {
                            @ItemTemplate(item)
                        }
                        else
                        {
                            <div class="autosuggest-item-content">
                                @if (!string.IsNullOrEmpty(GetItemIcon(item)))
                                {
                                    <i class="icon">@GetItemIcon(item)</i>
                                }
                                <span>@GetItemText(item)</span>
                            </div>
                        }
                    </div>
                }
            }
            else if (!string.IsNullOrWhiteSpace(SearchQuery) && SearchQuery.Length >= MinSearchLength)
            {
                <div class="autosuggest-empty">
                    @if (EmptyTemplate != null)
                    {
                        @EmptyTemplate
                    }
                    else
                    {
                        <div class="empty-content">
                            <i class="icon">search_off</i>
                            <span>No results found</span>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private ElementReference containerRef;
    private ElementReference dropdownRef;
    private RTextInput inputRef;
    private string searchQuery = string.Empty;
    private bool isLoading;
    private int selectedIndex = -1;
    private Timer debounceTimer;
    private CancellationTokenSource cancellationTokenSource;
    private int searchGeneration = 0;
    private bool isDropdownOpen;
    private string autosuggestId = $"autosuggest-{Guid.NewGuid():N}";
    private IJSObjectReference? autosuggestModule;
    private DotNetObjectReference<RAutosuggestGeneric<TItem>>? dotNetRef;

    [Parameter] public TItem Value { get; set; }
    [Parameter] public EventCallback<TItem> ValueChanged { get; set; }
    [Parameter] public IEnumerable<TItem> Items { get; set; } = Enumerable.Empty<TItem>();
    [Parameter] public Func<string, CancellationToken, Task<IEnumerable<TItem>>> SearchFunc { get; set; }
    [Parameter] public Func<TItem, string> ItemTextSelector { get; set; } = item => item?.ToString() ?? string.Empty;
    [Parameter] public Func<TItem, string> ItemIconSelector { get; set; }
    [Parameter] public RenderFragment<TItem> ItemTemplate { get; set; }
    [Parameter] public RenderFragment EmptyTemplate { get; set; }
    [Parameter] public int MinSearchLength { get; set; } = 1;
    [Parameter] public int DebounceDelay { get; set; } = 300;
    [Parameter] public int MaxSuggestions { get; set; } = 10;
    [Parameter] public bool ShowLoading { get; set; } = true;
    [Parameter] public bool ClearOnSelect { get; set; }
    [Parameter] public bool OpenOnFocus { get; set; }
    [Parameter] public FieldType InputType { get; set; } = FieldType.Text;
    [Parameter] public string Icon { get; set; }
    [Parameter] public bool ShowDropdownIcon { get; set; } = true;
    [Parameter] public EventCallback<TItem> OnItemSelected { get; set; }
    [Parameter] public EventCallback<string> OnSearchChanged { get; set; }
    [Parameter] public SizeType Size { get; set; } = SizeType.Medium;
    [Parameter] public bool ReadOnly { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public string StartIcon { get; set; }
    [Parameter] public string EndIcon { get; set; }
    [Parameter] public string Placeholder { get; set; }
    [Parameter] public string Label { get; set; }
    [Parameter] public string HelpText { get; set; }

    private string SearchQuery
    {
        get => searchQuery;
        set => searchQuery = value;
    }

    private bool IsLoading => isLoading;
    private IEnumerable<TItem> FilteredItems => Items ?? Enumerable.Empty<TItem>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Value != null)
        {
            searchQuery = GetItemText(Value);
        }
        dotNetRef = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                autosuggestModule = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/RR.Blazor/js/autosuggest.js");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to load autosuggest module: {ex.Message}");
            }
        }
    }

    private async Task OpenDropdown()
    {
        if (isDropdownOpen || autosuggestModule == null) return;
        
        isDropdownOpen = true;
        StateHasChanged();
        
        try
        {
            await autosuggestModule.InvokeAsync<string>("createPortal", autosuggestId, new
            {
                placement = "bottom-start",
                offset = 4,
                flip = true,
                constrain = true
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to open dropdown: {ex.Message}");
            isDropdownOpen = false;
        }
    }

    private async Task CloseDropdown()
    {
        if (!isDropdownOpen) return;
        
        isDropdownOpen = false;
        
        if (autosuggestModule != null)
        {
            try
            {
                await autosuggestModule.InvokeVoidAsync("closeDropdown", autosuggestId);
            }
            catch
            {
                // Ignore disposal errors
            }
        }
        
        StateHasChanged();
    }

    private async Task HandleValueChanged(string value)
    {
        if (searchQuery == value) return;
        
        searchQuery = value;
        await OnSearchChanged.InvokeAsync(value);
        await HandleSearch();
    }

    private async Task HandleInputFocus()
    {
        if (OpenOnFocus && !isDropdownOpen && !string.IsNullOrWhiteSpace(SearchQuery))
        {
            await OpenDropdown();
        }
    }

    private async Task HandleInputBlur()
    {
        // Delay close to allow item clicks
        await Task.Delay(150);
        if (isDropdownOpen) 
        {
            await CloseDropdown();
        }
    }

    private async Task HandleSearch()
    {
        cancellationTokenSource?.Cancel();
        debounceTimer?.Dispose();

        if (string.IsNullOrWhiteSpace(searchQuery) || searchQuery.Length < MinSearchLength)
        {
            await CloseDropdown();
            return;
        }

        searchGeneration++;
        var currentGeneration = searchGeneration;
        
        // Don't trigger re-render just for loading state
        isLoading = true;

        cancellationTokenSource = new CancellationTokenSource();
        debounceTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                if (SearchFunc == null || currentGeneration != searchGeneration) return;

                try
                {
                    var results = await SearchFunc(searchQuery, cancellationTokenSource.Token);
                    if (currentGeneration == searchGeneration)
                    {
                        Items = results ?? Enumerable.Empty<TItem>();
                        
                        if (!isDropdownOpen)
                        {
                            await OpenDropdown();
                            selectedIndex = -1;
                        }
                        
                        isLoading = false;
                        StateHasChanged(); // Only render when we have results
                    }
                }
                catch (OperationCanceledException) { }
                catch (Exception ex)
                {
                    Console.WriteLine($"Search error: {ex.Message}");
                    if (currentGeneration == searchGeneration)
                    {
                        isLoading = false;
                        StateHasChanged();
                    }
                }
            });
        }, null, DebounceDelay, Timeout.Infinite);
    }

    private async Task HandleItemSelect(TItem item)
    {
        Value = item;
        searchQuery = ClearOnSelect ? string.Empty : GetItemText(item);
        await CloseDropdown();
        await ValueChanged.InvokeAsync(item);
        await OnItemSelected.InvokeAsync(item);
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (!isDropdownOpen || !FilteredItems.Any()) return;

        switch (e.Key)
        {
            case "ArrowDown":
                selectedIndex = Math.Min(selectedIndex + 1, FilteredItems.Count() - 1);
                break;

            case "ArrowUp":
                selectedIndex = Math.Max(selectedIndex - 1, -1);
                break;

            case "Enter":
                if (selectedIndex >= 0 && selectedIndex < FilteredItems.Count())
                {
                    await HandleItemSelect(FilteredItems.ElementAt(selectedIndex));
                }
                break;

            case "Escape":
                await CloseDropdown();
                break;
        }
    }

    private void SetSelectedIndex(int index)
    {
        selectedIndex = index;
    }

    private string GetItemText(TItem item) => ItemTextSelector?.Invoke(item) ?? item?.ToString() ?? string.Empty;
    private string GetItemIcon(TItem item) => ItemIconSelector?.Invoke(item) ?? string.Empty;

    private string GetEffectiveStartIcon()
    {
        return !string.IsNullOrEmpty(StartIcon) ? StartIcon : Icon;
    }

    private string GetEndIcon()
    {
        if (IsLoading) return "refresh";
        if (!string.IsNullOrEmpty(EndIcon)) return EndIcon;
        return ShowDropdownIcon ? (isDropdownOpen ? "expand_less" : "expand_more") : string.Empty;
    }

    private string GetAutosuggestClasses()
    {
        var classes = new List<string> { GetBaseClasses() };
        
        if (isDropdownOpen) classes.Add("autosuggest-open");
        if (IsLoading) classes.Add("autosuggest-loading");
        if (Disabled) classes.Add("autosuggest-disabled");
        
        return string.Join(" ", classes);
    }

    private string GetInputClasses()
    {
        return "autosuggest-input";
    }

    private string GetItemClasses(int index)
    {
        var classes = new List<string> { "autosuggest-item" };
        if (index == selectedIndex) classes.Add("selected");
        return string.Join(" ", classes);
    }


    public async ValueTask DisposeAsync()
    {
        debounceTimer?.Dispose();
        cancellationTokenSource?.Cancel();
        cancellationTokenSource?.Dispose();
        
        if (isDropdownOpen)
        {
            await CloseDropdown();
        }
        
        if (autosuggestModule != null)
        {
            await autosuggestModule.DisposeAsync();
        }
        
        dotNetRef?.Dispose();
    }
}