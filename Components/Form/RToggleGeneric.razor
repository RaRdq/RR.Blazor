@** 
<summary>Professional toggle switch component for boolean states</summary>
<category>Form</category>
<complexity>Simple</complexity>
<ai-prompt>Create a modern toggle switch for on/off states</ai-prompt>
<ai-common-use>settings toggles, feature flags, enable/disable options</ai-common-use>
<ai-avoid>Don't use for multi-option selection (use RChoice) or required selections (use RCheckbox)</ai-avoid>
<ai-pattern name="basic-toggle">Text="Enable Notifications" @bind-value="notificationsEnabled"</ai-pattern>
<ai-pattern name="with-description">Text="Dark Mode" Description="Switch to dark theme" @bind-value="darkMode"</ai-pattern>
<ai-pattern name="disabled-state">Text="Premium Feature" Disabled="true" Description="Upgrade required"</ai-pattern>
<ai-pattern name="with-icon">Text="WiFi" Icon="wifi" @bind-value="wifiEnabled"</ai-pattern>
**@

@typeparam TValue
@using RR.Blazor.Components.Base
@inherits RForwardingComponentBase
@attribute [Component("RToggle", Category = "Form")]
@attribute [AIOptimized(Prompt = "Create professional toggle switch")]

@using RR.Blazor.Enums
@using RR.Blazor.Components.Base

<div class="flex items-center gap-3 @GetContainerClasses()">
    @if (LabelPosition == IconPosition.Start && !string.IsNullOrEmpty(Text))
    {
        <div class="flex flex-col">
            <label for="@Id" class="@GetLabelClasses()">
                <div class="flex items-center gap-2">
                    @if (!string.IsNullOrEmpty(Icon))
                    {
                        <i class="icon @GetIconClasses()">@Icon</i>
                    }
                    <span class="@GetTextClasses()">@Text</span>
                </div>
            </label>
            @if (!string.IsNullOrEmpty(Description))
            {
                <span class="@GetDescriptionClasses()">@Description</span>
            }
        </div>
    }
    
    <div class="relative flex items-center toggle-control">
        <input type="checkbox" 
               id="@Id"
               name="@Name"
               checked="@InternalValue"
               @onchange="HandleToggleChange"
               disabled="@Disabled"
               class="peer absolute opacity-0 w-full h-full cursor-pointer disabled:cursor-not-allowed z-10"
               @attributes="GetSafeAttributes()" />
        
        <div class="@GetToggleTrackClasses()">
            <div class="@GetToggleThumbClasses()">
                @if (ShowStateIcons)
                {
                    <i class="icon @GetStateIconClasses()">
                        @(InternalValue ? "check" : "close")
                    </i>
                }
            </div>
        </div>
    </div>
    
    @if (LabelPosition == IconPosition.End && !string.IsNullOrEmpty(Text))
    {
        <div class="flex flex-col">
            <label for="@Id" class="@GetLabelClasses()">
                <div class="flex items-center gap-2">
                    @if (!string.IsNullOrEmpty(Icon))
                    {
                        <i class="icon @GetIconClasses()">@Icon</i>
                    }
                    <span class="@GetTextClasses()">@Text</span>
                </div>
            </label>
            @if (!string.IsNullOrEmpty(Description))
            {
                <span class="@GetDescriptionClasses()">@Description</span>
            }
        </div>
    }
</div>

@if (!string.IsNullOrEmpty(ValidationMessage))
{
    <div class="@GetValidationClasses()">
        <i class="icon">error</i>
        @ValidationMessage
    </div>
}

@code {
    [Parameter] public bool Checked { get; set; }
    [Parameter] public EventCallback<bool> CheckedChanged { get; set; }
    
    [Parameter] public bool Value { get; set; }
    [Parameter] public EventCallback<bool> ValueChanged { get; set; }
    [Parameter] public EventCallback<bool> OnClick { get; set; }
    
    [Parameter] public string? Text { get; set; }
    [Parameter] public string? Description { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public string Id { get; set; } = Guid.NewGuid().ToString("N");
    [Parameter] public string? Name { get; set; }
    [Parameter] public ToggleVariant Variant { get; set; } = ToggleVariant.Standard;
    [Parameter] public SizeType Size { get; set; } = Medium;
    [Parameter] public IconPosition LabelPosition { get; set; } = IconPosition.End;
    [Parameter] public bool ShowStateIcons { get; set; }
    [Parameter] public string? ValidationMessage { get; set; }

    
    private bool _internalState;
    private bool _initialized = false;

    protected override void OnParametersSet()
    {
        // Sync internal state with parameters on each render
        var currentValue = ValueChanged.HasDelegate ? Value : Checked;
        if (!_initialized || _internalState != currentValue)
        {
            _internalState = currentValue;
            _initialized = true;
        }
    }
    
    private bool InternalValue
    {
        get => _internalState;
        set
        {
            if (_internalState != value)
            {
                _internalState = value;
                _ = OnValueChanged(); // Fire and forget - don't await to avoid blocking
            }
        }
    }

    private string GetContainerClasses()
    {
        var classes = new List<string> { "toggle-container" };
        
        if (Disabled)
            classes.Add("toggle-container-disabled");
        
        if (!string.IsNullOrEmpty(ValidationMessage))
            classes.Add("toggle-container-error");
        
        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);
        
        return string.Join(" ", classes);
    }

    private string GetToggleTrackClasses()
    {
        var classes = new List<string> { "toggle-track" };
        
        classes.Add($"toggle-track-{Size.ToString().ToLower()}");
        classes.Add($"toggle-track-{Variant.ToString().ToLower()}");
        
        if (InternalValue)
            classes.Add("toggle-track-checked");
        else
            classes.Add("toggle-track-unchecked");
        
        if (Disabled)
            classes.Add("toggle-track-disabled");
        
        return string.Join(" ", classes);
    }

    private string GetToggleThumbClasses()
    {
        var classes = new List<string> { "toggle-thumb" };
        
        classes.Add($"toggle-thumb-{Size.ToString().ToLower()}");
        
        if (InternalValue)
            classes.Add("toggle-thumb-checked");
        else
            classes.Add("toggle-thumb-unchecked");
        
        if (ShowStateIcons)
            classes.Add("toggle-thumb-with-icon");
        
        return string.Join(" ", classes);
    }

    private string GetLabelClasses()
    {
        var classes = new List<string> 
        { 
            "text-sm", 
            "font-medium", 
            "cursor-pointer" 
        };
        
        if (Disabled)
            classes.Add("text-muted cursor-not-allowed");
        else
            classes.Add("text-primary");
        
        return string.Join(" ", classes);
    }

    private string GetTextClasses()
    {
        return Size switch
        {
            Small => "text-sm",
            Large => "text-base",
            _ => "text-sm"
        };
    }

    private string GetIconClasses()
    {
        var SizeType = Size switch
        {
            Small => "text-sm",
            Large => "text-lg",
            _ => "text-base"
        };
        
        return $"{SizeType} {(Disabled ? "text-muted" : "text-secondary")}";
    }

    private string GetDescriptionClasses()
    {
        return $"text-xs text-muted mt-1 {(Disabled ? "text-muted" : "")}";
    }

    private string GetStateIconClasses()
    {
        return Size switch
        {
            Small => "text-xs",
            Large => "text-sm",
            _ => "text-xs"
        };
    }

    private string GetValidationClasses()
    {
        return "flex items-center text-xs text-error mt-1 gap-1";
    }

    /// <summary>
    /// Returns safely filtered HTML attributes using centralized RAttributeForwarder.
    /// </summary>
    private Dictionary<string, object> GetSafeAttributes()
    {
        return RAttributeForwarder.GetSafeAttributes(AdditionalAttributes);
    }

    private async Task HandleToggleChange(ChangeEventArgs e)
    {
        if (Disabled) return;
        
        var newValue = (bool)(e.Value ?? false);
        InternalValue = newValue;
        await OnValueChanged();
    }
    
    private async Task OnValueChanged()
    {
        var newValue = _internalState;
        
        if (ValueChanged.HasDelegate)
        {
            await ValueChanged.InvokeAsync(newValue);
        }
        
        if (CheckedChanged.HasDelegate)
        {
            await CheckedChanged.InvokeAsync(newValue);
        }
        
        if (OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync(newValue);
        }
    }


}
