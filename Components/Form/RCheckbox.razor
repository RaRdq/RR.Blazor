@** 
<summary>Professional checkbox component with enterprise styling and accessibility</summary>
<category>Form</category>
<complexity>Simple</complexity>
<ai-prompt>Create a modern checkbox for user selections with professional styling</ai-prompt>
<ai-common-use>form selections, multi-select lists, permission toggles, settings</ai-common-use>
<ai-avoid>Don't use for binary toggle switches (use RSwitcher) or single selections (use RRadio)</ai-avoid>
<ai-pattern name="basic-checkbox">Text="Accept Terms" @bind-Checked="acceptTerms"</ai-pattern>
<ai-pattern name="with-description">Text="Enable Notifications" Description="Receive email updates" @bind-Checked="notifications"</ai-pattern>
<ai-pattern name="disabled-state">Text="Premium Feature" Disabled="true" Description="Upgrade required"</ai-pattern>
<ai-pattern name="validation-error">Text="Required Field" @bind-Checked="required" ValidationMessage="This field is required"</ai-pattern>
<ai-pattern name="with-icon">Text="Important Item" Icon="star" @bind-Checked="starred"</ai-pattern>
**@

@attribute [Component("RCheckbox", Category = "Form")]
@attribute [AIOptimized(Prompt = "Create professional checkbox with validation")]

@using RR.Blazor.Enums
@using RR.Blazor.Models
@inherits RR.Blazor.Components.Base.RInteractiveComponentBase

<div class="@GetContainerClasses()">
    <div class="relative d-flex items-center justify-center">
        <input type="checkbox" 
               id="@Id"
               name="@Name"
               @bind="Checked"
               @bind:after="OnCheckedChanged"
               disabled="@Disabled"
               required="@Required"
               data-field="@Name"
               class="@GetInputClasses()" />
        
        <div class="@GetCheckboxClasses()">
            @if (Checked)
            {
                <i class="material-symbols-rounded @GetCheckIconClasses()">check</i>
            }
        </div>
    </div>
    
    @if (!string.IsNullOrEmpty(Text) || !string.IsNullOrEmpty(Description) || !string.IsNullOrEmpty(Icon))
    {
        <label for="@Id" class="@GetLabelClasses()">
            <div class="@GetTextContainerClasses()">
                @if (!string.IsNullOrEmpty(Icon))
                {
                    <i class="material-symbols-rounded @GetIconClasses()">@Icon</i>
                }
                @if (!string.IsNullOrEmpty(Text))
                {
                    <span class="@GetTextClasses()">@Text</span>
                }
                @if (Required)
                {
                    <span class="@GetRequiredClasses()">*</span>
                }
            </div>
            @if (!string.IsNullOrEmpty(Description))
            {
                <div class="@GetDescriptionClasses()">@Description</div>
            }
        </label>
    }
    
    @if (ChildContent != null)
    {
        <div class="grow">
            @ChildContent
        </div>
    }
</div>

@if (HasError && !string.IsNullOrEmpty(ErrorMessage))
{
    <div class="@GetValidationClasses()">
        <i class="material-symbols-rounded text-error mr-1">error</i>
        @ErrorMessage
    </div>
}

@code {
    /// <summary>Unique identifier for the checkbox input</summary>
    [Parameter] public string Id { get; set; } = $"checkbox-{Guid.NewGuid():N}";
    
    /// <summary>Name attribute for form submission</summary>
    [Parameter] public string? Name { get; set; }
    
    /// <summary>Whether the checkbox is checked</summary>
    [Parameter] public bool Checked { get; set; }
    
    /// <summary>Callback when checked state changes</summary>
    [Parameter] public EventCallback<bool> CheckedChanged { get; set; }
    
    /// <summary>Label text for the checkbox</summary>
    [Parameter] public string? Text { get; set; }
    
    /// <summary>Description text shown below the label</summary>
    [Parameter] public string? Description { get; set; }
    
    /// <summary>Icon displayed next to the text</summary>
    [Parameter] public string? Icon { get; set; }
    
    /// <summary>Visual style variant of the checkbox</summary>
    [Parameter] public CheckboxVariant Variant { get; set; } = CheckboxVariant.Default;
    
    /// <summary>Size of the checkbox</summary>
    [Parameter] public CheckboxSize Size { get; set; } = CheckboxSize.Medium;
    
    
    
    /// <summary>Whether the checkbox is disabled</summary>
    
    /// <summary>Whether the checkbox is required</summary>
    [Parameter] public bool Required { get; set; }
    
    /// <summary>Whether the checkbox has an error</summary>
    [Parameter] public bool HasError { get; set; }
    
    /// <summary>Error message to display</summary>
    [Parameter] public string? ErrorMessage { get; set; }
    
    

    private async Task OnCheckedChanged()
    {
        await CheckedChanged.InvokeAsync(Checked);
        if (OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync(new MouseEventArgs());
        }
        StateHasChanged();
    }
    
    // Field name functionality removed - use explicit naming if needed

    private string GetContainerClasses()
    {
        var classes = new List<string> { "d-flex", "items-center" };
        
        // Add density-specific gap
        classes.Add(GetDensityGapClasses());
        
        if (Disabled)
            classes.Add("opacity-50");
            
        // Validation styling would be handled by form validation context
            
        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);

        return string.Join(" ", classes);
    }

    private string GetDensityGapClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "gap-1",
            ComponentDensity.Dense => "gap-2",
            ComponentDensity.Normal => "gap-3",
            ComponentDensity.Spacious => "gap-4",
            _ => "gap-3"
        };
    }

    private string GetCheckboxClasses()
    {
        var classes = new List<string> 
        { 
            "rounded", "border-2", "transition-all", "duration-200", "d-flex", "items-center", "justify-center",
            "peer-focus:ring-2", "peer-focus:ring-primary", "peer-focus:ring-opacity-50"
        };

        // Add size classes with density modifications
        classes.Add(GetSizeClasses());

        // Base styles
        if (Checked)
        {
            classes.Add(Variant switch
            {
                CheckboxVariant.Primary => "bg-primary border-primary",
                CheckboxVariant.Success => "bg-success border-success",
                CheckboxVariant.Warning => "bg-warning border-warning",
                CheckboxVariant.Danger => "bg-error border-error",
                _ => "bg-primary border-primary"
            });
        }
        else
        {
            classes.Add("bg-surface-elevated border-medium hover:border-primary");
        }

        // Disabled state
        if (Disabled)
        {
            classes.Add("opacity-50 cursor-not-allowed");
        }
        else
        {
            classes.Add("cursor-pointer hover:shadow-sm");
        }

        return string.Join(" ", classes);
    }

    private string GetSizeClasses()
    {
        var baseSizeClasses = Size switch
        {
            CheckboxSize.Small => "w-5 h-5",
            CheckboxSize.Large => "w-7 h-7",
            _ => "w-6 h-6"
        };

        // Apply density modifiers
        return Density switch
        {
            ComponentDensity.Compact => ApplyCompactSizing(),
            ComponentDensity.Dense => ApplyDenseSizing(),
            ComponentDensity.Normal => baseSizeClasses,
            ComponentDensity.Spacious => ApplySpacious(),
            _ => baseSizeClasses
        };
    }

    private string ApplyCompactSizing()
    {
        return Size switch
        {
            CheckboxSize.Small => "w-4 h-4",
            CheckboxSize.Large => "w-6 h-6",
            _ => "w-5 h-5"
        };
    }

    private string ApplyDenseSizing()
    {
        return Size switch
        {
            CheckboxSize.Small => "w-4 h-4",
            CheckboxSize.Large => "w-6 h-6",
            _ => "w-5 h-5"
        };
    }

    private string ApplySpacious()
    {
        return Size switch
        {
            CheckboxSize.Small => "w-6 h-6",
            CheckboxSize.Large => "w-8 h-8",
            _ => "w-7 h-7"
        };
    }

    private string GetLabelClasses()
    {
        var classes = new List<string> { "cursor-pointer", "select-none", "grow" };
        
        if (Disabled)
            classes.Add("cursor-not-allowed opacity-60");

        return string.Join(" ", classes);
    }

    private string GetTextClasses()
    {
        var classes = new List<string> { "text-primary", "font-medium" };

        classes.Add(GetTextSizeClasses());

        return string.Join(" ", classes);
    }

    private string GetTextSizeClasses()
    {
        var baseSizeClasses = Size switch
        {
            CheckboxSize.Small => "text-sm",
            CheckboxSize.Large => "text-lg",
            _ => "text-base"
        };

        return Density switch
        {
            ComponentDensity.Compact => ApplyCompactTextSizing(),
            ComponentDensity.Dense => ApplyDenseTextSizing(),
            ComponentDensity.Normal => baseSizeClasses,
            ComponentDensity.Spacious => ApplySpacious​TextSizing(),
            _ => baseSizeClasses
        };
    }

    private string ApplyCompactTextSizing()
    {
        return Size switch
        {
            CheckboxSize.Small => "text-xs",
            CheckboxSize.Large => "text-base",
            _ => "text-sm"
        };
    }

    private string ApplyDenseTextSizing()
    {
        return Size switch
        {
            CheckboxSize.Small => "text-xs",
            CheckboxSize.Large => "text-base",
            _ => "text-sm"
        };
    }

    private string ApplySpacious​TextSizing()
    {
        return Size switch
        {
            CheckboxSize.Small => "text-base",
            CheckboxSize.Large => "text-xl",
            _ => "text-lg"
        };
    }

    private string GetDescriptionClasses()
    {
        var classes = new List<string> { "text-secondary" };

        classes.Add(GetDescriptionMarginClasses());
        classes.Add(GetDescriptionSizeClasses());

        return string.Join(" ", classes);
    }

    private string GetDescriptionMarginClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "mt-0",
            ComponentDensity.Dense => "mt-1",
            ComponentDensity.Normal => "mt-1",
            ComponentDensity.Spacious => "mt-2",
            _ => "mt-1"
        };
    }

    private string GetDescriptionSizeClasses()
    {
        var baseSizeClasses = Size switch
        {
            CheckboxSize.Small => "text-xs",
            CheckboxSize.Large => "text-base",
            _ => "text-sm"
        };

        return Density switch
        {
            ComponentDensity.Compact => ApplyCompactDescriptionSizing(),
            ComponentDensity.Dense => ApplyDenseDescriptionSizing(),
            ComponentDensity.Normal => baseSizeClasses,
            ComponentDensity.Spacious => ApplySpacious(),
            _ => baseSizeClasses
        };
    }

    private string ApplyCompactDescriptionSizing()
    {
        return Size switch
        {
            CheckboxSize.Small => "text-xs",
            CheckboxSize.Large => "text-sm",
            _ => "text-xs"
        };
    }

    private string ApplyDenseDescriptionSizing()
    {
        return Size switch
        {
            CheckboxSize.Small => "text-xs",
            CheckboxSize.Large => "text-sm",
            _ => "text-xs"
        };
    }

    private string GetIconClasses()
    {
        var classes = new List<string> { "text-primary" };

        classes.Add(GetIconSizeClasses());

        return string.Join(" ", classes);
    }

    private string GetIconSizeClasses()
    {
        var baseSizeClasses = Size switch
        {
            CheckboxSize.Small => "text-base",
            CheckboxSize.Large => "text-xl",
            _ => "text-lg"
        };

        return Density switch
        {
            ComponentDensity.Compact => ApplyCompactIconSizing(),
            ComponentDensity.Dense => ApplyDenseIconSizing(),
            ComponentDensity.Normal => baseSizeClasses,
            ComponentDensity.Spacious => ApplySpacious(),
            _ => baseSizeClasses
        };
    }

    private string ApplyCompactIconSizing()
    {
        return Size switch
        {
            CheckboxSize.Small => "text-sm",
            CheckboxSize.Large => "text-lg",
            _ => "text-base"
        };
    }

    private string ApplyDenseIconSizing()
    {
        return Size switch
        {
            CheckboxSize.Small => "text-sm",
            CheckboxSize.Large => "text-lg",
            _ => "text-base"
        };
    }

    private string GetInputClasses()
    {
        var classes = new List<string> { "peer", "absolute", "opacity-0", "w-full", "h-full", "cursor-pointer" };
        
        if (Disabled)
            classes.Add("cursor-not-allowed");

        return string.Join(" ", classes);
    }

    private string GetCheckIconClasses()
    {
        var classes = new List<string> { "text-white" };

        classes.Add(GetCheckIconSizeClasses());

        return string.Join(" ", classes);
    }

    private string GetCheckIconSizeClasses()
    {
        var baseSizeClasses = Size switch
        {
            CheckboxSize.Small => "text-sm",
            CheckboxSize.Large => "text-lg",
            _ => "text-base"
        };

        return Density switch
        {
            ComponentDensity.Compact => ApplyCompactCheckIconSizing(),
            ComponentDensity.Dense => ApplyDenseCheckIconSizing(),
            ComponentDensity.Normal => baseSizeClasses,
            ComponentDensity.Spacious => ApplySpacious(),
            _ => baseSizeClasses
        };
    }

    private string ApplyCompactCheckIconSizing()
    {
        return Size switch
        {
            CheckboxSize.Small => "text-xs",
            CheckboxSize.Large => "text-base",
            _ => "text-sm"
        };
    }

    private string ApplyDenseCheckIconSizing()
    {
        return Size switch
        {
            CheckboxSize.Small => "text-xs",
            CheckboxSize.Large => "text-base",
            _ => "text-sm"
        };
    }

    private string GetTextContainerClasses()
    {
        var classes = new List<string> { "d-flex", "items-center" };
        
        classes.Add(GetTextContainerGapClasses());
        
        return string.Join(" ", classes);
    }

    private string GetTextContainerGapClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "gap-1",
            ComponentDensity.Dense => "gap-2",
            ComponentDensity.Normal => "gap-2",
            ComponentDensity.Spacious => "gap-3",
            _ => "gap-2"
        };
    }

    private string GetRequiredClasses()
    {
        var classes = new List<string> { "text-error", "font-medium" };
        
        classes.Add(GetRequiredMarginClasses());
        
        return string.Join(" ", classes);
    }

    private string GetRequiredMarginClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "ml-0",
            ComponentDensity.Dense => "ml-1",
            ComponentDensity.Normal => "ml-1",
            ComponentDensity.Spacious => "ml-2",
            _ => "ml-1"
        };
    }

    private string GetValidationClasses()
    {
        var classes = new List<string> { "text-error" };
        
        classes.Add(GetValidationSizeClasses());
        classes.Add(GetValidationMarginClasses());
        
        return string.Join(" ", classes);
    }

    private string GetValidationSizeClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "text-xs",
            ComponentDensity.Dense => "text-xs",
            ComponentDensity.Normal => "text-sm",
            ComponentDensity.Spacious => "text-base",
            _ => "text-sm"
        };
    }

    private string GetValidationMarginClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "mt-0 ml-6",
            ComponentDensity.Dense => "mt-1 ml-7",
            ComponentDensity.Normal => "mt-1 ml-8",
            ComponentDensity.Spacious => "mt-2 ml-10",
            _ => "mt-1 ml-8"
        };
    }
}