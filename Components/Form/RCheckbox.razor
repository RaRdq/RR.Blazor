@** 
<summary>Professional checkbox component with enterprise styling and accessibility</summary>
<category>Form</category>
<complexity>Simple</complexity>
<ai-prompt>Create a modern checkbox for user selections with professional styling</ai-prompt>
<ai-common-use>form selections, multi-select lists, permission toggles, settings</ai-common-use>
<ai-avoid>Don't use for binary toggle switches (use RSwitcher) or single selections (use RRadio)</ai-avoid>
<ai-pattern name="basic-checkbox">Text="Accept Terms" @bind-Checked="acceptTerms"</ai-pattern>
<ai-pattern name="with-description">Text="Enable Notifications" Description="Receive email updates" @bind-Checked="notifications"</ai-pattern>
<ai-pattern name="disabled-state">Text="Premium Feature" Disabled="true" Description="Upgrade required"</ai-pattern>
<ai-pattern name="validation-error">Text="Required Field" @bind-Checked="required" ValidationMessage="This field is required"</ai-pattern>
<ai-pattern name="with-icon">Text="Important Item" Icon="star" @bind-Checked="starred"</ai-pattern>
**@

@attribute [Component("RCheckbox", Category = "Form")]
@attribute [AIOptimized(Prompt = "Create professional checkbox with validation")]

@using RR.Blazor.Enums
@using RR.Blazor.Models
@inherits RR.Blazor.Components.Base.RInteractiveComponentBase

<div class="@GetContainerClasses()">
    <input type="checkbox" 
           id="@Id"
           name="@Name"
           @bind="Checked"
           @bind:after="OnCheckedChanged"
           disabled="@Disabled"
           required="@Required"
           data-field="@Name"
           class="@GetInputClasses()" />
    
    <div class="@GetCheckboxClasses()">
        @if (Checked)
        {
            <i class="material-symbols-rounded @GetCheckIconClasses()">check</i>
        }
    </div>
    
    @if (!string.IsNullOrEmpty(Text) || !string.IsNullOrEmpty(Description) || !string.IsNullOrEmpty(Icon))
    {
        <label for="@Id" class="@GetLabelClasses()">
            <div class="@GetTextContainerClasses()">
                @if (!string.IsNullOrEmpty(Icon))
                {
                    <i class="material-symbols-rounded @GetIconClasses()">@Icon</i>
                }
                @if (!string.IsNullOrEmpty(Text))
                {
                    <span class="@GetTextClasses()">@Text</span>
                }
                @if (Required)
                {
                    <span class="@GetRequiredClasses()">*</span>
                }
            </div>
            @if (!string.IsNullOrEmpty(Description))
            {
                <div class="@GetDescriptionClasses()">@Description</div>
            }
        </label>
    }
    
    @if (ChildContent != null)
    {
        <div class="grow">
            @ChildContent
        </div>
    }
</div>

@if (HasError && !string.IsNullOrEmpty(ErrorMessage))
{
    <div class="@GetValidationClasses()">
        <i class="material-symbols-rounded text-error mr-1">error</i>
        @ErrorMessage
    </div>
}

@code {
    /// <summary>Unique identifier for the checkbox input</summary>
    [Parameter] public string Id { get; set; } = $"checkbox-{Guid.NewGuid():N}";
    
    /// <summary>Name attribute for form submission</summary>
    [Parameter] public string? Name { get; set; }
    
    /// <summary>Whether the checkbox is checked</summary>
    [Parameter] public bool Checked { get; set; }
    
    /// <summary>Callback when checked state changes</summary>
    [Parameter] public EventCallback<bool> CheckedChanged { get; set; }
    
    /// <summary>Label text for the checkbox</summary>
    [Parameter] public string? Text { get; set; }
    
    /// <summary>Description text shown below the label</summary>
    [Parameter] public string? Description { get; set; }
    
    /// <summary>Icon displayed next to the text</summary>
    [Parameter] public string? Icon { get; set; }
    
    /// <summary>Visual style variant of the checkbox</summary>
    [Parameter] public CheckboxVariant Variant { get; set; } = CheckboxVariant.Default;
    
    /// <summary>Size of the checkbox</summary>
    [Parameter] public CheckboxSize Size { get; set; } = CheckboxSize.Medium;
    
    
    
    /// <summary>Whether the checkbox is required</summary>
    [Parameter] public bool Required { get; set; }
    
    /// <summary>Whether the checkbox has an error</summary>
    [Parameter] public bool HasError { get; set; }
    
    /// <summary>Error message to display</summary>
    [Parameter] public string? ErrorMessage { get; set; }
    
    

    private async Task OnCheckedChanged()
    {
        await CheckedChanged.InvokeAsync(Checked);
        if (OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync(new MouseEventArgs());
        }
        StateHasChanged();
    }

    
    // Field name functionality removed - use explicit naming if needed

    private string GetContainerClasses()
    {
        var classes = new List<string> { "checkbox" };
        
        if (Disabled)
            classes.Add("checkbox--disabled");
            
        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);

        return string.Join(" ", classes);
    }

    private string GetCheckboxClasses()
    {
        var classes = new List<string> { "checkbox-mark" };

        // Add variant classes
        if (Variant != CheckboxVariant.Default)
        {
            classes.Add($"checkbox-mark--{Variant.ToString().ToLower()}");
        }

        // Add size classes
        if (Size != CheckboxSize.Medium)
        {
            classes.Add($"checkbox-mark--{Size.ToString().ToLower()}");
        }

        return string.Join(" ", classes);
    }

    private string GetInputClasses()
    {
        // The input is hidden and styled via CSS using the adjacent checkbox-mark
        return "";
    }

    private string GetCheckIconClasses()
    {
        return "checkbox-icon";
    }

    private string GetLabelClasses()
    {
        var classes = new List<string> { "checkbox-label" };
        
        if (Disabled)
            classes.Add("checkbox-label--disabled");
            
        return string.Join(" ", classes);
    }

    private string GetTextContainerClasses()
    {
        return "checkbox-content";
    }

    private string GetIconClasses()
    {
        return "checkbox-text-icon";
    }

    private string GetTextClasses()
    {
        return "checkbox-text";
    }

    private string GetRequiredClasses()
    {
        return "text-error ml-1";
    }

    private string GetDescriptionClasses()
    {
        return "checkbox-description";
    }

    private string GetValidationClasses()
    {
        return "validation-message";
    }
}