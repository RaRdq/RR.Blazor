@** 
<summary>Universal form field component with professional validation and utility-first CSS</summary>
<category>Form</category>
<complexity>Complex</complexity>
<ai-prompt>Create a professional form field for user input with validation</ai-prompt>
<ai-common-use>text input, email validation, password fields, dropdowns, checkboxes, file uploads</ai-common-use>
<ai-avoid>Don't use for display-only data or readonly content</ai-avoid>
<ai-pattern name="text-input">Type="FieldType.Text" for basic text input</ai-pattern>
<ai-pattern name="email-field">Type="FieldType.Email" Required="true" for email validation</ai-pattern>
<ai-pattern name="password-field">Type="FieldType.Password" with strength indicators</ai-pattern>
<ai-pattern name="select-dropdown">Type="FieldType.Select" with SelectOptions</ai-pattern>
<ai-pattern name="checkbox-field">Type="FieldType.Checkbox" with CheckboxText</ai-pattern>
<ai-pattern name="file-upload">Type="FieldType.File" with AcceptTypes</ai-pattern>
<ai-pattern name="floating-label">Variant="FieldVariant.FloatingLabel" for modern forms</ai-pattern>
<ai-pattern name="required-field">Required="true" ShowRequiredIndicator="true"</ai-pattern>
**@

@attribute [Component("RFormField", Category = "Form")]
@attribute [AIOptimized(Prompt = "Create professional form field with validation")]

@using RR.Blazor.Enums
@using RR.Blazor.Models
@implements IAsyncDisposable

<div class="form-field @GetFieldGroupClasses() @GetFieldDensityClass()" 
     data-field-density="@Density.ToString().ToLowerInvariant()"
     data-field-size="@Size.ToString().ToLowerInvariant()">
    @* Label *@
    @if (!string.IsNullOrEmpty(Label) && Variant != FieldVariant.FloatingLabel)
    {
        <label class="form-field__label @(Required && ShowRequiredIndicator ? "form-field__label--required" : "")" for="@InputId">
            @Label
        </label>
    }
    
    @* Input Field *@
    <div @ref="wrapperElement" id="wrapper-@InputId" class="form-field__wrapper @GetInputWrapperClasses()">
        @if (!string.IsNullOrEmpty(StartIcon))
        {
            <div class="form-field__icon-container form-field__icon-container--start @(OnStartIconClick.HasDelegate ? "clickable" : "")" 
                 @onclick="HandleStartIconClick">
                <i class="material-symbols-rounded @GetIconSizeClass()">@StartIcon</i>
            </div>
        }
        
        @if (Type == FieldType.Text || Type == FieldType.Email || Type == FieldType.Password || 
             Type == FieldType.Number || Type == FieldType.Tel || Type == FieldType.Url || 
             Type == FieldType.Search || Type == FieldType.Date || Type == FieldType.Time || 
             Type == FieldType.DateTime)
        {
            <input @ref="inputElement" 
                   id="@InputId" 
                   type="@GetHtmlInputType()" 
                   class="form-field__input @GetInputClasses()" 
                   value="@Value" 
                   placeholder="@GetPlaceholderText()"
                   disabled="@Disabled"
                   readonly="@ReadOnly"
                   required="@Required"
                   maxlength="@(MaxLength > 0 ? MaxLength : null)"
                   min="@MinValue"
                   max="@MaxValue"
                   step="@Step"
                   autocomplete="@AutoComplete"
                   data-field="@GetEffectiveFieldName()"
                   @onchange="HandleValueChange"
                   @oninput="HandleInput"
                   @onfocus="HandleFocus"
                   @onblur="HandleBlur"
                   @onkeydown="HandleKeyDown"
                   @onkeyup="HandleKeyUp" />
        }
        else if (Type == FieldType.Textarea)
        {
            <textarea @ref="inputElement"
                      id="@InputId" 
                      class="form-field__textarea @GetTextareaClasses()"
                      placeholder="@GetPlaceholderText()"
                      disabled="@Disabled"
                      readonly="@ReadOnly"
                      required="@Required"
                      maxlength="@(MaxLength > 0 ? MaxLength : null)"
                      rows="@Rows"
                      @onchange="HandleValueChange"
                      @oninput="HandleInput"
                      @onfocus="HandleFocus"
                      @onblur="HandleBlur"
                      @onkeydown="HandleKeyDown"
                      @onkeyup="HandleKeyUp">@Value</textarea>
        }
        else if (Type == FieldType.Select)
        {
            <select @ref="inputElement"
                    id="@InputId" 
                    class="form-field__select @GetSelectClasses()"
                    disabled="@Disabled"
                    required="@Required"
                    @onchange="HandleValueChange"
                    @onfocus="HandleFocus"
                    @onblur="HandleBlur">
                @if (!string.IsNullOrEmpty(SelectPlaceholder))
                {
                    <option value="">@SelectPlaceholder</option>
                }
                @SelectOptions
            </select>
        }
        else if (Type == FieldType.Checkbox)
        {
            <div class="d-flex align-center gap-2">
                <input id="@InputId" 
                       type="checkbox" 
                       class="form-field__checkbox @GetCheckboxClasses()"
                       checked="@IsChecked"
                       disabled="@Disabled"
                       required="@Required"
                       @onchange="HandleCheckboxChange" />
                @if (!string.IsNullOrEmpty(CheckboxText))
                {
                    <label class="@GetCheckboxLabelClasses()" for="@InputId">
                        @CheckboxText
                    </label>
                }
            </div>
        }
        else if (Type == FieldType.Radio)
        {
            <div class="d-flex flex-column gap-2">
                @RadioOptions
            </div>
        }
        else if (Type == FieldType.Range)
        {
            <div class="w-full">
                <input id="@InputId" 
                       type="range" 
                       class="form-field__range @GetRangeClasses()"
                       value="@Value" 
                       min="@MinValue"
                       max="@MaxValue"
                       step="@Step"
                       disabled="@Disabled"
                       @onchange="HandleValueChange"
                       @oninput="HandleInput" />
                @if (ShowRangeValue)
                {
                    <div class="text-sm text-secondary mt-1 text-center">
                        @Value @RangeValueSuffix
                    </div>
                }
            </div>
        }
        else if (Type == FieldType.File)
        {
            <InputFile id="@InputId" 
                       class="@($"form-field__file {GetFileInputClasses()}")"
                       disabled="@Disabled"
                       accept="@AcceptTypes"
                       multiple="@AllowMultiple"
                       OnChange="HandleFileChange" />
        }
        else if (Type == FieldType.Custom)
        {
            @ChildContent
        }
        
        @* Floating Label *@
        @if (!string.IsNullOrEmpty(Label) && Variant == FieldVariant.FloatingLabel)
        {
            <label class="form-field__label @GetFloatingLabelClasses()" for="@InputId">
                @Label
            </label>
        }
        
        @if (!string.IsNullOrEmpty(EndIcon) && Type != FieldType.Select)
        {
            <div class="form-field__icon-container form-field__icon-container--end @(OnEndIconClick.HasDelegate ? "clickable" : "")" 
                 @onclick="HandleEndIconClick">
                <i class="material-symbols-rounded @GetIconSizeClass()">@EndIcon</i>
            </div>
        }
        
        @* Loading spinner *@
        @if (Loading)
        {
            <div class="form-field__icon-container form-field__icon-container--end">
                <i class="material-symbols-rounded @GetIconSizeClass() animate-spin">progress_activity</i>
            </div>
        }
    </div>
    
    @* Error Message *@
    @if (IsInErrorState && !string.IsNullOrEmpty(GetEffectiveErrorMessage()))
    {
        <div class="form-field__error">
            <i class="material-symbols-rounded">error</i>
            @GetEffectiveErrorMessage()
        </div>
    }
    
    @* Help Text and Character Count *@
    @if (!string.IsNullOrEmpty(HelpText) || (ShowCharacterCount && MaxLength > 0))
    {
        <div class="form-field__help">
            @if (!string.IsNullOrEmpty(HelpText))
            {
                <span>@HelpText</span>
            }
            @if (ShowCharacterCount && MaxLength > 0)
            {
                <span class="form-field__character-count @GetCharacterCountClasses()">
                    @(Value?.Length ?? 0) / @MaxLength
                </span>
            }
        </div>
    }
</div>

@code {
    /// <summary>Input field identifier</summary>
    [Parameter] [AIParameter("Unique identifier for the input field", Example = "email-input")] 
    public string InputId { get; set; } = Guid.NewGuid().ToString("N")[..8];
    
    /// <summary>Field type</summary>
    [Parameter] [AIParameter("Type of input field (Text, Email, Password, Select, etc.)", Example = "FieldType.Email")] 
    public FieldType Type { get; set; } = FieldType.Text;
    
    /// <summary>Field size variant</summary>
    [Parameter] public FieldSize Size { get; set; } = FieldSize.Medium;
    
    /// <summary>Field style variant (Default, Clean, Outlined, Filled)</summary>
    [Parameter] [AIParameter("Visual style variant of the field", Example = "FieldVariant.FloatingLabel")] public FieldVariant Variant { get; set; } = FieldVariant.Default;
    
    /// <summary>Field density for spacing control</summary>
    [Parameter] public FormDensity Density { get; set; } = FormDensity.Comfortable;
    
    /// <summary>Field label text</summary>
    [Parameter] [AIParameter("Label text displayed above the field", Example = "Email Address")] public string Label { get; set; }
    
    /// <summary>Input field value</summary>
    [Parameter] [AIParameter("Current value of the input field", Example = "user@example.com")] public string Value { get; set; }
    
    /// <summary>Callback when value changes</summary>
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    
    /// <summary>Placeholder text</summary>
    [Parameter] [AIParameter("Placeholder text shown when field is empty", Example = "Enter your email address")] public string Placeholder { get; set; }
    
    /// <summary>Help text below the input</summary>
    [Parameter] public string HelpText { get; set; }
    
    /// <summary>Error message to display</summary>
    [Parameter] public string ErrorMessage { get; set; }
    
    /// <summary>Field name for binding to validation context (auto-derived from Label if not set)</summary>
    [Parameter] public string FieldName { get; set; }
    
    /// <summary>Cascading validation context from parent form</summary>
    [CascadingParameter] public FormValidationContext ValidationContext { get; set; }
    
    /// <summary>Whether field is required</summary>
    [Parameter] [AIParameter("Mark field as required for form validation", Example = "true")] public bool Required { get; set; }
    
    /// <summary>Whether to show required indicator (*)</summary>
    [Parameter] public bool ShowRequiredIndicator { get; set; } = true;
    
    /// <summary>Whether field is disabled</summary>
    [Parameter] public bool Disabled { get; set; }
    
    /// <summary>Whether field is readonly</summary>
    [Parameter] public bool ReadOnly { get; set; }
    
    /// <summary>Whether field has validation error (auto-calculated from ErrorMessage)</summary>
    [Parameter] public bool HasError { get; set; }
    
    /// <summary>Computed property that returns true if there's an error message or HasError is explicitly set, but only after user interaction or form submission attempt</summary>
    private bool IsInErrorState 
    {
        get
        {
            // If HasError is explicitly set, show it
            if (HasError) return true;
            
            // If we have validation context, use its logic
            if (ValidationContext != null && !string.IsNullOrEmpty(GetEffectiveFieldName()))
            {
                return ValidationContext.ShouldShowFieldErrors(GetEffectiveFieldName(), hasUserInteracted);
            }
            
            // Fallback: only show explicit ErrorMessage after user interaction
            return !string.IsNullOrEmpty(ErrorMessage) && hasUserInteracted;
        }
    }
    
    /// <summary>Gets the effective error message from parameter or validation context</summary>
    private string GetEffectiveErrorMessage()
    {
        // Use explicit ErrorMessage if provided
        if (!string.IsNullOrEmpty(ErrorMessage))
            return ErrorMessage;
            
        // Auto-detect from validation context if available
        if (ValidationContext != null && !string.IsNullOrEmpty(GetEffectiveFieldName()))
        {
            return ValidationContext.GetFieldErrorMessage(GetEffectiveFieldName()) ?? "";
        }
        
        return "";
    }
    
    /// <summary>Gets the effective field name (from parameter or auto-derived from Label)</summary>
    private string GetEffectiveFieldName()
    {
        if (!string.IsNullOrEmpty(FieldName))
            return FieldName;
            
        // Auto-derive field name from Label by removing spaces and making camelCase
        if (!string.IsNullOrEmpty(Label))
        {
            var fieldName = Label.Replace(" ", "").Replace(":", "");
            if (!string.IsNullOrEmpty(fieldName))
            {
                return char.ToLowerInvariant(fieldName[0]) + fieldName[1..];
            }
        }
        
        return "";
    }
    
    /// <summary>Whether field is in loading state</summary>
    [Parameter] public bool Loading { get; set; }
    
    /// <summary>Additional CSS classes for the field group</summary>
    [Parameter] public string Class { get; set; }
    
    /// <summary>Additional CSS classes for the input element</summary>
    [Parameter] public string InputClass { get; set; }
    
    /// <summary>Icon on the left side of the input</summary>
    [Parameter] public string StartIcon { get; set; }
    
    /// <summary>Icon on the right side of the input</summary>
    [Parameter] public string EndIcon { get; set; }
    
    /// <summary>Whether input spans full width</summary>
    [Parameter] public bool FullWidth { get; set; } = true;
    
    // Textarea specific
    /// <summary>Number of textarea rows</summary>
    [Parameter] public int Rows { get; set; } = 3;
    
    /// <summary>Whether textarea auto-resizes</summary>
    [Parameter] public bool AutoResize { get; set; }
    
    // Select specific
    /// <summary>Select placeholder option</summary>
    [Parameter] public string SelectPlaceholder { get; set; }
    
    /// <summary>Select options content</summary>
    [Parameter] public RenderFragment SelectOptions { get; set; }
    
    // Checkbox specific
    /// <summary>Checkbox checked state</summary>
    [Parameter] public bool IsChecked { get; set; }
    
    /// <summary>Checkbox text/label</summary>
    [Parameter] public string CheckboxText { get; set; }
    
    /// <summary>Callback when checkbox changes</summary>
    [Parameter] public EventCallback<bool> CheckedChanged { get; set; }
    
    // Radio specific
    /// <summary>Radio options content</summary>
    [Parameter] public RenderFragment RadioOptions { get; set; }
    
    // Number/Range specific
    /// <summary>Minimum value for number/range inputs</summary>
    [Parameter] public string MinValue { get; set; }
    
    /// <summary>Maximum value for number/range inputs</summary>
    [Parameter] public string MaxValue { get; set; }
    
    /// <summary>Step value for number/range inputs</summary>
    [Parameter] public string Step { get; set; }
    
    /// <summary>Show current value for range input</summary>
    [Parameter] public bool ShowRangeValue { get; set; } = true;
    
    /// <summary>Suffix for range value display</summary>
    [Parameter] public string RangeValueSuffix { get; set; }
    
    // File specific
    /// <summary>Accepted file types</summary>
    [Parameter] public string AcceptTypes { get; set; }
    
    /// <summary>Allow multiple file selection</summary>
    [Parameter] public bool AllowMultiple { get; set; }
    
    /// <summary>File change callback</summary>
    [Parameter] public EventCallback<InputFileChangeEventArgs> FileChanged { get; set; }
    
    // Character count
    /// <summary>Whether to show character count</summary>
    [Parameter] public bool ShowCharacterCount { get; set; }
    
    /// <summary>Maximum character length</summary>
    [Parameter] public int MaxLength { get; set; }
    
    // HTML attributes
    /// <summary>Autocomplete attribute</summary>
    [Parameter] public string AutoComplete { get; set; }
    
    // Custom content
    /// <summary>Custom input content for FieldType.Custom</summary>
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    // Event callbacks
    /// <summary>Called on input event (real-time)</summary>
    [Parameter] public EventCallback<string> OnInput { get; set; }
    
    /// <summary>Called on focus</summary>
    [Parameter] public EventCallback<FocusEventArgs> OnFocus { get; set; }
    
    /// <summary>Called on blur</summary>
    [Parameter] public EventCallback<FocusEventArgs> OnBlur { get; set; }
    
    /// <summary>Called on key down</summary>
    [Parameter] public EventCallback<KeyboardEventArgs> OnKeyDown { get; set; }
    
    /// <summary>Called on key up</summary>
    [Parameter] public EventCallback<KeyboardEventArgs> OnKeyUp { get; set; }
    
    /// <summary>Called when start icon is clicked</summary>
    [Parameter] public EventCallback OnStartIconClick { get; set; }
    
    /// <summary>Called when end icon is clicked</summary>
    [Parameter] public EventCallback OnEndIconClick { get; set; }
    
    // Floating label state management
    private ElementReference wrapperElement;
    private ElementReference inputElement;
    private bool hasValue;
    private bool isFocused;
    private bool hasUserInteracted = false;
    private Timer? validationDebounceTimer;
    
    [Inject] private IJSRuntime JSRuntime { get; set; }
    
    protected override void OnParametersSet()
    {
        // Update hasValue when parameters change
        hasValue = !string.IsNullOrEmpty(Value);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Removed JS-based floating label logic - handled purely with CSS
        await Task.CompletedTask;
    }
    
    
    // Removed - floating labels handled purely with CSS
    
    // Removed - floating labels handled purely with CSS
    
    private async Task TriggerDebouncedValidation()
    {
        // Cancel existing timer
        validationDebounceTimer?.Dispose();
        
        // Set up new debounced validation
        var debounceMs = ValidationContext?.Options.ValidationDebounceMs ?? 300;
        validationDebounceTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await TriggerImmediateValidation();
            });
        }, null, debounceMs, Timeout.Infinite);
    }
    
    private async Task TriggerImmediateValidation()
    {
        try
        {
            // This would trigger validation in the parent form
            // For now, just update the visual state
            StateHasChanged();
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in field validation: {ex.Message}");
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        validationDebounceTimer?.Dispose();
        await Task.CompletedTask;
    }
    
    private string GetFieldGroupClasses()
    {
        var classes = new List<string> { "d-flex", "flex-column", "gap-1" };
        
        if (!FullWidth)
        {
            classes.Add("d-inline-flex");
        }
        
        if (IsInErrorState)
        {
            classes.Add("form-field--error");
        }
        
        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetFieldDensityClass()
    {
        return Density switch
        {
            FormDensity.Dense => "form-field--dense",
            FormDensity.UltraDense => "form-field--ultra-dense",
            _ => "form-field--comfortable"
        };
    }
    
    private string GetLabelClasses()
    {
        var classes = new List<string>
        {
            "text-sm",
            "font-medium",
            "text-primary"
        };
        
        if (Disabled)
        {
            classes.Add("text-muted");
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetInputWrapperClasses()
    {
        var classes = new List<string>();
        
        if (FullWidth)
        {
            classes.Add("w-full");
        }
        
        if (Variant == FieldVariant.FloatingLabel)
        {
            classes.Add("form-field__wrapper--floating-label");
            
            if (!string.IsNullOrEmpty(Value) || hasValue)
            {
                classes.Add("form-field__wrapper--has-value");
            }
            
            if (isFocused)
            {
                classes.Add("form-field__wrapper--floating");
            }
            
            if (IsInErrorState)
            {
                classes.Add("form-field__wrapper--error");
            }
            
            if (Disabled)
            {
                classes.Add("form-field__wrapper--disabled");
            }
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetFloatingLabelClasses()
    {
        var classes = new List<string>();
        
        if (Required && ShowRequiredIndicator)
        {
            classes.Add("form-field__label--required");
        }
        
        // Icon adjustment
        if (!string.IsNullOrEmpty(StartIcon))
        {
            classes.Add("form-field__label--with-start-icon");
        }
        
        // Size modifiers
        classes.Add(Size switch
        {
            FieldSize.Small => "form-field__label--sm",
            FieldSize.Large => "form-field__label--lg",
            _ => ""
        });
        
        return string.Join(" ", classes);
    }
    
    private string GetPlaceholderText()
    {
        // Hide placeholder for floating label variant to avoid conflicts
        return Variant == FieldVariant.FloatingLabel ? "" : Placeholder;
    }
    
    private string GetInputClasses()
    {
        var classes = new List<string> { "form-field__input" };
        
        // Variant modifiers
        classes.Add(Variant switch
        {
            FieldVariant.Clean => "form-field__input--clean",
            FieldVariant.Outlined => "form-field__input--outlined",
            FieldVariant.Filled => "form-field__input--filled",
            FieldVariant.FloatingLabel => "form-field__input--floating-label",
            _ => "form-field__input--default"
        });
        
        // Icon modifiers
        if (!string.IsNullOrEmpty(StartIcon))
        {
            classes.Add("form-field__input--with-start-icon");
        }
        
        if (!string.IsNullOrEmpty(EndIcon) || Loading)
        {
            classes.Add("form-field__input--with-end-icon");
        }
        
        // Size modifiers
        classes.Add(Size switch
        {
            FieldSize.Small => "form-field__input--sm",
            FieldSize.Large => "form-field__input--lg",
            _ => ""
        });
        
        if (!string.IsNullOrEmpty(InputClass))
        {
            classes.Add(InputClass);
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetTextareaClasses()
    {
        var classes = GetInputClasses().Split(' ').ToList();
        
        // Remove height for textarea
        classes.RemoveAll(c => c.StartsWith("h-"));
        
        if (AutoResize)
        {
            classes.Add("resize-none");
        }
        else
        {
            classes.Add("resize-vertical");
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetSelectClasses()
    {
        var classes = GetInputClasses().Split(' ').ToList();
        classes.Add("cursor-pointer");
        return string.Join(" ", classes);
    }
    
    private string GetCheckboxClasses()
    {
        var classes = new List<string>
        {
            "rounded",
            "border-2",
            "border-medium",
            "text-primary",
            "focus:border-primary",
            "focus:shadow-primary"
        };
        
        classes.Add(Size switch
        {
            FieldSize.Small => "w-4 h-4",
            FieldSize.Medium => "w-5 h-5",
            FieldSize.Large => "w-6 h-6",
            _ => "w-5 h-5"
        });
        
        if (IsInErrorState)
        {
            classes.AddRange(new[] { "border-error", "focus:border-error" });
        }
        
        if (Disabled)
        {
            classes.AddRange(new[] { "opacity-50", "cursor-not-allowed" });
        }
        else
        {
            classes.Add("cursor-pointer");
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetCheckboxLabelClasses()
    {
        var classes = new List<string>
        {
            "text-primary",
            "cursor-pointer"
        };
        
        classes.Add(Size switch
        {
            FieldSize.Small => "text-sm",
            FieldSize.Medium => "text-base",
            FieldSize.Large => "text-lg",
            _ => "text-base"
        });
        
        if (Disabled)
        {
            classes.AddRange(new[] { "text-muted", "cursor-not-allowed" });
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetRangeClasses()
    {
        var classes = new List<string>
        {
            "w-full",
            "h-2",
            "bg-secondary",
            "rounded-lg",
            "appearance-none",
            "cursor-pointer"
        };
        
        if (Disabled)
        {
            classes.AddRange(new[] { "opacity-50", "cursor-not-allowed" });
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetFileInputClasses()
    {
        var classes = new List<string>
        {
            "w-full",
            "text-sm",
            "text-secondary",
            "file:mr-4",
            "file:py-2",
            "file:px-4",
            "file:rounded-md",
            "file:border-0",
            "file:text-sm",
            "file:font-medium",
            "file:bg-primary",
            "file:text-white",
            "hover:file:bg-primary-hover"
        };
        
        if (Disabled)
        {
            classes.AddRange(new[] { "opacity-50", "cursor-not-allowed" });
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetIconSizeClass()
    {
        return Size switch
        {
            FieldSize.Small => "text-sm",
            FieldSize.Medium => "text-base",
            FieldSize.Large => "text-lg",
            _ => "text-base"
        };
    }
    
    private string GetErrorClasses()
    {
        return "d-flex align-center text-xs text-error mt-1";
    }
    
    private string GetHelpClasses()
    {
        var classes = new List<string> { "d-flex", "justify-between", "align-center", "text-xs", "mt-1" };
        
        if (!string.IsNullOrEmpty(HelpText) && ShowCharacterCount)
        {
            classes.Add("gap-2");
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetCharacterCountClasses()
    {
        if (MaxLength > 0)
        {
            var length = Value?.Length ?? 0;
            var percentage = (double)length / MaxLength;
            
            return percentage switch
            {
                >= 1.0 => "form-field__character-count--error",
                >= 0.8 => "form-field__character-count--warning",
                _ => ""
            };
        }
        
        return "";
    }
    
    private string GetHtmlInputType() => Type switch
    {
        FieldType.Email => "email",
        FieldType.Password => "password",
        FieldType.Number => "number",
        FieldType.Tel => "tel",
        FieldType.Url => "url",
        FieldType.Search => "search",
        FieldType.Date => "date",
        FieldType.Time => "time",
        FieldType.DateTime => "datetime-local",
        _ => "text"
    };
    
    private async Task HandleValueChange(ChangeEventArgs e)
    {
        hasUserInteracted = true;
        var newValue = e.Value?.ToString() ?? "";
        Value = newValue;
        hasValue = !string.IsNullOrEmpty(newValue);
        await ValueChanged.InvokeAsync(newValue);
        
        // CSS handles floating label state
    }
    
    private async Task HandleInput(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString() ?? "";
        Value = newValue;
        hasValue = !string.IsNullOrEmpty(newValue);
        
        // Only mark as user interacted if they're actually typing (value is not empty)
        if (!string.IsNullOrEmpty(newValue))
        {
            hasUserInteracted = true;
        }
        
        // Only invoke OnInput callback, not ValueChanged
        // ValueChanged should only be called on actual change events (blur/enter)
        await OnInput.InvokeAsync(newValue);
        
        // Trigger real-time validation if enabled in form context
        if (ValidationContext?.Options.ValidateOnChange == true)
        {
            await TriggerDebouncedValidation();
        }
        
        // CSS handles floating label state
    }
    
    private async Task HandleCheckboxChange(ChangeEventArgs e)
    {
        var isChecked = e.Value is bool b && b;
        IsChecked = isChecked;
        await CheckedChanged.InvokeAsync(isChecked);
    }
    
    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        await FileChanged.InvokeAsync(e);
    }
    
    private async Task HandleFocus(FocusEventArgs e)
    {
        isFocused = true;
        // Don't mark as user interacted on focus - only on blur or value change
        await OnFocus.InvokeAsync(e);
        
        // CSS handles floating label state
    }
    
    private async Task HandleBlur(FocusEventArgs e)
    {
        hasUserInteracted = true;
        isFocused = false;
        await OnBlur.InvokeAsync(e);
        
        // Trigger validation on blur if enabled in form context
        if (ValidationContext?.Options.ValidateOnBlur == true)
        {
            await TriggerImmediateValidation();
        }
        
        // CSS handles floating label state
    }
    
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        await OnKeyDown.InvokeAsync(e);
    }
    
    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        await OnKeyUp.InvokeAsync(e);
    }
    
    private async Task HandleStartIconClick()
    {
        if (OnStartIconClick.HasDelegate)
        {
            await OnStartIconClick.InvokeAsync();
        }
    }
    
    private async Task HandleEndIconClick()
    {
        if (OnEndIconClick.HasDelegate)
        {
            await OnEndIconClick.InvokeAsync();
        }
    }
}

