@** 
<summary>Unified radio button component that works standalone or within RRadioGroup</summary>
<category>Form</category>
<complexity>Simple</complexity>
<ai-prompt>Create a modern radio button for single selections with professional styling</ai-prompt>
<ai-common-use>option selection, settings toggles, form choices, exclusive selections</ai-common-use>
<ai-avoid>Don't use for multiple selections (use RCheckbox) or on/off toggles (use RChoice)</ai-avoid>
<ai-pattern name="standalone">Text="Option 1" Value="@option1" @bind-SelectedValue="@selectedOption" Name="options"</ai-pattern>
<ai-pattern name="in-group">Use within RRadioGroup: <RRadio Value="@option1" Text="Option 1" /></ai-pattern>
<ai-pattern name="with-description">Text="Premium Plan" Description="Advanced features included" Value="@premium"</ai-pattern>
<ai-pattern name="disabled-option">Text="Enterprise" Value="@enterprise" Disabled="true" Description="Contact sales"</ai-pattern>
<ai-pattern name="with-icon">Text="Email Notifications" Icon="email" Value="@email"</ai-pattern>
**@

@using RR.Blazor.Components.Base
@using RR.Blazor.Enums
@inherits RForwardingComponentBase
@implements IDisposable
@attribute [Component("RRadio", Category = "Form")]
@attribute [AIOptimized(Prompt = "Unified radio button for standalone and group usage")]
@typeparam TValue

<div class="flex items-start gap-3 @GetContainerClasses()">
    <div class="radio relative flex items-center justify-center">
        <input type="radio" 
               id="@Id"
               name="@ActualName"
               value="@(Value?.ToString())"
               checked="@IsSelected"
               @onclick="OnClick"
               @onchange="OnChange"
               disabled="@IsDisabled"
               class="peer"
               @attributes="GetSafeAttributes()" />
        
        <div class="@GetRadioClasses()">
            <div class="@GetInnerDotClasses()"></div>
        </div>
    </div>
    
    @if (!string.IsNullOrEmpty(Text) || !string.IsNullOrEmpty(Description) || !string.IsNullOrEmpty(Icon))
    {
        <label for="@Id" class="@GetLabelClasses()">
            <div class="flex items-center gap-2">
                @if (!string.IsNullOrEmpty(Icon))
                {
                    <i class="icon @GetIconClasses()">@Icon</i>
                }
                @if (!string.IsNullOrEmpty(Text))
                {
                    <span class="@GetTextClasses()">@Text</span>
                }
                @if (Required)
                {
                    <span class="text-error ml-1">*</span>
                }
            </div>
            @if (!string.IsNullOrEmpty(Description))
            {
                <div class="@GetDescriptionClasses()">@Description</div>
            }
        </label>
    }
    
    @if (ChildContent != null)
    {
        <div class="grow">
            @ChildContent
        </div>
    }
</div>

@if (!string.IsNullOrEmpty(ValidationMessage))
{
    <div class="text-error text-sm mt-1 ml-8">@ValidationMessage</div>
}

@code {
    /// <summary>Unique identifier for the radio input</summary>
    [Parameter] public string Id { get; set; } = $"radio-{Guid.NewGuid():N}";
    
    /// <summary>Name attribute for grouping radio buttons (used in standalone mode)</summary>
    [Parameter] public string? Name { get; set; }
    
    /// <summary>Value of this radio option</summary>
    [Parameter] public TValue? Value { get; set; }
    
    /// <summary>Currently selected value (used in standalone mode)</summary>
    [Parameter] public string? SelectedValue { get; set; }
    
    /// <summary>Callback when selection changes (used in standalone mode)</summary>
    [Parameter] public EventCallback<string?> SelectedValueChanged { get; set; }
    
    /// <summary>Parent radio group (cascaded when used within RRadioGroup)</summary>
    [CascadingParameter] private RRadioGroup<TValue>? RadioGroup { get; set; }
    
    /// <summary>Label text for the radio button</summary>
    [Parameter] public string? Text { get; set; }
    
    /// <summary>Description text shown below the label</summary>
    [Parameter] public string? Description { get; set; }
    
    /// <summary>Icon displayed next to the text</summary>
    [Parameter] public string? Icon { get; set; }
    
    /// <summary>Visual style variant of the radio button</summary>
    [Parameter] public RadioVariant Variant { get; set; } = RadioVariant.Default;
    
    /// <summary>Size of the radio button</summary>
    [Parameter] public SizeType Size { get; set; } = Medium;
    
    /// <summary>Whether the field is required</summary>
    [Parameter] public bool Required { get; set; }
    
    /// <summary>Validation error message to display</summary>
    [Parameter] public string? ValidationMessage { get; set; }
    
    /// <summary>Callback when radio button is clicked (used in standalone mode)</summary>
    [Parameter] public EventCallback<MouseEventArgs> OnClickCallback { get; set; }
    
    private string _groupName = string.Empty;
    private bool _isInGroup => RadioGroup != null;
    private bool _groupDisabled;

    private bool IsSelected
    {
        get
        {
            if (_isInGroup)
            {
                return RadioGroup?.IsValueSelected(Value) ?? false;
            }
            else
            {
                return AreValuesEqual(Value, SelectedValue);
            }
        }
    }
    
    private bool IsDisabled => Disabled || _groupDisabled;
    
    private string ActualName => _isInGroup ? _groupName : (Name ?? $"radio-{Guid.NewGuid():N}");
    
    private bool AreValuesEqual(object? value1, object? value2)
    {
        if (value1 == null && value2 == null) return true;
        if (value1 == null || value2 == null) return false;
        
        var str1 = value1.ToString();
        var str2 = value2.ToString();
        return string.Equals(str1, str2, StringComparison.Ordinal);
    }
    
    protected override void OnInitialized()
    {
        if (_isInGroup)
        {
            RadioGroup!.RegisterItem(this);
        }
        base.OnInitialized();
    }
    
    internal void SetGroupInfo(string groupName, TValue? selectedValue, bool groupDisabled)
    {
        _groupName = groupName;
        _groupDisabled = groupDisabled;
        StateHasChanged();
    }
    
    internal void UpdateSelection(TValue? selectedValue)
    {
        StateHasChanged();
    }
    
    /// <summary>
    /// Returns safely filtered HTML attributes using centralized RAttributeForwarder.
    /// </summary>
    private Dictionary<string, object> GetSafeAttributes()
    {
        return RAttributeForwarder.GetSafeAttributes(AdditionalAttributes);
    }

    private async Task OnClick(MouseEventArgs e)
    {
        if (!IsDisabled)
        {
            if (_isInGroup && !IsSelected)
            {
                await RadioGroup!.OnItemSelected(Value);
            }
            else if (!_isInGroup)
            {
                await OnClickCallback.InvokeAsync(e);
            }
        }
    }
    
    private async Task OnChange(ChangeEventArgs e)
    {
        if (!IsDisabled)
        {
            if (_isInGroup && !IsSelected)
            {
                await RadioGroup!.OnItemSelected(Value);
            }
            else if (!_isInGroup)
            {
                var selectedValue = e.Value?.ToString();
                var thisRadioValue = Value?.ToString();
                var isBecomingSelected = string.Equals(selectedValue, thisRadioValue, StringComparison.Ordinal);
                
                if (isBecomingSelected && !IsSelected)
                {
                    await SelectedValueChanged.InvokeAsync(Value?.ToString());
                }
            }
        }
    }

    private string GetContainerClasses()
    {
        var classes = new List<string> { "radio-item" };
        
        if (IsDisabled)
            classes.Add("radio-disabled");
            
        if (!string.IsNullOrEmpty(ValidationMessage))
            classes.Add("is-error");
            
        if (IsSelected)
            classes.Add("radio-selected");

        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);

        return string.Join(" ", classes);
    }

    private string GetRadioClasses()
    {
        var classes = new List<string> 
        { 
            "radio-mark"
        };

        if (Variant != RadioVariant.Default)
        {
            var variantName = Variant.ToString().ToLower();
            classes.Add($"radio-mark-{variantName}");
        }

        if (Size != SizeType.Medium)
        {
            classes.Add($"radio-mark-{Size.ToString().ToLower()}");
        }

        return string.Join(" ", classes);
    }

    private string GetInnerDotClasses()
    {
        return "radio-dot";
    }

    private string GetLabelClasses()
    {
        var classes = new List<string> { "cursor-pointer select-none grow" };
        
        if (IsDisabled)
            classes.Add("cursor-not-allowed opacity-60");

        return string.Join(" ", classes);
    }

    private string GetTextClasses()
    {
        var classes = new List<string> { "text-primary font-medium" };

        classes.Add(Size switch
        {
            Small => "text-sm",
            Large => "text-lg",
            _ => "text-base"
        });

        return string.Join(" ", classes);
    }

    private string GetDescriptionClasses()
    {
        var classes = new List<string> { "text-secondary mt-1" };

        classes.Add(Size switch
        {
            Small => "text-xs",
            Large => "text-base",
            _ => "text-sm"
        });

        return string.Join(" ", classes);
    }

    private string GetIconClasses()
    {
        var classes = new List<string> { "text-primary" };

        classes.Add(Size switch
        {
            Small => "text-base",
            Large => "text-xl",
            _ => "text-lg"
        });

        return string.Join(" ", classes);
    }
    
    public void Dispose()
    {
        if (_isInGroup)
        {
            RadioGroup?.UnregisterItem(this);
        }
    }
}
