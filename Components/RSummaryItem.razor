@* RSummaryItem - Reusable component for displaying summary information with consistent styling *@

<div class="summary-item @GetSummaryItemClasses()">
    <div class="summary-item__label @GetLabelClasses()">
        @if (!string.IsNullOrEmpty(Icon))
        {
            <i class="material-symbols-rounded @GetIconClasses()">@Icon</i>
        }
        <span>@Label</span>
    </div>
    <div class="summary-item__value @GetValueClasses()">
        @if (!string.IsNullOrEmpty(Value))
        {
            @Value
        }
        @ChildContent
    </div>
</div>

@code {
    /// <summary>Label text for the summary item</summary>
    [Parameter] public string Label { get; set; } = "";
    
    /// <summary>Value text for the summary item</summary>
    [Parameter] public string Value { get; set; }
    
    /// <summary>Material icon name</summary>
    [Parameter] public string Icon { get; set; }
    
    /// <summary>Size variant</summary>
    [Parameter] public SummaryItemSize Size { get; set; } = SummaryItemSize.Medium;
    
    /// <summary>Layout variant</summary>
    [Parameter] public SummaryItemLayout Layout { get; set; } = SummaryItemLayout.Horizontal;
    
    /// <summary>Value emphasis style</summary>
    [Parameter] public SummaryItemEmphasis Emphasis { get; set; } = SummaryItemEmphasis.Normal;
    
    /// <summary>Whether to show separator line</summary>
    [Parameter] public bool ShowSeparator { get; set; }
    
    /// <summary>Additional CSS classes</summary>
    [Parameter] public string Class { get; set; }
    
    /// <summary>Custom content for the value area</summary>
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    private string GetSummaryItemClasses()
    {
        var classes = new List<string> { "d-flex", "gap-2" };
        
        classes.Add(Layout switch
        {
            SummaryItemLayout.Horizontal => "align-center justify-between",
            SummaryItemLayout.Vertical => "flex-column",
            SummaryItemLayout.Inline => "align-center gap-3",
            _ => "align-center justify-between"
        });
        
        classes.Add(Size switch
        {
            SummaryItemSize.Small => "py-1",
            SummaryItemSize.Medium => "py-2",
            SummaryItemSize.Large => "py-3",
            _ => "py-2"
        });
        
        if (ShowSeparator)
        {
            classes.Add("border-b border-subtle");
        }
        
        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetLabelClasses()
    {
        var classes = new List<string> { "d-flex", "align-center", "gap-2" };
        
        classes.Add(Size switch
        {
            SummaryItemSize.Small => "text-xs",
            SummaryItemSize.Medium => "text-sm",
            SummaryItemSize.Large => "text-base",
            _ => "text-sm"
        });
        
        classes.Add("text-secondary font-medium");
        
        return string.Join(" ", classes);
    }
    
    private string GetValueClasses()
    {
        var classes = new List<string>();
        
        classes.Add(Size switch
        {
            SummaryItemSize.Small => "text-sm",
            SummaryItemSize.Medium => "text-base",
            SummaryItemSize.Large => "text-lg",
            _ => "text-base"
        });
        
        switch (Emphasis)
        {
            case SummaryItemEmphasis.Normal:
                classes.Add("text-primary");
                break;
                
            case SummaryItemEmphasis.Strong:
                classes.AddRange(new[] { "font-semibold", "text-primary" });
                break;
                
            case SummaryItemEmphasis.Bold:
                classes.AddRange(new[] { "font-bold", "text-primary" });
                break;
                
            case SummaryItemEmphasis.Success:
                classes.AddRange(new[] { "font-semibold", "text-success" });
                break;
                
            case SummaryItemEmphasis.Warning:
                classes.AddRange(new[] { "font-semibold", "text-warning" });
                break;
                
            case SummaryItemEmphasis.Error:
                classes.AddRange(new[] { "font-semibold", "text-error" });
                break;
                
            case SummaryItemEmphasis.Muted:
                classes.Add("text-secondary");
                break;
        }
        
        if (Layout == SummaryItemLayout.Horizontal)
        {
            classes.Add("text-right");
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetIconClasses()
    {
        return Size switch
        {
            SummaryItemSize.Small => "text-sm text-secondary",
            SummaryItemSize.Medium => "text-base text-secondary",
            SummaryItemSize.Large => "text-lg text-secondary",
            _ => "text-base text-secondary"
        };
    }
}

@* 
Usage Examples:

<!-- Basic summary item -->
<RSummaryItem Label="Total Amount" Value="$1,250.00" Emphasis="SummaryItemEmphasis.Bold" />

<!-- With icon and separator -->
<RSummaryItem Label="Gross Pay" 
              Value="$3,500.00" 
              Icon="payments" 
              ShowSeparator="true" 
              Emphasis="SummaryItemEmphasis.Success" />

<!-- Vertical layout -->
<RSummaryItem Label="Employee Count" 
              Value="42" 
              Layout="SummaryItemLayout.Vertical" 
              Size="SummaryItemSize.Large" />

<!-- Custom content -->
<RSummaryItem Label="Status" Icon="info">
    <RBadge Text="Active" Variant="RR.Blazor.Enums.BadgeVariant.Success" />
</RSummaryItem>

<!-- Different emphasis styles -->
<RSummaryItem Label="Base Salary" Value="$75,000" Emphasis="SummaryItemEmphasis.Normal" />
<RSummaryItem Label="Bonus" Value="$5,000" Emphasis="SummaryItemEmphasis.Success" />
<RSummaryItem Label="Deductions" Value="$250" Emphasis="SummaryItemEmphasis.Error" />
*@
