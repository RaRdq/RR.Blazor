@namespace RR.Blazor.Components
@using RR.Blazor.Enums

<span class="badge @GetBadgeClasses()" @onclick="HandleClick" @attributes="AdditionalAttributes">
    @if (!string.IsNullOrEmpty(Icon))
    {
        <i class="material-symbols-rounded @GetIconClasses()">@Icon</i>
    }
    @if (!string.IsNullOrEmpty(Text))
    {
        <span>@Text</span>
    }
    @ChildContent
</span>

@code {
    [Parameter] public string Text { get; set; }
    [Parameter] public BadgeVariant Variant { get; set; } = RR.Blazor.Enums.BadgeVariant.Secondary;
    [Parameter] public BadgeSize Size { get; set; } = RR.Blazor.Enums.BadgeSize.Medium;
    [Parameter] public string Icon { get; set; }
    [Parameter] public bool Clickable { get; set; }
    [Parameter] public EventCallback OnClick { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> AdditionalAttributes { get; set; }

    private string GetBadgeClasses()
    {
        var classes = new List<string> { "badge" };
        
        // Variant classes
        classes.Add(Variant switch
        {
            RR.Blazor.Enums.BadgeVariant.Primary => "badge--primary",
            RR.Blazor.Enums.BadgeVariant.Success => "badge--success",
            RR.Blazor.Enums.BadgeVariant.Warning => "badge--warning",
            RR.Blazor.Enums.BadgeVariant.Danger => "badge--danger",
            RR.Blazor.Enums.BadgeVariant.Info => "badge--info",
            _ => "badge--secondary"
        });
        
        // Size classes
        classes.Add(Size switch
        {
            RR.Blazor.Enums.BadgeSize.Small => "badge--sm",
            RR.Blazor.Enums.BadgeSize.Large => "badge--lg",
            _ => ""
        });
        
        // Clickable
        if (Clickable || OnClick.HasDelegate)
        {
            classes.Add("badge--clickable");
        }
        
        // Custom CSS
        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }

    private string GetIconClasses()
    {
        return Size switch
        {
            RR.Blazor.Enums.BadgeSize.Small => "fs-6",
            RR.Blazor.Enums.BadgeSize.Large => "fs-4",
            _ => "fs-5"
        };
    }

    private async Task HandleClick()
    {
        if (OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync();
        }
    }
}
