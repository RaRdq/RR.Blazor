@namespace RR.Blazor.Components
@using RR.Blazor.Enums

<div class="accordion @GetAccordionClasses()" @attributes="AdditionalAttributes">
    <CascadingValue Value="this" IsFixed="true">
        @ChildContent
    </CascadingValue>
</div>

@code {
    /// <summary>Accordion items content</summary>
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    /// <summary>Whether multiple items can be expanded at once</summary>
    [Parameter] public bool Multiple { get; set; } = false;
    
    /// <summary>Whether to show borders between items</summary>
    [Parameter] public bool Bordered { get; set; } = true;
    
    /// <summary>Whether to show separators between items</summary>
    [Parameter] public bool Separated { get; set; } = false;
    
    /// <summary>Accordion style variant</summary>
    [Parameter] public AccordionVariant Variant { get; set; } = AccordionVariant.Default;
    
    /// <summary>Icon position</summary>
    [Parameter] public AccordionIconPosition IconPosition { get; set; } = AccordionIconPosition.Right;
    
    /// <summary>Expand icon</summary>
    [Parameter] public string ExpandIcon { get; set; } = "expand_more";
    
    /// <summary>Collapse icon</summary>
    [Parameter] public string CollapseIcon { get; set; } = "expand_less";
    
    /// <summary>Additional CSS classes</summary>
    [Parameter] public string Class { get; set; }
    
    /// <summary>Additional HTML attributes</summary>
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> AdditionalAttributes { get; set; }
    
    /// <summary>Callback when an item is expanded</summary>
    [Parameter] public EventCallback<string> OnExpanded { get; set; }
    
    /// <summary>Callback when an item is collapsed</summary>
    [Parameter] public EventCallback<string> OnCollapsed { get; set; }
    
    private readonly HashSet<string> expandedItems = new();
    
    internal bool IsExpanded(string itemId)
    {
        return expandedItems.Contains(itemId);
    }
    
    internal async Task ToggleItem(string itemId)
    {
        if (expandedItems.Contains(itemId))
        {
            expandedItems.Remove(itemId);
            await OnCollapsed.InvokeAsync(itemId);
        }
        else
        {
            if (!Multiple)
            {
                // Collapse all other items
                var itemsToCollapse = expandedItems.ToList();
                expandedItems.Clear();
                
                foreach (var item in itemsToCollapse)
                {
                    await OnCollapsed.InvokeAsync(item);
                }
            }
            
            expandedItems.Add(itemId);
            await OnExpanded.InvokeAsync(itemId);
        }
        
        StateHasChanged();
    }
    
    private string GetAccordionClasses()
    {
        var classes = new List<string> { "accordion" };
        
        // Variant
        if (Variant != AccordionVariant.Default)
        {
            classes.Add($"accordion--{Variant.ToString().ToLower()}");
        }
        
        // Bordered
        if (Bordered)
        {
            classes.Add("accordion--bordered");
        }
        
        // Separated
        if (Separated)
        {
            classes.Add("accordion--separated");
        }
        
        // Icon position
        if (IconPosition == AccordionIconPosition.Left)
        {
            classes.Add("accordion--icon-left");
        }
        
        // Custom CSS classes
        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes);
    }
}

@* Usage Examples:

<!-- Basic accordion -->
<RAccordion>
    <RAccordionItem Title="Section 1">
        Content for section 1
    </RAccordionItem>
    <RAccordionItem Title="Section 2">
        Content for section 2
    </RAccordionItem>
</RAccordion>

<!-- Multiple items can be expanded -->
<RAccordion Multiple="true">
    <RAccordionItem Title="Item 1" Icon="info">
        Content 1
    </RAccordionItem>
    <RAccordionItem Title="Item 2" Icon="settings">
        Content 2
    </RAccordionItem>
</RAccordion>

<!-- Flush variant (no borders) -->
<RAccordion Variant="AccordionVariant.Flush" Bordered="false">
    <RAccordionItem Title="Clean Item 1">
        Content 1
    </RAccordionItem>
    <RAccordionItem Title="Clean Item 2">
        Content 2
    </RAccordionItem>
</RAccordion>
*@