@* RChart - Adaptive chart container for RR.Blazor visualizations *@
@using System
@using RR.Blazor.Enums
@using RR.Blazor.Models
@using RR.Blazor.Components.Base
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inherits RInteractiveComponentBase
@inject IJSRuntime JSRuntime

<div class="@BuildRootClasses()"
     style="@Style"
     @onclick="@HandleContainerClick"
     @attributes="GetRootAttributes()"
     @ref="chartRoot">

    @if (HasHeaderContent)
    {
        <div class="chart-container-header">
            <div class="chart-container-header-meta">
                @if (!string.IsNullOrWhiteSpace(Title))
                {
                    <div class="chart-title text-h5 font-semibold">
                        @if (!string.IsNullOrWhiteSpace(Icon))
                        {
                            <i class="icon mr-2 @GetIconColorClass()">@Icon</i>
                        }
                        @Title
                    </div>
                }

                @if (!string.IsNullOrWhiteSpace(Subtitle))
                {
                    <p class="chart-subtitle text-sm text-muted mt-1">@Subtitle</p>
                }
            </div>

            @if (HeaderContent != null)
            {
                <div class="chart-container-header-actions">
                    @HeaderContent
                </div>
            }
        </div>
    }

    <div class="chart-container-content @GetContentClasses()">
        @if (ShouldRenderLegendTop)
        {
            <div class="@GetLegendClasses(LegendPosition)">
                @LegendContentOrDefault
            </div>
        }

        <div class="chart-layout @GetLayoutClasses()">
            @if (ShouldRenderLegendLeft)
            {
                <div class="@GetLegendClasses(ChartLegendPosition.Left)">
                    @LegendContentOrDefault
                </div>
            }

            <div class="chart-viewport" style="@GetViewportStyle()">
                @if (Loading)
                {
                    <div class="chart-loading">
                        <i class="icon text-primary animate-spin text-4xl">progress_activity</i>
                        <p class="text-sm text-muted mt-2">@LoadingText</p>
                    </div>
                }
                else if (HasError)
                {
                    <div class="chart-error">
                        <i class="icon chart-error-icon">error</i>
                        <div class="text-h6 font-semibold">@ErrorTitle</div>
                        <p class="text-sm mt-1">@ErrorMessage</p>
                        @if (OnRetry.HasDelegate)
                        {
                            <button class="button-outline mt-4" @onclick="@(async () => await OnRetry.InvokeAsync())">
                                <i class="icon mr-2">refresh</i>
                                @RetryText
                            </button>
                        }
                    </div>
                }
                else if (IsEmpty)
                {
                    <div class="chart-empty">
                        <i class="icon chart-empty-icon">insert_chart</i>
                        <div class="text-h6 font-semibold">@EmptyTitle</div>
                        <p class="text-sm mt-1">@EmptyMessage</p>
                    </div>
                }
                else
                {
                    <div class="@GetCanvasClasses()" @ref="chartCanvas">
                        @ChildContent
                    </div>
                }
            </div>

            @if (ShouldRenderLegendRight)
            {
                <div class="@GetLegendClasses(ChartLegendPosition.Right)">
                    @LegendContentOrDefault
                </div>
            }
        </div>

        @if (ShouldRenderLegendBottom)
        {
            <div class="@GetLegendClasses(LegendPosition)">
                @LegendContentOrDefault
            </div>
        }
    </div>

    @if (FooterContent != null)
    {
        <div class="chart-container-footer">
            @FooterContent
        </div>
    }

    @if (ShouldRenderAccessibility)
    {
        <div class="chart-accessibility-table-visible">
            @AccessibilityContent
        </div>
    }
</div>

@code {
    /// <summary>Chart title</summary>
    [Parameter]
    [AIParameter("Chart title displayed in header", Example = "Monthly Revenue")]
    public string Title { get; set; } = "";

    /// <summary>Chart subtitle</summary>
    [Parameter] public string Subtitle { get; set; } = "";

    /// <summary>Chart description for accessibility</summary>
    [Parameter] public string Description { get; set; } = "";

    /// <summary>Chart icon</summary>
    [Parameter] public string Icon { get; set; } = "";

    /// <summary>Chart type</summary>
    [Parameter] public ChartType Type { get; set; } = ChartType.Line;

    /// <summary>Chart variant for styling</summary>
    [Parameter] public ChartVariant Variant { get; set; } = ChartVariant.Default;

    /// <summary>Chart size</summary>
    [Parameter] public SizeType Size { get; set; } = SizeType.Medium;

    /// <summary>Chart theme</summary>
    [Parameter] public ChartTheme Theme { get; set; } = ChartTheme.Auto;

    /// <summary>Chart responsive mode</summary>
    [Parameter] public ChartResponsiveMode ResponsiveMode { get; set; } = ChartResponsiveMode.Auto;

    /// <summary>Chart configuration</summary>
    [Parameter] public ChartConfiguration Configuration { get; set; } = new();

    /// <summary>Chart height</summary>
    [Parameter] public string Height { get; set; } = "";

    /// <summary>Chart width</summary>
    [Parameter] public string Width { get; set; } = "";

    /// <summary>Whether chart has error</summary>
    [Parameter] public bool HasError { get; set; }

    /// <summary>Error title</summary>
    [Parameter] public string ErrorTitle { get; set; } = "Chart Error";

    /// <summary>Error message</summary>
    [Parameter] public string ErrorMessage { get; set; } = "Unable to load chart data";

    /// <summary>Retry button text</summary>
    [Parameter] public string RetryText { get; set; } = "Retry";

    /// <summary>Whether chart is empty</summary>
    [Parameter] public bool IsEmpty { get; set; }

    /// <summary>Empty state title</summary>
    [Parameter] public string EmptyTitle { get; set; } = "No Data";

    /// <summary>Empty state message</summary>
    [Parameter] public string EmptyMessage { get; set; } = "No data available to display";

    /// <summary>Whether to show legend</summary>
    [Parameter] public bool ShowLegend { get; set; } = true;

    /// <summary>Legend position</summary>
    [Parameter] public ChartLegendPosition LegendPosition { get; set; } = ChartLegendPosition.Bottom;

    /// <summary>Whether to show accessibility table</summary>
    [Parameter] public bool ShowAccessibilityTable { get; set; }

    /// <summary>Chart header content</summary>
    [Parameter] public RenderFragment HeaderContent { get; set; }

    /// <summary>Chart footer content</summary>
    [Parameter] public RenderFragment FooterContent { get; set; }

    /// <summary>Chart legend content</summary>
    [Parameter] public RenderFragment LegendContent { get; set; }

    /// <summary>Accessibility content</summary>
    [Parameter] public RenderFragment AccessibilityContent { get; set; }

    /// <summary>Retry handler</summary>
    [Parameter] public EventCallback OnRetry { get; set; }

    /// <summary>Chart initialization handler</summary>
    [Parameter] public EventCallback<ElementReference> OnChartInit { get; set; }

    private ElementReference chartRoot;
    private ElementReference chartCanvas;
    private bool isInitialized;

    private bool HasHeaderContent =>
        !string.IsNullOrWhiteSpace(Title) ||
        !string.IsNullOrWhiteSpace(Subtitle) ||
        HeaderContent != null;

    private bool ShouldRenderAccessibility =>
        Configuration?.EnableAccessibility == true &&
        ShowAccessibilityTable &&
        AccessibilityContent != null;

    private RenderFragment LegendContentOrDefault =>
        LegendContent;

    private bool ShouldShowLegend =>
        ShowLegend &&
        LegendContentOrDefault != null &&
        !Loading &&
        !HasError &&
        !IsEmpty &&
        LegendPosition != ChartLegendPosition.None;

    private bool ShouldRenderLegendTop =>
        ShouldShowLegend &&
        (LegendPosition is ChartLegendPosition.Top or ChartLegendPosition.TopLeft or ChartLegendPosition.TopRight);

    private bool ShouldRenderLegendBottom =>
        ShouldShowLegend &&
        (LegendPosition is ChartLegendPosition.Bottom or ChartLegendPosition.BottomLeft or ChartLegendPosition.BottomRight);

    private bool ShouldRenderLegendLeft =>
        ShouldShowLegend && LegendPosition == ChartLegendPosition.Left;

    private bool ShouldRenderLegendRight =>
        ShouldShowLegend && LegendPosition == ChartLegendPosition.Right;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender && !isInitialized)
        {
            isInitialized = true;
            if (OnChartInit.HasDelegate)
            {
                await OnChartInit.InvokeAsync(chartCanvas);
            }
        }
    }

    protected override async Task InitializeJavaScriptAsync()
    {
        await base.InitializeJavaScriptAsync();
        await SafeInvokeAsync("RRBlazor.Chart.initialize", chartRoot);
    }

    protected override async ValueTask DisposeAsyncCore()
    {
        await SafeInvokeAsync("RRBlazor.Chart.cleanup", chartRoot);
        await base.DisposeAsyncCore();
    }

    private string BuildRootClasses()
    {
        var classes = new List<string> { "chart", "chart-container" };

        if (Loading)
        {
            classes.Add("chart--loading");
        }

        if (HasError)
        {
            classes.Add("chart--error");
        }

        if (IsEmpty)
        {
            classes.Add("chart--empty");
        }

        classes.Add(Size switch
        {
            SizeType.Small => "chart-small",
            SizeType.Large => "chart-large",
            SizeType.ExtraLarge => "chart-full",
            _ => "chart-medium"
        });

        classes.Add(Variant switch
        {
            ChartVariant.Glass => "chart-glass",
            ChartVariant.Minimal => "chart-minimal",
            ChartVariant.Elevated => "chart-elevated",
            ChartVariant.Outlined => "chart-outlined",
            ChartVariant.Filled => "chart-filled",
            _ => "chart-default"
        });

        if (ResponsiveMode == ChartResponsiveMode.Auto)
        {
            classes.Add("chart-responsive");
        }
        else
        {
            classes.Add($"chart-responsive-{ResponsiveMode.ToString().ToLowerInvariant()}");
        }

        if (ShouldRenderLegendLeft) classes.Add("chart--legend-left");
        if (ShouldRenderLegendRight) classes.Add("chart--legend-right");
        if (ShouldRenderLegendTop) classes.Add("chart--legend-top");
        if (ShouldRenderLegendBottom) classes.Add("chart--legend-bottom");

        if (!string.IsNullOrWhiteSpace(Class))
        {
            classes.Add(Class);
        }

        return string.Join(" ", classes);
    }

    private string GetContentClasses()
    {
        var classes = new List<string>();
        if (!string.IsNullOrWhiteSpace(Height))
        {
            classes.Add("chart-content-custom-height");
        }

        return string.Join(" ", classes);
    }

    private string GetLayoutClasses()
    {
        if (ShouldRenderLegendLeft)
        {
            return "chart-layout-legend-left";
        }

        if (ShouldRenderLegendRight)
        {
            return "chart-layout-legend-right";
        }

        return "chart-layout-inline";
    }

    private string GetViewportStyle()
    {
        var styles = new List<string>();

        if (!string.IsNullOrWhiteSpace(Height))
        {
            styles.Add($"height: {Height};");
            styles.Add($"min-height: {Height};");
        }

        if (!string.IsNullOrWhiteSpace(Width))
        {
            styles.Add($"width: {Width};");
            styles.Add($"min-width: {Width};");
        }

        return string.Join(" ", styles);
    }

    private string GetLegendClasses(ChartLegendPosition position)
    {
        var classes = new List<string> { "chart-legend" };

        switch (position)
        {
            case ChartLegendPosition.Top:
            case ChartLegendPosition.TopLeft:
            case ChartLegendPosition.TopRight:
                classes.Add("chart-legend-top");
                break;
            case ChartLegendPosition.Bottom:
            case ChartLegendPosition.BottomLeft:
            case ChartLegendPosition.BottomRight:
                classes.Add("chart-legend-bottom");
                break;
            case ChartLegendPosition.Left:
                classes.Add("chart-legend-left");
                classes.Add("chart-legend-side");
                break;
            case ChartLegendPosition.Right:
                classes.Add("chart-legend-right");
                classes.Add("chart-legend-side");
                break;
        }

        classes.Add(position switch
        {
            ChartLegendPosition.TopLeft or ChartLegendPosition.BottomLeft or ChartLegendPosition.Left
                => "chart-legend-align-start",
            ChartLegendPosition.TopRight or ChartLegendPosition.BottomRight or ChartLegendPosition.Right
                => "chart-legend-align-end",
            _ => "chart-legend-align-center"
        });

        return string.Join(" ", classes);
    }

    private string GetCanvasClasses()
    {
        var classes = new List<string> { "chart-canvas" };

        var typeClass = Type switch
        {
            ChartType.Pie => "chart-canvas-pie",
            ChartType.Doughnut => "chart-canvas-pie chart-canvas-doughnut",
            ChartType.Column => "chart-canvas-column",
            ChartType.Bar => "chart-canvas-bar",
            ChartType.Area => "chart-canvas-area",
            ChartType.Line => "chart-canvas-line",
            _ => string.Empty
        };

        if (!string.IsNullOrWhiteSpace(typeClass))
        {
            classes.Add(typeClass);
        }

        return string.Join(" ", classes);
    }

    private string GetIconColorClass() =>
        Type switch
        {
            ChartType.Pie or ChartType.Doughnut => "text-primary",
            ChartType.Column => "text-success",
            ChartType.Bar => "text-info",
            ChartType.Line or ChartType.Area => "text-warning",
            _ => "text-secondary"
        };

    private IDictionary<string, object> GetRootAttributes()
    {
        var attributes = GetSafeAttributes() ?? new Dictionary<string, object>();
        var merged = new Dictionary<string, object>(attributes, StringComparer.OrdinalIgnoreCase);

        foreach (var attribute in GetAccessibilityAttributes())
        {
            merged[attribute.Key] = attribute.Value;
        }

        if (!merged.ContainsKey("role"))
        {
            merged["role"] = "group";
        }

        merged["data-chart-type"] = Type.ToString().ToLowerInvariant();
        merged["data-chart-responsive"] = ResponsiveMode.ToString().ToLowerInvariant();

        if (!string.IsNullOrWhiteSpace(Description))
        {
            merged["aria-description"] = Description;
        }

        return merged;
    }

    private async Task HandleContainerClick(MouseEventArgs e)
    {
        if (OnClick.HasDelegate && !Loading && !HasError)
        {
            await OnClick.InvokeAsync(e);
        }
    }
}
