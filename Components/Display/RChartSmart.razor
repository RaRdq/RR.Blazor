@* RChartSmart - Smart generic chart component with auto-detection *@
@using RR.Blazor.Enums
@using RR.Blazor.Models
@using RR.Blazor.Components.Base
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@typeparam T
@inherits RInteractiveComponentBase
@inject IJSRuntime JSRuntime

<RChart @attributes="GetSafeAttributes()"
        Header="@Title"
        Subtitle="@Subtitle" 
        Description="@Description"
        Icon="@Icon"
        Type="@GetChartType()"
        Variant="@Variant"
        Size="@Size"
        Theme="@Theme"
        ResponsiveMode="@ResponsiveMode"
        Configuration="@Configuration"
        Height="@Height"
        Width="@Width"
        HasError="@HasError"
        ErrorHeader="@ErrorTitle"
        ErrorMessage="@ErrorMessage"
        RetryText="@RetryText"
        IsEmpty="@IsDataEmpty()"
        EmptyHeader="@EmptyTitle"
        EmptyMessage="@EmptyMessage"
        ShowLegend="@ShowLegend"
        LegendPosition="@LegendPosition"
        ShowAccessibilityTable="@ShowAccessibilityTable"
        Loading="@Loading"
        LoadingText="@LoadingText"
        OnRetry="@OnRetry"
        OnClick="@OnClick"
        OnChartInit="@HandleChartInit"
        HeaderContent="@HeaderContent"
        FooterContent="@FooterContent"
        LegendContent="@LegendContent"
        AccessibilityContent="@AccessibilityContent">

    <ChildContent>
        @if (chartData?.Any() == true)
        {
            @switch (GetChartType())
            {
                case ChartType.Column:
                    <RColumnChart Data="@chartData" @ref="columnChart" />
                    break;
                case ChartType.Pie:
                    <RPieChart Data="@chartData" @ref="pieChart" />
                    break;
                case ChartType.Line:
                    <RLineChart Data="@GetSeriesData()" @ref="lineChart" />
                    break;
                case ChartType.Area:
                    <RAreaChart Data="@GetSeriesData()" @ref="areaChart" />
                    break;
            }
        }
    </ChildContent>
</RChart>

@code {
    [Parameter] public IEnumerable<T>? Data { get; set; }
    [Parameter] public ChartType? Type { get; set; }
    
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string Subtitle { get; set; } = "";
    [Parameter] public string Description { get; set; } = "";
    [Parameter] public string Icon { get; set; } = "";
    [Parameter] public ChartVariant Variant { get; set; } = ChartVariant.Default;
    [Parameter] public SizeType Size { get; set; } = SizeType.Medium;
    [Parameter] public ChartTheme Theme { get; set; } = ChartTheme.Auto;
    [Parameter] public ChartResponsiveMode ResponsiveMode { get; set; } = ChartResponsiveMode.Auto;
    [Parameter] public ChartConfiguration Configuration { get; set; } = new();
    [Parameter] public string Height { get; set; } = "";
    [Parameter] public string Width { get; set; } = "";
    [Parameter] public bool HasError { get; set; }
    [Parameter] public string ErrorTitle { get; set; } = "Chart Error";
    [Parameter] public string ErrorMessage { get; set; } = "Unable to load chart data";
    [Parameter] public string RetryText { get; set; } = "Retry";
    [Parameter] public string EmptyTitle { get; set; } = "No Data";
    [Parameter] public string EmptyMessage { get; set; } = "No data available to display";
    [Parameter] public bool ShowLegend { get; set; } = true;
    [Parameter] public ChartLegendPosition LegendPosition { get; set; } = ChartLegendPosition.Bottom;
    [Parameter] public bool ShowAccessibilityTable { get; set; }

    [Parameter] public RenderFragment? HeaderContent { get; set; }
    [Parameter] public RenderFragment? FooterContent { get; set; }
    [Parameter] public RenderFragment? LegendContent { get; set; }
    [Parameter] public RenderFragment? AccessibilityContent { get; set; }

    [Parameter] public EventCallback OnRetry { get; set; }
    [Parameter] public EventCallback<ElementReference> OnChartInit { get; set; }

    private readonly ChartDataAnalyzer analyzer = new();
    private List<ChartDataPoint>? chartData;
    private List<ChartSeries>? seriesData;
    
    private RColumnChart? columnChart;
    private RPieChart? pieChart;
    private RLineChart? lineChart;
    private RAreaChart? areaChart;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        ProcessData();
    }

    private void ProcessData()
    {
        if (Data?.Any() != true)
        {
            chartData = null;
            seriesData = null;
            return;
        }

        chartData = analyzer.ConvertToChartData(Data);
        seriesData = ConvertToSeries(chartData);
    }

    private ChartType GetChartType()
    {
        if (Type.HasValue) return Type.Value;
        return Data?.Any() == true ? analyzer.AnalyzeAndRecommend(Data) : ChartType.Column;
    }

    private bool IsDataEmpty() => Data?.Any() != true;

    private List<ChartSeries> GetSeriesData()
    {
        return seriesData ?? new List<ChartSeries>();
    }

    private List<ChartSeries> ConvertToSeries(List<ChartDataPoint> data)
    {
        if (!data.Any()) return new List<ChartSeries>();

        var groupedBySeries = data.GroupBy(d => d.Series).ToList();
        
        if (groupedBySeries.Count == 1 && string.IsNullOrEmpty(groupedBySeries[0].Key))
        {
            return new List<ChartSeries>
            {
                new ChartSeries
                {
                    Name = "Data",
                    Data = data,
                    Type = GetChartType()
                }
            };
        }

        return groupedBySeries.Select(g => new ChartSeries
        {
            Name = g.Key,
            Data = g.ToList(),
            Type = GetChartType()
        }).ToList();
    }

    private async Task HandleChartInit(ElementReference element)
    {
        if (OnChartInit.HasDelegate)
        {
            await OnChartInit.InvokeAsync(element);
        }
    }
}

@*
Usage Examples:

<!-- Zero-config smart chart -->
<RChartSmart Data="@salesData" Title="Sales Overview" />

<!-- Type override -->
<RChartSmart Data="@salesData" Type="ChartType.Pie" Title="Sales Distribution" />

<!-- RTable integration -->
<RChartSmart Data="@tableRef.FilteredData" Title="Dynamic Chart" />

<!-- Real-time updates -->
<RChartSmart Data="@realTimeData" Title="Live Metrics" />
*@