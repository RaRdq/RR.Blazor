@namespace RR.Blazor.Components
@using RR.Blazor.Enums

@if (Count > 1)
{
    @for (int i = 0; i < Count; i++)
    {
        <div class="@GetWrapperClasses()">
            @RenderSkeleton()
        </div>
    }
}
else
{
    @RenderSkeleton()
}

@code {
    [Parameter] public SkeletonType Type { get; set; } = SkeletonType.Text;
    [Parameter] public string Width { get; set; } = "100%";
    [Parameter] public string Height { get; set; } = "auto";
    [Parameter] public int Count { get; set; } = 1;
    [Parameter] public bool Animated { get; set; } = true;
    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter] public RenderFragment ChildContent { get; set; }

    private RenderFragment RenderSkeleton() => Type switch
    {
        SkeletonType.Text => RenderTextSkeleton(),
        SkeletonType.Title => RenderTitleSkeleton(),
        SkeletonType.Avatar => RenderAvatarSkeleton(),
        SkeletonType.Card => RenderCardSkeleton(),
        SkeletonType.Table => RenderTableSkeleton(),
        SkeletonType.Custom => ChildContent ?? RenderTextSkeleton(),
        _ => RenderTextSkeleton()
    };

    private RenderFragment RenderTextSkeleton() => @<div class="@GetSkeletonClasses()" style="@GetStyle()"></div>;

    private RenderFragment RenderTitleSkeleton() => @<div class="@GetSkeletonClasses() skeleton-title" style="@GetStyle()"></div>;

    private RenderFragment RenderAvatarSkeleton() => 
        @<div class="flex items-center gap-3">
            <div class="@GetSkeletonClasses() skeleton-avatar"></div>
            <div class="grow">
                <div class="@GetSkeletonClasses() skeleton-text mb-2 w-60"></div>
                <div class="@GetSkeletonClasses() skeleton-text w-40"></div>
            </div>
        </div>;

    private RenderFragment RenderCardSkeleton() => 
        @<div class="skeleton-card">
            <div class="@GetSkeletonClasses() skeleton-title mb-4"></div>
            <div class="@GetSkeletonClasses() skeleton-text mb-2"></div>
            <div class="@GetSkeletonClasses() skeleton-text mb-2 w-80"></div>
            <div class="@GetSkeletonClasses() skeleton-text w-60"></div>
        </div>;

    private RenderFragment RenderTableSkeleton() =>
        @<div class="border border-light rounded-md overflow-hidden">
            <div class="pa-3 bg-surface-elevated border-b border-light">
                <div class="@GetSkeletonClasses() skeleton-text"></div>
            </div>
            @for (int i = 0; i < 5; i++)
            {
                <div class="pa-3 border-b border-light">
                    <div class="@GetSkeletonClasses() skeleton-text"></div>
                </div>
            }
        </div>;

    private string GetSkeletonClasses()
    {
        var classes = new List<string> { "skeleton" };
        
        if (Animated)
        {
            classes.Add("skeleton-pulse");
        }
        
        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes);
    }

    private string GetWrapperClasses()
    {
        return Type switch
        {
            SkeletonType.Card => "mb-4",
            SkeletonType.Table => "mb-6",
            _ => "mb-2"
        };
    }

    private string GetStyle()
    {
        var styles = new List<string>();
        
        if (Width != "100%")
        {
            styles.Add($"width: {Width}");
        }
        
        if (Height != "auto")
        {
            styles.Add($"height: {Height}");
        }
        
        return string.Join("; ", styles);
    }
}

