@* RStatsCard - Generic dashboard statistics card component *@

@using RR.Blazor.Enums

<RCard IsClickable="@IsClickable" 
       OnClick="@OnClick"
       Elevation="@Elevation"
       Class="@($"d-flex align-center {Class}")"
       Style="@Style">
    <div class="d-flex align-center gap-3">
        @if (!string.IsNullOrEmpty(Icon))
        {
            <div class="rounded-lg d-flex align-center justify-center" style="width: @(IconSize)px; height: @(IconSize)px; background: var(--color-@IconColor);">
                <i class="material-symbols-rounded" style="color: var(--color-text-inverse); font-size: @(IconSize * 0.6)px;">@Icon</i>
            </div>
        }
        <div class="flex-grow-1">
            <div class="text-xs font-medium uppercase mb-1 tracking-wide" style="color: var(--color-text-secondary);">@Label</div>
            <div class="d-flex align-center gap-2">
                <span class="text-lg font-bold" style="color: var(--color-@ValueColor);">@Value</span>
                @if (!string.IsNullOrEmpty(BadgeText))
                {
                    <RBadge Text="@BadgeText" Variant="@BadgeVariant" Size="@BadgeSize" />
                }
            </div>
            @if (!string.IsNullOrEmpty(Subtitle))
            {
                <div class="text-xs" style="color: var(--color-text-tertiary); margin-top: 2px;">@Subtitle</div>
            }
        </div>
    </div>
</RCard>

@code {
    /// <summary>
    /// Card label text (displayed above the value)
    /// </summary>
    [Parameter] public string Label { get; set; } = string.Empty;

    /// <summary>
    /// Main value to display
    /// </summary>
    [Parameter] public string Value { get; set; } = string.Empty;

    /// <summary>
    /// Optional subtitle text (displayed below the value)
    /// </summary>
    [Parameter] public string Subtitle { get; set; } = string.Empty;

    /// <summary>
    /// Material Icons icon name
    /// </summary>
    [Parameter] public string Icon { get; set; } = string.Empty;

    /// <summary>
    /// Icon background color (semantic color name without var prefix)
    /// </summary>
    [Parameter] public string IconColor { get; set; } = "interactive-primary";

    /// <summary>
    /// Value text color (semantic color name without var prefix)
    /// </summary>
    [Parameter] public string ValueColor { get; set; } = "interactive-primary";

    /// <summary>
    /// Icon size in pixels
    /// </summary>
    [Parameter] public int IconSize { get; set; } = 40;

    /// <summary>
    /// Badge text to display next to the value
    /// </summary>
    [Parameter] public string BadgeText { get; set; } = string.Empty;

    /// <summary>
    /// Badge variant
    /// </summary>
    [Parameter] public BadgeVariant BadgeVariant { get; set; } = BadgeVariant.Info;

    /// <summary>
    /// Badge size
    /// </summary>
    [Parameter] public BadgeSize BadgeSize { get; set; } = BadgeSize.Small;

    /// <summary>
    /// Whether the card is clickable
    /// </summary>
    [Parameter] public bool IsClickable { get; set; } = false;

    /// <summary>
    /// Click event handler
    /// </summary>
    [Parameter] public EventCallback OnClick { get; set; }

    /// <summary>
    /// Card elevation level
    /// </summary>
    [Parameter] public int Elevation { get; set; } = 2;

    /// <summary>
    /// Additional CSS classes
    /// </summary>
    [Parameter] public string Class { get; set; } = string.Empty;

    /// <summary>
    /// Additional inline styles
    /// </summary>
    [Parameter] public string Style { get; set; } = string.Empty;
}