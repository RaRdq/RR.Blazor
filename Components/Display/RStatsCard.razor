@* RStatsCard - Generic dashboard statistics card component *@

@using RR.Blazor.Enums
@using RR.Blazor.Components.Base
@inherits RForwardingComponentBase

<div @attributes="GetSafeAttributes()">
<RCard
       OnClick="@OnClick"
       Elevation="@Elevation"
       Class="@($"d-flex items-center justify-center {GetDensityClasses()} {Class}")">
    <div class="@GetContentClasses() w-full">
        @if (!string.IsNullOrEmpty(Icon))
        {
            <div class="@GetIconContainerClasses() icon-container-dynamic" style="--icon-size: @GetIconSize(); color: @IconColor;">
                <i class="icon">@Icon</i>
            </div>
        }
        <div class="grow">
            <div class="@GetTextClasses()">@Text</div>
            <div class="@GetValueContainerClasses()">
                <span class="@GetValueClasses() value-dynamic" style="color: var(--color-@ValueColor);">@Value</span>
                @if (!string.IsNullOrEmpty(BadgeText))
                {
                    <RChip Text="@BadgeText" StyleVariant="ChipStyle.Badge" Variant="@BadgeVariant" Size="@GetBadgeSize()" />
                }
            </div>
            @if (!string.IsNullOrEmpty(Subtitle))
            {
                <div class="@GetSubtitleClasses()">@Subtitle</div>
            }
        </div>
    </div>
</RCard>
</div>

@code {
    /// <summary>
    /// Card label text (displayed above the value)
    /// </summary>
    [Parameter] 
    [AIParameter("Text displayed as card title", Example = "Monthly Revenue")] 
    public string Text { get; set; } = string.Empty;

    /// <summary>
    /// Main value to display
    /// </summary>
    [Parameter]
    [AIParameter(Hint = "Primary statistic value to display prominently", Example = "$156,780", IsRequired = true)]
    public string Value { get; set; } = string.Empty;

    /// <summary>
    /// Optional subtitle text (displayed below the value)
    /// </summary>
    [Parameter]
    [AIParameter(Hint = "Secondary text displayed below the main value", Example = "vs. last month")]
    public string Subtitle { get; set; } = string.Empty;

    /// <summary>
    /// Material Icons icon name
    /// </summary>
    [Parameter]
    [AIParameter(Hint = "Material Icons name for visual representation", SuggestedValues = new[] { "trending_up", "attach_money", "people", "analytics", "shopping_cart" }, Example = "trending_up")]
    public string Icon { get; set; } = string.Empty;

    /// <summary>
    /// Icon background color (semantic color name without var prefix)
    /// </summary>
    [Parameter]
    [AIParameter(Hint = "Semantic color name for icon background", SuggestedValues = new[] { "interactive-primary", "success", "warning", "error", "info" }, Example = "success")]
    public string IconColor { get; set; } = "interactive-primary";

    /// <summary>
    /// Value text color (semantic color name without var prefix)
    /// </summary>
    [Parameter]
    [AIParameter(Hint = "Semantic color name for value text", SuggestedValues = new[] { "interactive-primary", "success", "warning", "error", "text-primary" }, Example = "interactive-primary")]
    public string ValueColor { get; set; } = "interactive-primary";

    /// <summary>
    /// Icon size in pixels
    /// </summary>
    [Parameter]
    [AIParameter(Hint = "Icon container size in pixels", Example = "40")]
    public int IconContainerSize { get; set; } = 40;

    /// <summary>
    /// Badge text to display next to the value
    /// </summary>
    [Parameter]
    [AIParameter(Hint = "Optional badge text shown next to value", Example = "+12%")]
    public string BadgeText { get; set; } = string.Empty;

    /// <summary>
    /// Badge variant
    /// </summary>
    [Parameter]
    [AIParameter(Hint = "Visual style for badge", SuggestedValues = new[] { "Info", "Success", "Warning", "Error" }, Example = "Success")]
    public VariantType BadgeVariant { get; set; } = VariantType.Info;

    /// <summary>
    /// Badge size
    /// </summary>
    [Parameter]
    [AIParameter(Hint = "Size of the badge component", SuggestedValues = new[] { "Small", "Medium", "Large" }, Example = "Small")]
    public SizeType BadgeSize { get; set; } = SizeType.Small;

    /// <summary>
    /// Click event handler
    /// </summary>
    [Parameter]
    [AIParameter(Hint = "Event fired when card is clicked")]
    public EventCallback OnClick { get; set; }

    
    protected override string GetDensityClasses() => Density switch
    {
        DensityType.Compact => "pa-2",
        DensityType.Dense => "pa-3",
        DensityType.Normal => "pa-4",
        DensityType.Spacious => "pa-6",
        _ => "pa-4"
    };
    
    private string GetContentClasses() => Density switch
    {
        DensityType.Compact => "d-flex items-center gap-2",
        DensityType.Dense => "d-flex items-center gap-2",
        DensityType.Normal => "d-flex items-center gap-3",
        DensityType.Spacious => "d-flex items-center gap-4",
        _ => "d-flex items-center gap-3"
    };
    
    private string GetIconContainerClasses() => Density switch
    {
        DensityType.Compact => "rounded d-flex items-center justify-center",
        DensityType.Dense => "rounded-md d-flex items-center justify-center",
        DensityType.Normal => "rounded-lg d-flex items-center justify-center",
        DensityType.Spacious => "rounded-xl d-flex items-center justify-center",
        _ => "rounded-lg d-flex items-center justify-center"
    };
    
    private int GetIconSize() => Density switch
    {
        DensityType.Compact => 20,
        DensityType.Dense => 24,
        DensityType.Normal => 32,
        DensityType.Spacious => 40,
        _ => 32
    };
    
    private string GetTextClasses() => Density switch
    {
        DensityType.Compact => "text-xs font-medium uppercase mb-0  text-muted tracking-wide",
        DensityType.Dense => "text-xs font-medium uppercase mb-0  text-muted tracking-wide",
        DensityType.Normal => "text-xs font-medium uppercase mb-1  text-muted tracking-wide",
        DensityType.Spacious => "text-sm font-medium uppercase mb-2  text-muted tracking-wide",
        _ => "text-xs font-medium uppercase mb-1  text-muted tracking-wide"
    };
    
    private string GetValueContainerClasses() => Density switch
    {
        DensityType.Compact => "d-flex items-center gap-1",
        DensityType.Dense => "d-flex items-center gap-1",
        DensityType.Normal => "d-flex items-center gap-2",
        DensityType.Spacious => "d-flex items-center gap-3",
        _ => "d-flex items-center gap-2"
    };
    
    private string GetValueClasses() => Density switch
    {
        DensityType.Compact => "text-sm font-bold",
        DensityType.Dense => "text-base font-bold",
        DensityType.Normal => "text-lg font-bold",
        DensityType.Spacious => "text-xl font-bold",
        _ => "text-lg font-bold"
    };
    
    private string GetSubtitleClasses() => Density switch
    {
        DensityType.Compact => "text-xs text-tertiary mt-0",
        DensityType.Dense => "text-xs text-tertiary mt-0",
        DensityType.Normal => "text-xs text-tertiary mt-0.5",
        DensityType.Spacious => "text-sm text-tertiary mt-1",
        _ => "text-xs text-tertiary mt-0.5"
    };
    
    private SizeType GetBadgeSize() => Density switch
    {
        DensityType.Compact => SizeType.Small,
        DensityType.Dense => SizeType.Small,
        DensityType.Normal => SizeType.Medium,
        DensityType.Spacious => SizeType.Large,
        _ => SizeType.Medium
    };
    
    private string GetIconStyle()
    {
        var iconSize = GetIconSize();
        return $"--icon-size: {iconSize}px; --icon-color: var(--color-{IconColor}); --icon-font-size: {iconSize * 0.6}px;";
    }
    
    private string GetValueStyle()
    {
        return $"--value-color: var(--color-{ValueColor});";
    }

}