@* RStatsCard - Generic dashboard statistics card component *@

@using RR.Blazor.Enums

<RCard Clickable="@Clickable" 
       OnClick="@OnClick"
       Elevation="@Elevation"
       Class="@($"d-flex items-center {GetDensityClasses()} {Class}")">
    <div class="@GetContentClasses()">
        @if (!string.IsNullOrEmpty(Icon))
        {
            <div class="@GetIconContainerClasses()" style="--icon-size: @(GetIconSize())px; --icon-color: var(--color-@IconColor); --icon-font-size: @(GetIconSize() * 0.6)px;">
                <i class="material-symbols-rounded">@Icon</i>
            </div>
        }
        <div class="grow">
            <div class="@GetTextClasses()">@Text</div>
            <div class="@GetValueContainerClasses()">
                <span class="@GetValueClasses()" style="--value-color: var(--color-@ValueColor);">@Value</span>
                @if (!string.IsNullOrEmpty(BadgeText))
                {
                    <RBadge Text="@BadgeText" Variant="@BadgeVariant" Size="@GetBadgeSize()" />
                }
            </div>
            @if (!string.IsNullOrEmpty(Subtitle))
            {
                <div class="@GetSubtitleClasses()">@Subtitle</div>
            }
        </div>
    </div>
</RCard>

@code {
    /// <summary>
    /// Card label text (displayed above the value)
    /// </summary>
    [Parameter] 
    [AIParameter("Text displayed as card title", Example = "Monthly Revenue")] 
    public string Text { get; set; } = string.Empty;

    /// <summary>
    /// Main value to display
    /// </summary>
    [Parameter] public string Value { get; set; } = string.Empty;

    /// <summary>
    /// Optional subtitle text (displayed below the value)
    /// </summary>
    [Parameter] public string Subtitle { get; set; } = string.Empty;

    /// <summary>
    /// Material Icons icon name
    /// </summary>
    [Parameter] public string Icon { get; set; } = string.Empty;

    /// <summary>
    /// Icon background color (semantic color name without var prefix)
    /// </summary>
    [Parameter] public string IconColor { get; set; } = "interactive-primary";

    /// <summary>
    /// Value text color (semantic color name without var prefix)
    /// </summary>
    [Parameter] public string ValueColor { get; set; } = "interactive-primary";

    /// <summary>
    /// Icon size in pixels
    /// </summary>
    [Parameter] public int IconSize { get; set; } = 40;

    /// <summary>
    /// Badge text to display next to the value
    /// </summary>
    [Parameter] public string BadgeText { get; set; } = string.Empty;

    /// <summary>
    /// Badge variant
    /// </summary>
    [Parameter] public BadgeVariant BadgeVariant { get; set; } = BadgeVariant.Info;

    /// <summary>
    /// Badge size
    /// </summary>
    [Parameter] public BadgeSize BadgeSize { get; set; } = BadgeSize.Small;

    /// <summary>
    /// Whether the card is clickable
    /// </summary>
    [Parameter] public bool Clickable { get; set; } = false;

    /// <summary>
    /// Click event handler
    /// </summary>
    [Parameter] public EventCallback OnClick { get; set; }

    /// <summary>
    /// Card elevation level
    /// </summary>
    [Parameter] public int Elevation { get; set; } = 2;

    /// <summary>
    /// Additional CSS classes
    /// </summary>
    [Parameter] public string Class { get; set; } = string.Empty;
    
    /// <summary>
    /// Component density level for ultra-dense layouts
    /// </summary>
    [Parameter] public ComponentDensity Density { get; set; } = ComponentDensity.Normal;
    
    private string GetDensityClasses() => Density switch
    {
        ComponentDensity.Compact => "pa-2",
        ComponentDensity.Dense => "pa-3",
        ComponentDensity.Normal => "pa-4",
        ComponentDensity.Spacious => "pa-6",
        _ => "pa-4"
    };
    
    private string GetContentClasses() => Density switch
    {
        ComponentDensity.Compact => "d-flex items-center gap-2",
        ComponentDensity.Dense => "d-flex items-center gap-2",
        ComponentDensity.Normal => "d-flex items-center gap-3",
        ComponentDensity.Spacious => "d-flex items-center gap-4",
        _ => "d-flex items-center gap-3"
    };
    
    private string GetIconContainerClasses() => Density switch
    {
        ComponentDensity.Compact => "rounded d-flex items-center justify-center",
        ComponentDensity.Dense => "rounded-md d-flex items-center justify-center",
        ComponentDensity.Normal => "rounded-lg d-flex items-center justify-center",
        ComponentDensity.Spacious => "rounded-xl d-flex items-center justify-center",
        _ => "rounded-lg d-flex items-center justify-center"
    };
    
    private int GetIconSize() => Density switch
    {
        ComponentDensity.Compact => 20,
        ComponentDensity.Dense => 24,
        ComponentDensity.Normal => 32,
        ComponentDensity.Spacious => 40,
        _ => 32
    };
    
    private string GetTextClasses() => Density switch
    {
        ComponentDensity.Compact => "text-xs font-medium uppercase mb-0 text-secondary tracking-wide",
        ComponentDensity.Dense => "text-xs font-medium uppercase mb-0 text-secondary tracking-wide",
        ComponentDensity.Normal => "text-xs font-medium uppercase mb-1 text-secondary tracking-wide",
        ComponentDensity.Spacious => "text-sm font-medium uppercase mb-2 text-secondary tracking-wide",
        _ => "text-xs font-medium uppercase mb-1 text-secondary tracking-wide"
    };
    
    private string GetValueContainerClasses() => Density switch
    {
        ComponentDensity.Compact => "d-flex items-center gap-1",
        ComponentDensity.Dense => "d-flex items-center gap-1",
        ComponentDensity.Normal => "d-flex items-center gap-2",
        ComponentDensity.Spacious => "d-flex items-center gap-3",
        _ => "d-flex items-center gap-2"
    };
    
    private string GetValueClasses() => Density switch
    {
        ComponentDensity.Compact => "text-sm font-bold",
        ComponentDensity.Dense => "text-base font-bold",
        ComponentDensity.Normal => "text-lg font-bold",
        ComponentDensity.Spacious => "text-xl font-bold",
        _ => "text-lg font-bold"
    };
    
    private string GetSubtitleClasses() => Density switch
    {
        ComponentDensity.Compact => "text-xs text-tertiary mt-0",
        ComponentDensity.Dense => "text-xs text-tertiary mt-0",
        ComponentDensity.Normal => "text-xs text-tertiary mt-0.5",
        ComponentDensity.Spacious => "text-sm text-tertiary mt-1",
        _ => "text-xs text-tertiary mt-0.5"
    };
    
    private BadgeSize GetBadgeSize() => Density switch
    {
        ComponentDensity.Compact => BadgeSize.Small,
        ComponentDensity.Dense => BadgeSize.Small,
        ComponentDensity.Normal => BadgeSize.Medium,
        ComponentDensity.Spacious => BadgeSize.Large,
        _ => BadgeSize.Medium
    };

}