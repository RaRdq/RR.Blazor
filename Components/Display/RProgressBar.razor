@namespace RR.Blazor.Components
@using RR.Blazor.Enums
@using RR.Blazor.Components.Base
@inherits RForwardingComponentBase

<div class="progress-container w-full @Class" @attributes="GetSafeAttributes()">
    @if (ShowLabel && !string.IsNullOrEmpty(Text))
    {
        <div class="progress-label @GetLabelSpacingClasses() @GetLabelSizeClasses() font-medium text-secondary">@Text</div>
    }
    <div class="progress relative @GetProgressClasses() @GetProgressContainerClasses() bg-surface-secondary rounded-full overflow-hidden">
        <div class="progress-bar @GetProgressBarClasses() h-full d-flex items-center justify-center text-inverse @GetProgressBarTextClasses() font-medium progress-dynamic" 
             role="progressbar" 
             style="@GetProgressBarStyleVariables()"
             aria-valuenow="@Value" 
             aria-valuemin="0" 
             aria-valuemax="100">
            @if (ShowLabel && LabelInside)
            {
                <span class="progress-bar-label @GetInnerLabelPaddingClasses() text-truncate">@GetFormattedValue()</span>
            }
        </div>
    </div>
    @if (ShowLabel && !LabelInside && string.IsNullOrEmpty(Text))
    {
        <div class="progress-value @GetValueSpacingClasses() @GetValueSizeClasses() text-secondary text-right">@GetFormattedValue()</div>
    }
</div>

@code {
    [Parameter] public double Value { get; set; }
    [Parameter] public bool ShowLabel { get; set; } = true;
    [Parameter] 
    [AIParameter("Progress bar label text", Example = "Loading Progress")] 
    public string Text { get; set; }
    [Parameter] public bool LabelInside { get; set; } = false;
    [Parameter] public string LabelFormat { get; set; } = "{0}%";
    [Parameter] public ProgressVariant Variant { get; set; } = ProgressVariant.Primary;
    [Parameter] public ProgressSize Size { get; set; } = ProgressSize.Medium;
    [Parameter] public bool Indeterminate { get; set; }
    [Parameter] public bool Striped { get; set; }
    [Parameter] public bool Animated { get; set; }
    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter] public ComponentDensity Density { get; set; } = ComponentDensity.Normal;

    private string GetProgressClasses()
    {
        var classes = new List<string>();
        

        var baseHeight = Size switch
        {
            ProgressSize.Small => "h-2",
            ProgressSize.Large => "h-6",
            _ => "h-4"
        };
        

        classes.Add(Density switch
        {
            ComponentDensity.Compact when Size == ProgressSize.Small => "h-1",
            ComponentDensity.Compact when Size == ProgressSize.Large => "h-5",
            ComponentDensity.Compact => "h-3",
            ComponentDensity.Dense when Size == ProgressSize.Small => "h-2",
            ComponentDensity.Dense when Size == ProgressSize.Large => "h-6",
            ComponentDensity.Dense => "h-4",
            ComponentDensity.Spacious when Size == ProgressSize.Small => "h-3",
            ComponentDensity.Spacious when Size == ProgressSize.Large => "h-8",
            ComponentDensity.Spacious => "h-5",
            _ => baseHeight
        });
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }

    private string GetLabelSpacingClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "mb-1",
            ComponentDensity.Dense => "mb-2",
            ComponentDensity.Normal => "mb-2",
            ComponentDensity.Spacious => "mb-3",
            _ => "mb-2"
        };
    }

    private string GetLabelSizeClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "text-xs",
            ComponentDensity.Dense => "text-sm",
            ComponentDensity.Normal => "text-sm",
            ComponentDensity.Spacious => "text-base",
            _ => "text-sm"
        };
    }

    private string GetProgressBarTextClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "text-xs",
            ComponentDensity.Dense => "text-xs",
            ComponentDensity.Normal => "text-xs",
            ComponentDensity.Spacious => "text-sm",
            _ => "text-xs"
        };
    }

    private string GetInnerLabelPaddingClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "pl-1 pr-1",
            ComponentDensity.Dense => "pl-2 pr-2",
            ComponentDensity.Normal => "pl-2 pr-2",
            ComponentDensity.Spacious => "pl-3 pr-3",
            _ => "pl-2 pr-2"
        };
    }

    private string GetValueSpacingClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "mt-1",
            ComponentDensity.Dense => "mt-1",
            ComponentDensity.Normal => "mt-1",
            ComponentDensity.Spacious => "mt-2",
            _ => "mt-1"
        };
    }

    private string GetValueSizeClasses()
    {
        return Density switch
        {
            ComponentDensity.Compact => "text-xs",
            ComponentDensity.Dense => "text-sm",
            ComponentDensity.Normal => "text-sm",
            ComponentDensity.Spacious => "text-base",
            _ => "text-sm"
        };
    }

    private string GetProgressBarClasses()
    {
        var classes = new List<string> { "fill-dynamic" };
        
        if (Striped)
        {
            classes.Add("progress-bar-striped");
        }
        
        if (Animated && !Indeterminate)
        {
            classes.Add("progress-bar-animated");
        }
        
        return string.Join(" ", classes);
    }

    private string GetProgressBarStyleVariables()
    {
        var styles = new List<string>();
        
        // Set fill color based on variant
        var fillColor = Variant switch
        {
            ProgressVariant.Success => "var(--color-success)",
            ProgressVariant.Warning => "var(--color-warning)",
            ProgressVariant.Danger or ProgressVariant.Error => "var(--color-error)",
            ProgressVariant.Info => "var(--color-info)",
            _ => "var(--color-primary)"
        };
        styles.Add($"--fill-color: {fillColor}");
        
        // Set progress width
        if (!Indeterminate)
        {
            var percentage = Math.Max(0, Math.Min(100, Value));
            styles.Add($"--progress-width: {percentage}%");
        }
        
        return string.Join("; ", styles);
    }

    private string GetProgressContainerClasses()
    {
        var classes = new List<string>();
        
        if (Indeterminate)
        {
            classes.Add("progress-indeterminate");
        }
        
        return string.Join(" ", classes);
    }

    private string GetFormattedValue()
    {
        if (Indeterminate)
        {
            return "Processing...";
        }
        
        return string.Format(LabelFormat, Value);
    }
}

