@namespace RR.Blazor.Components
@using RR.Blazor.Enums
@using RR.Blazor.Components.Base
@using RR.Blazor.Utilities
@inherits RForwardingComponentBase

<div class="progress-container @GetContainerClasses()" @attributes="GetSafeAttributes()">
    @if (ShowLabel && !string.IsNullOrEmpty(Text))
    {
        <div class="progress-label @GetLabelClasses()">@Text</div>
    }
    <div class="progress @GetProgressClasses()">
        <div class="progress-bar @GetProgressBarClasses()" 
             role="progressbar" 
             style="@GetProgressBarStyleVariables()"
             aria-valuenow="@Value" 
             aria-valuemin="0" 
             aria-valuemax="100">
            @if (ShowLabel && LabelInside)
            {
                <span class="progress-bar-label">@GetFormattedValue()</span>
            }
        </div>
    </div>
    @if (ShowLabel && !LabelInside && string.IsNullOrEmpty(Text))
    {
        <div class="progress-value @GetValueClasses()">@GetFormattedValue()</div>
    }
</div>

@code {
    [Parameter] public double Value { get; set; }
    [Parameter] public bool ShowLabel { get; set; } = true;
    [Parameter] 
    [AIParameter("Progress bar label text", Example = "Loading Progress")] 
    public string Text { get; set; }
    [Parameter] public bool LabelInside { get; set; } = false;
    [Parameter] public string LabelFormat { get; set; } = "{0}%";
    [Parameter] public ProgressVariant Variant { get; set; } = ProgressVariant.Primary;
    [Parameter] public SizeType Size { get; set; } = SizeType.Medium;
    [Parameter] public bool Indeterminate { get; set; }
    [Parameter] public Direction Direction { get; set; } = Direction.Right;
    [Parameter] public bool Striped { get; set; }
    [Parameter] public bool Animated { get; set; }

    private string GetContainerClasses()
    {
        var classes = new List<string> { "w-full" };
            
        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);
            
        return string.Join(" ", classes);
    }

    private string GetProgressClasses()
    {
        var classes = new List<string> { "progress" };
        
        var densityClasses = DensityHelper.GetProgressDensityClasses(Density);
        if (!string.IsNullOrEmpty(densityClasses))
            classes.Add(densityClasses);
        
        if (Indeterminate)
        {
            classes.Add("progress-indeterminate");
            
            // Direction-specific classes for indeterminate
            var directionClass = Direction switch
            {
                Direction.Left => "progress-indeterminate-left",
                Direction.Right => "progress-indeterminate-right", 
                Direction.Up => "progress-indeterminate-up",
                Direction.Down => "progress-indeterminate-down",
                _ => "progress-indeterminate-right"
            };
            classes.Add(directionClass);
        }
        
        // Size variants using unified system
        classes.Add(Size switch
        {
            SizeType.Small => "progress-sm",
            SizeType.Large => "progress-lg", 
            SizeType.ExtraLarge => "progress-xl",
            _ => ""
        });
        
        // Semantic variants
        classes.Add($"progress-{Variant.ToString().ToLower()}");
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }

    private string GetLabelClasses()
    {
        var classes = new List<string> { "progress-label" };
        
        // Add density-aware text size
        classes.Add(DensityHelper.GetTextSize(Density, "base"));
        
        return string.Join(" ", classes);
    }

    private string GetValueClasses()
    {
        var classes = new List<string> { "progress-value" };
        
        // Add density-aware text size  
        classes.Add(DensityHelper.GetTextSize(Density, "sm"));
        
        return string.Join(" ", classes);
    }

    private string GetProgressBarClasses()
    {
        var classes = new List<string> { "progress-bar" };
        
        if (Striped)
        {
            classes.Add("progress-bar-striped");
        }
        
        if (Animated && !Indeterminate)
        {
            classes.Add("progress-bar-animated");
        }
        
        // Disable shimmer when label is inside
        if (ShowLabel && LabelInside)
        {
            classes.Add("progress-bar-no-shimmer");
        }
        
        return string.Join(" ", classes);
    }

    private string GetProgressBarStyleVariables()
    {
        var styles = new List<string>();
        
        // Set progress width for determinate progress
        if (!Indeterminate)
        {
            var percentage = Math.Max(0, Math.Min(100, Value));
            styles.Add($"--progress-width: {percentage.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)}%");
            styles.Add($"--progress-percentage: {percentage.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)}");
        }
        
        return string.Join("; ", styles);
    }

    private string GetFormattedValue()
    {
        if (Indeterminate)
        {
            return "Processing...";
        }
        
        return string.Format(LabelFormat, Value);
    }
}

