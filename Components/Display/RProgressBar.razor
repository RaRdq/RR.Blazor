@namespace RR.Blazor.Components
@using RR.Blazor.Enums

<div class="progress-container w-full @Class">
    @if (ShowLabel && !string.IsNullOrEmpty(Text))
    {
        <div class="progress-label mb-2 text-sm font-medium text-secondary">@Text</div>
    }
    <div class="progress relative @GetProgressClasses() bg-surface-secondary rounded-full overflow-hidden">
        <div class="progress-bar @GetProgressBarClasses() h-full transition-all duration-300 flex items-center justify-center text-inverse text-xs font-medium" 
             role="progressbar" 
             style="@GetProgressBarStyle()"
             aria-valuenow="@Value" 
             aria-valuemin="0" 
             aria-valuemax="100">
            @if (ShowLabel && LabelInside)
            {
                <span class="progress-bar-label pl-2 pr-2 whitespace-nowrap overflow-hidden text-ellipsis">@GetFormattedValue()</span>
            }
        </div>
    </div>
    @if (ShowLabel && !LabelInside && string.IsNullOrEmpty(Text))
    {
        <div class="progress-value mt-1 text-sm text-secondary text-right">@GetFormattedValue()</div>
    }
</div>

@code {
    [Parameter] public double Value { get; set; }
    [Parameter] public bool ShowLabel { get; set; } = true;
    [Parameter] 
    [AIParameter("Progress bar label text", Example = "Loading Progress")] 
    public string Text { get; set; }
    [Parameter] public bool LabelInside { get; set; } = false;
    [Parameter] public string LabelFormat { get; set; } = "{0}%";
    [Parameter] public ProgressVariant Variant { get; set; } = ProgressVariant.Primary;
    [Parameter] public ProgressSize Size { get; set; } = ProgressSize.Medium;
    [Parameter] public bool Indeterminate { get; set; }
    [Parameter] public bool Striped { get; set; }
    [Parameter] public bool Animated { get; set; }
    [Parameter] public string Class { get; set; } = string.Empty;

    private string GetProgressClasses()
    {
        var classes = new List<string>();
        
        classes.Add(Size switch
        {
            ProgressSize.Small => "h-2",
            ProgressSize.Large => "h-6",
            _ => "h-4"
        });
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }

    private string GetProgressBarClasses()
    {
        var classes = new List<string>();
        
        classes.Add(Variant switch
        {
            ProgressVariant.Success => "progress-bar-fill-success",
            ProgressVariant.Warning => "progress-bar-fill-warning",
            ProgressVariant.Danger => "progress-bar-fill-error",
            ProgressVariant.Info => "progress-bar-fill-info",
            _ => "progress-bar-fill-primary"
        });
        
        if (Striped)
        {
            classes.Add("progress-bar-striped");
        }
        
        if (Animated || Indeterminate)
        {
            classes.Add("animate-pulse");
        }
        
        if (Indeterminate)
        {
            classes.Add("progress-bar-indeterminate");
        }
        
        return string.Join(" ", classes);
    }

    private string GetProgressBarStyle()
    {
        if (Indeterminate)
        {
            return "";
        }
        
        var percentage = Math.Max(0, Math.Min(100, Value));
        return $"width: {percentage}%";
    }

    private string GetFormattedValue()
    {
        if (Indeterminate)
        {
            return "Processing...";
        }
        
        return string.Format(LabelFormat, Value);
    }
}

