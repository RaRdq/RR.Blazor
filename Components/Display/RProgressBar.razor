@namespace RR.Blazor.Components
@using RR.Blazor.Enums

<div class="progress-container @Class">
    @if (ShowLabel && !string.IsNullOrEmpty(Label))
    {
        <div class="progress-label">@Label</div>
    }
    <div class="progress @GetProgressClasses()">
        <div class="progress-bar @GetProgressBarClasses()" 
             role="progressbar" 
             style="@GetProgressBarStyle()"
             aria-valuenow="@Value" 
             aria-valuemin="0" 
             aria-valuemax="100">
            @if (ShowLabel && LabelInside)
            {
                <span class="progress-bar-label">@GetFormattedValue()</span>
            }
        </div>
    </div>
    @if (ShowLabel && !LabelInside && string.IsNullOrEmpty(Label))
    {
        <div class="progress-value">@GetFormattedValue()</div>
    }
</div>

@code {
    [Parameter] public double Value { get; set; }
    [Parameter] public bool ShowLabel { get; set; } = true;
    [Parameter] public string Label { get; set; }
    [Parameter] public bool LabelInside { get; set; } = false;
    [Parameter] public string LabelFormat { get; set; } = "{0}%";
    [Parameter] public ProgressVariant Variant { get; set; } = ProgressVariant.Primary;
    [Parameter] public ProgressSize Size { get; set; } = ProgressSize.Medium;
    [Parameter] public bool Indeterminate { get; set; }
    [Parameter] public bool Striped { get; set; }
    [Parameter] public bool Animated { get; set; }
    [Parameter] public string Class { get; set; } = string.Empty;

    private string GetProgressClasses()
    {
        var classes = new List<string>();
        
        classes.Add(Size switch
        {
            ProgressSize.Small => "progress--sm",
            ProgressSize.Large => "progress--lg",
            _ => ""
        });
        
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }

    private string GetProgressBarClasses()
    {
        var classes = new List<string>();
        
        classes.Add(Variant switch
        {
            ProgressVariant.Success => "progress-bar--success",
            ProgressVariant.Warning => "progress-bar--warning",
            ProgressVariant.Danger => "progress-bar--danger",
            ProgressVariant.Info => "progress-bar--info",
            _ => "progress-bar--primary"
        });
        
        if (Striped)
        {
            classes.Add("progress-bar--striped");
        }
        
        if (Animated || Indeterminate)
        {
            classes.Add("progress-bar--animated");
        }
        
        if (Indeterminate)
        {
            classes.Add("progress-bar--indeterminate");
        }
        
        return string.Join(" ", classes);
    }

    private string GetProgressBarStyle()
    {
        if (Indeterminate)
        {
            return "";
        }
        
        var percentage = Math.Max(0, Math.Min(100, Value));
        return $"width: {percentage}%";
    }

    private string GetFormattedValue()
    {
        if (Indeterminate)
        {
            return "Processing...";
        }
        
        return string.Format(LabelFormat, Value);
    }
}

<style>
    .progress-container {
        width: 100%;
    }
    
    .progress-label {
        margin-bottom: 0.5rem;
        font-size: 0.875rem;
        font-weight: 500;
        color: var(--color-text-secondary);
    }
    
    .progress-value {
        margin-top: 0.25rem;
        font-size: 0.875rem;
        color: var(--color-text-secondary);
        text-align: right;
    }
    
    .progress {
        position: relative;
        height: 1rem;
        background-color: var(--color-background-secondary);
        border-radius: var(--radius-full);
        overflow: hidden;
    }
    
    .progress--sm {
        height: 0.5rem;
    }
    
    .progress--lg {
        height: 1.5rem;
    }
    
    .progress-bar {
        height: 100%;
        background-color: var(--color-primary);
        transition: width 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 0.75rem;
        font-weight: 500;
    }
    
    .progress-bar--primary {
        background-color: var(--color-primary);
    }
    
    .progress-bar--success {
        background-color: var(--color-success);
    }
    
    .progress-bar--warning {
        background-color: var(--color-warning);
    }
    
    .progress-bar--danger {
        background-color: var(--color-danger);
    }
    
    .progress-bar--info {
        background-color: var(--color-info);
    }
    
    .progress-bar--striped {
        background-image: linear-gradient(
            45deg,
            var(--color-white-alpha-15) 25%,
            transparent 25%,
            transparent 50%,
            var(--color-white-alpha-15) 50%,
            var(--color-white-alpha-15) 75%,
            transparent 75%,
            transparent
        );
        background-size: 1rem 1rem;
    }
    
    .progress-bar--animated {
        animation: progress-bar-stripes 1s linear infinite;
    }
    
    .progress-bar--indeterminate {
        width: 30% !important;
        animation: progress-indeterminate 1.5s ease-in-out infinite;
    }
    
    .progress-bar-label {
        padding: 0 0.5rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    
    .progress--sm .progress-bar-label {
        display: none;
    }
    
    @@keyframes progress-bar-stripes {
        0% {
            background-position: 1rem 0;
        }
        100% {
            background-position: 0 0;
        }
    }
    
    @@keyframes progress-indeterminate {
        0% {
            transform: translateX(-100%);
        }
        100% {
            transform: translateX(400%);
        }
    }
</style>