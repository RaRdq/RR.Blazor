@namespace RR.Blazor.Components

<div class="empty-state flex items-center justify-center min-h-100 pa-12 text-center @Class">
    <div class="content max-w-lg">
        @if (!string.IsNullOrEmpty(Image))
        {
            <div class="empty-state-image ma-auto mb-6">
                <img src="@Image" alt="@Text" class="max-w-sm h-auto" />
            </div>
        }
        else if (!string.IsNullOrEmpty(Icon))
        {
            <div class="empty-state-icon d-inline-flex items-center justify-center w-80 h-80 ma-auto mb-6 bg-surface-secondary rounded-full text-muted">
                <i class="material-symbols-rounded text-5xl">@Icon</i>
            </div>
        }
        
        <h3 class="empty-state-title ma-0 mb-2 text-xl font-semibold text-primary">@Text</h3>
        
        @if (!string.IsNullOrEmpty(Description))
        {
            <p class="empty-state-description ma-0 mb-6 text-secondary leading-relaxed">@Description</p>
        }
        
        @if (ChildContent != null)
        {
            <div class="empty-state-custom mt-4 mb-4">
                @ChildContent
            </div>
        }
        
        @if (!string.IsNullOrEmpty(ActionText) && OnAction.HasDelegate)
        {
            <div class="empty-state-actions mt-6">
                <RButton Variant="ButtonVariant.Primary" OnClick="OnAction" Icon="@ButtonIcon" IconPosition="IconPosition.Start">
                    @ActionText
                </RButton>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string Icon { get; set; } = "inbox";
    
    /// <summary>
    /// The primary text content to display. Recommended parameter for all text content.
    /// </summary>
    [Parameter] public string Text { get; set; } = "No data available";
    
    [Parameter] public string Description { get; set; }
    [Parameter] public string ActionText { get; set; }
    [Parameter] public string ButtonIcon { get; set; }
    [Parameter] public EventCallback OnAction { get; set; }
    [Parameter] public string Image { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public string Class { get; set; } = string.Empty;
}

