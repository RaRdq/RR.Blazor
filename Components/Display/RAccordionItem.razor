@namespace RR.Blazor.Components
@using RR.Blazor.Components.Base
@inherits RForwardingComponentBase

<div class="accordion-item @GetItemClasses()" @attributes="GetSafeAttributes()">
    <button type="button" 
            class="accordion-header @(Disabled ? "accordion-header-disabled" : "")"
            @onclick="ToggleExpanded"
            disabled="@Disabled"
            aria-expanded="@(isExpanded ? "true" : "false")"
            aria-controls="@contentId">
        
        @if (Parent.IconPosition == AccordionIconPosition.Left)
        {
            <span class="accordion-icon material-symbols-rounded">
                @(isExpanded ? Parent.CollapseIcon : Parent.ExpandIcon)
            </span>
        }
        
        <div class="accordion-header-content">
            @if (!string.IsNullOrEmpty(Icon))
            {
                <i class="material-symbols-rounded accordion-header-icon">@Icon</i>
            }
            
            <span class="accordion-title">@Text</span>
            
            @if (!string.IsNullOrEmpty(Subtitle))
            {
                <span class="accordion-subtitle">@Subtitle</span>
            }
            
            @if (HeaderContent != null)
            {
                @HeaderContent
            }
        </div>
        
        @if (Parent.IconPosition == AccordionIconPosition.Right)
        {
            <span class="accordion-icon material-symbols-rounded">
                @(isExpanded ? Parent.CollapseIcon : Parent.ExpandIcon)
            </span>
        }
    </button>
    
    <div id="@contentId" 
         class="accordion-collapse @(isExpanded ? "accordion-collapse-expanded" : "")">
        <div class="accordion-body">
            @ChildContent
        </div>
    </div>
</div>

@code {
    /// <summary>Primary text content (standardized parameter)</summary>
    [Parameter] public string Text { get; set; }
    
    /// <summary>Accordion item subtitle</summary>
    [Parameter] public string Subtitle { get; set; }
    
    /// <summary>Icon to display in header</summary>
    [Parameter] public string Icon { get; set; }
    
    /// <summary>Whether the item is expanded initially</summary>
    [Parameter] public bool Expanded { get; set; }
    
    /// <summary>Whether the item is disabled</summary>
    [Parameter] public bool Disabled { get; set; }
    
    /// <summary>Unique identifier for the item</summary>
    [Parameter] public string Id { get; set; } = $"accordion-item-{Guid.NewGuid():N}";
    
    /// <summary>Additional header content</summary>
    [Parameter] public RenderFragment HeaderContent { get; set; }
    
    /// <summary>Item content</summary>
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    /// <summary>Additional CSS classes</summary>
    [Parameter] public string Class { get; set; }
    
    /// <summary>Parent accordion (cascaded)</summary>
    [CascadingParameter] private RAccordion Parent { get; set; }
    
    private bool isExpanded;
    private string contentId => $"accordion-content-{Id}";
    
    protected override void OnInitialized()
    {
        if (Parent == null)
        {
            throw new InvalidOperationException("RAccordionItem must be used inside an RAccordion component");
        }
        
        isExpanded = Expanded;
    }
    
    protected override void OnParametersSet()
    {
        isExpanded = Parent?.IsExpanded(Id) ?? false;
    }
    
    private async Task ToggleExpanded()
    {
        if (Disabled) return;
        
        await Parent.ToggleItem(Id);
        isExpanded = Parent.IsExpanded(Id);
    }
    
    private string GetItemClasses()
    {
        var classes = new List<string>();
        
        if (isExpanded)
        {
            classes.Add("accordion-item-expanded");
        }
        
        if (Disabled)
        {
            classes.Add("accordion-item-disabled");
        }
        
        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes);
    }
}

@* Usage Examples:

<!-- Basic item -->
<RAccordionItem Text="Simple Item">
    This is the content of the accordion item.
</RAccordionItem>

<!-- With icon and subtitle -->
<RAccordionItem Text="Advanced Item" 
                Icon="settings" 
                SubText="Configure your preferences">
    Advanced content here
</RAccordionItem>

<!-- Initially expanded -->
<RAccordionItem Text="Expanded by Default" Expanded="true">
    This item starts expanded
</RAccordionItem>

<!-- Disabled item -->
<RAccordionItem Text="Disabled Item" Disabled="true">
    This content cannot be accessed
</RAccordionItem>

<!-- Backward compatibility: Title parameter still works -->
<RAccordionItem Text="Legacy Usage" 
                Subtitle="Still supported but deprecated">
    Legacy content
</RAccordionItem>
*@