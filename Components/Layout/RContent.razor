@** 
<summary>
Automatic content wrapper for app shell layouts with smart positioning and responsive behavior.
Similar to MudContent but optimized for RR.Blazor patterns.
</summary>
<category>Layout</category>
<complexity>Simple</complexity>
<ai-prompt>Create content wrapper that automatically handles app shell positioning</ai-prompt>
<ai-common-use>page content wrapper, automatic spacing, responsive content areas</ai-common-use>
<ai-avoid>Don't use for components that need custom positioning. Use for main page content only.</ai-avoid>
<ai-pattern name="automatic">Zero configuration for standard content positioning</ai-pattern>
<ai-pattern name="constrained">MaxWidth parameter for reading-optimized content</ai-pattern>
<ai-pattern name="full-width">FullWidth parameter for dashboard and data-heavy pages</ai-pattern>
**@

@using RR.Blazor.Enums
@using RR.Blazor.Attributes
@using RR.Blazor.Components.Base
@inherits RComponentBase

@attribute [Component("RContent", Category = "Layout", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(Prompt = "Create content wrapper that automatically handles app shell positioning", 
                       CommonUse = "page content wrapper, automatic spacing, responsive content areas", 
                       AvoidUsage = "Don't use for components that need custom positioning")]

<div class="@GetContentClasses()" style="@GetContentStyleVariables()">
    @ChildContent
</div>

@code {
    [Parameter, AIParameter("Content max width", "none, sm, md, lg, xl, 2xl, or custom CSS value")]
    public string MaxWidth { get; set; } = "none";
    
    [Parameter, AIParameter("Center content", "true for forms and reading content, false for dashboards")]
    public bool Centered { get; set; } = false;
    
    
    private string GetContentClasses()
    {
        var classes = new List<string> { "content" };
        

        classes.Add(Density switch
        {
            DensityType.Dense => "content-dense",
            DensityType.Compact => "content-compact", 
            DensityType.Spacious => "content-spacious",
            _ => "content-normal"
        });
        

        if (FullWidth)
        {
            classes.Add("content-full-width");
        }
        else
        {
            classes.Add("content-padded");
        }
        

        if (Centered)
        {
            classes.Add("content-centered");
        }
        

        if (MaxWidth != "none")
        {
            classes.Add($"content-max-{MaxWidth}");
        }
        
        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetContentStyleVariables()
    {
        var styles = new List<string>();
        

        if (!string.IsNullOrEmpty(MaxWidth) && 
            MaxWidth != "none" && 
            !MaxWidth.StartsWith("sm") && 
            !MaxWidth.StartsWith("md") && 
            !MaxWidth.StartsWith("lg") && 
            !MaxWidth.StartsWith("xl") && 
            !MaxWidth.StartsWith("2xl"))
        {
            styles.Add($"--max-width: {MaxWidth}");
        }
        
        if (!string.IsNullOrEmpty(Style))
        {
            styles.Add(Style);
        }
        
        return string.Join("; ", styles);
    }
}