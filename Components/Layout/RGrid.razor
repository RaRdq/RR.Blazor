@namespace RR.Blazor.Components.Layout
@using RR.Blazor.Enums

@**
<summary>Professional responsive grid component with RR.Blazor patterns</summary>
<category>Layout</category>
<complexity>Simple</complexity>
<ai-prompt>grid, layout, responsive, stats, cards</ai-prompt>
<ai-common-use>Dashboard grids, stats cards, responsive layouts, card containers</ai-common-use>
<ai-pattern name="stats-grid">
<RGrid Type="GridType.Stats" Variant="GridVariant.Compact">
    <RStatsCard Text="Monthly" Value="$892K" Icon="trending_up" />
    <RStatsCard Text="Quarterly" Value="$2.1M" Icon="bar_chart" />
</RGrid>
<!-- Now using utility-first classes: d-grid grid-auto-fit-200 gap-2 w-full -->
</ai-pattern>
**@

<div class="@GetGridClasses()">
    @ChildContent
</div>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public GridType Type { get; set; } = GridType.Auto;
    [Parameter] public GridVariant Variant { get; set; } = GridVariant.Default;
    [Parameter] public string? Class { get; set; }
    [Parameter] public int? MinColumnWidth { get; set; }
    [Parameter] public string? Gap { get; set; }

    private string GetGridClasses()
    {
        var classes = new List<string>();

        switch (Type)
        {
            case GridType.Stats:

                classes.Add("d-grid");
                classes.Add("w-full");
                classes.Add(Variant == GridVariant.Compact ? "grid-auto-fit-200" : "grid-auto-fit-250");
                classes.Add(Variant == GridVariant.Compact ? "gap-2" : "gap-4");
                break;
            case GridType.Action:
                classes.Add("action-grid");
                break;
            case GridType.Auto:
            default:
                classes.Add("grid-auto-fit");
                break;
        }


        if (Type == GridType.Stats && Variant == GridVariant.Spacious)
        {
            classes.RemoveAll(c => c.StartsWith("gap-"));
            classes.Add("gap-6");
        }

        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);

        return string.Join(" ", classes);
    }

    private string GetGridBaseClass()
    {
        return Type switch
        {
            GridType.Stats => "d-grid", // Now using utility-first approach
            GridType.Action => "action-grid",
            _ => "grid-auto-fit"
        };
    }

    protected override void OnParametersSet()
    {
        if (MinColumnWidth.HasValue || !string.IsNullOrEmpty(Gap))
        {

        }
    }
}