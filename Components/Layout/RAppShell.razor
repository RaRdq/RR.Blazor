@** 
<summary>
Complete application shell with header, sidebar, navigation, search, and theme support.
Zero-config setup for enterprise Blazor applications with professional styling and full responsiveness.
</summary>
<category>Layout</category>
<complexity>Complex</complexity>
<ai-prompt>Create complete app layout with header and sidebar</ai-prompt>
<ai-common-use>main app layout, admin dashboards, enterprise applications, SaaS platforms</ai-common-use>
<ai-avoid>Don't use for simple pages without navigation. Use RSection for content organization instead.</ai-avoid>
<ai-pattern name="zero-config">Title only for minimal app setup</ai-pattern>
<ai-pattern name="full-enterprise">All parameters for complete enterprise application</ai-pattern>
<ai-pattern name="dashboard-layout">NavigationItems + CurrentUser for admin dashboards</ai-pattern>
<ai-pattern name="responsive-shell">Auto-responsive sidebar and mobile-friendly behavior</ai-pattern>
**@

@using RR.Blazor.Models
@using RR.Blazor.Services
@using RR.Blazor.Enums
@using RR.Blazor.Attributes
@using Microsoft.AspNetCore.Components.Routing

@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject IThemeService ThemeService
@inject IToastService ToastService
@inject IAppSearchService SearchService
@inject IAppConfigurationService ConfigService
@implements IAsyncDisposable

@attribute [Component("RAppShell", Category = "Layout", Complexity = ComponentComplexity.Complex)]
@attribute [AIOptimized(Prompt = "Create complete app layout with header and sidebar", 
                       CommonUse = "main app layout, admin dashboards, enterprise applications", 
                       AvoidUsage = "Don't use for simple pages without navigation")]

<RThemeProvider>
<div class="app-shell min-h-screen flex" data-theme="@GetEffectiveTheme()">
    <!-- Sidebar -->
    @if (ShowSidebar)
    {
        <aside class="sidebar @(sidebarCollapsed ? "sidebar-collapsed" : "") @(sidebarOpen || !IsMobile ? "" : "sidebar-closed")">
            <!-- Navigation -->
            <nav class="sidebar-nav">
                @if (Navigation != null)
                {
                    <CascadingValue Value="sidebarCollapsed" Name="SidebarCollapsed">
                        @Navigation
                    </CascadingValue>
                }
                else if (NavigationItems?.Any() == true)
                {
                    <RNavMenu Items="@GetVisibleNavItems()" />
                }
            </nav>
            
            <!-- Sidebar Footer -->
            @if (SidebarFooter != null)
            {
                <div class="sidebar-footer">
                    @SidebarFooter
                </div>
            }
            else if (CurrentUser != null && ShowUserMenu)
            {
                <div class="sidebar-footer">
                    <div class="user-menu-compact flex items-center gap-3 pa-3">
                        <RAvatar Text="@CurrentUser.GetInitials()" 
                                 ImageSrc="@CurrentUser.Avatar"
                                 Size="AvatarSize.Small"
                                 ShowStatus="true"
                                 Status="@(CurrentUser.IsOnline ? AvatarStatus.Online : AvatarStatus.Offline)" />
                        @if (!sidebarCollapsed)
                        {
                            <div class="grow min-w-0">
                                <div class="text-sm font-medium text-truncate">@CurrentUser.GetDisplayName()</div>
                                <div class="text-xs text-secondary text-truncate">@CurrentUser.Role</div>
                            </div>
                        }
                    </div>
                </div>
            }
        </aside>
    }

    <!-- Main Content -->
    <div class="main-content @(ShowSidebar ? (sidebarCollapsed ? "main-content-collapsed" : "main-content-expanded") : "")" style="@(IsMobile && ShowSidebar ?"margin-left: 0;" : "")">
        <!-- Header -->
        @if (ShowHeader)
        {
            <header class="header">
                <div class="header-left">
                    @if (ShowSidebar && ShowSidebarToggle)
                    {
                        <RButton Icon="@(IsMobile ? "menu" : (sidebarCollapsed ? "menu_open" : "menu"))" IconPosition="IconPosition.Start"
                                 Variant="ButtonVariant.Ghost"
                                 Size="ButtonSize.Small"
                                 OnClick="ToggleSidebar"
                                 AriaLabel="Toggle sidebar" />
                    }
                    
                    <!-- Logo Area -->
                    <div class="header-logo">
                        @if (LogoContent != null)
                        {
                            @LogoContent
                        }
                        else if (!string.IsNullOrEmpty(Logo))
                        {
                            <img src="@Logo" alt="@(Title)" class="header-logo-img" />
                        }
                        else
                        {
                            <span class="header-brand">@Title</span>
                        }
                    </div>
                    
                    @if (HeaderLeft != null)
                    {
                        @HeaderLeft
                    }
                    else
                    {
                        <div class="header-title-group">
                            <h1 class="header-title">@PageTitle</h1>
                            @if (!string.IsNullOrEmpty(PageSubtitle))
                            {
                                <p class="header-subtitle">@PageSubtitle</p>
                            }
                        </div>
                    }
                    
                    @if (ShowBreadcrumbs && Breadcrumbs?.Any() == true)
                    {
                        <nav class="breadcrumbs ml-4" aria-label="Breadcrumb">
                            @foreach (var (item, index) in Breadcrumbs.Select((item, index) => (item, index)))
                            {
                                @if (index > 0)
                                {
                                    <i class="material-symbols-rounded text-sm text-secondary ml-1 mr-1">chevron_right</i>
                                }
                                @if (index == Breadcrumbs.Count - 1)
                                {
                                    <span class="text-sm text-secondary">@item.Text</span>
                                }
                                else
                                {
                                    <a href="@item.Href" class="text-sm text-primary hover:text-primary">@item.Text</a>
                                }
                            }
                        </nav>
                    }
                </div>
                
                <div class="header-right">
                    @if (ShowSearch)
                    {
                        <div class="search-wrapper flex items-center gap-2 mr-3">
                            @if (SearchCollapsible)
                            {
                                <div class="search-container relative @(searchExpanded ? "search-expanded" : "search-collapsed")">
                                    @if (searchExpanded)
                                    {
                                        <RFormField Type="FieldType.Search"
                                                   Placeholder="Search..."
                                                   @bind-Value="searchQuery"
                                                   @bind-Value:after="HandleSearchChange"
                                                   class="w-64 animate-fade-in" />
                                        <RButton Icon="close" IconPosition="IconPosition.Start"
                                                 Variant="ButtonVariant.Ghost"
                                                 Size="ButtonSize.Small"
                                                 OnClick="CollapseSearch"
                                                 class="ml-2" />
                                    }
                                    else
                                    {
                                        <RButton Icon="search" IconPosition="IconPosition.Start"
                                                 Variant="ButtonVariant.Ghost"
                                                 Size="ButtonSize.Small"
                                                 OnClick="ExpandSearch" />
                                    }
                                    
                                    @if (showSearchResults && searchResults.Any() && searchExpanded)
                                    {
                                        <div class="search-results absolute top-100 left-0 right-0 bg-surface-elevated shadow-lg rounded-md mt-1 pt-2 pb-2 z-50">
                                            @foreach (var result in searchResults.Take(8))
                                            {
                                                <button class="search-result-item w-full text-left pl-3 pr-3 pt-2 pb-2 hover:bg-surface-secondary flex items-center gap-3"
                                                        @onclick="() => HandleSearchResultClick(result)">
                                                    @if (!string.IsNullOrEmpty(result.Icon))
                                                    {
                                                        <i class="material-symbols-rounded text-sm">@result.Icon</i>
                                                    }
                                                    <div class="grow min-w-0">
                                                        <div class="text-sm font-medium text-truncate">@result.Title</div>
                                                        @if (!string.IsNullOrEmpty(result.Description))
                                                        {
                                                            <div class="text-xs text-secondary text-truncate">@result.Description</div>
                                                        }
                                                    </div>
                                                    <span class="text-xs text-tertiary">@result.Category</span>
                                                </button>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="search-container relative">
                                    <RFormField Type="FieldType.Search"
                                               Placeholder="Search..."
                                               @bind-Value="searchQuery"
                                               @bind-Value:after="HandleSearchChange"
                                               class="w-64" />
                                    @if (showSearchResults && searchResults.Any())
                                    {
                                        <div class="search-results absolute top-100 left-0 right-0 bg-surface-elevated shadow-lg rounded-md mt-1 pt-2 pb-2 z-50">
                                            @foreach (var result in searchResults.Take(8))
                                            {
                                                <button class="search-result-item w-full text-left pl-3 pr-3 pt-2 pb-2 hover:bg-surface-secondary flex items-center gap-3"
                                                        @onclick="() => HandleSearchResultClick(result)">
                                                    @if (!string.IsNullOrEmpty(result.Icon))
                                                    {
                                                        <i class="material-symbols-rounded text-sm">@result.Icon</i>
                                                    }
                                                    <div class="grow min-w-0">
                                                        <div class="text-sm font-medium text-truncate">@result.Title</div>
                                                        @if (!string.IsNullOrEmpty(result.Description))
                                                        {
                                                            <div class="text-xs text-secondary text-truncate">@result.Description</div>
                                                        }
                                                    </div>
                                                    <span class="text-xs text-tertiary">@result.Category</span>
                                                </button>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                    
                    @if (ShowNotifications)
                    {
                        <RButton Icon="notifications" IconPosition="IconPosition.Start"
                                 Variant="ButtonVariant.Ghost"
                                 Size="ButtonSize.Small"
                                 ShowBadge="@(NotificationCount > 0)"
                                 BadgeCount="@NotificationCount"
                                 OnClick="HandleNotificationsClick"
                                 class="mr-2" />
                    }
                    
                    @if (QuickActions != null)
                    {
                        @QuickActions
                    }
                    
                    @if (HeaderRight != null)
                    {
                        @HeaderRight
                    }
                    
                    @if (ShowThemeToggle)
                    {
                        <RThemeSwitcher class="mr-2" />
                    }
                    
                    @if (CurrentUser != null && ShowUserMenu && UserMenu != null)
                    {
                        <div class="user-menu-dropdown relative" @onclick="ToggleUserMenu">
                            <RButton Variant="ButtonVariant.Ghost" Size="ButtonSize.Small">
                                <div class="flex items-center gap-2">
                                    <RAvatar Text="@CurrentUser.GetInitials()" 
                                             ImageSrc="@CurrentUser.Avatar"
                                             Size="AvatarSize.Small"
                                             ShowStatus="true"
                                             Status="@(CurrentUser.IsOnline ? AvatarStatus.Online : AvatarStatus.Offline)" />
                                    <span class="text-sm font-medium hidden d-md-inline">@CurrentUser.GetDisplayName()</span>
                                    <i class="material-symbols-rounded text-sm">expand_more</i>
                                </div>
                            </RButton>
                            @if (showUserMenu)
                            {
                                <div class="user-menu-content absolute top-100 right-0 bg-surface-elevated shadow-lg rounded-md mt-1 pt-2 pb-2 z-50 min-w-64">
                                    @UserMenu
                                </div>
                            }
                        </div>
                    }
                </div>
            </header>
        }
        
        <!-- Main Content Area -->
        <main class="main">
            <div class="main-content @(ContentCentered && !string.IsNullOrEmpty(ContentMaxWidth) ? "main-content-centered" : "")" 
                 style="@GetContentStyle()">
                @if (ChildContent != null)
                {
                    @ChildContent
                }
                else
                {
                    @Body
                }
            </div>
        </main>
        
        <!-- Status Bar -->
        @if (ShowStatusBar && StatusBar != null)
        {
            <footer class="status-bar">
                @StatusBar
            </footer>
        }
    </div>

    <!-- Mobile Sidebar Backdrop -->
    @if (ShowSidebar && sidebarOpen && IsMobile)
    {
        <div class="sidebar-backdrop" @onclick="CloseSidebar"></div>
    }
    
    <!-- Quick Actions Floating -->
    @if (ShowQuickActions && QuickActionsFloating != null)
    {
        <div class="quick-actions-floating">
            @QuickActionsFloating
        </div>
    }

    <!-- Toast Container -->
    @if (ShowToasts)
    {
        <RToastContainer />
    }
    
    <!-- Modal Provider -->
    <RModalProvider />
</div>
</RThemeProvider>

<!-- Error UI -->
<div id="blazor-error-ui" class="blazor-error">
    <div class="blazor-error-content">
        <i class="material-symbols-rounded blazor-error-icon">error</i>
        <h3 class="blazor-error-title">System Error</h3>
        <p class="blazor-error-message">An unexpected error occurred. Please refresh to continue.</p>
        <div class="blazor-error-actions">
            <a href="." class="button button-primary">Reload</a>
            <button class="button button-secondary" onclick="document.getElementById('blazor-error-ui').style.display='none'">
                Dismiss
            </button>
        </div>
    </div>
</div>

@code {
    private IJSObjectReference jsModule;
    private bool disposed = false;
    private bool sidebarCollapsed = false;
    private bool sidebarOpen = true;
    private string searchQuery = string.Empty;
    private List<AppSearchResult> searchResults = new();
    private bool showSearchResults = false;
    private bool showUserMenu = false;
    private bool searchExpanded = false;
    private Timer searchDebounceTimer;
    
    // === CORE PARAMETERS ===
    
    /// <summary>App title (required)</summary>
    [Parameter, AIParameter("Application name displayed in header", "Your App Name or company brand")] 
    public string Title { get; set; } = "RR.Blazor App";
    
    /// <summary>Logo image source</summary>
    [Parameter] public string Logo { get; set; }
    
    /// <summary>Current user for user menu and permissions</summary>
    [Parameter, AIParameter("Current logged-in user object", "AppUser with Name, Email, Avatar, Role properties")] 
    public AppUser CurrentUser { get; set; }
    
    /// <summary>Theme mode (light/dark/system)</summary>
    [Parameter, AIParameter("Theme preference", "light, dark, or system for auto-detection")] 
    public string Theme { get; set; } = "system";
    
    // === LAYOUT CONTROL ===
    
    /// <summary>Show/hide sidebar</summary>
    [Parameter, AIParameter("Display left navigation sidebar", "true for apps with navigation menus")] 
    public bool ShowSidebar { get; set; } = true;
    
    /// <summary>Show/hide header</summary>
    [Parameter] public bool ShowHeader { get; set; } = true;
    
    /// <summary>Show/hide toast container</summary>
    [Parameter] public bool ShowToasts { get; set; } = true;
    
    /// <summary>Show/hide search functionality</summary>
    [Parameter, AIParameter("Enable global search in header", "true for content-rich applications")] 
    public bool ShowSearch { get; set; } = true;
    
    /// <summary>Make search collapsible on the right side</summary>
    [Parameter] public bool SearchCollapsible { get; set; } = false;
    
    /// <summary>Show/hide notifications button</summary>
    [Parameter] public bool ShowNotifications { get; set; } = true;
    
    /// <summary>Show/hide theme toggle</summary>
    [Parameter] public bool ShowThemeToggle { get; set; } = true;
    
    /// <summary>Show/hide user menu</summary>
    [Parameter] public bool ShowUserMenu { get; set; } = true;
    
    /// <summary>Show/hide sidebar toggle button</summary>
    [Parameter] public bool ShowSidebarToggle { get; set; } = true;
    
    /// <summary>Show/hide breadcrumbs</summary>
    [Parameter] public bool ShowBreadcrumbs { get; set; } = false;
    
    /// <summary>Show/hide status bar</summary>
    [Parameter] public bool ShowStatusBar { get; set; } = false;
    
    /// <summary>Show/hide quick actions</summary>
    [Parameter] public bool ShowQuickActions { get; set; } = false;
    
    // === CONTENT PARAMETERS ===
    
    /// <summary>Page title for header</summary>
    [Parameter] public string PageTitle { get; set; } = "Dashboard";
    
    /// <summary>Page subtitle for header</summary>
    [Parameter] public string PageSubtitle { get; set; }
    
    /// <summary>Navigation items (smart default)</summary>
    [Parameter, AIParameter("Main navigation menu items", "List of AppNavItem with Text, Href, Icon properties")] 
    public List<AppNavItem> NavigationItems { get; set; }
    
    /// <summary>Breadcrumb items</summary>
    [Parameter] public List<AppNavItem> Breadcrumbs { get; set; }
    
    /// <summary>Notification count for badge</summary>
    [Parameter] public int NotificationCount { get; set; }
    
    /// <summary>User permissions for nav filtering</summary>
    [Parameter] public string[] UserPermissions { get; set; }
    
    // === RENDER FRAGMENTS ===
    
    /// <summary>Custom logo content</summary>
    [Parameter] public RenderFragment LogoContent { get; set; }
    
    /// <summary>Custom navigation content</summary>
    [Parameter] public RenderFragment Navigation { get; set; }
    
    /// <summary>Sidebar footer content</summary>
    [Parameter] public RenderFragment SidebarFooter { get; set; }
    
    /// <summary>Left side header content</summary>
    [Parameter] public RenderFragment HeaderLeft { get; set; }
    
    /// <summary>Right side header content</summary>
    [Parameter] public RenderFragment HeaderRight { get; set; }
    
    /// <summary>User menu dropdown content</summary>
    [Parameter] public RenderFragment UserMenu { get; set; }
    
    /// <summary>Quick actions in header</summary>
    [Parameter] public RenderFragment QuickActions { get; set; }
    
    /// <summary>Floating quick actions</summary>
    [Parameter] public RenderFragment QuickActionsFloating { get; set; }
    
    /// <summary>Status bar content</summary>
    [Parameter] public RenderFragment StatusBar { get; set; }
    
    /// <summary>Main content</summary>
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    /// <summary>Content maximum width (e.g., "1200px", "90%"). Default is no constraint.</summary>
    [Parameter] public string ContentMaxWidth { get; set; } = null;
    
    /// <summary>Whether content should be centered when max width is applied</summary>
    [Parameter] public bool ContentCentered { get; set; } = true;
    
    // === EVENT CALLBACKS ===
    
    /// <summary>Theme changed callback</summary>
    [Parameter] public EventCallback<string> ThemeChanged { get; set; }
    
    /// <summary>Sidebar state changed callback</summary>
    [Parameter] public EventCallback<bool> SidebarCollapsedChanged { get; set; }
    
    /// <summary>Search query changed callback</summary>
    [Parameter] public EventCallback<string> SearchChanged { get; set; }
    
    /// <summary>Notification button clicked callback</summary>
    [Parameter] public EventCallback NotificationsClicked { get; set; }
    
    /// <summary>User menu clicked callback</summary>
    [Parameter] public EventCallback<AppUser> UserMenuClicked { get; set; }
    
    // === COMPUTED PROPERTIES ===
    
    private bool IsMobile { get; set; } = false;
    
    protected override async Task OnInitializedAsync()
    {
        // Load configuration
        await ConfigService.LoadAsync();
        
        // Apply configuration defaults
        if (ConfigService.Current != null)
        {
            var config = ConfigService.Current;
            if (string.IsNullOrEmpty(PageTitle) && !string.IsNullOrEmpty(config.Title))
                PageTitle = config.Title;
                
            ShowSearch = config.ShowSearch;
            ShowNotifications = config.ShowNotifications;
            ShowUserMenu = config.ShowUserMenu;
            ShowBreadcrumbs = config.ShowBreadcrumbs;
            ShowStatusBar = config.ShowStatusBar;
            ShowQuickActions = config.ShowQuickActions;
        }
        
        // Set up navigation search provider
        if (NavigationItems?.Any() == true && ShowSearch)
        {
            var navProvider = new NavigationSearchProvider(NavigationItems);
            SearchService.RegisterSearchProvider(navProvider);
        }
        
        // Set up default navigation if none provided
        if (NavigationItems == null)
        {
            NavigationItems = new List<AppNavItem>
            {
                AppNavItems.Dashboard(),
                AppNavItems.Settings(),
                AppNavItems.Profile()
            };
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !disposed)
        {
            try
            {
                jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/RR.Blazor/js/app-shell.js");
                await jsModule.InvokeVoidAsync("initialize");
                
                // Update IsMobile flag
                IsMobile = await jsModule.InvokeAsync<bool>("isMobile");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Failed to initialize app shell JS: {ex.Message}");
            }
        }
    }
    
    private List<NavMenuItem> GetVisibleNavItems()
    {
        if (NavigationItems == null) return new List<NavMenuItem>();
        
        return NavigationItems
            .Where(item => item.CanAccess(CurrentUser, UserPermissions))
            .Cast<NavMenuItem>()
            .ToList();
    }
    
    private void ToggleSidebar()
    {
        if (IsMobile)
        {
            sidebarOpen = !sidebarOpen;
        }
        else
        {
            sidebarCollapsed = !sidebarCollapsed;
            SidebarCollapsedChanged.InvokeAsync(sidebarCollapsed);
        }
    }
    
    private void CloseSidebar()
    {
        sidebarOpen = false;
    }
    
    
    private string GetEffectiveTheme()
    {
        var currentTheme = ThemeService.CurrentTheme;
        var effectiveMode = currentTheme.GetEffectiveMode(ThemeService.IsSystemDark);
        return effectiveMode.ToString().ToLower();
    }
    
    private async Task HandleSearchChange()
    {
        searchDebounceTimer?.Dispose();
        
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            showSearchResults = false;
            searchResults.Clear();
            StateHasChanged();
            return;
        }
        
        searchDebounceTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                searchResults = await SearchService.SearchAsync(searchQuery);
                showSearchResults = searchResults.Any();
                StateHasChanged();
            });
        }, null, 300, Timeout.Infinite);
        
        await SearchChanged.InvokeAsync(searchQuery);
    }
    
    private async Task HandleSearchResultClick(AppSearchResult result)
    {
        showSearchResults = false;
        searchQuery = string.Empty;
        
        await SearchService.AddToRecentAsync(result);
        
        if (result.OnClick != null)
        {
            await result.OnClick();
        }
        else if (!string.IsNullOrEmpty(result.Url))
        {
            await JS.InvokeVoidAsync("window.location.href", result.Url);
        }
        
        StateHasChanged();
    }
    
    private async Task HandleNotificationsClick()
    {
        await NotificationsClicked.InvokeAsync();
    }
    
    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }
    
    private void ExpandSearch()
    {
        searchExpanded = true;
        StateHasChanged();
    }
    
    private void CollapseSearch()
    {
        searchExpanded = false;
        searchQuery = string.Empty;
        showSearchResults = false;
        StateHasChanged();
    }
    
    private string GetContentStyle()
    {
        if (string.IsNullOrEmpty(ContentMaxWidth))
            return "";
        
        return $"max-width: {ContentMaxWidth};";
    }
    
    public async ValueTask DisposeAsync()
    {
        if (!disposed)
        {
            disposed = true;
            
            searchDebounceTimer?.Dispose();
            
            if (jsModule != null)
            {
                try
                {
                    await jsModule.DisposeAsync();
                }
                catch { }
            }
        }
    }
}

