@** 
<summary>
Enterprise-grade application shell with zero-config setup. 
Ultra-clean, responsive, and customizable for any business application.
</summary>
<category>Layout</category>
<complexity>Complex</complexity>
<ai-prompt>Create enterprise app layout with collapsible sidebar and full-width header</ai-prompt>
<ai-common-use>main app layout, enterprise dashboards, business applications, SaaS platforms</ai-common-use>
<ai-avoid>Don't use for simple pages without navigation. Use RSection for content organization instead.</ai-avoid>
<ai-pattern name="zero-config">Title only for minimal app setup</ai-pattern>
<ai-pattern name="enterprise">All parameters for maximum customization</ai-pattern>
<ai-pattern name="responsive">Auto-responsive with mobile-friendly behavior</ai-pattern>
**@

@using RR.Blazor.Models
@using RR.Blazor.Services
@using RR.Blazor.Enums
@using RR.Blazor.Attributes
@using RR.Blazor.Components.Form
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web

@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject IThemeService ThemeService
@inject IToastService ToastService
@inject IAppSearchService SearchService
@inject IAppConfigurationService ConfigService
@implements IAsyncDisposable

@attribute [Component("RAppShell", Category = "Layout", Complexity = ComponentComplexity.Complex)]
@attribute [AIOptimized(Prompt = "Create enterprise app layout with collapsible sidebar and full-width header", 
                       CommonUse = "enterprise dashboards, business applications, SaaS platforms", 
                       AvoidUsage = "Don't use for simple pages without navigation")]

<RThemeProvider>
<div class="@GetAppShellClasses()" data-theme="@GetEffectiveTheme()">
    <!-- Full-Width Header (Over Sidebar) -->
    @if (ShowHeader)
    {
        <header class="app-header">
            <!-- Left Section: Toggle + Logo + Title -->
            <div class="header-left">
                @if (ShowSidebar && ShowSidebarToggle)
                {
                    <RButton Icon="@GetToggleIcon()" 
                             Variant="ButtonVariant.Ghost"
                             Size="ButtonSize.Medium"
                             OnClick="@ToggleSidebar"
                             AriaLabel="Toggle sidebar"
                             Class="shrink-0 touch-target" />
                }
                
                @if (LogoContent != null)
                {
                    <div class="app-logo">
                        @LogoContent
                    </div>
                }
                else if (!string.IsNullOrEmpty(Logo))
                {
                    <div class="app-logo">
                        <img src="@Logo" alt="@Title" />
                        @if (!string.IsNullOrEmpty(Title))
                        {
                            <span class="text-base font-semibold text-primary">@Title</span>
                        }
                    </div>
                }
                else if (!string.IsNullOrEmpty(Title))
                {
                    <div class="app-logo">
                        <span class="text-base font-semibold text-primary">@Title</span>
                    </div>
                }
                
                @if (HeaderLeft != null)
                {
                    @HeaderLeft
                }
                else
                {
                    <!-- Page Header: Title and Breadcrumbs -->
                    <div class="page-header-content">
                        <div class="page-header-row">
                            <div class="page-title-subtitle">
                                @if (!string.IsNullOrEmpty(PageTitle))
                                {
                                    <h1 class="page-title">@PageTitle</h1>
                                }
                                @if (ShowBreadcrumbs && GetBreadcrumbItems()?.Any() == true)
                                {
                                    <RBreadcrumbs Items="@GetBreadcrumbItems()" 
                                                  Size="@BreadcrumbsSize"
                                                  Separator="@(string.IsNullOrEmpty(BreadcrumbsSeparator) ? "/" : BreadcrumbsSeparator)" 
                                                  SeparatorIcon="@BreadcrumbsSeparatorIcon"
                                                  CollapsibleOnMobile="@BreadcrumbsCollapsibleOnMobile"
                                                  MaxVisibleItems="@BreadcrumbsMaxVisibleItems"
                                                  Class="@($"app-shell-breadcrumbs compact-spacing {BreadcrumbsClass}".Trim())" />
                                }
                                else if (!string.IsNullOrEmpty(PageSubtitle))
                                {
                                    <p class="page-subtitle">@PageSubtitle</p>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Right Section: Search + Actions + User -->
            <div class="header-right">
                @if (ShowSearch)
                {
                    <div class="relative d-flex align-center gap-2 transition-all @(SearchCollapsible && searchExpanded ? "search-expanded" : "")">
                        @if (!SearchCollapsible || searchExpanded)
                        {
                            <!-- Search Input Container -->
                            <div class="transition-all overflow-hidden @(SearchCollapsible ? (searchExpanded ? "w-64 md:w-56 sm:w-48 visible" : "w-0 invisible") : "w-64 md:w-56 sm:w-48")">
                                <RAutosuggestGeneric TItem="AppSearchResult" 
                                                   Value="@selectedSearchResult"
                                                   ValueChanged="@HandleSearchResultSelected"
                                                   SearchFunc="@HandleSearchAsync"
                                                   ItemTextSelector="@(result => result.Title)"
                                                   ItemIconSelector="@(result => result.Icon)"
                                                   ItemTemplate="@SearchResultTemplate"
                                                   Placeholder="Search..."
                                                   StartIcon="search"
                                                   MinSearchLength="1"
                                                   DebounceDelay="300"
                                                   MaxSuggestions="8"
                                                   ShowLoading="true"
                                                   ShowDropdownIcon="false"
                                                   OnItemSelected="@HandleSearchItemSelected"
                                                   OnSearchChanged="@HandleSearchQueryChanged"
                                                   OnBlur="@(SearchCollapsible ? HandleSearchBlur : null)"
                                                   Class="w-full" />
                            </div>
                        }
                        
                        @if (SearchCollapsible && !searchExpanded)
                        {
                            <!-- Search Toggle Button (expand search) -->
                            <RButton Icon="search" 
                                     Variant="ButtonVariant.Ghost" 
                                     Size="ButtonSize.Small"
                                     OnClick="@ExpandSearch" 
                                     AriaLabel="Open search" 
                                     Class="touch-target" />
                        }
                        
                        @if (SearchCollapsible && searchExpanded)
                        {
                            <!-- Search Close Button (collapse search) -->
                            <RButton Icon="close" 
                                     Variant="ButtonVariant.Ghost" 
                                     Size="ButtonSize.Small"
                                     OnClick="@CollapseSearch" 
                                     AriaLabel="Close search" 
                                     Class="shrink-0 touch-target" />
                        }
                    </div>
                }
                
                @if (ShowNotifications)
                {
                    <RButton Icon="notifications" 
                             Variant="ButtonVariant.Ghost" 
                             Size="ButtonSize.Small"
                             ShowBadge="@(NotificationCount > 0)"
                             BadgeCount="@NotificationCount"
                             OnClick="@HandleNotificationsClick"
                             AriaLabel="Notifications" 
                             Class="touch-target" />
                }
                
                @if (QuickActions != null)
                {
                    @QuickActions
                }
                
                @if (HeaderRight != null)
                {
                    @HeaderRight
                }
                
                @if (ShowThemeToggle)
                {
                    <RThemeSwitcher />
                }
                
                @if (CurrentUser != null && ShowUserMenu)
                {
                    @if (UserMenu != null)
                    {
                        @UserMenu
                    }
                    else
                    {
                        <!-- Fallback user display when no custom menu provided -->
                        <div class="d-flex align-center gap-2">
                            <RAvatar Text="@CurrentUser.GetInitials()" 
                                    ImageSrc="@CurrentUser.Avatar"
                                    Size="@AvatarSize.Small"
                                    ShowStatus="true"
                                    Status="@(CurrentUser.IsOnline ? AvatarStatus.Online : AvatarStatus.Offline)" />
                            <span class="user-name hidden sm:inline text-sm font-medium text-primary">@CurrentUser.GetDisplayName()</span>
                        </div>
                    }
                }
            </div>
        </header>
    }
    
    <!-- Collapsible Sidebar -->
    @if (ShowSidebar)
    {
        <aside class="@GetSidebarClasses()">
            <!-- Navigation Content -->
            <div class="flex-1 overflow-y-auto">
                @if (Navigation != null)
                {
                    <CascadingValue Value="@sidebarCollapsed" Name="SidebarCollapsed">
                        @Navigation
                    </CascadingValue>
                }
                else if (NavigationItems?.Any() == true)
                {
                    <RNavMenu Items="@GetVisibleNavItems()" />
                }
            </div>
            
            <!-- Sidebar Footer -->
            @if (SidebarFooter != null)
            {
                <div class="@GetSidebarFooterClasses()">
                    <CascadingValue Value="@sidebarCollapsed" Name="SidebarCollapsed">
                        @SidebarFooter
                    </CascadingValue>
                </div>
            }
            else if (CurrentUser != null && ShowUserMenu && !ShowHeader)
            {
                <div class="shrink-0 border-t border-light pa-4">
                    <div class="d-flex align-center gap-3">
                        <RAvatar Text="@CurrentUser.GetInitials()" 
                                 ImageSrc="@CurrentUser.Avatar"
                                 Size="@AvatarSize.Small"
                                 ShowStatus="true"
                                 Status="@(CurrentUser.IsOnline ? AvatarStatus.Online : AvatarStatus.Offline)" />
                        @if (!sidebarCollapsed)
                        {
                            <div class="flex-1 min-w-0">
                                <div class="text-sm font-medium text-primary text-truncate">@CurrentUser.GetDisplayName()</div>
                                <div class="text-xs text-secondary text-truncate">@CurrentUser.Role</div>
                            </div>
                        }
                    </div>
                </div>
            }
        </aside>
    }
    
    <!-- Main Content Area -->
    <main class="@GetMainClasses()">
        @if (AutoWrapContent)
        {
            <RContent MaxWidth="@DefaultContentMaxWidth" 
                      Density="@DefaultContentDensity"
                      FullWidth="@DefaultContentFullWidth"
                      Centered="@DefaultContentCentered"
                      Class="@DefaultContentClass">
                @ChildContent
            </RContent>
        }
        else
        {
            @ChildContent
        }
    </main>
    
    <!-- Mobile Backdrop -->
    @if (ShowSidebar && sidebarOpen && IsMobile)
    {
        <div class="@GetBackdropClasses()" @onclick="CloseSidebar"></div>
    }
    
    <!-- Toast Container -->
    @if (ShowToasts)
    {
        <RToastContainer />
    }
    
    <!-- Modal Provider - Framework Integration Point -->
    <RModalProvider />
</div>
</RThemeProvider>

@code {

    /// <summary>App title (required)</summary>
    [Parameter, AIParameter("Application name displayed in header", "Your App Name")] 
    public string Title { get; set; } = string.Empty;
    
    /// <summary>Logo image source</summary>
    [Parameter] public string Logo { get; set; } = string.Empty;
    
    /// <summary>Current user for user menu and permissions</summary>
    [Parameter, AIParameter("Current logged-in user object", "AppUser with Name, Email, Avatar, Role properties")] 
    public AppUser CurrentUser { get; set; }
    
    /// <summary>Theme mode (light/dark/system)</summary>
    [Parameter, AIParameter("Theme preference", "light, dark, or system for auto-detection")] 
    public string Theme { get; set; } = "system";
    
    /// <summary>Layout features configuration</summary>
    [Parameter, AIParameter("Control app shell features", "AppShellFeatures.All for full features, AppShellFeatures.Minimal for basic layout")] 
    public AppShellFeatures Features { get; set; } = AppShellFeatures.All;
    
    /// <summary>Make search collapsible on mobile</summary>
    [Parameter] public bool SearchCollapsible { get; set; } = true;
    
    /// <summary>Notification count for badge</summary>
    [Parameter] public int NotificationCount { get; set; }
    
    /// <summary>Sidebar collapsed by default</summary>
    [Parameter] public bool SidebarCollapsedDefault { get; set; } = false;
    
    /// <summary>Page title for header</summary>
    [Parameter] public string PageTitle { get; set; } = string.Empty;
    
    /// <summary>Page subtitle for header</summary>
    [Parameter] public string PageSubtitle { get; set; } = string.Empty;
    
    /// <summary>Navigation items</summary>
    [Parameter, AIParameter("Main navigation menu items", "List of AppNavItem with Text, Href, Icon properties")] 
    public List<AppNavItem> NavigationItems { get; set; }
    
    /// <summary>Breadcrumb items</summary>
    [Parameter, AIParameter("Breadcrumb navigation items", "List of AppNavItem with Text, Href, Icon properties")] 
    public List<AppNavItem> Breadcrumbs { get; set; }
    
    /// <summary>Breadcrumb size variant</summary>
    [Parameter] public BreadcrumbSize BreadcrumbsSize { get; set; } = BreadcrumbSize.Default;
    
    /// <summary>Custom breadcrumb separator text</summary>
    [Parameter] public string BreadcrumbsSeparator { get; set; }
    
    /// <summary>Custom breadcrumb separator icon</summary>
    [Parameter] public string BreadcrumbsSeparatorIcon { get; set; }
    
    /// <summary>Whether breadcrumbs collapse on mobile</summary>
    [Parameter] public bool BreadcrumbsCollapsibleOnMobile { get; set; } = true;
    
    /// <summary>Max breadcrumb items to show before collapsing</summary>
    [Parameter] public int BreadcrumbsMaxVisibleItems { get; set; } = 0;
    
    /// <summary>Additional CSS classes for breadcrumbs</summary>
    [Parameter] public string BreadcrumbsClass { get; set; }
    
    /// <summary>User permissions for nav filtering</summary>
    [Parameter] public string[] UserPermissions { get; set; }
    
    /// <summary>Custom logo content</summary>
    [Parameter] public RenderFragment LogoContent { get; set; }
    
    /// <summary>Custom navigation content</summary>
    [Parameter] public RenderFragment Navigation { get; set; }
    
    /// <summary>Sidebar footer content (perfect for role switchers)</summary>
    [Parameter] public RenderFragment SidebarFooter { get; set; }
    
    /// <summary>Left side header content</summary>
    [Parameter] public RenderFragment HeaderLeft { get; set; }
    
    /// <summary>Right side header content</summary>
    [Parameter] public RenderFragment HeaderRight { get; set; }
    
    /// <summary>User menu dropdown content</summary>
    [Parameter] public RenderFragment UserMenu { get; set; }
    
    /// <summary>Quick actions in header</summary>
    [Parameter] public RenderFragment QuickActions { get; set; }
    
    /// <summary>Main content</summary>
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    /// <summary>Custom CSS class for the app shell container</summary>
    [Parameter] public string Class { get; set; } = string.Empty;
    
    /// <summary>Custom CSS style for the app shell container</summary>
    [Parameter] public string Style { get; set; } = string.Empty;
    
    /// <summary>Custom CSS class for the header</summary>
    [Parameter] public string HeaderClass { get; set; } = string.Empty;
    
    /// <summary>Custom CSS class for the sidebar</summary>
    [Parameter] public string SidebarClass { get; set; } = string.Empty;
    
    /// <summary>Custom CSS class for the main content area</summary>
    [Parameter] public string MainClass { get; set; } = string.Empty;
    
    /// <summary>Automatically wrap content in RContent component for app-shell awareness</summary>
    [Parameter, AIParameter("Auto-wrap page content in RContent", "true for automatic app-shell positioning, false for manual control")] 
    public bool AutoWrapContent { get; set; } = true;
    
    /// <summary>Default max width for auto-wrapped content</summary>
    [Parameter, AIParameter("Default content max width", "lg for standard content, xl for wide dashboards, none for full width")] 
    public string DefaultContentMaxWidth { get; set; } = "lg";
    
    /// <summary>Default density for auto-wrapped content</summary>
    [Parameter, AIParameter("Default content spacing density", "Normal for standard spacing, Dense for compact layouts")] 
    public ComponentDensity DefaultContentDensity { get; set; } = ComponentDensity.Normal;
    
    /// <summary>Default full width setting for auto-wrapped content</summary>
    [Parameter, AIParameter("Default content full width", "false for constrained content, true for dashboard-style layouts")] 
    public bool DefaultContentFullWidth { get; set; } = false;
    
    /// <summary>Default centered setting for auto-wrapped content</summary>
    [Parameter, AIParameter("Default content centering", "false for left-aligned content, true for centered forms/articles")] 
    public bool DefaultContentCentered { get; set; } = false;
    
    /// <summary>Default CSS class for auto-wrapped content</summary>
    [Parameter] public string DefaultContentClass { get; set; } = string.Empty;
    
    /// <summary>Theme changed callback</summary>
    [Parameter] public EventCallback<string> ThemeChanged { get; set; }
    
    /// <summary>Sidebar state changed callback</summary>
    [Parameter] public EventCallback<bool> SidebarCollapsedChanged { get; set; }
    
    /// <summary>Search query changed callback</summary>
    [Parameter] public EventCallback<string> SearchChanged { get; set; }
    
    /// <summary>Notification button clicked callback</summary>
    [Parameter] public EventCallback NotificationsClicked { get; set; }
    
    /// <summary>User menu clicked callback</summary>
    [Parameter] public EventCallback<AppUser> UserMenuClicked { get; set; }

    private bool IsMobile { get; set; } = false;
    private DotNetObjectReference<RAppShell> dotNetRef;
    private IJSObjectReference appShellModule;
    private bool disposed = false;
    private bool sidebarCollapsed = false;
    private bool sidebarOpen = true;
    private bool searchExpanded = false;
    private AppSearchResult selectedSearchResult;
    private string currentSearchQuery = string.Empty;
    private bool ShowSidebar => Features.HasFlag(AppShellFeatures.Sidebar);
    private bool ShowHeader => Features.HasFlag(AppShellFeatures.Header);
    private bool ShowToasts => Features.HasFlag(AppShellFeatures.Toasts);
    private bool ShowSearch => Features.HasFlag(AppShellFeatures.Search);
    private bool ShowNotifications => Features.HasFlag(AppShellFeatures.Notifications);
    private bool ShowThemeToggle => Features.HasFlag(AppShellFeatures.ThemeToggle);
    private bool ShowUserMenu => Features.HasFlag(AppShellFeatures.UserMenu);
    private bool ShowSidebarToggle => Features.HasFlag(AppShellFeatures.SidebarToggle);
    private bool ShowBreadcrumbs => Features.HasFlag(AppShellFeatures.Breadcrumbs);
    
    protected override async Task OnInitializedAsync()
    {
        sidebarCollapsed = SidebarCollapsedDefault;

        await ConfigService.LoadAsync();
        if (ConfigService.Current != null)
        {
            var config = ConfigService.Current;
            if (string.IsNullOrEmpty(PageTitle) && !string.IsNullOrEmpty(config.Title))
                PageTitle = config.Title;
        }
        
        if (NavigationItems?.Any() == true && ShowSearch)
        {
            var navProvider = new NavigationSearchProvider(NavigationItems);
            SearchService.RegisterSearchProvider(navProvider);
        }
        
        NavigationItems ??= ShowSidebar ? GetDefaultNavigation() : null;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !disposed)
        {
            try
            {
                // Import the app-shell module to register global functions
                appShellModule = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/RR.Blazor/js/app-shell.js");
                await appShellModule.InvokeVoidAsync("initialize");
                IsMobile = await JS.InvokeAsync<bool>("RRAppShell.isMobile");
                
                if (IsMobile)
                {
                    sidebarOpen = false;
                }
                
                
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Warning: App shell JS initialization failed: {ex.Message}");
            }
        }
    }
    
    private List<NavMenuItem> GetVisibleNavItems()
    {
        if (NavigationItems == null) return new List<NavMenuItem>();
        
        return NavigationItems
            .Where(item => item.CanAccess(CurrentUser, UserPermissions))
            .Cast<NavMenuItem>()
            .ToList();
    }
    
    private List<BreadcrumbItem> GetBreadcrumbItems()
    {
        if (Breadcrumbs == null || !Breadcrumbs.Any()) return new List<BreadcrumbItem>();
        
        return Breadcrumbs.Select(item => new BreadcrumbItem
        {
            Text = item.Text,
            Href = item.Href,
            Icon = item.Icon,
            IsDisabled = item.IsDisabled
        }).ToList();
    }
    
    private void ToggleSidebar()
    {
        if (IsMobile)
        {
            sidebarOpen = !sidebarOpen;
        }
        else
        {
            sidebarCollapsed = !sidebarCollapsed;
            SidebarCollapsedChanged.InvokeAsync(sidebarCollapsed);
        }
    }
    
    private void CloseSidebar()
    {
        sidebarOpen = false;
    }
    
    private string GetToggleIcon()
    {
        if (IsMobile) return sidebarOpen ? "close" : "menu";
        return sidebarCollapsed ? "menu_open" : "menu";
    }
    
    private string GetEffectiveTheme()
    {
        var currentTheme = ThemeService.CurrentTheme;
        var effectiveMode = currentTheme.GetEffectiveMode(ThemeService.IsSystemDark);
        return effectiveMode.ToString().ToLower();
    }
    
    private async Task HandleNotificationsClick()
    {
        await NotificationsClicked.InvokeAsync();
    }
    
    private RenderFragment<AppSearchResult> SearchResultTemplate => result => __builder =>
    {
        <div class="search-result-content">
            @if (!string.IsNullOrEmpty(result.Icon))
            {
                <i class="material-symbols-rounded search-result-icon">@result.Icon</i>
            }
            <div class="search-result-text">
                <div class="search-result-title">@result.Title</div>
                @if (!string.IsNullOrEmpty(result.Description))
                {
                    <div class="search-result-description">@result.Description</div>
                }
            </div>
            <span class="search-result-category">@result.Category</span>
        </div>
    };

    private async Task<IEnumerable<AppSearchResult>> HandleSearchAsync(string query, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(query)) return Enumerable.Empty<AppSearchResult>();
        
        try
        {
            var results = await SearchService.SearchAsync(query, cancellationToken);
            return results ?? Enumerable.Empty<AppSearchResult>();
        }
        catch (OperationCanceledException)
        {
            return Enumerable.Empty<AppSearchResult>();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Search error: {ex.Message}");
            return Enumerable.Empty<AppSearchResult>();
        }
    }

    private async Task HandleSearchResultSelected(AppSearchResult result)
    {
        selectedSearchResult = result;
        if (SearchCollapsible)
        {
            await CollapseSearch();
        }
    }

    private async Task HandleSearchItemSelected(AppSearchResult result)
    {
        await SearchService.AddToRecentAsync(result);
        
        if (result.OnClick != null)
        {
            await result.OnClick();
        }
        else if (!string.IsNullOrEmpty(result.Url))
        {
            await JS.InvokeVoidAsync("window.location.href", result.Url);
        }
    }

    private async Task HandleSearchQueryChanged(string query)
    {
        currentSearchQuery = query ?? string.Empty;
        await SearchChanged.InvokeAsync(query);
    }

    private async Task HandleSearchBlur()
    {
        await Task.Delay(200);
        if (string.IsNullOrWhiteSpace(currentSearchQuery) && searchExpanded)
        {
            await CollapseSearch();
        }
    }

    private async Task ExpandSearch()
    {
        searchExpanded = true;
        StateHasChanged();
        
        await Task.Delay(50);
        try
        {
            await JS.InvokeVoidAsync("RRAppShell.focusElement", ".search-expanded input");
        }
        catch { }
    }

    private async Task CollapseSearch()
    {
        searchExpanded = false;
        selectedSearchResult = null;
        currentSearchQuery = string.Empty;
        StateHasChanged();
    }
    

    
    private string GetAppShellClasses()
    {
        var classes = new List<string> { "app-shell", "min-h-screen" };
        
        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);
        
        if (sidebarCollapsed) classes.Add("sidebar-collapsed");
        if (sidebarOpen && IsMobile) classes.Add("sidebar-open");
        if (IsMobile) classes.Add("mobile");
        
        return string.Join(" ", classes);
    }
    
    private string GetHeaderClasses()
    {
        var classes = new List<string> { "app-header" };
        
        if (!string.IsNullOrEmpty(HeaderClass))
            classes.Add(HeaderClass);
        
        return string.Join(" ", classes);
    }
    
    private string GetHeaderLeftClasses()
    {
        return "header-left";
    }
    
    private string GetHeaderRightClasses()
    {
        return "header-right";
    }
    
    private string GetLogoClasses()
    {
        return "app-logo";
    }
    
    private string GetSearchClasses()
    {
        var classes = new List<string>();
        
        if (SearchCollapsible)
        {
            classes.Add("search-collapsible");
            if (searchExpanded)
                classes.Add("search-expanded");
        }
        else
        {
            classes.Add("search-fixed");
        }
            
        return string.Join(" ", classes);
    }
    
    private string GetSidebarClasses()
    {
        var classes = new List<string> { "app-sidebar" };
        
        if (!string.IsNullOrEmpty(SidebarClass))
            classes.Add(SidebarClass);
        
        if (sidebarCollapsed) classes.Add("collapsed");
        if (sidebarOpen && IsMobile) classes.Add("open");
        
        return string.Join(" ", classes);
    }
    
    private string GetMainClasses()
    {
        var classes = new List<string> { "app-main" };
        
        if (AutoWrapContent)
            classes.Add("auto-wrap-content");
            
        if (DefaultContentFullWidth)
            classes.Add("full-width-content");
        
        if (!string.IsNullOrEmpty(MainClass))
            classes.Add(MainClass);
        
        return string.Join(" ", classes);
    }
    
    private string GetBackdropClasses()
    {
        var classes = new List<string> { "mobile-backdrop" };
        if (sidebarOpen && IsMobile) classes.Add("active");
        return string.Join(" ", classes);
    }
    
    private string GetSidebarFooterClasses()
    {
        var classes = new List<string> { "shrink-0", "border-t", "border-light/20", "pt-4", "pb-4" };
        
        if (sidebarCollapsed)
        {
            // No horizontal padding when collapsed
        }
        else
        {
            classes.Add("px-4");
        }
        
        return string.Join(" ", classes);
    }
    
    private static List<AppNavItem> GetDefaultNavigation()
    {
        return new List<AppNavItem>
        {
            AppNavItems.Dashboard(),
            AppNavItems.Settings(),
            AppNavItems.Profile()
        };
    }
    
    
    
    public async ValueTask DisposeAsync()
    {
        if (!disposed)
        {
            disposed = true;
            
            if (appShellModule != null)
            {
                await appShellModule.DisposeAsync();
                appShellModule = null;
            }
            
        }
    }
}
