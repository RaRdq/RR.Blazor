@** 
<summary>
Complete application shell with header, sidebar, navigation, search, and theme support.
Zero-config setup for enterprise Blazor applications with professional styling and full responsiveness.
</summary>
<category>Layout</category>
<complexity>Complex</complexity>
<ai-prompt>Create complete app layout with header and sidebar</ai-prompt>
<ai-common-use>main app layout, admin dashboards, enterprise applications, SaaS platforms</ai-common-use>
<ai-avoid>Don't use for simple pages without navigation. Use RSection for content organization instead.</ai-avoid>
<ai-pattern name="zero-config">Title only for minimal app setup</ai-pattern>
<ai-pattern name="full-enterprise">All parameters for complete enterprise application</ai-pattern>
<ai-pattern name="dashboard-layout">NavigationItems + CurrentUser for admin dashboards</ai-pattern>
<ai-pattern name="responsive-shell">Auto-responsive sidebar and mobile-friendly behavior</ai-pattern>
**@

@using RR.Blazor.Models
@using RR.Blazor.Services
@using RR.Blazor.Enums
@using RR.Blazor.Attributes
@using Microsoft.AspNetCore.Components.Routing

@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject IThemeService ThemeService
@inject IToastService ToastService
@inject IAppSearchService SearchService
@inject IAppConfigurationService ConfigService
@implements IAsyncDisposable

@attribute [Component("RAppShell", Category = "Layout", Complexity = ComponentComplexity.Complex)]
@attribute [AIOptimized(Prompt = "Create complete app layout with header and sidebar", 
                       CommonUse = "main app layout, admin dashboards, enterprise applications", 
                       AvoidUsage = "Don't use for simple pages without navigation")]

<RThemeProvider>
<div class="app-shell app-shell-container min-h-screen flex focus-visible-enhanced" data-theme="@GetEffectiveTheme()">
    <!-- Sidebar -->
    @if (ShowSidebar)
    {
        <aside class="sidebar @(sidebarCollapsed ? "sidebar-collapsed" : "") @((IsMobile && !sidebarOpen) ? "sidebar-closed" : "")">
            <!-- Navigation -->
            <nav class="sidebar-nav">
                @if (Navigation != null)
                {
                    <CascadingValue Value="sidebarCollapsed" Name="SidebarCollapsed">
                        @Navigation
                    </CascadingValue>
                }
                else if (NavigationItems?.Any() == true)
                {
                    <RNavMenu Items="@GetVisibleNavItems()" />
                }
            </nav>
            
            <!-- Sidebar Footer -->
            @if (SidebarFooter != null)
            {
                <div class="sidebar-footer">
                    @SidebarFooter
                </div>
            }
            else if (CurrentUser != null && ShowUserMenu)
            {
                <div class="sidebar-footer">
                    <div class="user-menu-compact flex items-center gap-3 pa-3">
                        <RAvatar Text="@CurrentUser.GetInitials()" 
                                 ImageSrc="@CurrentUser.Avatar"
                                 Size="AvatarSize.Small"
                                 ShowStatus="true"
                                 Status="@(CurrentUser.IsOnline ? AvatarStatus.Online : AvatarStatus.Offline)" />
                        @if (!sidebarCollapsed)
                        {
                            <div class="grow min-w-0">
                                <div class="text-sm font-medium text-truncate">@CurrentUser.GetDisplayName()</div>
                                <div class="text-xs text-secondary text-truncate">@CurrentUser.Role</div>
                            </div>
                        }
                    </div>
                </div>
            }
        </aside>
    }

    <!-- Main Content -->
    <div class="main-content @(ShowSidebar ? (sidebarCollapsed ? "main-content-collapsed" : "main-content-expanded") : "") @(IsMobile && ShowSidebar ? "mobile-sidebar" : "")">
        <!-- Header -->
        @if (ShowHeader)
        {
            <header class="fixed top-0 left-0 right-0 bg-surface-elevated border-b d-flex items-center shadow-sm backdrop-blur-sm app-header @GetHeaderClasses()">
                <!-- Left Section: Sidebar Toggle + Logo + Title/Subtitle + Breadcrumbs -->
                <div class="d-flex items-center gap-3 flex-1 min-w-0">
                    @if (ShowSidebar && ShowSidebarToggle)
                    {
                        <RButton Icon="@(IsMobile ? "menu" : (sidebarCollapsed ? "menu_open" : "menu"))" IconPosition="IconPosition.Start"
                                 Variant="ButtonVariant.Ghost"
                                 Size="ButtonSize.Small"
                                 OnClick="ToggleSidebar"
                                 AriaLabel="Toggle sidebar"
                                 class="shrink-0" />
                    }
                    
                    <!-- Logo Area -->
                    <div class="d-flex items-center gap-2 shrink-0">
                        @if (LogoContent != null)
                        {
                            @LogoContent
                        }
                        else if (!string.IsNullOrEmpty(Logo))
                        {
                            <img src="@Logo" alt="@(Title)" class="h-6 w-auto" />
                        }
                        else
                        {
                            <span class="text-sm font-semibold text-primary">@Title</span>
                        }
                    </div>
                    
                    @if (HeaderLeft != null)
                    {
                        @HeaderLeft
                    }
                    else
                    {
                        <!-- Title & Subtitle Group with Breadcrumbs -->
                        <div class="min-w-0 flex-1">
                            <div class="d-flex items-center gap-2 flex-wrap">
                                <h1 class="text-sm font-semibold text-primary ma-0 leading-tight">@PageTitle</h1>
                                @if (ShowBreadcrumbs && Breadcrumbs?.Any() == true)
                                {
                                    <nav class="d-flex items-center gap-1 shrink-0" aria-label="Breadcrumb">
                                        <i class="material-symbols-rounded text-xs text-secondary">chevron_right</i>
                                        @foreach (var (item, index) in Breadcrumbs.Select((item, index) => (item, index)))
                                        {
                                            @if (index > 0)
                                            {
                                                <i class="material-symbols-rounded text-xs text-secondary">chevron_right</i>
                                            }
                                            @if (index == Breadcrumbs.Count - 1)
                                            {
                                                <span class="text-xs text-secondary text-truncate">@item.Text</span>
                                            }
                                            else
                                            {
                                                <a href="@item.Href" class="text-xs text-interactive hover:text-interactive text-truncate">@item.Text</a>
                                            }
                                        }
                                    </nav>
                                }
                            </div>
                            @if (!string.IsNullOrEmpty(PageSubtitle))
                            {
                                <p class="text-xs text-secondary ma-0 leading-tight">@PageSubtitle</p>
                            }
                        </div>
                    }
                </div>
                
                <!-- Right Section: Search + Notifications + Quick Actions + Theme + User Menu -->
                <div class="d-flex items-center gap-1 shrink-0">
                    @if (ShowSearch)
                    {
                        <!-- Single Row Search with Toggle -->
                        <div class="relative mr-2">
                            @if (SearchCollapsible)
                            {
                                @if (searchExpanded)
                                {
                                    <!-- Expanded Search: X button + Input Field -->
                                    <div class="d-flex items-center gap-1">
                                        <RButton Icon="close" IconPosition="IconPosition.Start"
                                                 Variant="ButtonVariant.Ghost"
                                                 Size="ButtonSize.Small"
                                                 OnClick="CollapseSearch"
                                                 AriaLabel="Close search" />
                                        <RFormField Type="FieldType.Search"
                                                   Placeholder="Search..."
                                                   @bind-Value="searchQuery"
                                                   @bind-Value:after="HandleSearchChange"
                                                   class="w-48" />
                                    </div>
                                }
                                else
                                {
                                    <!-- Collapsed Search: Search Icon Only -->
                                    <RButton Icon="search" IconPosition="IconPosition.Start"
                                             Variant="ButtonVariant.Ghost"
                                             Size="ButtonSize.Small"
                                             OnClick="ExpandSearch"
                                             AriaLabel="Open search" />
                                }
                            }
                            else
                            {
                                <!-- Always Visible Search -->
                                <RFormField Type="FieldType.Search"
                                           Placeholder="Search..."
                                           @bind-Value="searchQuery"
                                           @bind-Value:after="HandleSearchChange"
                                           class="w-48" />
                            }
                            
                            <!-- Search Results Dropdown -->
                            @if (showSearchResults && searchResults.Any() && (!SearchCollapsible || searchExpanded))
                            {
                                <div class="absolute top-100 left-0 right-0 bg-surface-elevated shadow-lg rounded-md mt-1 pt-2 pb-2 z-50">
                                    @foreach (var result in searchResults.Take(8))
                                    {
                                        <button class="w-full text-left pl-3 pr-3 pt-2 pb-2 hover:bg-surface d-flex items-center gap-3"
                                                @onclick="() => HandleSearchResultClick(result)">
                                            @if (!string.IsNullOrEmpty(result.Icon))
                                            {
                                                <i class="material-symbols-rounded text-sm">@result.Icon</i>
                                            }
                                            <div class="flex-1 min-w-0">
                                                <div class="text-sm font-medium text-truncate">@result.Title</div>
                                                @if (!string.IsNullOrEmpty(result.Description))
                                                {
                                                    <div class="text-xs text-secondary text-truncate">@result.Description</div>
                                                }
                                            </div>
                                            <span class="text-xs text-tertiary">@result.Category</span>
                                        </button>
                                    }
                                </div>
                            }
                        </div>
                    }
                    
                    <!-- Action Buttons Group -->
                    <div class="d-flex items-center gap-1">
                        @if (ShowNotifications)
                        {
                            <RButton Icon="notifications" IconPosition="IconPosition.Start"
                                     Variant="ButtonVariant.Ghost"
                                     Size="ButtonSize.Small"
                                     ShowBadge="@(NotificationCount > 0)"
                                     BadgeCount="@NotificationCount"
                                     OnClick="HandleNotificationsClick"
                                     AriaLabel="Notifications" />
                        }
                        
                        @if (QuickActions != null)
                        {
                            <div class="d-flex items-center gap-1">
                                @QuickActions
                            </div>
                        }
                        
                        @if (HeaderRight != null)
                        {
                            @HeaderRight
                        }
                        
                        @if (ShowThemeToggle)
                        {
                            <RThemeSwitcher />
                        }
                        
                        @if (CurrentUser != null && ShowUserMenu && UserMenu != null)
                        {
                            <div class="relative ml-2" @onclick="ToggleUserMenu">
                                <RButton Variant="ButtonVariant.Ghost" Size="ButtonSize.Small">
                                    <div class="d-flex items-center gap-2">
                                        <RAvatar Text="@CurrentUser.GetInitials()" 
                                                 ImageSrc="@CurrentUser.Avatar"
                                                 Size="AvatarSize.Small"
                                                 ShowStatus="true"
                                                 Status="@(CurrentUser.IsOnline ? AvatarStatus.Online : AvatarStatus.Offline)" />
                                        <span class="text-sm font-medium hidden md:d-inline">@CurrentUser.GetDisplayName()</span>
                                        <i class="material-symbols-rounded text-sm">expand_more</i>
                                    </div>
                                </RButton>
                                @if (showUserMenu)
                                {
                                    <div class="absolute top-100 right-0 bg-surface-elevated shadow-lg rounded-md mt-1 pt-2 pb-2 z-50 dropdown-menu">
                                        @UserMenu
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </header>
        }
        
        <!-- Main Content Area -->
        <main class="main">
            <div class="main-content @GetContentClasses()" 
                 style="@GetContentStyle()">
                @ChildContent
            </div>
        </main>
        
        <!-- Status Bar -->
        @if (ShowStatusBar && StatusBar != null)
        {
            <footer class="status-bar">
                @StatusBar
            </footer>
        }
    </div>

    <!-- Mobile Sidebar Backdrop -->
    @if (ShowSidebar && sidebarOpen && IsMobile)
    {
        <div class="sidebar-backdrop" @onclick="CloseSidebar"></div>
    }
    
    <!-- Quick Actions Floating -->
    @if (ShowQuickActions && QuickActionsFloating != null)
    {
        <div class="quick-actions-floating">
            @QuickActionsFloating
        </div>
    }

    <!-- Toast Container -->
    @if (ShowToasts)
    {
        <RToastContainer />
    }
    
    <!-- Modal Provider -->
    <RModalProvider />
</div>
</RThemeProvider>

<!-- Error UI -->
<div id="blazor-error-ui" class="blazor-error">
    <div class="blazor-error-content">
        <i class="material-symbols-rounded blazor-error-icon">error</i>
        <h3 class="blazor-error-title">System Error</h3>
        <p class="blazor-error-message">An unexpected error occurred. Please refresh to continue.</p>
        <div class="blazor-error-actions">
            <a href="." class="button button-primary">Reload</a>
            <button class="button button-secondary" onclick="document.getElementById('blazor-error-ui').style.display='none'">
                Dismiss
            </button>
        </div>
    </div>
</div>

@code {
    private IJSObjectReference jsModule;
    private bool disposed = false;
    private bool sidebarCollapsed = false;
    private bool sidebarOpen = true;
    private string searchQuery = string.Empty;
    private List<AppSearchResult> searchResults = new();
    private bool showSearchResults = false;
    private bool showUserMenu = false;
    private bool searchExpanded = false;
    private Timer searchDebounceTimer;
    
    // === CORE PARAMETERS ===
    
    /// <summary>App title (required)</summary>
    [Parameter, AIParameter("Application name displayed in header", "Your App Name or company brand")] 
    public string Title { get; set; } = "RR.Blazor App";
    
    /// <summary>Logo image source</summary>
    [Parameter] public string Logo { get; set; }
    
    /// <summary>Current user for user menu and permissions</summary>
    [Parameter, AIParameter("Current logged-in user object", "AppUser with Name, Email, Avatar, Role properties")] 
    public AppUser CurrentUser { get; set; }
    
    /// <summary>Theme mode (light/dark/system)</summary>
    [Parameter, AIParameter("Theme preference", "light, dark, or system for auto-detection")] 
    public string Theme { get; set; } = "system";
    
    // === LAYOUT CONTROL ===
    
    /// <summary>Layout features configuration</summary>
    [Parameter, AIParameter("Control app shell features", "AppShellFeatures.All for full features, AppShellFeatures.Minimal for basic layout")] 
    public AppShellFeatures Features { get; set; } = AppShellFeatures.All;
    
    /// <summary>Make search collapsible on the right side</summary>
    [Parameter] public bool SearchCollapsible { get; set; } = false;
    
    /// <summary>Notification count for badge</summary>
    [Parameter] public int NotificationCount { get; set; }
    
    // === COMPUTED LAYOUT PROPERTIES ===
    
    private bool ShowSidebar => Features.HasFlag(AppShellFeatures.Sidebar);
    private bool ShowHeader => Features.HasFlag(AppShellFeatures.Header);
    private bool ShowToasts => Features.HasFlag(AppShellFeatures.Toasts);
    private bool ShowSearch => Features.HasFlag(AppShellFeatures.Search);
    private bool ShowNotifications => Features.HasFlag(AppShellFeatures.Notifications);
    private bool ShowThemeToggle => Features.HasFlag(AppShellFeatures.ThemeToggle);
    private bool ShowUserMenu => Features.HasFlag(AppShellFeatures.UserMenu);
    private bool ShowSidebarToggle => Features.HasFlag(AppShellFeatures.SidebarToggle);
    private bool ShowBreadcrumbs => Features.HasFlag(AppShellFeatures.Breadcrumbs);
    private bool ShowStatusBar => Features.HasFlag(AppShellFeatures.StatusBar);
    private bool ShowQuickActions => Features.HasFlag(AppShellFeatures.QuickActions);
    
    // === CONTENT PARAMETERS ===
    
    /// <summary>Page title for header</summary>
    [Parameter] public string PageTitle { get; set; } = "Dashboard";
    
    /// <summary>Page subtitle for header</summary>
    [Parameter] public string PageSubtitle { get; set; }
    
    /// <summary>Navigation items (smart default)</summary>
    [Parameter, AIParameter("Main navigation menu items", "List of AppNavItem with Text, Href, Icon properties")] 
    public List<AppNavItem> NavigationItems { get; set; }
    
    /// <summary>Breadcrumb items</summary>
    [Parameter] public List<AppNavItem> Breadcrumbs { get; set; }
    
    /// <summary>User permissions for nav filtering</summary>
    [Parameter] public string[] UserPermissions { get; set; }
    
    // === RENDER FRAGMENTS ===
    
    /// <summary>Custom logo content</summary>
    [Parameter] public RenderFragment LogoContent { get; set; }
    
    /// <summary>Custom navigation content</summary>
    [Parameter] public RenderFragment Navigation { get; set; }
    
    /// <summary>Sidebar footer content</summary>
    [Parameter] public RenderFragment SidebarFooter { get; set; }
    
    /// <summary>Left side header content</summary>
    [Parameter] public RenderFragment HeaderLeft { get; set; }
    
    /// <summary>Right side header content</summary>
    [Parameter] public RenderFragment HeaderRight { get; set; }
    
    /// <summary>User menu dropdown content</summary>
    [Parameter] public RenderFragment UserMenu { get; set; }
    
    /// <summary>Quick actions in header</summary>
    [Parameter] public RenderFragment QuickActions { get; set; }
    
    /// <summary>Floating quick actions</summary>
    [Parameter] public RenderFragment QuickActionsFloating { get; set; }
    
    /// <summary>Status bar content</summary>
    [Parameter] public RenderFragment StatusBar { get; set; }
    
    /// <summary>Main content</summary>
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    /// <summary>Content maximum width (e.g., "1200px", "90%"). Default is no constraint.</summary>
    [Parameter] public string ContentMaxWidth { get; set; } = null;
    
    /// <summary>Whether content should be centered when max width is applied</summary>
    [Parameter] public bool ContentCentered { get; set; } = true;
    
    // === EVENT CALLBACKS ===
    
    /// <summary>Theme changed callback</summary>
    [Parameter] public EventCallback<string> ThemeChanged { get; set; }
    
    /// <summary>Sidebar state changed callback</summary>
    [Parameter] public EventCallback<bool> SidebarCollapsedChanged { get; set; }
    
    /// <summary>Search query changed callback</summary>
    [Parameter] public EventCallback<string> SearchChanged { get; set; }
    
    /// <summary>Notification button clicked callback</summary>
    [Parameter] public EventCallback NotificationsClicked { get; set; }
    
    /// <summary>User menu clicked callback</summary>
    [Parameter] public EventCallback<AppUser> UserMenuClicked { get; set; }
    
    // === COMPUTED PROPERTIES ===
    
    private bool IsMobile { get; set; } = false;
    
    protected override async Task OnInitializedAsync()
    {
        // Load configuration (only for defaults, don't override user parameters)
        await ConfigService.LoadAsync();
        
        // Apply configuration defaults only if user hasn't provided values
        if (ConfigService.Current != null)
        {
            var config = ConfigService.Current;
            
            // Only set defaults if user hasn't provided values
            if (string.IsNullOrEmpty(PageTitle) && !string.IsNullOrEmpty(config.Title))
                PageTitle = config.Title;
            
            // Features are user-controlled, config provides intelligent defaults only
            if (Features == AppShellFeatures.All && config.GetDefaultFeatures() != AppShellFeatures.All)
                Features = config.GetDefaultFeatures();
        }
        
        // Set up navigation search provider
        if (NavigationItems?.Any() == true && ShowSearch)
        {
            var navProvider = new NavigationSearchProvider(NavigationItems);
            SearchService.RegisterSearchProvider(navProvider);
        }
        
        // Only set up default navigation if none provided and sidebar is enabled
        NavigationItems ??= ShowSidebar ? GetDefaultNavigation() : null;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !disposed)
        {
            try
            {
                jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/RR.Blazor/js/app-shell.js");
                await jsModule.InvokeVoidAsync("initialize");
                
                // Update IsMobile flag
                IsMobile = await jsModule.InvokeAsync<bool>("isMobile");
                
                // Fix mobile responsiveness issue - sidebar should be closed by default on mobile
                if (IsMobile)
                {
                    sidebarOpen = false;
                }
                
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Failed to initialize app shell JS: {ex.Message}");
            }
        }
    }
    
    private List<NavMenuItem> GetVisibleNavItems()
    {
        if (NavigationItems == null) return new List<NavMenuItem>();
        
        return NavigationItems
            .Where(item => item.CanAccess(CurrentUser, UserPermissions))
            .Cast<NavMenuItem>()
            .ToList();
    }
    
    private void ToggleSidebar()
    {
        if (IsMobile)
        {
            sidebarOpen = !sidebarOpen;
        }
        else
        {
            sidebarCollapsed = !sidebarCollapsed;
            SidebarCollapsedChanged.InvokeAsync(sidebarCollapsed);
        }
    }
    
    private void CloseSidebar()
    {
        sidebarOpen = false;
    }
    
    
    private string GetEffectiveTheme()
    {
        var currentTheme = ThemeService.CurrentTheme;
        var effectiveMode = currentTheme.GetEffectiveMode(ThemeService.IsSystemDark);
        return effectiveMode.ToString().ToLower();
    }
    
    private async Task HandleSearchChange()
    {
        try
        {
            searchDebounceTimer?.Dispose();
            
            if (string.IsNullOrWhiteSpace(searchQuery))
            {
                showSearchResults = false;
                searchResults.Clear();
                StateHasChanged();
                return;
            }
            
            searchDebounceTimer = new Timer(async _ =>
            {
                try
                {
                    if (!disposed)
                    {
                        await InvokeAsync(async () =>
                        {
                            if (!disposed)
                            {
                                searchResults = await SearchService.SearchAsync(searchQuery);
                                showSearchResults = searchResults.Any();
                                StateHasChanged();
                            }
                        });
                    }
                }
                catch (ObjectDisposedException) { }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"Search error: {ex.Message}");
                }
            }, null, 300, Timeout.Infinite);
            
            await SearchChanged.InvokeAsync(searchQuery);
        }
        catch (ObjectDisposedException) { }
    }
    
    private async Task HandleSearchResultClick(AppSearchResult result)
    {
        showSearchResults = false;
        searchQuery = string.Empty;
        
        await SearchService.AddToRecentAsync(result);
        
        if (result.OnClick != null)
        {
            await result.OnClick();
        }
        else if (!string.IsNullOrEmpty(result.Url) && IsValidUrl(result.Url))
        {
            await JS.InvokeVoidAsync("window.location.href", result.Url);
        }
        
        StateHasChanged();
    }
    
    private async Task HandleNotificationsClick()
    {
        await NotificationsClicked.InvokeAsync();
    }
    
    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }
    
    private void ExpandSearch()
    {
        searchExpanded = true;
    }
    
    private void CollapseSearch()
    {
        searchExpanded = false;
        searchQuery = string.Empty;
        showSearchResults = false;
        try
        {
            searchDebounceTimer?.Dispose();
            searchDebounceTimer = null;
        }
        catch { }
    }
    
    private string GetContentStyle()
    {
        return string.IsNullOrEmpty(ContentMaxWidth) ? "" : $"--content-max-width: {ContentMaxWidth};";
    }
    
    private string GetContentClasses()
    {
        return ContentCentered && !string.IsNullOrEmpty(ContentMaxWidth) ? "main-content-centered" : "";
    }
    
    private string GetHeaderClasses()
    {
        if (!ShowSidebar) return "header-sidebar-hidden";
        if (IsMobile) return "header-sidebar-hidden";
        return sidebarCollapsed ? "header-sidebar-collapsed" : "header-sidebar-expanded";
    }
    
    private static List<AppNavItem> GetDefaultNavigation()
    {
        return new List<AppNavItem>
        {
            AppNavItems.Dashboard(),
            AppNavItems.Settings(),
            AppNavItems.Profile()
        };
    }
    
    private static bool IsValidUrl(string url)
    {
        return !string.IsNullOrEmpty(url) && 
               (url.StartsWith('/') || 
                url.StartsWith("./") || 
                url.StartsWith("../") ||
                (Uri.TryCreate(url, UriKind.Absolute, out var uri) && 
                 (uri.Scheme == "http" || uri.Scheme == "https")));
    }
    
    public async ValueTask DisposeAsync()
    {
        if (!disposed)
        {
            disposed = true;
            
            try
            {
                searchDebounceTimer?.Dispose();
                searchDebounceTimer = null;
            }
            catch { }
            
            if (jsModule != null)
            {
                try
                {
                    await jsModule.DisposeAsync();
                }
                catch { }
                finally
                {
                    jsModule = null;
                }
            }
        }
    }
}

