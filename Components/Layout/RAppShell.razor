@** 
<summary>
Enterprise-grade application shell with zero-config setup. 
Ultra-clean, responsive, and customizable for any business application.
</summary>
<category>Layout</category>
<complexity>Complex</complexity>
<ai-prompt>Create enterprise app layout with collapsible sidebar and full-width header</ai-prompt>
<ai-common-use>main app layout, enterprise dashboards, business applications, SaaS platforms</ai-common-use>
<ai-avoid>Don't use for simple pages without navigation. Use RSection for content organization instead.</ai-avoid>
<ai-pattern name="zero-config">Title only for minimal app setup</ai-pattern>
<ai-pattern name="enterprise">All parameters for maximum customization</ai-pattern>
<ai-pattern name="responsive">Auto-responsive with mobile-friendly behavior</ai-pattern>
**@

@using RR.Blazor.Models
@using RR.Blazor.Services
@using RR.Blazor.Enums
@using RR.Blazor.Attributes
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web

@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject IThemeService ThemeService
@inject IToastService ToastService
@inject IAppSearchService SearchService
@inject IAppConfigurationService ConfigService
@implements IAsyncDisposable

@attribute [Component("RAppShell", Category = "Layout", Complexity = ComponentComplexity.Complex)]
@attribute [AIOptimized(Prompt = "Create enterprise app layout with collapsible sidebar and full-width header", 
                       CommonUse = "enterprise dashboards, business applications, SaaS platforms", 
                       AvoidUsage = "Don't use for simple pages without navigation")]

<RThemeProvider>
<div class="@GetAppShellClasses()" data-theme="@GetEffectiveTheme()">
    <!-- Full-Width Header (Over Sidebar) -->
    @if (ShowHeader)
    {
        <header class="@GetHeaderClasses()">
            <!-- Left Section: Toggle + Logo + Title -->
            <div class="@GetHeaderLeftClasses()">
                @if (ShowSidebar && ShowSidebarToggle)
                {
                    <RButton Icon="@GetToggleIcon()" 
                             Variant="ButtonVariant.Ghost"
                             Size="ButtonSize.Small"
                             OnClick="ToggleSidebar"
                             AriaLabel="Toggle sidebar"
                             Class="shrink-0" />
                }
                
                @if (LogoContent != null)
                {
                    @LogoContent
                }
                else if (!string.IsNullOrEmpty(Logo))
                {
                    <div class="@GetLogoClasses()">
                        <img src="@Logo" alt="@Title" />
                        @if (!string.IsNullOrEmpty(Title))
                        {
                            <span>@Title</span>
                        }
                    </div>
                }
                else if (!string.IsNullOrEmpty(Title))
                {
                    <div class="@GetLogoClasses()">
                        <span>@Title</span>
                    </div>
                }
                
                @if (HeaderLeft != null)
                {
                    @HeaderLeft
                }
                else
                {
                    <!-- Page Title & Breadcrumbs -->
                    <div class="min-w-0 flex-1">
                        <div class="d-flex align-center gap-2 flex-wrap">
                            @if (!string.IsNullOrEmpty(PageTitle))
                            {
                                <h1 class="text-lg font-semibold text-primary ma-0">@PageTitle</h1>
                            }
                            @if (ShowBreadcrumbs && Breadcrumbs?.Any() == true)
                            {
                                <nav class="d-flex align-center gap-2" aria-label="Breadcrumb">
                                    <ol class="d-flex align-center flex-wrap list-spacious ma-0 pa-0 gap-2">
                                    @foreach (var (item, index) in Breadcrumbs.Select((item, index) => (item, index)))
                                    {
                                        var isLast = index == Breadcrumbs.Count - 1;
                                        
                                        <li class="d-flex align-center gap-1">
                                            @if (!string.IsNullOrEmpty(item.Icon) && index == 0)
                                            {
                                                <i class="material-symbols-rounded text-lg text-secondary shrink-0">@item.Icon</i>
                                            }
                                            
                                            @if (isLast || string.IsNullOrEmpty(item.Href))
                                            {
                                                <span class="text-body-2 text-primary font-medium leading-none shrink-0" 
                                                      aria-current="@(isLast ? "page" : null)">
                                                    @item.Text
                                                </span>
                                            }
                                            else
                                            {
                                                <a href="@item.Href" 
                                                   class="text-body-2 text-secondary font-normal leading-none shrink-0 text-decoration-none transition-colors hover:text-primary hover:text-decoration-underline focus:outline focus:outline-2 focus:outline-primary focus:outline-offset-2">
                                                    @item.Text
                                                </a>
                                            }
                                            
                                            @if (!isLast)
                                            {
                                                <span class="d-flex items-center text-tertiary text-lg shrink-0 select-none" aria-hidden="true">
                                                    <i class="material-symbols-rounded">chevron_right</i>
                                                </span>
                                            }
                                        </li>
                                    }
                                    </ol>
                                </nav>
                            }
                        </div>
                        @if (!string.IsNullOrEmpty(PageSubtitle))
                        {
                            <div>
                                <p class="text-sm text-secondary ma-0 leading-tight">@PageSubtitle</p>
                            </div>
                        }
                    </div>
                }
            </div>
            
            <!-- Right Section: Search + Actions + User -->
            <div class="@GetHeaderRightClasses()">
                @if (ShowSearch)
                {
                    <div class="@GetSearchClasses()">
                        @if (SearchCollapsible)
                        {
                            @if (searchExpanded)
                            {
                                <RButton Icon="close" 
                                         Variant="ButtonVariant.Ghost" 
                                         Size="ButtonSize.Medium"
                                         OnClick="CollapseSearch" 
                                         AriaLabel="Close search" 
                                         Class="search-close-btn" />
                                <div class="relative">
                                    <RTextInput Type="FieldType.Search"
                                               Placeholder="Search..."
                                               Value="@searchQuery"
                                               ValueChanged="@(value => { searchQuery = value; HandleSearchChange(); })"
                                               Class="search-input-expanded"
                                               Id="app-shell-search-input"
                                               OnKeyDown="@HandleSearchKeyDown" />
                                </div>
                            }
                            else
                            {
                                <RButton Icon="search" 
                                         Variant="ButtonVariant.Ghost" 
                                         Size="ButtonSize.Medium"
                                         OnClick="@(async () => await ExpandSearch())" 
                                         AriaLabel="Open search" 
                                         Class="search-toggle-btn" />
                            }
                        }
                        else
                        {
                            <div class="relative">
                                <RTextInput Type="FieldType.Search"
                                           Placeholder="Search..."
                                           Value="@searchQuery"
                                           ValueChanged="@(value => { searchQuery = value; HandleSearchChange(); })"
                                           Class="search-input-expanded"
                                           StartIcon="search"
                                           OnKeyDown="@HandleSearchKeyDown" />
                            </div>
                        }
                        
                        <!-- Search Results -->
                        @if (showSearchResults && searchResults.Any())
                        {
                            <div class="absolute top-100 left-0 right-0 bg-surface-elevated shadow-lg rounded-lg mt-1 py-2 z-50 max-h-300 overflow-y-auto"
                                 role="listbox"
                                 aria-label="Search results">
                                @foreach (var (result, index) in searchResults.Take(8).Select((r, i) => (r, i)))
                                {
                                    <button class="@GetSearchResultClasses(index) w-full text-left px-3 py-2 hover:bg-surface flex items-center gap-3 group focus:bg-surface focus:outline-none"
                                            @onclick="() => HandleSearchResultClick(result)"
                                            role="option"
                                            aria-selected="@(selectedResultIndex == index)"
                                            tabindex="-1"
                                            data-result-index="@index">
                                        @if (!string.IsNullOrEmpty(result.Icon))
                                        {
                                            <i class="material-symbols-rounded text-sm text-secondary group-hover:text-primary">@result.Icon</i>
                                        }
                                        <div class="flex-1 min-w-0">
                                            <div class="text-sm font-medium text-primary">@result.Title</div>
                                            @if (!string.IsNullOrEmpty(result.Description))
                                            {
                                                <div class="text-xs text-secondary truncate">@result.Description</div>
                                            }
                                        </div>
                                        <span class="text-xs text-tertiary">@result.Category</span>
                                    </button>
                                }
                            </div>
                        }
                    </div>
                }
                
                @if (ShowNotifications)
                {
                    <RButton Icon="notifications" 
                             Variant="ButtonVariant.Ghost" 
                             Size="ButtonSize.Small"
                             ShowBadge="@(NotificationCount > 0)"
                             BadgeCount="@NotificationCount"
                             OnClick="HandleNotificationsClick"
                             AriaLabel="Notifications" />
                }
                
                @if (QuickActions != null)
                {
                    @QuickActions
                }
                
                @if (HeaderRight != null)
                {
                    @HeaderRight
                }
                
                @if (ShowThemeToggle)
                {
                    <RThemeSwitcher />
                }
                
                @if (CurrentUser != null && ShowUserMenu && UserMenu != null)
                {
                    <div class="relative" @onclick="ToggleUserMenu">
                        <RButton Variant="ButtonVariant.Ghost" Size="ButtonSize.Small">
                            <div class="flex items-center gap-2">
                                <RAvatar Text="@CurrentUser.GetInitials()" 
                                         ImageSrc="@CurrentUser.Avatar"
                                         Size="AvatarSize.Small"
                                         ShowStatus="true"
                                         Status="@(CurrentUser.IsOnline ? AvatarStatus.Online : AvatarStatus.Offline)" />
                                <span class="text-sm font-medium hidden md:inline">@CurrentUser.GetDisplayName()</span>
                                <i class="material-symbols-rounded text-sm">@(showUserMenu ? "expand_less" : "expand_more")</i>
                            </div>
                        </RButton>
                        @if (showUserMenu)
                        {
                            <div class="absolute top-100 right-0 mt-1 z-50">
                                @UserMenu
                            </div>
                        }
                    </div>
                }
            </div>
        </header>
    }
    
    <!-- Collapsible Sidebar -->
    @if (ShowSidebar)
    {
        <aside class="@GetSidebarClasses()">
            <!-- Navigation Content -->
            <div class="flex-1 overflow-y-auto">
                @if (Navigation != null)
                {
                    <CascadingValue Value="sidebarCollapsed" Name="SidebarCollapsed">
                        @Navigation
                    </CascadingValue>
                }
                else if (NavigationItems?.Any() == true)
                {
                    <RNavMenu Items="@GetVisibleNavItems()" />
                }
            </div>
            
            <!-- Sidebar Footer -->
            @if (SidebarFooter != null)
            {
                <div class="shrink-0 border-t border-light/20 pt-4">
                    <CascadingValue Value="sidebarCollapsed" Name="SidebarCollapsed">
                        @SidebarFooter
                    </CascadingValue>
                </div>
            }
            else if (CurrentUser != null && ShowUserMenu && !ShowHeader)
            {
                <div class="shrink-0 border-t border-light/20 pt-4">
                    <div class="flex items-center gap-3 px-4 py-3">
                        <RAvatar Text="@CurrentUser.GetInitials()" 
                                 ImageSrc="@CurrentUser.Avatar"
                                 Size="AvatarSize.Small"
                                 ShowStatus="true"
                                 Status="@(CurrentUser.IsOnline ? AvatarStatus.Online : AvatarStatus.Offline)" />
                        @if (!sidebarCollapsed)
                        {
                            <div class="flex-1 min-w-0">
                                <div class="text-sm font-medium text-primary truncate">@CurrentUser.GetDisplayName()</div>
                                <div class="text-xs text-secondary truncate">@CurrentUser.Role</div>
                            </div>
                        }
                    </div>
                </div>
            }
        </aside>
    }
    
    <!-- Main Content Area -->
    <main class="@GetMainClasses()">
        @if (AutoWrapContent)
        {
            <RContent MaxWidth="@DefaultContentMaxWidth" 
                      Density="@DefaultContentDensity"
                      FullWidth="@DefaultContentFullWidth"
                      Centered="@DefaultContentCentered"
                      Class="@DefaultContentClass">
                @ChildContent
            </RContent>
        }
        else
        {
            @ChildContent
        }
    </main>
    
    <!-- Mobile Backdrop -->
    @if (ShowSidebar && sidebarOpen && IsMobile)
    {
        <div class="@GetBackdropClasses()" @onclick="CloseSidebar"></div>
    }
    
    <!-- Toast Container -->
    @if (ShowToasts)
    {
        <RToastContainer />
    }
    
    <!-- Modal Provider -->
    <RModalProvider />
</div>
</RThemeProvider>

@code {
    private IJSObjectReference jsModule;
    private bool disposed = false;
    private bool sidebarCollapsed = false;
    private bool sidebarOpen = true;
    private string searchQuery = string.Empty;
    private List<AppSearchResult> searchResults = new();
    private bool showSearchResults = false;
    private bool showUserMenu = false;
    private bool searchExpanded = false;
    private Timer searchDebounceTimer;
    private int selectedResultIndex = -1;
    
    // ===== CORE PARAMETERS =====
    
    /// <summary>App title (required)</summary>
    [Parameter, AIParameter("Application name displayed in header", "Your App Name")] 
    public string Title { get; set; } = string.Empty;
    
    /// <summary>Logo image source</summary>
    [Parameter] public string Logo { get; set; } = string.Empty;
    
    /// <summary>Current user for user menu and permissions</summary>
    [Parameter, AIParameter("Current logged-in user object", "AppUser with Name, Email, Avatar, Role properties")] 
    public AppUser CurrentUser { get; set; }
    
    /// <summary>Theme mode (light/dark/system)</summary>
    [Parameter, AIParameter("Theme preference", "light, dark, or system for auto-detection")] 
    public string Theme { get; set; } = "system";
    
    // ===== LAYOUT CONTROL =====
    
    /// <summary>Layout features configuration</summary>
    [Parameter, AIParameter("Control app shell features", "AppShellFeatures.All for full features, AppShellFeatures.Minimal for basic layout")] 
    public AppShellFeatures Features { get; set; } = AppShellFeatures.All;
    
    /// <summary>Make search collapsible on mobile</summary>
    [Parameter] public bool SearchCollapsible { get; set; } = true;
    
    /// <summary>Notification count for badge</summary>
    [Parameter] public int NotificationCount { get; set; }
    
    /// <summary>Sidebar collapsed by default</summary>
    [Parameter] public bool SidebarCollapsedDefault { get; set; } = false;
    
    // ===== COMPUTED LAYOUT PROPERTIES =====
    
    private bool ShowSidebar => Features.HasFlag(AppShellFeatures.Sidebar);
    private bool ShowHeader => Features.HasFlag(AppShellFeatures.Header);
    private bool ShowToasts => Features.HasFlag(AppShellFeatures.Toasts);
    private bool ShowSearch => Features.HasFlag(AppShellFeatures.Search);
    private bool ShowNotifications => Features.HasFlag(AppShellFeatures.Notifications);
    private bool ShowThemeToggle => Features.HasFlag(AppShellFeatures.ThemeToggle);
    private bool ShowUserMenu => Features.HasFlag(AppShellFeatures.UserMenu);
    private bool ShowSidebarToggle => Features.HasFlag(AppShellFeatures.SidebarToggle);
    private bool ShowBreadcrumbs => Features.HasFlag(AppShellFeatures.Breadcrumbs);
    
    // ===== CONTENT PARAMETERS =====
    
    /// <summary>Page title for header</summary>
    [Parameter] public string PageTitle { get; set; } = string.Empty;
    
    /// <summary>Page subtitle for header</summary>
    [Parameter] public string PageSubtitle { get; set; } = string.Empty;
    
    /// <summary>Navigation items</summary>
    [Parameter, AIParameter("Main navigation menu items", "List of AppNavItem with Text, Href, Icon properties")] 
    public List<AppNavItem> NavigationItems { get; set; }
    
    /// <summary>Breadcrumb items</summary>
    [Parameter] public List<AppNavItem> Breadcrumbs { get; set; }
    
    /// <summary>User permissions for nav filtering</summary>
    [Parameter] public string[] UserPermissions { get; set; }
    
    // ===== RENDER FRAGMENTS =====
    
    /// <summary>Custom logo content</summary>
    [Parameter] public RenderFragment LogoContent { get; set; }
    
    /// <summary>Custom navigation content</summary>
    [Parameter] public RenderFragment Navigation { get; set; }
    
    /// <summary>Sidebar footer content (perfect for role switchers)</summary>
    [Parameter] public RenderFragment SidebarFooter { get; set; }
    
    /// <summary>Left side header content</summary>
    [Parameter] public RenderFragment HeaderLeft { get; set; }
    
    /// <summary>Right side header content</summary>
    [Parameter] public RenderFragment HeaderRight { get; set; }
    
    /// <summary>User menu dropdown content</summary>
    [Parameter] public RenderFragment UserMenu { get; set; }
    
    /// <summary>Quick actions in header</summary>
    [Parameter] public RenderFragment QuickActions { get; set; }
    
    /// <summary>Main content</summary>
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    // ===== STYLING PARAMETERS =====
    
    /// <summary>Custom CSS class for the app shell container</summary>
    [Parameter] public string Class { get; set; } = string.Empty;
    
    /// <summary>Custom CSS style for the app shell container</summary>
    [Parameter] public string Style { get; set; } = string.Empty;
    
    /// <summary>Custom CSS class for the header</summary>
    [Parameter] public string HeaderClass { get; set; } = string.Empty;
    
    /// <summary>Custom CSS class for the sidebar</summary>
    [Parameter] public string SidebarClass { get; set; } = string.Empty;
    
    /// <summary>Custom CSS class for the main content area</summary>
    [Parameter] public string MainClass { get; set; } = string.Empty;
    
    // ===== CONTENT WRAPPER PARAMETERS =====
    
    /// <summary>Automatically wrap content in RContent component for app-shell awareness</summary>
    [Parameter, AIParameter("Auto-wrap page content in RContent", "true for automatic app-shell positioning, false for manual control")] 
    public bool AutoWrapContent { get; set; } = true;
    
    /// <summary>Default max width for auto-wrapped content</summary>
    [Parameter, AIParameter("Default content max width", "lg for standard content, xl for wide dashboards, none for full width")] 
    public string DefaultContentMaxWidth { get; set; } = "lg";
    
    /// <summary>Default density for auto-wrapped content</summary>
    [Parameter, AIParameter("Default content spacing density", "Normal for standard spacing, Dense for compact layouts")] 
    public ComponentDensity DefaultContentDensity { get; set; } = ComponentDensity.Normal;
    
    /// <summary>Default full width setting for auto-wrapped content</summary>
    [Parameter, AIParameter("Default content full width", "false for constrained content, true for dashboard-style layouts")] 
    public bool DefaultContentFullWidth { get; set; } = false;
    
    /// <summary>Default centered setting for auto-wrapped content</summary>
    [Parameter, AIParameter("Default content centering", "false for left-aligned content, true for centered forms/articles")] 
    public bool DefaultContentCentered { get; set; } = false;
    
    /// <summary>Default CSS class for auto-wrapped content</summary>
    [Parameter] public string DefaultContentClass { get; set; } = string.Empty;
    
    // ===== EVENT CALLBACKS =====
    
    /// <summary>Theme changed callback</summary>
    [Parameter] public EventCallback<string> ThemeChanged { get; set; }
    
    /// <summary>Sidebar state changed callback</summary>
    [Parameter] public EventCallback<bool> SidebarCollapsedChanged { get; set; }
    
    /// <summary>Search query changed callback</summary>
    [Parameter] public EventCallback<string> SearchChanged { get; set; }
    
    /// <summary>Notification button clicked callback</summary>
    [Parameter] public EventCallback NotificationsClicked { get; set; }
    
    /// <summary>User menu clicked callback</summary>
    [Parameter] public EventCallback<AppUser> UserMenuClicked { get; set; }
    
    // ===== COMPUTED PROPERTIES =====
    
    private bool IsMobile { get; set; } = false;
    
    protected override async Task OnInitializedAsync()
    {
        // Initialize sidebar state
        sidebarCollapsed = SidebarCollapsedDefault;
        
        // Load configuration defaults
        await ConfigService.LoadAsync();
        if (ConfigService.Current != null)
        {
            var config = ConfigService.Current;
            if (string.IsNullOrEmpty(PageTitle) && !string.IsNullOrEmpty(config.Title))
                PageTitle = config.Title;
        }
        
        // Set up search provider
        if (NavigationItems?.Any() == true && ShowSearch)
        {
            var navProvider = new NavigationSearchProvider(NavigationItems);
            SearchService.RegisterSearchProvider(navProvider);
        }
        
        // Default navigation if none provided
        NavigationItems ??= ShowSidebar ? GetDefaultNavigation() : null;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !disposed)
        {
            try
            {
                jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/RR.Blazor/js/app-shell.js");
                if (jsModule != null)
                {
                    await jsModule.InvokeVoidAsync("initialize");
                    
                    // Update mobile state
                    IsMobile = await jsModule.InvokeAsync<bool>("isMobile");
                    
                    // Mobile sidebar should be closed by default
                    if (IsMobile)
                    {
                        sidebarOpen = false;
                    }
                    
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                // Log warning instead of error since this is non-critical
                Console.WriteLine($"Warning: App shell JS initialization failed: {ex.Message}");
            }
        }
    }
    
    private List<NavMenuItem> GetVisibleNavItems()
    {
        if (NavigationItems == null) return new List<NavMenuItem>();
        
        return NavigationItems
            .Where(item => item.CanAccess(CurrentUser, UserPermissions))
            .Cast<NavMenuItem>()
            .ToList();
    }
    
    private void ToggleSidebar()
    {
        if (IsMobile)
        {
            sidebarOpen = !sidebarOpen;
        }
        else
        {
            sidebarCollapsed = !sidebarCollapsed;
            SidebarCollapsedChanged.InvokeAsync(sidebarCollapsed);
        }
    }
    
    private void CloseSidebar()
    {
        sidebarOpen = false;
    }
    
    private string GetToggleIcon()
    {
        if (IsMobile) return sidebarOpen ? "close" : "menu";
        return sidebarCollapsed ? "menu_open" : "menu";
    }
    
    private string GetEffectiveTheme()
    {
        var currentTheme = ThemeService.CurrentTheme;
        var effectiveMode = currentTheme.GetEffectiveMode(ThemeService.IsSystemDark);
        return effectiveMode.ToString().ToLower();
    }
    
    private async Task HandleSearchChange()
    {
        try
        {
            searchDebounceTimer?.Dispose();
            
            if (string.IsNullOrWhiteSpace(searchQuery))
            {
                showSearchResults = false;
                searchResults.Clear();
                selectedResultIndex = -1;
                StateHasChanged();
                return;
            }
            
            searchDebounceTimer = new Timer(async _ =>
            {
                try
                {
                    if (!disposed)
                    {
                        await InvokeAsync(async () =>
                        {
                            if (!disposed)
                            {
                                searchResults = await SearchService.SearchAsync(searchQuery);
                                showSearchResults = searchResults.Any();
                                selectedResultIndex = -1; // Reset selection when new results load
                                StateHasChanged();
                            }
                        });
                    }
                }
                catch (ObjectDisposedException) { }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"Search error: {ex.Message}");
                }
            }, null, 300, Timeout.Infinite);
            
            await SearchChanged.InvokeAsync(searchQuery);
        }
        catch (ObjectDisposedException) { }
    }
    
    private async Task HandleSearchResultClick(AppSearchResult result)
    {
        showSearchResults = false;
        searchQuery = string.Empty;
        selectedResultIndex = -1;
        
        await SearchService.AddToRecentAsync(result);
        
        if (result.OnClick != null)
        {
            await result.OnClick();
        }
        else if (!string.IsNullOrEmpty(result.Url))
        {
            await JS.InvokeVoidAsync("window.location.href", result.Url);
        }
        
        StateHasChanged();
    }
    
    private async Task HandleNotificationsClick()
    {
        await NotificationsClicked.InvokeAsync();
    }
    
    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }
    
    private async Task ExpandSearch()
    {
        searchExpanded = true;
        StateHasChanged();
        
        // Focus the search input after it becomes visible
        await Task.Delay(50); // Small delay to ensure DOM is updated
        try
        {
            await JS.InvokeVoidAsync("focusElement", "app-shell-search-input");
        }
        catch
        {
            // Ignore focus errors
        }
    }
    
    private void CollapseSearch()
    {
        searchExpanded = false;
        searchQuery = string.Empty;
        showSearchResults = false;
        selectedResultIndex = -1;
        searchDebounceTimer?.Dispose();
        searchDebounceTimer = null;
    }
    
    private async Task HandleSearchKeyDown(KeyboardEventArgs e)
    {
        if (!showSearchResults || !searchResults.Any()) return;
        
        switch (e.Key)
        {
            case "ArrowDown":
                selectedResultIndex = Math.Min(selectedResultIndex + 1, searchResults.Count - 1);
                await FocusSelectedResult();
                StateHasChanged();
                break;
                
            case "ArrowUp":
                selectedResultIndex = Math.Max(selectedResultIndex - 1, -1);
                if (selectedResultIndex == -1)
                {
                    await FocusSearchInput();
                }
                else
                {
                    await FocusSelectedResult();
                }
                StateHasChanged();
                break;
                
            case "Enter":
                if (selectedResultIndex >= 0 && selectedResultIndex < searchResults.Count)
                {
                    await HandleSearchResultClick(searchResults[selectedResultIndex]);
                }
                break;
                
            case "Escape":
                CollapseSearch();
                StateHasChanged();
                break;
        }
    }
    
    private async Task FocusSelectedResult()
    {
        if (selectedResultIndex >= 0)
        {
            try
            {
                await JS.InvokeVoidAsync("focusElement", $"[data-result-index='{selectedResultIndex}']");
            }
            catch
            {
                // Ignore focus errors
            }
        }
    }
    
    private async Task FocusSearchInput()
    {
        try
        {
            await JS.InvokeVoidAsync("focusElement", "app-shell-search-input");
        }
        catch
        {
            // Ignore focus errors
        }
    }
    
    private string GetSearchResultClasses(int index)
    {
        var baseClasses = "search-result-item";
        if (selectedResultIndex == index)
        {
            baseClasses += " bg-surface";
        }
        return baseClasses;
    }
    
    // ===== CSS CLASS GENERATORS =====
    
    private string GetAppShellClasses()
    {
        var classes = new List<string> { "app-shell", "min-h-screen" };
        
        if (!string.IsNullOrEmpty(Class))
            classes.Add(Class);
        
        if (sidebarCollapsed) classes.Add("sidebar-collapsed");
        if (sidebarOpen && IsMobile) classes.Add("sidebar-open");
        if (IsMobile) classes.Add("mobile");
        
        return string.Join(" ", classes);
    }
    
    private string GetHeaderClasses()
    {
        var classes = new List<string> { "app-header" };
        
        if (!string.IsNullOrEmpty(HeaderClass))
            classes.Add(HeaderClass);
        
        return string.Join(" ", classes);
    }
    
    private string GetHeaderLeftClasses()
    {
        return "header-left";
    }
    
    private string GetHeaderRightClasses()
    {
        return "header-right";
    }
    
    private string GetLogoClasses()
    {
        return "app-logo";
    }
    
    private string GetSearchClasses()
    {
        var classes = new List<string> { "app-search" };
        
        if (SearchCollapsible)
            classes.Add("search-collapsible");
            
        return string.Join(" ", classes);
    }
    
    private string GetSidebarClasses()
    {
        var classes = new List<string> { "app-sidebar" };
        
        if (!string.IsNullOrEmpty(SidebarClass))
            classes.Add(SidebarClass);
        
        if (sidebarCollapsed) classes.Add("collapsed");
        if (sidebarOpen && IsMobile) classes.Add("open");
        
        return string.Join(" ", classes);
    }
    
    private string GetMainClasses()
    {
        var classes = new List<string> { "app-main" };
        
        if (AutoWrapContent)
            classes.Add("auto-wrap-content");
            
        if (DefaultContentFullWidth)
            classes.Add("full-width-content");
        
        if (!string.IsNullOrEmpty(MainClass))
            classes.Add(MainClass);
        
        return string.Join(" ", classes);
    }
    
    private string GetBackdropClasses()
    {
        var classes = new List<string> { "mobile-backdrop" };
        if (sidebarOpen && IsMobile) classes.Add("active");
        return string.Join(" ", classes);
    }
    
    private static List<AppNavItem> GetDefaultNavigation()
    {
        return new List<AppNavItem>
        {
            AppNavItems.Dashboard(),
            AppNavItems.Settings(),
            AppNavItems.Profile()
        };
    }
    
    public async ValueTask DisposeAsync()
    {
        if (!disposed)
        {
            disposed = true;
            
            try
            {
                searchDebounceTimer?.Dispose();
                searchDebounceTimer = null;
            }
            catch { }
            
            if (jsModule != null)
            {
                try
                {
                    await jsModule.DisposeAsync();
                }
                catch { }
                finally
                {
                    jsModule = null;
                }
            }
        }
    }
}