@** 
<summary>
Professional content section component with header, collapsible content, and footer areas.
Ideal for organizing page content with consistent styling and optional interactive features.
</summary>
<category>Layout</category>
<complexity>Simple</complexity>
<ai-prompt>Create content section with header and body</ai-prompt>
<ai-common-use>page sections, content organization, collapsible panels, form groups</ai-common-use>
<ai-avoid>Don't use for main app layout - use RAppShell instead. Avoid for simple content without headers.</ai-avoid>
<ai-pattern name="basic-section">Title and ChildContent for simple content sections</ai-pattern>
<ai-pattern name="collapsible-section">Collapsible="true" for expandable content panels</ai-pattern>
<ai-pattern name="icon-section">Icon and Title for branded section headers</ai-pattern>
<ai-pattern name="action-section">TitleContent for sections with header actions</ai-pattern>
**@
@using RR.Blazor.Enums
@using RR.Blazor.Attributes

@attribute [Component("RSection", Category = "Layout", Complexity = ComponentComplexity.Simple)]
@attribute [AIOptimized(Prompt = "Create content section with header and body", 
                       CommonUse = "page sections, content organization, collapsible panels", 
                       AvoidUsage = "Don't use for main app layout - use RAppShell instead")]

<section class="section @GetSectionClasses()" 
         @onclick="HandleClick"
         role="@(Collapsible ? "button" : null)"
         aria-expanded="@(Collapsible ? (!Collapsed).ToString().ToLower() : null)"
         aria-controls="@(Collapsible ? $"section-content-{SectionId}" : null)"
         tabindex="@(Collapsible ? 0 : null)">
    
    @* Header *@
    @if (HasHeader)
    {
        <header class="section-header @GetHeaderClasses()" @onclick="HandleHeaderClick">
            @if (!string.IsNullOrEmpty(Title) || TitleContent != null)
            {
                <div class="section-title @GetTitleSectionClasses()">
                    @if (!string.IsNullOrEmpty(Icon))
                    {
                        <i class="material-symbols-rounded mr-3 @GetIconSizeClass()">@Icon</i>
                    }
                    
                    <div class="grow">
                        @if (!string.IsNullOrEmpty(Title))
                        {
                            <h2 class="section-title @GetTitleClasses()">@Title</h2>
                        }
                        
                        @if (!string.IsNullOrEmpty(Subtitle))
                        {
                            <div class="section-subtitle">@Subtitle</div>
                        }
                        
                        @TitleContent
                    </div>
                    
                    @if (Collapsible)
                    {
                        <div class="ml-3 transition-transform @(Collapsed ? "" : "rotate-180")">
                            <i class="material-symbols-rounded text-secondary">expand_more</i>
                        </div>
                    }
                </div>
            }
            
        </header>
    }
    
    @* Content *@
    <div id="@(Collapsible ? $"section-content-{SectionId}" : "")" 
         class="section-content @GetContentClasses()">
        @ChildContent
    </div>
    
    @* Footer *@
    @if (FooterContent != null)
    {
        <footer class="section-footer @GetFooterClasses()">
            @FooterContent
        </footer>
    }
</section>

@code {
    /// <summary>Section identifier</summary>
    [Parameter] public string SectionId { get; set; } = Guid.NewGuid().ToString("N")[..8];
    
    /// <summary>Section title</summary>
    [Parameter, AIParameter("Section header title", "Display name for the content section")] 
    public string Title { get; set; }
    
    /// <summary>Section subtitle</summary>
    [Parameter, AIParameter("Optional subtitle text", "Additional description below title")] 
    public string Subtitle { get; set; }
    
    /// <summary>Icon for header</summary>
    [Parameter, AIParameter("Material icon for section", "settings, dashboard, people, etc.")] 
    public string Icon { get; set; }
    
    /// <summary>Whether section is collapsible</summary>
    [Parameter, AIParameter("Enable expand/collapse functionality", "true for interactive sections")] 
    public bool Collapsible { get; set; }
    
    /// <summary>Whether section is collapsed (if collapsible)</summary>
    [Parameter] public bool Collapsed { get; set; }
    
    /// <summary>Callback when collapsed state changes</summary>
    [Parameter] public EventCallback<bool> CollapsedChanged { get; set; }
    
    
    /// <summary>Whether to remove header border</summary>
    [Parameter] public bool NoHeaderBorder { get; set; }
    
    /// <summary>Whether to remove footer border</summary>
    [Parameter] public bool NoFooterBorder { get; set; }
    
    /// <summary>Whether to remove content padding</summary>
    [Parameter, AIParameter("Remove inner content padding", "true for full-width content like tables")] 
    public bool NoPadding { get; set; }
    
    /// <summary>Additional CSS classes</summary>
    [Parameter] public string Class { get; set; }
    
    /// <summary>Main content</summary>
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    /// <summary>Title content area</summary>
    [Parameter] public RenderFragment TitleContent { get; set; }
    
    /// <summary>Footer content area</summary>
    [Parameter] public RenderFragment FooterContent { get; set; }
    
    /// <summary>Section click event handler</summary>
    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
    
    
    /// <summary>Collapse/expand event handler</summary>
    [Parameter] public EventCallback<bool> OnToggleCollapse { get; set; }
    
    private bool HasHeader => !string.IsNullOrEmpty(Title) || TitleContent != null;
    
    private string GetSectionClasses()
    {
        var classes = new List<string> { "flex", "flex-col" };
        
        if (Collapsible)
        {
            classes.Add("section-collapsible");
        }
        
        
        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetHeaderClasses()
    {
        var classes = new List<string>
        {
            "flex",
            "items-center",
            "justify-between"
        };
        
        if (!NoHeaderBorder)
        {
            classes.AddRange(new[] { "pb-3", "border-b", "border-light" });
        }
        
        if (Collapsible)
        {
            classes.AddRange(new[] { "cursor-pointer", "user-select-none", "hover:bg-surface-secondary", "rounded-md", "px-3", "py-2", "mx-3", "my-2" });
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetTitleSectionClasses()
    {
        return "flex items-center grow";
    }
    
    private string GetTitleClasses()
    {
        return "text-xl font-semibold text-primary mb-0";
    }
    
    private string GetContentClasses()
    {
        var classes = new List<string> { "grow", "min-h-0" };
        
        if (Collapsible && Collapsed)
        {
            classes.Add("section-content-collapsed");
        }
        
        if (!NoPadding)
        {
            classes.Add("py-4");
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetFooterClasses()
    {
        var classes = new List<string>
        {
            "flex",
            "items-center",
            "justify-between"
        };
        
        if (!NoFooterBorder)
        {
            classes.AddRange(new[] { "pt-3", "border-t", "border-light" });
        }
        
        return string.Join(" ", classes);
    }
    
    
    private string GetIconSizeClass()
    {
        return "text-lg";
    }
    
    private async Task HandleClick(MouseEventArgs e)
    {
        await OnClick.InvokeAsync(e);
    }
    
    private async Task HandleHeaderClick(MouseEventArgs e)
    {
        if (Collapsible)
        {
            Collapsed = !Collapsed;
            await CollapsedChanged.InvokeAsync(Collapsed);
            await OnToggleCollapse.InvokeAsync(Collapsed);
        }
    }
    
}

