@using RR.Blazor.Enums
@* RSection - Section wrapper with header/content areas using utility classes *@

<section class="section @GetSectionClasses()" 
         @onclick="HandleClick"
         role="@(IsCollapsible ? "button" : null)"
         aria-expanded="@(IsCollapsible ? (!IsCollapsed).ToString().ToLower() : null)"
         aria-controls="@(IsCollapsible ? $"section-content-{SectionId}" : null)"
         tabindex="@(IsCollapsible ? 0 : null)">
    
    @* Header *@
    @if (HasHeader)
    {
        <header class="section__header @GetHeaderClasses()" @onclick="HandleHeaderClick">
            @if (!string.IsNullOrEmpty(Title) || TitleContent != null)
            {
                <div class="section__title @GetTitleSectionClasses()">
                    @if (!string.IsNullOrEmpty(Icon))
                    {
                        <i class="material-symbols-rounded mr-3 @GetIconSizeClass()">@Icon</i>
                    }
                    
                    <div class="flex-grow-1">
                        @if (!string.IsNullOrEmpty(Title))
                        {
                            <h2 class="section__title @GetTitleClasses()">@Title</h2>
                        }
                        
                        @if (!string.IsNullOrEmpty(Subtitle))
                        {
                            <div class="section__subtitle">@Subtitle</div>
                        }
                        
                        @TitleContent
                    </div>
                    
                    @if (IsCollapsible)
                    {
                        <div class="ml-3 transition-transform @(IsCollapsed ? "" : "rotate-180")">
                            <i class="material-symbols-rounded text-secondary">expand_more</i>
                        </div>
                    }
                </div>
            }
            
            @if (HeaderActions != null && !IsCollapsible)
            {
                <div class="section__actions">
                    @HeaderActions
                </div>
            }
        </header>
    }
    
    @* Content *@
    <div id="@(IsCollapsible ? $"section-content-{SectionId}" : "")" 
         class="section__content @GetContentClasses()">
        @if (IsLoading)
        {
            <div class="@GetLoadingClasses()">
                <div class="d-flex align-center justify-center">
                    <i class="material-symbols-rounded text-primary animate-spin mr-3">progress_activity</i>
                    @if (!string.IsNullOrEmpty(LoadingText))
                    {
                        <span class="text-primary">@LoadingText</span>
                    }
                </div>
            </div>
        }
        else if (HasError)
        {
            <div class="@GetErrorClasses()">
                <div class="d-flex align-center">
                    <i class="material-symbols-rounded text-error mr-3">error</i>
                    <div>
                        <div class="text-error font-medium">@ErrorTitle</div>
                        @if (!string.IsNullOrEmpty(ErrorMessage))
                        {
                            <div class="text-secondary text-sm mt-1">@ErrorMessage</div>
                        }
                        @if (ShowRetryButton)
                        {
                            <div class="mt-3">
                                <RButton Text="Retry" 
                                         Variant="ButtonVariant.Outline" 
                                         Size="ButtonSize.Small"
                                         Icon="refresh" IconPosition="IconPosition.Start"
                                         OnClick="HandleRetry" />
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
        else if (IsEmpty && ShowEmptyState)
        {
            <div class="@GetEmptyStateClasses()">
                <div class="text-center">
                    @if (!string.IsNullOrEmpty(EmptyIcon))
                    {
                        <i class="material-symbols-rounded text-secondary mb-3" style="font-size: 3rem;">@EmptyIcon</i>
                    }
                    <div class="text-secondary font-medium">@EmptyTitle</div>
                    @if (!string.IsNullOrEmpty(EmptyMessage))
                    {
                        <div class="text-tertiary text-sm mt-1">@EmptyMessage</div>
                    }
                    @if (EmptyActions != null)
                    {
                        <div class="mt-4">
                            @EmptyActions
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            @ChildContent
        }
    </div>
    
    @* Footer *@
    @if (FooterContent != null || FooterActions != null)
    {
        <footer class="section__footer @GetFooterClasses()">
            @if (FooterContent != null)
            {
                <div class="flex-grow-1">
                    @FooterContent
                </div>
            }
            
            @if (FooterActions != null)
            {
                <div class="d-flex align-center gap-2">
                    @FooterActions
                </div>
            }
        </footer>
    }
</section>

@code {
    /// <summary>Section identifier</summary>
    [Parameter] public string SectionId { get; set; } = Guid.NewGuid().ToString("N")[..8];
    
    /// <summary>Section title</summary>
    [Parameter] public string Title { get; set; }
    
    /// <summary>Section subtitle</summary>
    [Parameter] public string Subtitle { get; set; }
    
    /// <summary>Icon for header</summary>
    [Parameter] public string Icon { get; set; }
    
    /// <summary>Whether section is collapsible</summary>
    [Parameter] public bool IsCollapsible { get; set; }
    
    /// <summary>Whether section is collapsed (if collapsible)</summary>
    [Parameter] public bool IsCollapsed { get; set; }
    
    /// <summary>Callback when collapsed state changes</summary>
    [Parameter] public EventCallback<bool> IsCollapsedChanged { get; set; }
    
    /// <summary>Whether section is loading</summary>
    [Parameter] public bool IsLoading { get; set; }
    
    /// <summary>Loading text to display</summary>
    [Parameter] public string LoadingText { get; set; } = "Loading...";
    
    /// <summary>Whether section has error</summary>
    [Parameter] public bool HasError { get; set; }
    
    /// <summary>Error title</summary>
    [Parameter] public string ErrorTitle { get; set; } = "Error";
    
    /// <summary>Error message</summary>
    [Parameter] public string ErrorMessage { get; set; }
    
    /// <summary>Whether to show retry button on error</summary>
    [Parameter] public bool ShowRetryButton { get; set; }
    
    /// <summary>Whether content is empty</summary>
    [Parameter] public bool IsEmpty { get; set; }
    
    /// <summary>Whether to show empty state</summary>
    [Parameter] public bool ShowEmptyState { get; set; } = true;
    
    /// <summary>Empty state icon</summary>
    [Parameter] public string EmptyIcon { get; set; } = "inbox";
    
    /// <summary>Empty state title</summary>
    [Parameter] public string EmptyTitle { get; set; } = "No data available";
    
    /// <summary>Empty state message</summary>
    [Parameter] public string EmptyMessage { get; set; }
    
    /// <summary>Whether to remove header border</summary>
    [Parameter] public bool NoHeaderBorder { get; set; }
    
    /// <summary>Whether to remove footer border</summary>
    [Parameter] public bool NoFooterBorder { get; set; }
    
    /// <summary>Whether to remove content padding</summary>
    [Parameter] public bool NoPadding { get; set; }
    
    /// <summary>Additional CSS classes</summary>
    [Parameter] public string Class { get; set; }
    
    /// <summary>Main content</summary>
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    /// <summary>Title content area</summary>
    [Parameter] public RenderFragment TitleContent { get; set; }
    
    /// <summary>Header actions area</summary>
    [Parameter] public RenderFragment HeaderActions { get; set; }
    
    /// <summary>Footer content area</summary>
    [Parameter] public RenderFragment FooterContent { get; set; }
    
    /// <summary>Footer actions area</summary>
    [Parameter] public RenderFragment FooterActions { get; set; }
    
    /// <summary>Empty state actions</summary>
    [Parameter] public RenderFragment EmptyActions { get; set; }
    
    /// <summary>Section click event handler</summary>
    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
    
    /// <summary>Retry event handler</summary>
    [Parameter] public EventCallback OnRetry { get; set; }
    
    /// <summary>Collapse/expand event handler</summary>
    [Parameter] public EventCallback<bool> OnToggleCollapse { get; set; }
    
    private bool HasHeader => !string.IsNullOrEmpty(Title) || TitleContent != null || HeaderActions != null;
    
    private string GetSectionClasses()
    {
        var classes = new List<string> { "d-flex", "flex-column" };
        
        if (IsCollapsible)
        {
            classes.Add("section--collapsible");
        }
        
        if (IsLoading)
        {
            classes.Add("section--loading");
        }
        
        if (!string.IsNullOrEmpty(Class))
        {
            classes.Add(Class);
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetHeaderClasses()
    {
        var classes = new List<string>
        {
            "d-flex",
            "align-center",
            "justify-between"
        };
        
        if (!NoHeaderBorder)
        {
            classes.AddRange(new[] { "pb-3", "border-b", "border-light" });
        }
        
        if (IsCollapsible)
        {
            classes.AddRange(new[] { "cursor-pointer", "user-select-none", "hover:bg-secondary", "rounded-md", "px-3", "py-2", "mx--3", "my--2" });
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetTitleSectionClasses()
    {
        return "d-flex align-center flex-grow-1";
    }
    
    private string GetTitleClasses()
    {
        return "text-xl font-semibold text-primary mb-0";
    }
    
    private string GetContentClasses()
    {
        var classes = new List<string> { "flex-grow-1", "min-h-0" };
        
        if (IsCollapsible && IsCollapsed)
        {
            classes.Add("section__content--collapsed");
        }
        
        if (!NoPadding && !IsEmpty && !IsLoading && !HasError)
        {
            classes.Add("py-4");
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetFooterClasses()
    {
        var classes = new List<string>
        {
            "d-flex",
            "align-center",
            "justify-between"
        };
        
        if (!NoFooterBorder)
        {
            classes.AddRange(new[] { "pt-3", "border-t", "border-light" });
        }
        
        return string.Join(" ", classes);
    }
    
    private string GetLoadingClasses()
    {
        return "py-8 text-center";
    }
    
    private string GetErrorClasses()
    {
        return "py-6 px-4 border border-error-light bg-danger-light rounded-md";
    }
    
    private string GetEmptyStateClasses()
    {
        return "py-12 text-center";
    }
    
    private string GetIconSizeClass()
    {
        return "text-lg";
    }
    
    private async Task HandleClick(MouseEventArgs e)
    {
        await OnClick.InvokeAsync(e);
    }
    
    private async Task HandleHeaderClick(MouseEventArgs e)
    {
        if (IsCollapsible)
        {
            IsCollapsed = !IsCollapsed;
            await IsCollapsedChanged.InvokeAsync(IsCollapsed);
            await OnToggleCollapse.InvokeAsync(IsCollapsed);
        }
    }
    
    private async Task HandleRetry()
    {
        await OnRetry.InvokeAsync();
    }
}

@* 
Usage Examples:

<!-- Basic section -->
<RSection Title="Basic Section">
    <div>Section content goes here...</div>
</RSection>

<!-- Section with subtitle and icon -->
<RSection Title="Settings" 
          Subtitle="Configure your preferences"
          Icon="settings">
    <div>Settings content...</div>
</RSection>

<!-- Section with header actions -->
<RSection Title="User Management" Icon="people">
    <HeaderActions>
        <RButton Text="Add User" 
                 Variant="ButtonVariant.Primary" 
                 Size="ButtonSize.Small"
                 Icon="add" IconPosition="IconPosition.Start" />
        <RButton Variant="ButtonVariant.Ghost" 
                 Icon="more_vert" IconPosition="IconPosition.Start" 
                 Size="ButtonSize.Small" />
    </HeaderActions>
    <div>User list content...</div>
</RSection>

<!-- Collapsible section -->
<RSection Title="Advanced Options" 
          IsCollapsible="true"
          @bind-IsCollapsed="isCollapsed">
    <div>Collapsible content...</div>
</RSection>

<!-- Loading section -->
<RSection Title="Data Loading" 
          IsLoading="true"
          LoadingText="Fetching data...">
    <div>This content is hidden while loading</div>
</RSection>

<!-- Error section -->
<RSection Title="Failed Request" 
          HasError="true"
          ErrorTitle="Network Error"
          ErrorMessage="Failed to fetch data from server"
          ShowRetryButton="true"
          OnRetry="HandleRetry">
    <div>This content is hidden due to error</div>
</RSection>

<!-- Empty state section -->
<RSection Title="Documents" 
          IsEmpty="true"
          EmptyIcon="description"
          EmptyTitle="No documents found"
          EmptyMessage="Upload documents to get started">
    <EmptyActions>
        <RButton Text="Upload Document" 
                 Variant="ButtonVariant.Primary"
                 Icon="upload" IconPosition="IconPosition.Start" />
    </EmptyActions>
</RSection>

<!-- Section with footer -->
<RSection Title="Form Section">
    <div>Form content...</div>
    <FooterActions>
        <RButton Text="Cancel" Variant="ButtonVariant.Secondary" />
        <RButton Text="Save" Variant="ButtonVariant.Primary" />
    </FooterActions>
</RSection>

<!-- No padding section -->
<RSection Title="Table Data" NoPadding="true">
    <table class="w-full">
        <!-- Table content -->
    </table>
</RSection>
*@