@* RPreviewModal - Content preview modal *@

<div class="preview-modal">
    @if (!string.IsNullOrEmpty(Content))
    {
        <div class="preview-modal__toolbar">
            <div class="preview-modal__toolbar-left">
                <RBadge Text="@ContentType" Variant="BadgeVariant.Secondary" />
                @if (ShowWordCount)
                {
                    <span class="preview-modal__word-count">@GetWordCount() words</span>
                }
            </div>
            
            <div class="preview-modal__toolbar-right">
                @if (AllowCopy)
                {
                    <RButton Text="Copy"
                           Size="ButtonSize.Small"
                           Variant="ButtonVariant.Ghost"
                           StartIcon="content_copy"
                           OnClick="CopyContent" />
                }
                
                @if (AllowDownload)
                {
                    <RButton Text="Download"
                           Size="ButtonSize.Small"
                           Variant="ButtonVariant.Ghost"
                           StartIcon="download"
                           OnClick="DownloadContent" />
                }
            </div>
        </div>
        
        <div class="preview-modal__content">
            @if (ContentType.StartsWith("text/"))
            {
                <div class="preview-modal__text">
                    @if (ContentType == "text/html")
                    {
                        @((MarkupString)Content)
                    }
                    else if (ContentType == "text/markdown")
                    {
                        <div class="preview-modal__markdown">
                            @((MarkupString)ConvertMarkdownToHtml(Content))
                        </div>
                    }
                    else
                    {
                        <pre class="preview-modal__code"><code>@Content</code></pre>
                    }
                </div>
            }
            else if (ContentType.StartsWith("image/"))
            {
                <div class="preview-modal__image">
                    <img src="@Content" alt="Preview" class="preview-modal__img" />
                </div>
            }
            else if (ContentType == "application/json")
            {
                <div class="preview-modal__json">
                    <pre class="preview-modal__code"><code>@FormatJson(Content)</code></pre>
                </div>
            }
            else
            {
                <div class="preview-modal__unsupported">
                    <REmptyState Title="Preview not supported"
                               Description="@($"Content type '{ContentType}' cannot be previewed")"
                               Icon="visibility_off" />
                    
                    @if (AllowDownload)
                    {
                        <div class="mt-4">
                            <RButton Text="Download File"
                                   Variant="ButtonVariant.Primary"
                                   StartIcon="download"
                                   OnClick="DownloadContent" />
                        </div>
                    }
                </div>
            }
        </div>
        
        @if (ShowMetadata)
        {
            <div class="preview-modal__metadata">
                <div class="preview-modal__metadata-title">Content Information</div>
                <div class="preview-modal__metadata-grid">
                    <div class="preview-modal__metadata-item">
                        <span class="preview-modal__metadata-label">Type:</span>
                        <span class="preview-modal__metadata-value">@ContentType</span>
                    </div>
                    <div class="preview-modal__metadata-item">
                        <span class="preview-modal__metadata-label">Size:</span>
                        <span class="preview-modal__metadata-value">@GetContentSize()</span>
                    </div>
                    @if (ShowWordCount && ContentType.StartsWith("text/"))
                    {
                        <div class="preview-modal__metadata-item">
                            <span class="preview-modal__metadata-label">Words:</span>
                            <span class="preview-modal__metadata-value">@GetWordCount()</span>
                        </div>
                        <div class="preview-modal__metadata-item">
                            <span class="preview-modal__metadata-label">Characters:</span>
                            <span class="preview-modal__metadata-value">@Content.Length</span>
                        </div>
                    }
                </div>
            </div>
        }
    }
    else
    {
        <div class="preview-modal__empty">
            <REmptyState Title="No content to preview"
                       Description="The content is empty or could not be loaded"
                       Icon="description" />
        </div>
    }
</div>

@inject IJSRuntime JSRuntime

@code {
    [Parameter] public string Content { get; set; } = "";
    [Parameter] public string ContentType { get; set; } = "text/plain";
    [Parameter] public string FileName { get; set; } = "preview";
    [Parameter] public bool AllowCopy { get; set; } = true;
    [Parameter] public bool AllowDownload { get; set; } = true;
    [Parameter] public bool ShowWordCount { get; set; } = true;
    [Parameter] public bool ShowMetadata { get; set; } = true;
    [Parameter] public EventCallback OnCopy { get; set; }
    [Parameter] public EventCallback OnDownload { get; set; }

    private async Task CopyContent()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Content);
            await OnCopy.InvokeAsync();
        }
        catch (Exception)
        {
            // Fallback for browsers that don't support clipboard API
            await JSRuntime.InvokeVoidAsync("previewModal.copyToClipboard", Content);
        }
    }

    private async Task DownloadContent()
    {
        var extension = GetFileExtension();
        var fileName = $"{FileName}{extension}";
        
        await JSRuntime.InvokeVoidAsync("previewModal.downloadContent", Content, fileName, ContentType);
        await OnDownload.InvokeAsync();
    }

    private string GetFileExtension()
    {
        return ContentType switch
        {
            "text/html" => ".html",
            "text/markdown" => ".md",
            "text/csv" => ".csv",
            "application/json" => ".json",
            "text/xml" => ".xml",
            "text/javascript" => ".js",
            "text/css" => ".css",
            _ when ContentType.StartsWith("text/") => ".txt",
            _ => ""
        };
    }

    private int GetWordCount()
    {
        if (string.IsNullOrEmpty(Content))
            return 0;

        var words = Content.Split(new char[] { ' ', '\t', '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
        return words.Length;
    }

    private string GetContentSize()
    {
        var bytes = System.Text.Encoding.UTF8.GetByteCount(Content);
        
        if (bytes < 1024)
            return $"{bytes} B";
        if (bytes < 1024 * 1024)
            return $"{bytes / 1024:F1} KB";
        return $"{bytes / (1024 * 1024):F1} MB";
    }

    private string FormatJson(string json)
    {
        try
        {
            var parsed = System.Text.Json.JsonDocument.Parse(json);
            return System.Text.Json.JsonSerializer.Serialize(parsed, new System.Text.Json.JsonSerializerOptions
            {
                WriteIndented = true
            });
        }
        catch
        {
            return json;
        }
    }

    private string ConvertMarkdownToHtml(string markdown)
    {
        var html = markdown
            .Replace("\n", "<br>")
            .Replace("**", "<strong>", StringComparison.OrdinalIgnoreCase)
            .Replace("*", "<em>", StringComparison.OrdinalIgnoreCase)
            .Replace("`", "<code>", StringComparison.OrdinalIgnoreCase);

        var regex = new System.Text.RegularExpressions.Regex(@"^### (.+)$", System.Text.RegularExpressions.RegexOptions.Multiline);
        html = regex.Replace(html, "<h3>$1</h3>");
        
        regex = new System.Text.RegularExpressions.Regex(@"^## (.+)$", System.Text.RegularExpressions.RegexOptions.Multiline);
        html = regex.Replace(html, "<h2>$1</h2>");
        
        regex = new System.Text.RegularExpressions.Regex(@"^# (.+)$", System.Text.RegularExpressions.RegexOptions.Multiline);
        html = regex.Replace(html, "<h1>$1</h1>");

        return html;
    }
}