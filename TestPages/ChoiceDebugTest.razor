@page "/test-choice"
@using RR.Blazor.Components.Form
@using RR.Blazor.Enums

<h3>Choice Component Debug Test</h3>

<div style="border: 2px solid red; padding: 10px; margin: 10px;">
    <h4>Test 1: Simple Dropdown</h4>
    <RChoiceGeneric TValue="string"
                    Items="@(new[] { "Option 1", "Option 2", "Option 3" })"
                    SelectedValue="@selectedValue1"
                    SelectedValueChangedTyped="@(v => selectedValue1 = v)"
                    EffectiveVariant="ChoiceVariant.Dropdown" />
    <p>Selected: @selectedValue1</p>
</div>

<div style="border: 2px solid blue; padding: 10px; margin: 10px;">
    <h4>Test 2: Dropdown with TriggerContent</h4>
    <RChoiceGeneric TValue="string"
                    Items="@(new[] { "Apple", "Banana", "Cherry" })"
                    SelectedValue="@selectedValue2"
                    SelectedValueChangedTyped="@(v => selectedValue2 = v)"
                    EffectiveVariant="ChoiceVariant.Dropdown">
        <TriggerContent>
            <span>Custom Trigger: @(selectedValue2 ?? "Select")</span>
        </TriggerContent>
    </RChoiceGeneric>
    <p>Selected: @selectedValue2</p>
</div>

<div style="border: 2px solid green; padding: 10px; margin: 10px;">
    <h4>Test 3: Inline Mode</h4>
    <RChoiceGeneric TValue="string"
                    Items="@(new[] { "Red", "Green", "Blue" })"
                    SelectedValue="@selectedValue3"
                    SelectedValueChangedTyped="@(v => selectedValue3 = v)"
                    EffectiveVariant="ChoiceVariant.Inline" />
    <p>Selected: @selectedValue3</p>
</div>

<div style="border: 2px solid orange; padding: 10px; margin: 10px;">
    <h4>DOM Inspection</h4>
    <button @onclick="InspectDOM">Inspect DOM for Viewports</button>
    <pre>@domInfo</pre>
</div>

@code {
    private string? selectedValue1 = "Option 1";
    private string? selectedValue2 = null;
    private string? selectedValue3 = "Red";
    private string domInfo = "";

    private void InspectDOM()
    {
        // This will be called to check what's in the DOM
        domInfo = "Check browser console for DOM inspection";
        InvokeAsync(async () =>
        {
            await Task.Delay(100);
            StateHasChanged();
        });
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            domInfo = $"Component rendered at {DateTime.Now:HH:mm:ss}";
        }
    }
}