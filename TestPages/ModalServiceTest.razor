@page "/test/modal-service"
@using RR.Blazor.Services
@using RR.Blazor.Models
@using RR.Blazor.Enums
@using Microsoft.AspNetCore.Components.Forms
@inject IModalService ModalService
@inject IJSRuntime JSRuntime

<RPageHeader Title="Modal Service Test Suite" Subtitle="Comprehensive testing of refactored modal system" />

<RContainer>
    <RRow>
        <RColumn Lg="12">
            <RCard>
                <RCardHeader>
                    <RCardTitle>Core Modal Functions</RCardTitle>
                </RCardHeader>
                <RCardContent>
                    <RStack Gap="3">
                        <div>
                            <RText Typography="TypographyType.H6" Class="mb-2">Basic Modals</RText>
                            <RButtonGroup>
                                <RButton Variant="ButtonVariant.Primary" @onclick="ShowInfo">Info Modal</RButton>
                                <RButton Variant="ButtonVariant.Warning" @onclick="ShowWarning">Warning Modal</RButton>
                                <RButton Variant="ButtonVariant.Danger" @onclick="ShowError">Error Modal</RButton>
                                <RButton Variant="ButtonVariant.Success" @onclick="ShowSuccess">Success Modal</RButton>
                            </RButtonGroup>
                        </div>

                        <div>
                            <RText Typography="TypographyType.H6" Class="mb-2">Confirmation Modals</RText>
                            <RButtonGroup>
                                <RButton Variant="ButtonVariant.Secondary" @onclick="ShowConfirmation">Basic Confirm</RButton>
                                <RButton Variant="ButtonVariant.Danger" @onclick="ShowDestructiveConfirm">Destructive Confirm</RButton>
                                <RButton Variant="ButtonVariant.Info" @onclick="ShowCustomConfirm">Custom Confirm</RButton>
                            </RButtonGroup>
                        </div>

                        <div>
                            <RText Typography="TypographyType.H6" Class="mb-2">Advanced Modals</RText>
                            <RButtonGroup>
                                <RButton Variant="ButtonVariant.Primary" @onclick="ShowFormModal">Form Modal</RButton>
                                <RButton Variant="ButtonVariant.Secondary" @onclick="ShowSelectModal">Select Modal</RButton>
                                <RButton Variant="ButtonVariant.Info" @onclick="ShowMultiSelectModal">Multi-Select Modal</RButton>
                                <RButton Variant="ButtonVariant.Success" @onclick="ShowDetailModal">Detail Modal</RButton>
                                <RButton Variant="ButtonVariant.Warning" @onclick="ShowPreviewModal">Preview Modal</RButton>
                            </RButtonGroup>
                        </div>

                        <div>
                            <RText Typography="TypographyType.H6" Class="mb-2">Generic Modal Tests</RText>
                            <RButtonGroup>
                                <RButton Variant="ButtonVariant.Primary" @onclick="ShowGenericModal">Generic Modal</RButton>
                                <RButton Variant="ButtonVariant.Secondary" @onclick="ShowTypedModal">Typed Modal</RButton>
                                <RButton Variant="ButtonVariant.Info" @onclick="ShowBuilderModal">Builder Pattern</RButton>
                                <RButton Variant="ButtonVariant.Success" @onclick="ShowEventModal">Event Handlers</RButton>
                            </RButtonGroup>
                        </div>

                        <div>
                            <RText Typography="TypographyType.H6" Class="mb-2">Stress Tests</RText>
                            <RButtonGroup>
                                <RButton Variant="ButtonVariant.Warning" @onclick="ShowMultipleModals">Multiple Modals</RButton>
                                <RButton Variant="ButtonVariant.Danger" @onclick="ShowNestedModals">Nested Modals</RButton>
                                <RButton Variant="ButtonVariant.Primary" @onclick="ShowAutoCloseModal">Auto-Close Modal</RButton>
                                <RButton Variant="ButtonVariant.Secondary" @onclick="CloseAllModals">Close All</RButton>
                            </RButtonGroup>
                        </div>
                    </RStack>
                </RCardContent>
            </RCard>
        </RColumn>
    </RRow>

    <RRow Class="mt-4">
        <RColumn Lg="12">
            <RCard>
                <RCardHeader>
                    <RCardTitle>Test Results</RCardTitle>
                </RCardHeader>
                <RCardContent>
                    <RStack Gap="2">
                        <RAlert Variant="AlertVariant.Default" Type="@(HasVisibleModals ? AlertType.Info : AlertType.Warning)">
                            <strong>Active Modals:</strong> @ModalService.ActiveModals.Count()
                            @if (HasVisibleModals)
                            {
                                <span> - IDs: @string.Join(", ", ModalService.ActiveModals.Select(m => m.Id.Substring(0, 8)))</span>
                            }
                        </RAlert>

                        @if (LastResults.Any())
                        {
                            <RAlert Variant="AlertVariant.Default" Type="AlertType.Success">
                                <strong>Last Results:</strong>
                                <ul class="mb-0">
                                    @foreach (var result in LastResults.TakeLast(5))
                                    {
                                        <li>@result</li>
                                    }
                                </ul>
                            </RAlert>
                        }

                        @if (!string.IsNullOrEmpty(LastError))
                        {
                            <RAlert Variant="AlertVariant.Default" Type="AlertType.Error">
                                <strong>Error:</strong> @LastError
                            </RAlert>
                        }
                    </RStack>
                </RCardContent>
            </RCard>
        </RColumn>
    </RRow>
</RContainer>

@code {
    private bool HasVisibleModals => ModalService.HasVisibleModals;
    private List<string> LastResults = new();
    private string LastError = "";

    protected override void OnInitialized()
    {
        ModalService.OnModalOpened += OnModalOpened;
        ModalService.OnModalClosed += OnModalClosed;
        ModalService.OnAllModalsClosed += OnAllModalsClosed;
    }

    private void OnModalOpened(ModalInstance modal)
    {
        LastResults.Add($"Modal opened: {modal.Id.Substring(0, 8)} - {modal.Options.Title}");
        InvokeAsync(StateHasChanged);
    }

    private void OnModalClosed(ModalInstance modal)
    {
        LastResults.Add($"Modal closed: {modal.Id.Substring(0, 8)}");
        InvokeAsync(StateHasChanged);
    }

    private void OnAllModalsClosed()
    {
        LastResults.Add("All modals closed");
        InvokeAsync(StateHasChanged);
    }

    private async Task ShowInfo()
    {
        await ModalService.ShowInfoAsync("This is an informational message.", "Information");
    }

    private async Task ShowWarning()
    {
        await ModalService.ShowWarningAsync("This is a warning message!", "Warning");
    }

    private async Task ShowError()
    {
        await ModalService.ShowErrorAsync("An error has occurred!", "Error");
    }

    private async Task ShowSuccess()
    {
        await ModalService.ShowSuccessAsync("Operation completed successfully!", "Success");
    }

    private async Task ShowConfirmation()
    {
        var result = await ModalService.ConfirmAsync("Are you sure you want to proceed?", "Confirm Action");
        LastResults.Add($"Confirmation result: {result}");
    }

    private async Task ShowDestructiveConfirm()
    {
        var result = await ModalService.ConfirmAsync("This action cannot be undone!", "Delete Item", true);
        LastResults.Add($"Destructive confirmation result: {result}");
    }

    private async Task ShowCustomConfirm()
    {
        var options = new ConfirmationOptions
        {
            Title = "Custom Confirmation",
            Message = "This is a custom confirmation dialog with special options.",
            ConfirmText = "Yes, Proceed",
            CancelText = "No, Cancel",
            Variant = ModalVariant.Info,
            Icon = "help_outline"
        };
        var result = await ModalService.ConfirmAsync(options);
        LastResults.Add($"Custom confirmation result: {result}");
    }

    private async Task ShowFormModal()
    {
        var testData = new TestFormData { Name = "Test", Value = 42 };
        var result = await ModalService.ShowFormAsync("Edit Data", testData, SizeType.Medium);
        LastResults.Add($"Form modal result: {(result.IsConfirmed ? $"Saved - {result.Data?.Name}" : "Cancelled")}");
    }

    private async Task ShowSelectModal()
    {
        var items = new[] { "Option 1", "Option 2", "Option 3", "Option 4" };
        var selected = await ModalService.ShowSelectAsync(items, "Select an Option");
        LastResults.Add($"Selected: {selected ?? "None"}");
    }

    private async Task ShowMultiSelectModal()
    {
        var items = new[] { "Item A", "Item B", "Item C", "Item D", "Item E" };
        var selected = await ModalService.ShowMultiSelectAsync(items, "Select Multiple Items");
        LastResults.Add($"Multi-selected: {string.Join(", ", selected)}");
    }

    private async Task ShowDetailModal()
    {
        var data = new
        {
            Id = Guid.NewGuid(),
            Name = "Test Object",
            CreatedAt = DateTime.Now,
            Properties = new Dictionary<string, object>
            {
                ["Status"] = "Active",
                ["Count"] = 42,
                ["IsEnabled"] = true
            }
        };
        await ModalService.ShowDetailAsync(data, "Object Details");
    }

    private async Task ShowPreviewModal()
    {
        var content = @"# Modal Preview Test

This is a **markdown** preview with:

- Bullet points
- *Italic text*
- **Bold text**
- `Code snippets`

```csharp
public class TestClass
{
    public string Name { get; set; }
    public int Value { get; set; }
}
```";
        await ModalService.ShowPreviewAsync(content, "Markdown Preview", "text/markdown");
    }

    private async Task ShowGenericModal()
    {
        var result = await ((IModalServiceCore)ModalService).ShowAsync<Components.Test.TestModalComponent, TestModalParams, string>(
            new TestModalParams("Generic Test", "Testing generic modal"),
            new ModalOptions { Size = SizeType.Medium },
            new ModalEvents<string>
            {
                OnShow = async () => LastResults.Add("Generic modal shown"),
                OnClose = async (result) => LastResults.Add($"Generic modal closed with: {result}"),
                OnValidate = async (result) => !string.IsNullOrEmpty(result)
            });
        
        LastResults.Add($"Generic modal result: {result.Data}");
    }

    private async Task ShowTypedModal()
    {
        var result = await ModalService.ShowAsync<TestFormData>(
            typeof(Components.Test.TestModalComponent),
            new Dictionary<string, object> { ["TestParam"] = "Test Value" },
            new ModalOptions<TestFormData> { Title = "Typed Modal Test" });
        
        LastResults.Add($"Typed modal result: {(result.IsConfirmed ? "Confirmed" : "Cancelled")}");
    }

    private async Task ShowBuilderModal()
    {
        var result = await ModalService.Create<string>()
            .WithTitle("Builder Pattern Modal")
            .WithSubtitle("Created using fluent API")
            .WithIcon("build")
            .WithSize(SizeType.Large)
            .WithVariant(ModalVariant.Info)
            .WithComponent<Components.Test.TestModalComponent>()
            .WithParameter("Message", "Built with builder pattern")
            .WithButton("Custom", ModalButtonType.Primary, async (data) => true)
            .WithBackdropClose(false)
            .WithEscapeClose(true)
            .WithClass("custom-modal-class")
            .ShowAsync();
        
        LastResults.Add($"Builder modal result: {result.Data ?? "None"}");
    }

    private async Task ShowEventModal()
    {
        var events = new ModalEvents<string>
        {
            OnShow = async () => 
            {
                LastResults.Add("Event: Modal showing");
                await Task.CompletedTask;
            },
            OnClose = async (result) => 
            {
                LastResults.Add($"Event: Modal closing with {result}");
                await Task.CompletedTask;
            },
            OnCancel = async () => 
            {
                LastResults.Add("Event: Modal cancelled");
                await Task.CompletedTask;
            },
            OnValidate = async (result) => 
            {
                LastResults.Add($"Event: Validating {result}");
                return !string.IsNullOrEmpty(result);
            },
            OnAction = async (action, data) => 
            {
                LastResults.Add($"Event: Action {action} with {data}");
                await Task.CompletedTask;
            }
        };

        var result = await ((IModalServiceCore)ModalService).ShowAsync<string>(
            typeof(Components.Test.TestModalComponent),
            new Dictionary<string, object> { ["Title"] = "Event Test" },
            new ModalOptions { Title = "Event Handler Test" },
            events);
        
        LastResults.Add($"Event modal final result: {result.Data}");
    }

    private async Task ShowMultipleModals()
    {
        var tasks = new[]
        {
            ModalService.ShowInfoAsync("Modal 1", "First"),
            ModalService.ShowWarningAsync("Modal 2", "Second"),
            ModalService.ShowSuccessAsync("Modal 3", "Third")
        };
        
        await Task.WhenAll(tasks);
        LastResults.Add($"Opened {tasks.Length} modals simultaneously");
    }

    private async Task ShowNestedModals()
    {
        await ModalService.ConfirmAsync("Open another modal inside?", "Parent Modal");
        await ModalService.ShowInfoAsync("This is a nested modal", "Child Modal");
        LastResults.Add("Nested modals test completed");
    }

    private async Task ShowAutoCloseModal()
    {
        var options = new ModalOptions
        {
            Title = "Auto-Close Test",
            AutoCloseDelay = TimeSpan.FromSeconds(3),
            ComponentType = typeof(Components.Test.TestModalComponent)
        };
        
        var result = await ModalService.ShowAsync(options);
        LastResults.Add($"Auto-close modal result: {result.ResultType}");
    }

    private async Task CloseAllModals()
    {
        await ModalService.CloseAllAsync();
        LastResults.Add("Manually closed all modals");
    }

    public void Dispose()
    {
        ModalService.OnModalOpened -= OnModalOpened;
        ModalService.OnModalClosed -= OnModalClosed;
        ModalService.OnAllModalsClosed -= OnAllModalsClosed;
    }

    private class TestFormData
    {
        public string Name { get; set; } = "";
        public int Value { get; set; }
    }

    private record TestModalParams(string Title, string Message);
}

