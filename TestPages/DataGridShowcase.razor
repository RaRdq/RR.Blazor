@page "/test/data-grid-showcase"
@using RR.Blazor.Components.Core
@using RR.Blazor.Components.Display
@using RR.Blazor.Components.Feedback
@using RR.Blazor.Components.Form
@using RR.Blazor.Components.Navigation
@using RR.Blazor.Components.Data
@using RR.Blazor.Components.Base
@using RR.Blazor.Services
@using RR.Blazor.Enums
@using RR.Blazor.Models
@inject IJSRuntime JS
@inherits RComponentBase

<RAppShell Title="Data Grid Components Showcase" Features="@AppShellFeatures.All">
    <div class="container-fluid py-6 space-y-8">
        
        <!-- Header and Configuration Panel -->
        <div class="space-y-6">
            <div class="text-center space-y-2">
                <h1 class="text-4xl font-bold text-primary">RR.Blazor Data Grid Components</h1>
                <p class="text-lg text-muted">Comprehensive showcase of RGrid, RFilter, RExport, and RTable components with interactive demonstrations</p>
            </div>
            
            <!-- Live Configuration Panel -->
            <RCard Variant="CardVariant.Glass" Class="p-6">
                <ChildContent>
                    <h3 class="text-xl font-semibold mb-4 flex items-center gap-2">
                        <i class="icon">tune</i>
                        Live Configuration
                    </h3>
                    
                    <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                        <RToggle @bind-Value="enableVirtualization" 
                                Text="Virtualization" />
                        
                        <RToggle @bind-Value="enableAdvancedFiltering" 
                                Text="Advanced Filters" />
                        
                        <RToggle @bind-Value="enableExportFunctions" 
                                Text="Export Functions" />
                        
                        <RToggle @bind-Value="showPerformanceMetrics" 
                                Text="Performance Metrics" />
                    </div>
                    
                    <div class="mt-4 pt-4 border-t border-light/20">
                        <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
                            <RChoice SelectedValue="@selectedDensity.ToString()"
                                    SelectedValueChanged="@OnDensityChanged"
                                    Label="Data Density"
                                    Items="@(new[] { "Compact", "Normal", "Spacious" })" />
                            
                            <RChoice SelectedValue="@selectedPageSize.ToString()"
                                    SelectedValueChanged="@OnPageSizeChanged"
                                    Label="Page Size"
                                    Items="@(new[] { "10", "25", "50", "100" })" />
                            
                            <RChoice SelectedValue="@selectedTheme"
                                    SelectedValueChanged="@OnThemeChanged"
                                    Label="Data Theme"
                                    Items="@(new[] { "employees", "sales", "financial", "large" })" />
                        </div>
                    </div>
                </ChildContent>
            </RCard>
        </div>

        <!-- Performance Metrics Panel -->
        @if (showPerformanceMetrics)
        {
            <RCard Variant="CardVariant.Elevated" Class="p-6">
                <ChildContent>
                    <h3 class="text-xl font-semibold mb-4 flex items-center gap-2">
                        <i class="icon">speed</i>
                        Real-time Performance Metrics
                    </h3>
                    
                    <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                        <RStatsCard Title="Render Time" 
                                   Value="@($"{renderTime}ms")" 
                                   Icon="timer"
                                   Variant="VariantType.Info"
                                   Size="SizeType.Small" />
                        
                        <RStatsCard Title="Data Rows" 
                                   Value="@currentDataSet.Count.ToString("N0")" 
                                   Icon="table_rows"
                                   Variant="VariantType.Primary"
                                   Size="SizeType.Small" />
                        
                        <RStatsCard Title="Memory Usage" 
                                   Value="@($"{memoryUsage}MB")" 
                                   Icon="memory"
                                   Variant="VariantType.Warning"
                                   Size="SizeType.Small" />
                        
                        <RStatsCard Title="Filter Time" 
                                   Value="@($"{filterTime}ms")" 
                                   Icon="filter_list"
                                   Variant="VariantType.Success"
                                   Size="SizeType.Small" />
                    </div>
                </ChildContent>
            </RCard>
        }

        <!-- Main Data Components Showcase -->
        <RTabs @bind-SelectedTab="selectedTab" Class="data-grid-showcase-tabs">
            
            <!-- RGrid Comprehensive Demo -->
            <RTabItem Value="rgrid" Text="RGrid" Icon="grid_view">
                <div class="space-y-6">
                    <div class="flex items-center justify-between">
                        <h2 class="text-2xl font-semibold">RGrid - Smart Data Grid</h2>
                        @if (enableExportFunctions)
                        {
                            <div class="flex gap-2">
                                <RExportButton DataSource="@currentDataSet" 
                                             DefaultFormat="ExportFormat.CSV"
                                             FileName="@($"employees-{DateTime.Now:yyyyMMdd}")"
                                             Text="Export CSV"
                                             Icon="download"
                                             ButtonSize="SizeType.Small" />
                                
                                <RExportButton DataSource="@currentDataSet" 
                                             DefaultFormat="ExportFormat.Excel"
                                             FileName="@($"employees-{DateTime.Now:yyyyMMdd}")"
                                             Text="Export Excel"
                                             Icon="table_view"
                                             ButtonSize="SizeType.Small" />
                            </div>
                        }
                    </div>
                    
                    <!-- Advanced RGrid with all features -->
                    <RGrid DataSource="@currentDataSet"
                           EnablePaging="true"
                           PageSize="@selectedPageSize"
                           EnableSorting="true"
                           EnableFiltering="@enableAdvancedFiltering"
                           EnableGrouping="true"
                           EnableColumnReordering="true"
                           EnableExport="@enableExportFunctions"
                           EnableVirtualization="@enableVirtualization"
                           VirtualizationThreshold="100"
                           EnableRowSelection="true"
                           SelectionMode="GridSelectionMode.Multiple"
                           OnRowClick="@HandleRowClick"
                           OnSelectionChanged="@HandleSelectionChanged"
                           Class="@GetGridClasses()">
                        
                        <!-- Auto-generated columns with smart detection -->
                    </RGrid>
                    
                    @if (selectedEmployees?.Any() == true)
                    {
                        <RAlert Type="AlertType.Info" Variant="AlertVariant.Filled">
                            <ChildContent>
                                Selected @selectedEmployees.Count() employees: @string.Join(", ", selectedEmployees.Select(e => e.Name).Take(3))@(selectedEmployees.Count() > 3 ? $" and {selectedEmployees.Count() - 3} more..." : "")
                            </ChildContent>
                        </RAlert>
                    }
                </div>
            </RTabItem>

            <!-- RTable Enhanced Demo -->
            <RTabItem Value="rtable" Text="RTable" Icon="table_view">
                <div class="space-y-6">
                    <h2 class="text-2xl font-semibold">RTable - Advanced Data Table</h2>
                    
                    <RTableGeneric TItem="Employee" 
                                  Items="@currentDataSet"
                                  ShowSearch="true"
                                  ShowPagination="true"
                                  PageSize="@selectedPageSize"
                                  ShowExport="@enableExportFunctions"
                                  ShowColumnManager="true"
                                  Virtualize="@enableVirtualization"
                                  SelectionMode="SelectionMode.Multiple"
                                  @bind-SelectedItems="selectedTableEmployees"
                                  OnRowClick="@HandleTableRowClick"
                                  Class="@GetTableClasses()">
                        
                        <RColumn Property="Id" Title="ID" Width="80px" Sortable="true" />
                        <RColumn Property="Name" Title="Employee Name" Sortable="true" Searchable="true" />
                        <RColumn Property="Department" Title="Department" Sortable="true" Filterable="true" />
                        <RColumn Property="Position" Title="Position" Sortable="true" />
                        <RColumn Property="Salary" Title="Salary" Sortable="true" Format="C" Alignment="ColumnAlignment.Right" />
                        <RColumn Property="HireDate" Title="Hire Date" Sortable="true" Format="d" />
                        <RColumn Property="IsActive" Title="Status">
                            <CellTemplate Context="employee">
                                <RChip Variant="@(((Employee)employee).IsActive ? VariantType.Success : VariantType.Error)"
                                       Size="SizeType.Small">
                                    <ChildContent>@(((Employee)employee).IsActive ? "Active" : "Inactive")</ChildContent>
                                </RChip>
                            </CellTemplate>
                        </RColumn>
                        <RColumn Title="Actions" Width="120px">
                            <CellTemplate Context="employee">
                                <div class="flex gap-1">
                                    <RButton Icon="edit" 
                                            Variant="ButtonVariant.Ghost" 
                                            Size="SizeType.ExtraSmall"
                                            OnClick="@(() => EditEmployee((Employee)employee))" />
                                    <RButton Icon="visibility" 
                                            Variant="ButtonVariant.Ghost" 
                                            Size="SizeType.ExtraSmall"
                                            OnClick="@(() => ViewEmployee((Employee)employee))" />
                                    <RButton Icon="delete" 
                                            Variant="ButtonVariant.Ghost" 
                                            Size="SizeType.ExtraSmall"
                                            OnClick="@(() => DeleteEmployee((Employee)employee))" />
                                </div>
                            </CellTemplate>
                        </RColumn>
                    </RTableGeneric>
                </div>
            </RTabItem>

            <!-- RFilter Advanced Demo -->
            <RTabItem Value="rfilter" Text="Filters" Icon="filter_list">
                <div class="space-y-6">
                    <h2 class="text-2xl font-semibold">RFilter - Advanced Filtering System</h2>
                    
                    <!-- Filter Configuration Panel -->
                    <RCard Variant="CardVariant.Outlined" Class="p-4">
                        <ChildContent>
                            <h3 class="text-lg font-semibold mb-4">Filter Configuration</h3>
                            
                            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                                <!-- Name filter -->
                                <RTextInput Value="@nameFilter" 
                                          Label="Employee Name" 
                                          Placeholder="Search by name..."
                                          ValueChanged="@OnNameFilterChanged" />
                                
                                <!-- Department filter -->
                                <RChoice SelectedValue="@departmentFilter"
                                        SelectedValueChanged="@(EventCallback.Factory.Create<object>(this, OnDepartmentFilterChanged))"
                                        Label="Department"
                                        Items="@GetDepartmentFilterItems()" />
                                
                                <!-- Position filter -->
                                <RChoice SelectedValue="@positionFilter"
                                        SelectedValueChanged="@(EventCallback.Factory.Create<object>(this, OnPositionFilterChanged))"
                                        Label="Position"
                                        Items="@GetPositionFilterItems()" />
                                
                                <!-- Salary range -->
                                <RInput Value="@(minSalary?.ToString() ?? "")" 
                                       Type="FieldType.Number"
                                       Label="Min Salary" 
                                       Placeholder="Minimum salary..."
                                       ValueChanged="@OnMinSalaryChanged" />
                                
                                <RInput Value="@(maxSalary?.ToString() ?? "")" 
                                       Type="FieldType.Number"
                                       Label="Max Salary" 
                                       Placeholder="Maximum salary..."
                                       ValueChanged="@OnMaxSalaryChanged" />
                                
                                <!-- Status filter -->
                                <RToggle @bind-Value="activeOnlyFilter" 
                                        Text="Active Employees Only" />
                            </div>
                        </ChildContent>
                    </RCard>
                    
                    <!-- Filtered Results -->
                    <RCard Class="p-4">
                        <ChildContent>
                            <div class="flex items-center justify-between mb-4">
                                <h3 class="text-lg font-semibold">Filtered Results (@filteredEmployees.Count() of @allEmployees.Count)</h3>
                                <RButton Text="Clear All Filters" 
                                        Icon="clear_all"
                                        Variant="ButtonVariant.Secondary"
                                        Size="SizeType.Small"
                                        OnClick="@ClearAllFilters" />
                            </div>
                            
                            <RTableGeneric TItem="Employee" 
                                          Items="@filteredEmployees"
                                          ShowPagination="true"
                                          PageSize="10"
                                          Class="filtered-results-table">
                                <RColumn Property="Name" Title="Name" />
                                <RColumn Property="Department" Title="Department" />
                                <RColumn Property="Position" Title="Position" />
                                <RColumn Property="Salary" Title="Salary" Format="C" />
                                <RColumn Property="HireDate" Title="Hire Date" Format="d" />
                                <RColumn Property="IsActive" Title="Status">
                                    <CellTemplate Context="employee">
                                        <RChip Variant="@(((Employee)employee).IsActive ? VariantType.Success : VariantType.Error)"
                                               Size="SizeType.Small">
                                            <ChildContent>@(((Employee)employee).IsActive ? "Active" : "Inactive")</ChildContent>
                                        </RChip>
                                    </CellTemplate>
                                </RColumn>
                            </RTableGeneric>
                        </ChildContent>
                    </RCard>
                </div>
            </RTabItem>

            <!-- Performance Benchmarking -->
            <RTabItem Value="performance" Text="Performance" Icon="speed">
                <div class="space-y-6">
                    <h2 class="text-2xl font-semibold">Performance Benchmarking</h2>
                    
                    <!-- Dataset Size Controls -->
                    <RCard Variant="CardVariant.Outlined" Class="p-4">
                        <ChildContent>
                            <h3 class="text-lg font-semibold mb-4">Dataset Configuration</h3>
                            
                            <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                                <RButton Text="1K Records" 
                                        Variant="@(currentDataSize == 1000 ? ButtonVariant.Primary : ButtonVariant.Secondary)"
                                        OnClick="@(() => LoadDataset(1000))" />
                                
                                <RButton Text="5K Records" 
                                        Variant="@(currentDataSize == 5000 ? ButtonVariant.Primary : ButtonVariant.Secondary)"
                                        OnClick="@(() => LoadDataset(5000))" />
                                
                                <RButton Text="10K Records" 
                                        Variant="@(currentDataSize == 10000 ? ButtonVariant.Primary : ButtonVariant.Secondary)"
                                        OnClick="@(() => LoadDataset(10000))" />
                                
                                <RButton Text="25K Records" 
                                        Variant="@(currentDataSize == 25000 ? ButtonVariant.Primary : ButtonVariant.Secondary)"
                                        OnClick="@(() => LoadDataset(25000))" />
                            </div>
                        </ChildContent>
                    </RCard>
                    
                    <!-- Performance Metrics -->
                    <RCard Class="p-4">
                        <ChildContent>
                            <h3 class="text-lg font-semibold mb-4">Performance Metrics</h3>
                            
                            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                                <RMetric Title="Render Time" 
                                        Value="@renderTime" 
                                        Unit="ms"
                                        Icon="timer"
                                        Trend="@GetPerformanceTrend(renderTime, previousRenderTime)" />
                                
                                <RMetric Title="Data Load" 
                                        Value="@dataLoadTime" 
                                        Unit="ms"
                                        Icon="download"
                                        Trend="@GetPerformanceTrend(dataLoadTime, previousDataLoadTime)" />
                                
                                <RMetric Title="Filter Time" 
                                        Value="@filterTime" 
                                        Unit="ms"
                                        Icon="filter_list"
                                        Trend="@GetPerformanceTrend(filterTime, previousFilterTime)" />
                                
                                <RMetric Title="Memory" 
                                        Value="@memoryUsage" 
                                        Unit="MB"
                                        Icon="memory"
                                        Trend="@GetMemoryTrend()" />
                            </div>
                            
                            <!-- Performance Chart -->
                            <RChart Type="ChartType.Line" 
                                   Data="@performanceData"
                                   Title="Performance Over Time"
                                   Height="300px"
                                   ShowLegend="true" />
                        </ChildContent>
                    </RCard>
                    
                    <!-- Virtualization Demo -->
                    <RCard Class="p-4">
                        <ChildContent>
                            <h3 class="text-lg font-semibold mb-4">Virtualization Demo</h3>
                            
                            <RTableVirtualized TItem="Employee" 
                                             Items="@currentDataSet"
                                             ItemHeight="40"
                                             Height="400px"
                                             ShowHeader="true"
                                             Class="virtualization-demo">
                                <RColumn Property="Id" Title="ID" Width="80px" />
                                <RColumn Property="Name" Title="Name" Width="200px" />
                                <RColumn Property="Department" Title="Department" Width="150px" />
                                <RColumn Property="Position" Title="Position" Width="200px" />
                                <RColumn Property="Salary" Title="Salary" Width="120px" Format="C" />
                            </RTableVirtualized>
                        </ChildContent>
                    </RCard>
                </div>
            </RTabItem>
        </RTabs>
    </div>
</RAppShell>

@code {
    // Configuration State
    private bool enableVirtualization = true;
    private bool enableAdvancedFiltering = true;
    private bool enableExportFunctions = true;
    private bool showPerformanceMetrics = true;
    
    private GridDensity selectedDensity = GridDensity.Normal;
    private int selectedPageSize = 25;
    private string selectedTheme = "employees";
    private string selectedTab = "rgrid";
    
    // Data State
    private List<Employee> allEmployees = new();
    private List<Employee> currentDataSet = new();
    private List<Employee> filteredEmployees = new();
    private IEnumerable<Employee> selectedEmployees = Enumerable.Empty<Employee>();
    private IEnumerable<Employee> selectedTableEmployees = Enumerable.Empty<Employee>();
    
    // Filter State
    private string nameFilter = string.Empty;
    private string departmentFilter = string.Empty;
    private string positionFilter = string.Empty;
    private decimal? minSalary = null;
    private decimal? maxSalary = null;
    private bool activeOnlyFilter = false;
    
    // Performance Metrics
    private double renderTime = 0;
    private double previousRenderTime = 0;
    private double dataLoadTime = 0;
    private double previousDataLoadTime = 0;
    private double filterTime = 0;
    private double previousFilterTime = 0;
    private double memoryUsage = 0;
    private int currentDataSize = 1000;
    private object performanceData = new { };

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        var startTime = DateTime.UtcNow;
        
        allEmployees = GenerateEmployeeData(currentDataSize);
        currentDataSet = new List<Employee>(allEmployees);
        filteredEmployees = new List<Employee>(allEmployees);
        
        dataLoadTime = (DateTime.UtcNow - startTime).TotalMilliseconds;
        await UpdatePerformanceMetrics();
    }

    private async Task LoadDataset(int size)
    {
        var startTime = DateTime.UtcNow;
        
        currentDataSize = size;
        allEmployees = GenerateEmployeeData(size);
        currentDataSet = new List<Employee>(allEmployees);
        filteredEmployees = new List<Employee>(allEmployees);
        
        dataLoadTime = (DateTime.UtcNow - startTime).TotalMilliseconds;
        await UpdatePerformanceMetrics();
        StateHasChanged();
    }

    private List<Employee> GenerateEmployeeData(int count)
    {
        var departments = new[] { "Engineering", "Sales", "Marketing", "HR", "Finance", "Operations", "Support", "Legal" };
        var positions = new[] { "Manager", "Senior", "Junior", "Lead", "Specialist", "Coordinator", "Analyst", "Director" };
        var random = new Random(42); // Fixed seed for consistent data

        return Enumerable.Range(1, count).Select(i => new Employee
        {
            Id = i,
            Name = $"Employee {i:D4}",
            Department = departments[random.Next(departments.Length)],
            Position = $"{positions[random.Next(positions.Length)]} {departments[random.Next(departments.Length)]}",
            Salary = random.Next(30000, 150000),
            HireDate = DateTime.Now.AddDays(-random.Next(1, 3650)),
            IsActive = random.NextDouble() > 0.1,
            Email = $"employee{i:D4}@company.com",
            Phone = $"({random.Next(200, 999)}) {random.Next(200, 999)}-{random.Next(1000, 9999)}"
        }).ToList();
    }

    private void UpdateConfiguration()
    {
        // Apply configuration changes
        switch (selectedTheme)
        {
            case "large":
                if (currentDataSize != 10000)
                    _ = LoadDataset(10000);
                break;
            default:
                if (currentDataSize != 1000)
                    _ = LoadDataset(1000);
                break;
        }
        
        StateHasChanged();
    }

    private string GetGridClasses()
    {
        var classes = new List<string> { "data-grid-demo" };
        
        switch (selectedDensity)
        {
            case GridDensity.Compact:
                classes.Add("density-compact");
                break;
            case GridDensity.Spacious:
                classes.Add("density-spacious");
                break;
            default:
                classes.Add("density-normal");
                break;
        }
        
        return string.Join(" ", classes);
    }

    private string GetTableClasses()
    {
        var classes = new List<string> { "data-table-demo" };
        
        if (enableVirtualization)
            classes.Add("virtualized");
            
        return string.Join(" ", classes);
    }

    // Event Handlers
    private async Task HandleRowClick(object rowData)
    {
        if (rowData is Employee employee)
        {
            await ShowEmployeeDetails(employee);
        }
    }

    private async Task HandleSelectionChanged(object selection)
    {
        if (selection is IEnumerable<Employee> employees)
        {
            selectedEmployees = employees;
            StateHasChanged();
        }
    }

    private async Task HandleTableRowClick(Employee employee)
    {
        await ShowEmployeeDetails(employee);
    }

    private async Task ApplyFilters()
    {
        var startTime = DateTime.UtcNow;
        
        var query = allEmployees.AsEnumerable();
        
        // Apply name filter
        if (!string.IsNullOrWhiteSpace(nameFilter))
        {
            query = query.Where(e => e.Name.Contains(nameFilter, StringComparison.OrdinalIgnoreCase));
        }
        
        // Apply department filter
        if (!string.IsNullOrWhiteSpace(departmentFilter))
        {
            query = query.Where(e => e.Department == departmentFilter);
        }
        
        // Apply position filter
        if (!string.IsNullOrWhiteSpace(positionFilter))
        {
            query = query.Where(e => e.Position == positionFilter);
        }
        
        // Apply salary range filter
        if (minSalary.HasValue)
        {
            query = query.Where(e => e.Salary >= minSalary.Value);
        }
        if (maxSalary.HasValue)
        {
            query = query.Where(e => e.Salary <= maxSalary.Value);
        }
        
        // Apply active status filter
        if (activeOnlyFilter)
        {
            query = query.Where(e => e.IsActive);
        }
        
        filteredEmployees = query.ToList();
        filterTime = (DateTime.UtcNow - startTime).TotalMilliseconds;
        
        StateHasChanged();
        await UpdatePerformanceMetrics();
    }

    // Filter change callbacks
    private async Task OnNameFilterChanged(string value)
    {
        nameFilter = value ?? string.Empty;
        await ApplyFilters();
    }

    private async Task OnMinSalaryChanged(object value)
    {
        if (value == null || string.IsNullOrWhiteSpace(value.ToString()))
        {
            minSalary = null;
        }
        else if (decimal.TryParse(value.ToString(), out var salary))
        {
            minSalary = salary;
        }
        await ApplyFilters();
    }

    private async Task OnMaxSalaryChanged(object value)
    {
        if (value == null || string.IsNullOrWhiteSpace(value.ToString()))
        {
            maxSalary = null;
        }
        else if (decimal.TryParse(value.ToString(), out var salary))
        {
            maxSalary = salary;
        }
        await ApplyFilters();
    }

    private async Task OnDepartmentFilterChanged(object value)
    {
        var selectedValue = value?.ToString() ?? string.Empty;
        departmentFilter = selectedValue == "All Departments" ? string.Empty : selectedValue;
        await ApplyFilters();
    }

    private async Task OnPositionFilterChanged(object value)
    {
        var selectedValue = value?.ToString() ?? string.Empty;
        positionFilter = selectedValue == "All Positions" ? string.Empty : selectedValue;
        await ApplyFilters();
    }

    private async Task OnActiveFilterChanged(bool value)
    {
        activeOnlyFilter = value;
        await ApplyFilters();
    }

    private async Task OnDensityChanged(object value)
    {
        if (Enum.TryParse<GridDensity>(value?.ToString(), out var density))
        {
            selectedDensity = density;
            StateHasChanged();
        }
    }

    private async Task OnPageSizeChanged(object value)
    {
        if (int.TryParse(value?.ToString(), out var pageSize))
        {
            selectedPageSize = pageSize;
            StateHasChanged();
        }
    }

    private async Task OnThemeChanged(object value)
    {
        selectedTheme = value?.ToString() ?? "employees";
        UpdateConfiguration();
    }

    private async Task OnConfigurationChanged(bool value)
    {
        StateHasChanged();
    }

    private void ClearAllFilters()
    {
        nameFilter = string.Empty;
        departmentFilter = string.Empty;
        positionFilter = string.Empty;
        minSalary = null;
        maxSalary = null;
        activeOnlyFilter = false;
        filteredEmployees = new List<Employee>(allEmployees);
        StateHasChanged();
    }

    // Helper Methods
    private List<string> GetUniqueDepartments()
    {
        return allEmployees.Select(e => e.Department).Distinct().OrderBy(d => d).ToList();
    }

    private List<string> GetUniquePositions()
    {
        return allEmployees.Select(e => e.Position).Distinct().OrderBy(p => p).ToList();
    }

    private object[] GetDensityOptions()
    {
        return new object[]
        {
            new { Value = "Compact", Text = "Compact" },
            new { Value = "Normal", Text = "Normal" },
            new { Value = "Spacious", Text = "Spacious" }
        };
    }

    private object[] GetPageSizeOptions()
    {
        return new object[]
        {
            new { Value = "10", Text = "10 rows" },
            new { Value = "25", Text = "25 rows" },
            new { Value = "50", Text = "50 rows" },
            new { Value = "100", Text = "100 rows" }
        };
    }

    private object[] GetThemeOptions()
    {
        return new object[]
        {
            new { Value = "employees", Text = "Employee Data" },
            new { Value = "sales", Text = "Sales Data" },
            new { Value = "financial", Text = "Financial Data" },
            new { Value = "large", Text = "Large Dataset (10K)" }
        };
    }

    private string[] GetDepartmentFilterItems()
    {
        var items = new List<string> { "All Departments" };
        items.AddRange(GetUniqueDepartments());
        return items.ToArray();
    }

    private string[] GetPositionFilterItems()
    {
        var items = new List<string> { "All Positions" };
        items.AddRange(GetUniquePositions());
        return items.ToArray();
    }

    private object[] GetDepartmentOptions()
    {
        var options = new List<object> { new { Value = "", Text = "All Departments" } };
        options.AddRange(GetUniqueDepartments().Select(d => new { Value = d, Text = d }));
        return options.ToArray();
    }

    private object[] GetPositionOptions()
    {
        var options = new List<object> { new { Value = "", Text = "All Positions" } };
        options.AddRange(GetUniquePositions().Select(p => new { Value = p, Text = p }));
        return options.ToArray();
    }

    private async Task ShowEmployeeDetails(Employee employee)
    {
        // Implementation for showing employee details modal
        await JS.InvokeVoidAsync("alert", $"Employee Details: {employee.Name}");
    }

    private async Task EditEmployee(Employee employee)
    {
        await JS.InvokeVoidAsync("alert", $"Edit Employee: {employee.Name}");
    }

    private async Task ViewEmployee(Employee employee)
    {
        await JS.InvokeVoidAsync("alert", $"View Employee: {employee.Name}");
    }

    private async Task DeleteEmployee(Employee employee)
    {
        await JS.InvokeVoidAsync("alert", $"Delete Employee: {employee.Name}");
    }

    private async Task UpdatePerformanceMetrics()
    {
        // Simulate performance measurement
        var startTime = DateTime.UtcNow;
        
        // Force a small delay to measure render time
        await Task.Delay(1);
        
        previousRenderTime = renderTime;
        renderTime = (DateTime.UtcNow - startTime).TotalMilliseconds;
        
        // Simulate memory usage calculation
        memoryUsage = Math.Round(currentDataSize * 0.001 + Random.Shared.NextDouble() * 5, 1);
        
        // Update performance chart data
        performanceData = new
        {
            labels = new[] { "Render", "Data Load", "Filter", "Memory" },
            datasets = new[]
            {
                new
                {
                    label = "Current",
                    data = new[] { renderTime, dataLoadTime, filterTime, memoryUsage },
                    borderColor = "#3b82f6",
                    backgroundColor = "rgba(59, 130, 246, 0.1)"
                }
            }
        };
    }

    private string GetPerformanceTrend(double current, double previous)
    {
        if (previous == 0) return "neutral";
        return current < previous ? "up" : current > previous ? "down" : "neutral";
    }

    private string GetMemoryTrend()
    {
        return currentDataSize > 5000 ? "down" : "up";
    }

    // Data Models
    public class Employee
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Department { get; set; } = string.Empty;
        public string Position { get; set; } = string.Empty;
        public decimal Salary { get; set; }
        public DateTime HireDate { get; set; }
        public bool IsActive { get; set; }
        public string Email { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
    }

    public enum GridDensity
    {
        Compact,
        Normal,
        Spacious
    }
}

<style>
    .data-grid-showcase-tabs {
        --tab-indicator-color: var(--color-primary);
    }
    
    .data-grid-demo.density-compact {
        --table-row-height: 32px;
    }
    
    .data-grid-demo.density-spacious {
        --table-row-height: 56px;
    }
    
    .filter-demo-panel {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
    }
    
    .virtualization-demo {
        border: 1px solid var(--color-border);
        border-radius: var(--border-radius-md);
    }
    
    .filtered-results-table {
        min-height: 400px;
    }
</style>