@page "/test/data-display"
@using Microsoft.AspNetCore.Components.Web
@using RR.Blazor.Models
@using RR.Blazor.Enums
@using RR.Blazor.Components.Data
@using Microsoft.JSInterop
@using RR.Blazor.Components.Display
@using RR.Blazor.Components.Feedback
@using RR.Blazor.Services
@using RR.Blazor.Templates
@using RR.Blazor.Components.Form
@using RR.Blazor.Components.Base
@using System.Linq.Expressions

<PageTitle>Data & Display Components Showcase</PageTitle>
<RThemeProvider>
    <div class="container pa-6">
        <!-- Header Section -->
        <RSection Text="Data and Display Components Showcase" Icon="dashboard" Class="mb-6">
            <p class="text-muted mb-0">Comprehensive demonstration of RR.Blazor data visualization and display components with realistic business data.</p>
        </RSection>

        <!-- Data Components Section -->
        <RDivider Text="Core Data Components" Icon="table_chart" Size="SizeType.Large" Class="mb-4" />

        <!-- Ultimate Feature Demo Table -->
        <RCard Text="Ultimate Feature Demo" Subtitle="All table features in one comprehensive example with 12+ columns for horizontal scrolling" Variant="CardVariant.Elevated" Class="mb-4">
            <div class="pa-4">
                <RTable Items="@extendedEmployeeData" 
                        Title="Complete Table Capabilities"
                        EnablePaging="true"
                        PageSize="10"
                        EnableFiltering="true"
                        EnableSorting="true"
                        EnableSelection="true"
                        SelectionMode="TableSelectionMode.Multiple"
                        EnableColumnManager="true"
                        EnableColumnReordering="true"
                        EnableStickyColumns="true"
                        EnableExport="true"
                        ExportFormats="@(new[] { "csv", "excel", "pdf" })"
                        Density="DensityType.Normal"
                        ShowToolbar="true"
                        ShowSearch="true"
                        ShowFilters="true"
                        Loading="@isLoadingEmployees"
                        Width="100%"
                        MaxHeight="600px"
                        EnableHorizontalScroll="true" />
            </div>
        </RCard>

        <!-- RGrid Smart Type Detection -->
        <RCard Text="RGrid Smart Type Detection" Subtitle="Automatic type inference from different data sources - zero configuration required" Variant="CardVariant.Glass" Class="mb-4">
            <div class="pa-4">
                <!-- Test 1: List<T> Auto-Detection -->
                <div class="mb-6">
                    <div class="text-h6 font-semibold mb-3">List&lt;T&gt; Auto-Detection</div>
                    <div class="text-xs text-success mb-2">✨ Type auto-detected from List&lt;ExtendedEmployeeData&gt;</div>
                    <RGrid DataSource="@extendedEmployeeData.Take(5)" 
                           Title="Auto-Detected from List"
                           EnablePaging="true"
                           PageSize="5"
                           EnableFiltering="true"
                           EnableSorting="true" />
                </div>

                <!-- Test 2: Dictionary Value Type Detection -->
                <div class="mb-6">
                    <div class="text-h6 font-semibold mb-3">Dictionary&lt;K, V&gt; Value Detection</div>
                    <div class="text-xs text-success mb-2">✨ Auto-detects value type from Dictionary</div>
                    <RGrid DataSource="@GetEmployeeDictionary()" 
                           Title="Dictionary Values Grid"
                           PageSize="3" />
                </div>

                <!-- Test 3: Anonymous Type Detection -->
                <div class="mb-6">
                    <div class="text-h6 font-semibold mb-3">Anonymous Type Smart Detection</div>
                    <div class="text-xs text-success mb-2">✨ Works with LINQ projections and anonymous types</div>
                    <RGrid DataSource="@GetAnonymousProjection()" 
                           Title="Anonymous Types Grid"
                           EnableSorting="true"
                           PageSize="5" />
                </div>
            </div>
        </RCard>

        <!-- RFilter Integration Demo -->
        <RCard Text="RFilter Integration Demo" Subtitle="Advanced filtering with standalone and integrated configurations" Variant="CardVariant.Elevated" Class="mb-4">
            <div class="pa-4">
                <!-- Standalone RFilter Panel -->
                <div class="mb-6">
                    <div class="text-h6 font-semibold mb-4">Standalone RFilter Panel</div>
                    <div class="d-flex gap-6">
                        <div class="flex-none" style="min-width: 300px; max-width: 400px;">
                            <RFilter @ref="standaloneFilter" 
                                         DataSource="@extendedEmployeeData"
                                         OnFilterChanged="@OnFilterChanged"
                                         Config="@(new UniversalFilterConfig { ShowAdvancedPanel = true, ShowSearch = true })"
                                         SearchFields="@(new List<string> { nameof(ExtendedEmployeeData.Name), nameof(ExtendedEmployeeData.Email) })" />
                        </div>
                        <div class="flex-1">
                            <RTable Items="@filteredEmployeeData" 
                                    Title="Filtered Results"
                                    EnablePaging="true"
                                    PageSize="10"
                                    EnableSorting="true"
                                    ShowToolbar="false" />
                        </div>
                    </div>
                </div>

                <!-- Integrated RFilter in Table Toolbar -->
                <RDivider Text="Integrated Filter Toolbar" Class="my-4" />
                <div class="mb-6">
                    <div class="text-h6 font-semibold mb-4">RFilter Integrated in Table Toolbar</div>
                    <RTable Items="@extendedEmployeeData" 
                            Title="Table with Integrated Filters"
                            EnablePaging="true"
                            PageSize="10"
                            EnableFiltering="true"
                            ShowFilters="true" />
                </div>
            </div>
        </RCard>

        <!-- Calendar Component -->
        <RCard Text="RCalendar" Subtitle="Professional calendar with events and navigation" Variant="CardVariant.Elevated" Class="mb-4">
            <div class="pa-4">
                <RCalendar Size="SizeType.Default" />
            </div>
        </RCard>

        <!-- Chip Component Status Examples -->
        <RCard Text="RChip Status Indicators" Subtitle="Properly styled status chips with solid backgrounds" Variant="CardVariant.Elevated" Class="mb-4">
            <div class="pa-4">
                <div class="text-h6 font-semibold mb-4">Employee Status Chips</div>
                <div class="d-flex flex-wrap gap-3 mb-4">
                    <RChip Text="Active" Style="ChipStyle.Status" Class="chip-active" Icon="check_circle" />
                    <RChip Text="Inactive" Style="ChipStyle.Status" Class="chip-inactive" Icon="cancel" />
                    <RChip Text="On Leave" Style="ChipStyle.Status" Class="chip-on-leave" Icon="event_busy" />
                    <RChip Text="Pending" Style="ChipStyle.Status" Class="chip-pending" Icon="schedule" />
                    <RChip Text="Processing" Style="ChipStyle.Status" Class="chip-processing" Icon="sync" />
                </div>
                
                <div class="text-h6 font-semibold mb-4">Semantic Variant Chips</div>
                <div class="d-flex flex-wrap gap-3 mb-4">
                    <RChip Text="Primary" Style="ChipStyle.Badge" Variant="VariantType.Primary" />
                    <RChip Text="Secondary" Style="ChipStyle.Badge" Variant="VariantType.Secondary" />
                    <RChip Text="Success" Style="ChipStyle.Badge" Variant="VariantType.Success" />
                    <RChip Text="Warning" Style="ChipStyle.Badge" Variant="VariantType.Warning" />
                    <RChip Text="Error" Style="ChipStyle.Badge" Variant="VariantType.Error" />
                    <RChip Text="Info" Style="ChipStyle.Badge" Variant="VariantType.Info" />
                </div>

                <div class="text-h6 font-semibold mb-4">Size Variations</div>
                <div class="d-flex items-center flex-wrap gap-3">
                    <RChip Text="Small Chip" Style="ChipStyle.Status" Class="chip-success" Size="SizeType.Small" />
                    <RChip Text="Default Chip" Style="ChipStyle.Status" Class="chip-success" Size="SizeType.Default" />
                    <RChip Text="Large Chip" Style="ChipStyle.Status" Class="chip-success" Size="SizeType.Large" />
                </div>
            </div>
        </RCard>

        <!-- Data Display Component -->
        <RCard Text="RDataDisplay Component" Subtitle="Versatile data visualization with multiple layout and style options" Variant="CardVariant.Elevated" Class="mb-4">
            <div class="pa-4">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <RDataDisplay Text="Total Employees" Value="@extendedEmployeeData.Count.ToString()" Icon="group" 
                                 Variant="DataDisplayVariant.Card" Size="SizeType.Large" 
                                 Emphasis="DataDisplayEmphasis.Strong" Layout="DataDisplayLayout.Vertical" />
                    <RDataDisplay Text="Average Salary" Value="@($"${extendedEmployeeData.Average(e => e.Salary):N0}")" Icon="payments" 
                                 Variant="DataDisplayVariant.Card" Size="SizeType.Large" 
                                 Emphasis="DataDisplayEmphasis.Success" Layout="DataDisplayLayout.Vertical" />
                    <RDataDisplay Text="Active Status" Value="@($"{extendedEmployeeData.Count(e => e.Status == "Active")} Active")" Icon="check_circle" 
                                 Variant="DataDisplayVariant.Card" Size="SizeType.Large" 
                                 Emphasis="DataDisplayEmphasis.Strong" Layout="DataDisplayLayout.Vertical" />
                </div>
            </div>
        </RCard>

        <!-- Footer Summary -->
        <RDivider Text="Component Summary" Icon="summarize" Size="SizeType.Large" Class="my-6" />
        <div class="text-center pb-6">
            <RChip Text="3 Comprehensive Examples" Style="ChipStyle.Badge" Variant="VariantType.Primary" Size="SizeType.Large" Class="mr-2" />
            <RChip Text="Full Feature Coverage" Style="ChipStyle.Badge" Variant="VariantType.Success" Size="SizeType.Large" Class="mr-2" />
            <RChip Text="Production Ready" Style="ChipStyle.Badge" Variant="VariantType.Info" Size="SizeType.Large" />
        </div>
    </div>
</RThemeProvider>

@code {
    // Extended Employee Data Model with more fields for horizontal scrolling demo
    public class ExtendedEmployeeData
    {
        public string EmployeeId { get; set; } = "";
        public string Name { get; set; } = "";
        public string Email { get; set; } = "";
        public string Phone { get; set; } = "";
        public string Department { get; set; } = "";
        public string Position { get; set; } = "";
        public string Manager { get; set; } = "";
        public string Team { get; set; } = "";
        public string Location { get; set; } = "";
        public string TimeZone { get; set; } = "";
        public decimal Salary { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime? LastReview { get; set; }
        public DateTime? NextReview { get; set; }
        public double PerformanceScore { get; set; }
        public string Status { get; set; } = "";
    }

    private bool isLoadingEmployees = false;
    private List<ExtendedEmployeeData> extendedEmployeeData = new();
    private List<ExtendedEmployeeData> filteredEmployeeData = new();
    private RFilter standaloneFilter;

    protected override async Task OnInitializedAsync()
    {
        await GenerateExtendedEmployeeData();
        filteredEmployeeData = extendedEmployeeData.ToList();
        StateHasChanged();
    }

    private async Task GenerateExtendedEmployeeData()
    {
        var random = new Random();
        var departments = new[] { "Engineering", "Marketing", "Sales", "HR", "Finance", "Operations", "Design", "Product" };
        var statuses = new[] { "Active", "Inactive", "On Leave" };
        var managers = new[] { "John Smith", "Jane Doe", "Robert Brown", "Lisa White", "Michael Green" };
        var teams = new[] { "Alpha", "Beta", "Gamma", "Delta", "Omega" };
        var locations = new[] { "New York", "San Francisco", "London", "Tokyo", "Singapore", "Berlin", "Sydney" };
        var timeZones = new[] { "EST", "PST", "GMT", "JST", "SGT", "CET", "AEST" };

        extendedEmployeeData = new List<ExtendedEmployeeData>();

        for (int i = 1; i <= 50; i++)
        {
            var startDate = DateTime.Now.AddDays(-random.Next(30, 1500));
            var lastReview = startDate.AddMonths(random.Next(6, 18));
            var nextReview = lastReview.AddMonths(6);

            extendedEmployeeData.Add(new ExtendedEmployeeData
            {
                EmployeeId = $"EMP{i:D4}",
                Name = $"{GetRandomFirstName()} {GetRandomLastName()}",
                Email = $"employee{i}@company.com",
                Phone = $"+1 555-{random.Next(100, 999)}-{random.Next(1000, 9999)}",
                Department = departments[random.Next(departments.Length)],
                Position = GetRandomPosition(),
                Manager = managers[random.Next(managers.Length)],
                Team = teams[random.Next(teams.Length)],
                Location = locations[random.Next(locations.Length)],
                TimeZone = timeZones[Array.IndexOf(locations, locations[random.Next(locations.Length)])],
                Salary = random.Next(50000, 150000),
                StartDate = startDate,
                LastReview = lastReview,
                NextReview = nextReview,
                PerformanceScore = random.Next(40, 100),
                Status = statuses[random.Next(statuses.Length)]
            });
        }

        await Task.CompletedTask;
    }

    private string GetRandomFirstName()
    {
        var names = new[] { "Sarah", "Michael", "Emily", "David", "Lisa", "James", "Anna", "Robert", "Jennifer", "Carlos",
                           "Maria", "John", "Patricia", "William", "Linda", "Richard", "Barbara", "Joseph", "Susan", "Thomas" };
        return names[new Random().Next(names.Length)];
    }

    private string GetRandomLastName()
    {
        var names = new[] { "Johnson", "Chen", "Rodriguez", "Kim", "Thompson", "Wilson", "Martinez", "Taylor", "White", "Mendoza",
                           "Anderson", "Brown", "Davis", "Miller", "Jones", "Garcia", "Smith", "Williams", "Lee", "Harris" };
        return names[new Random().Next(names.Length)];
    }

    private string GetRandomPosition()
    {
        var positions = new[] { "Senior Developer", "Marketing Manager", "Sales Representative", "HR Specialist", "Financial Analyst",
                               "DevOps Engineer", "UX Designer", "Product Manager", "Data Scientist", "Business Analyst",
                               "Software Architect", "Account Executive", "Operations Manager", "Technical Lead", "QA Engineer" };
        return positions[new Random().Next(positions.Length)];
    }

    private Dictionary<string, ExtendedEmployeeData> GetEmployeeDictionary()
    {
        return extendedEmployeeData.Take(5).ToDictionary(e => e.EmployeeId, e => e);
    }

    private object GetAnonymousProjection()
    {
        return extendedEmployeeData.Take(5).Select(e => new
        {
            e.Name,
            e.Department,
            e.Position,
            AnnualSalary = e.Salary,
            YearsOfService = (DateTime.Now - e.StartDate).Days / 365.0,
            e.Status
        }).ToList();
    }

    private List<string> GetDepartmentOptions()
    {
        return extendedEmployeeData.Select(e => e.Department).Distinct().OrderBy(d => d).ToList();
    }

    private List<string> GetStatusOptions()
    {
        return new List<string> { "Active", "Inactive", "On Leave" };
    }

    private void OnFilterChanged(FilterStateChangedEventArgs args)
    {
        // Apply filter predicate to data
        if (args.HasActiveFilters && standaloneFilter != null)
        {
            var predicate = standaloneFilter.GetPredicate<ExtendedEmployeeData>();
            if (predicate != null)
            {
                filteredEmployeeData = extendedEmployeeData.Where(predicate.Compile()).ToList();
            }
            else
            {
                filteredEmployeeData = extendedEmployeeData.ToList();
            }
        }
        else
        {
            filteredEmployeeData = extendedEmployeeData.ToList();
        }
        StateHasChanged();
    }
}