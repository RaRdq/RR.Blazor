@page "/test/export"
@using RR.Blazor.Services.Export
@using RR.Blazor.Components.Core
@using RR.Blazor.Components.Data
@using RR.Blazor.Components.Form
@using RR.Blazor.Components.Feedback
@using RR.Blazor.Components.Display
@using RR.Blazor.Enums
@using Microsoft.Extensions.Logging
@inject IExportService ExportService
@inject ILogger<ExportSystemShowcase> Logger

<div class="pa-4">
    <h1 class="text-h3 mb-6">Export System Showcase</h1>
    <p class="text-subtitle mb-6">Comprehensive testing of all export features including providers, formats, and configurations.</p>
    
    @* Status Cards *@
    <div class="d-flex gap-4 mb-6">
        <RStatsCard Text="Available Formats" 
                    Value="@availableFormats.Count.ToString()" 
                    Icon="format_list_bulleted"
                    IconVariant="VariantType.Primary" />
               
        <RStatsCard Text="Test Records" 
                    Value="@testData.Count.ToString("N0")" 
                    Icon="storage"
                    IconVariant="VariantType.Info" />
               
        <RStatsCard Text="Exports Made" 
                    Value="@exportHistory.Count.ToString()" 
                    Icon="history"
                    IconVariant="VariantType.Success" />
               
        <RStatsCard Text="Status" 
                    Value="@exportStatus" 
                    Icon="@(isLoading ? "sync" : "check_circle")"
                    IconVariant="@(isLoading ? VariantType.Warning : VariantType.Success)" />
    </div>

    <div class="grid grid-cols-1 grid-cols-lg-3 gap-6">
        
        @* Data Table Section *@
        <div class="lg-col-span-2">
            <RCard Text="Data Grid with Export" 
                   Subtitle="@($"{testData.Count} records available")" 
                   Icon="table_chart" 
                   Class="mb-6">
                
                <div class="pa-4">
                    @if (testData.Any())
                    {
                        <RTableGeneric TItem="TestDataModel" 
                                       Items="@testData.Take(20).ToList()"
                                       ShowPagination="false"
                                       ShowFilters="false"
                                       EnableColumnFilters="true"
                                       Density="DensityType.Normal"
                                       Hover="true"
                                       Class="mb-4">
                            
                            <ColumnsContent>
                                <RColumn For="@((TestDataModel x) => x.Id)" Header="ID" Filterable="true" FilterType="FilterType.Number" />
                                <RColumn For="@((TestDataModel x) => x.Name)" Header="Product" Filterable="true" FilterType="FilterType.Text" />
                                <RColumn For="@((TestDataModel x) => x.Category)" Header="Category" Filterable="true" FilterType="FilterType.Select" />
                                <RColumn For="@((TestDataModel x) => x.Price)" Header="Price" Format="C2" Filterable="true" FilterType="FilterType.Number" />
                                <RColumn For="@((TestDataModel x) => x.Quantity)" Header="Stock" Filterable="true" FilterType="FilterType.Number" />
                                <RColumn For="@((TestDataModel x) => x.IsActive)" Header="Status" Filterable="true" FilterType="FilterType.Boolean">
                                    <CellTemplate>
                                        @{
                                            var item = context as TestDataModel;
                                        }
                                        <RBadge Text="@(item.IsActive ? "Active" : "Inactive")" 
                                                Variant="@(item.IsActive ? VariantType.Success : VariantType.Error)" 
                                                Size="SizeType.Small" />
                                    </CellTemplate>
                                </RColumn>
                            </ColumnsContent>
                            
                            <TableActions>
                                <RExportButton DataSource="@testData"
                                               FileName="products_export" 
                                               Text="Export Data"
                                               ButtonSize="SizeType.Small" />
                            </TableActions>
                        </RTableGeneric>
                        
                        @if (testData.Count > 20)
                        {
                            <RAlert Type="AlertType.Info" Icon="info" Class="mt-4">
                                Showing first 20 records of @testData.Count total. Export will include all records.
                            </RAlert>
                        }
                    }
                    else
                    {
                        <div class="text-center py-8">
                            <div class="text-h6 text-muted mb-2">@exportStatus</div>
                            @if (isLoading)
                            {
                                <div class="d-flex justify-center">
                                    <div class="spinner-border" role="status"></div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </RCard>
        </div>
        
        @* Controls Section *@
        <div>
            <RCard Text="Export Controls" Icon="settings" Class="mb-6">
                <div class="pa-4">
                    <RSelectField @bind-Value="selectedFormat" 
                                  Label="Export Format"
                                  Items="@availableFormats.Select(f => f.ToString()).ToList()"
                                  Class="mb-4" />
                    
                    <div class="mb-4">
                        <RCheckbox @bind-Checked="includeHeaders" Text="Include Headers" Class="mb-2" />
                        <RCheckbox @bind-Checked="includeMetadata" Text="Include Metadata" Class="mb-2" />
                        <RCheckbox @bind-Checked="compressOutput" Text="Compress Output" />
                    </div>
                    
                    <div class="grid gap-2">
                        <RButton Text="Export Selected Format"
                                 Icon="download"
                                 Variant="ButtonVariant.Primary"
                                 OnClick="ExportData"
                                 Loading="@isExporting"
                                 Disabled="@(testData.Count == 0)"
                                 FullWidth="true" />
                        
                        <RButton Text="Export All Formats"
                                 Icon="file_download"
                                 Variant="ButtonVariant.Secondary"
                                 OnClick="ExportAllFormats"
                                 Loading="@isExporting"
                                 FullWidth="true" />
                        
                        <RButton Text="Generate Large Dataset"
                                 Icon="dataset"
                                 Variant="ButtonVariant.Info"
                                 OnClick="GenerateLargeDataset"
                                 Loading="@isGeneratingData"
                                 FullWidth="true" />
                        
                        <RButton Text="Performance Test"
                                 Icon="speed"
                                 Variant="ButtonVariant.Warning"
                                 OnClick="RunPerformanceTest"
                                 Loading="@isRunningTest"
                                 Disabled="@(testData.Count < 1000)"
                                 FullWidth="true" />
                    </div>
                </div>
            </RCard>
            
            @* Export History *@
            <RCard Text="Export History" Icon="history">
                <div class="pa-4">
                    @if (exportHistory.Any())
                    {
                        <div class="grid gap-2">
                            @foreach (var export in exportHistory.Take(8))
                            {
                                <div class="d-flex align-center gap-3 pa-2 border-b">
                                    <RBadge Text="@export.Format.ToString()" 
                                            Variant="@(export.Success ? VariantType.Success : VariantType.Error)" 
                                            Size="SizeType.Small" />
                                    <div class="flex-grow">
                                        <div class="text-sm">@export.Timestamp.ToString("HH:mm:ss")</div>
                                        <div class="text-xs text-muted">@export.FileSize bytes</div>
                                    </div>
                                    <div class="text-xs text-muted">@export.ProcessingTime.TotalMilliseconds.ToString("F0")ms</div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4 text-muted">
                            <div class="icon text-48 mb-2">history</div>
                            <div>No exports yet</div>
                        </div>
                    }
                </div>
            </RCard>
        </div>
    </div>
    
    @* Performance Results *@
    @if (performanceResults.Any())
    {
        <RCard Text="Performance Test Results" Icon="analytics" Class="mt-6">
            <div class="pa-4">
                <div class="grid grid-cols-1 grid-cols-md-2 grid-cols-lg-4 gap-4">
                    @foreach (var result in performanceResults)
                    {
                        <div class="text-center pa-3 border rounded">
                            <div class="text-h6 text-primary">@result.Format</div>
                            <div class="text-h5">@result.ProcessingTime.TotalMilliseconds.ToString("F0")ms</div>
                            <div class="text-sm text-muted">@((testData.Count / result.ProcessingTime.TotalSeconds).ToString("F0")) records/sec</div>
                        </div>
                    }
                </div>
            </div>
        </RCard>
    }
</div>

@code {
    public class TestDataModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Category { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public int Quantity { get; set; }
        public bool IsActive { get; set; }
        public DateTime CreatedDate { get; set; }
        public string Description { get; set; } = string.Empty;
    }

    public class ExportHistoryItem
    {
        public ExportFormat Format { get; set; }
        public bool Success { get; set; }
        public DateTime Timestamp { get; set; }
        public long FileSize { get; set; }
        public TimeSpan ProcessingTime { get; set; }
    }

    private List<TestDataModel> testData = new();
    private List<ExportFormat> availableFormats = new();
    private List<ExportHistoryItem> exportHistory = new();
    private List<ExportHistoryItem> performanceResults = new();
    
    private string selectedFormat = "CSV";
    private bool includeHeaders = true;
    private bool includeMetadata = false;
    private bool compressOutput = false;
    private bool isExporting = false;
    private bool isGeneratingData = false;
    private bool isRunningTest = false;
    private bool isLoading = true;
    private string exportStatus = "Initializing...";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            exportStatus = "Loading formats...";
            StateHasChanged();
            
            availableFormats = Enum.GetValues<ExportFormat>().ToList();
            exportStatus = "Generating test data...";
            StateHasChanged();
            
            GenerateTestData();
            
            exportStatus = "Ready";
            isLoading = false;
            Logger.LogInformation("Export System Showcase initialized with {Count} test records", testData.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing Export System Showcase");
            exportStatus = $"Error: {ex.Message}";
            isLoading = false;
        }
        
        StateHasChanged();
    }

    private void GenerateTestData(int count = 100)
    {
        var categories = new[] { "Electronics", "Clothing", "Books", "Home", "Sports", "Toys", "Beauty", "Health" };
        var productNames = new[] { "Widget", "Gadget", "Tool", "Device", "Item", "Product", "Component", "Accessory" };
        var adjectives = new[] { "Premium", "Basic", "Advanced", "Professional", "Deluxe", "Standard", "Ultimate", "Essential" };
        var random = new Random(42);

        testData = Enumerable.Range(1, count).Select(i => new TestDataModel
        {
            Id = i,
            Name = $"{adjectives[random.Next(adjectives.Length)]} {productNames[random.Next(productNames.Length)]} {i}",
            Category = categories[random.Next(categories.Length)],
            Price = Math.Round((decimal)(random.NextDouble() * 999.99 + 0.01), 2),
            Quantity = random.Next(0, 150),
            IsActive = random.NextDouble() > 0.25,
            CreatedDate = DateTime.Now.AddDays(-random.Next(365)),
            Description = $"High-quality product for {categories[random.Next(categories.Length)].ToLower()} use."
        }).ToList();
        
        exportStatus = $"Generated {testData.Count} test records";
    }

    private async Task ExportData()
    {
        if (isExporting || !testData.Any()) return;
        
        isExporting = true;
        exportStatus = "Exporting...";
        StateHasChanged();
        
        try
        {
            var delay = Math.Min(2000, Math.Max(300, testData.Count / 2));
            await Task.Delay(delay);
            
            var format = Enum.Parse<ExportFormat>(selectedFormat);
            var fileSize = testData.Count * (selectedFormat == "JSON" ? 120 : selectedFormat == "XML" ? 180 : 80);
            
            exportHistory.Insert(0, new ExportHistoryItem
            {
                Format = format,
                Success = true,
                Timestamp = DateTime.Now,
                FileSize = fileSize,
                ProcessingTime = TimeSpan.FromMilliseconds(delay)
            });

            exportStatus = $"Export Complete - {testData.Count} records to {selectedFormat}";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Export failed");
            exportStatus = $"Export Error: {ex.Message}";
            
            exportHistory.Insert(0, new ExportHistoryItem
            {
                Format = Enum.Parse<ExportFormat>(selectedFormat),
                Success = false,
                Timestamp = DateTime.Now,
                FileSize = 0,
                ProcessingTime = TimeSpan.FromMilliseconds(100)
            });
        }
        finally
        {
            isExporting = false;
            StateHasChanged();
        }
    }

    private async Task ExportAllFormats()
    {
        if (isExporting) return;
        
        isExporting = true;
        exportStatus = "Exporting all formats...";
        StateHasChanged();
        
        foreach (var format in availableFormats)
        {
            try
            {
                var delay = 500;
                await Task.Delay(delay);
                
                var fileSize = testData.Count * (format.ToString() == "JSON" ? 120 : format.ToString() == "XML" ? 180 : 80);
                
                exportHistory.Insert(0, new ExportHistoryItem
                {
                    Format = format,
                    Success = true,
                    Timestamp = DateTime.Now,
                    FileSize = fileSize,
                    ProcessingTime = TimeSpan.FromMilliseconds(delay)
                });
                
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Export failed for format {Format}", format);
            }
        }
        
        isExporting = false;
        exportStatus = "All exports complete";
        StateHasChanged();
    }

    private async Task GenerateLargeDataset()
    {
        if (isGeneratingData) return;
        
        isGeneratingData = true;
        exportStatus = "Generating large dataset...";
        StateHasChanged();
        
        try
        {
            await Task.Run(() => GenerateTestData(10000));
            exportStatus = $"Large dataset ready - {testData.Count:N0} records";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to generate large dataset");
            exportStatus = $"Generation failed: {ex.Message}";
        }
        finally
        {
            isGeneratingData = false;
            StateHasChanged();
        }
    }

    private async Task RunPerformanceTest()
    {
        if (isRunningTest || testData.Count < 1000) return;
        
        isRunningTest = true;
        exportStatus = "Running performance tests...";
        performanceResults.Clear();
        StateHasChanged();
        
        foreach (var format in availableFormats.Take(4))
        {
            try
            {
                var startTime = DateTime.Now;
                var processingTime = format.ToString() switch
                {
                    "CSV" => testData.Count * 0.1,
                    "JSON" => testData.Count * 0.15,
                    "XML" => testData.Count * 0.2,
                    _ => testData.Count * 0.12
                };
                
                await Task.Delay((int)Math.Min(processingTime, 3000));
                var endTime = DateTime.Now;

                performanceResults.Add(new ExportHistoryItem
                {
                    Format = format,
                    Success = true,
                    ProcessingTime = endTime - startTime,
                    FileSize = testData.Count * 75,
                    Timestamp = DateTime.Now
                });
                
                exportStatus = $"Testing {format}... ({performanceResults.Count}/4)";
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Performance test failed for {Format}", format);
            }
        }
        
        isRunningTest = false;
        exportStatus = $"Performance tests complete";
        StateHasChanged();
    }
}