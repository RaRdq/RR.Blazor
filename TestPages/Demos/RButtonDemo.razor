@using RR.Blazor.Components.Core
@using RR.Blazor.Components.Layout
@using RR.Blazor.Components.Navigation
@using RR.Blazor.Components.Feedback
@using RR.Blazor.Enums
@using RR.Blazor.Services

<RCard Variant="CardVariant.Outlined" Text="RButton">
    <ChildContent>
        <RDivider Text="Button Component" 
                  Subtitle="Material Design buttons with orthogonal design modes" 
                  Icon="touch_app" />
        
        <RTabs Density="DensityType.Dense">
            <!-- Default Button Demo Tab -->
            <RTabItem Title="Button Demo" Icon="smart_button">
                <div class="space-y-6">
                    <!-- Variants Section -->
                    <div class="space-y-2">
                        <div class="text-h6 font-medium">Semantic Variants (Filled Style)</div>
                        <p class="text-sm text-muted mb-3">All semantic color variants with default filled style</p>
                        <div class="flex items-center gap-2 flex-wrap">
                            <RButton Text="Primary" Variant="VariantType.Primary" />
                            <RButton Text="Secondary" Variant="VariantType.Secondary" />
                            <RButton Text="Success" Variant="VariantType.Success" />
                            <RButton Text="Warning" Variant="VariantType.Warning" />
                            <RButton Text="Error" Variant="VariantType.Error" />
                            <RButton Text="Info" Variant="VariantType.Info" />
                        </div>
                    </div>

                    <!-- Button Modes Section -->
                    <div class="space-y-2">
                        <div class="text-h6 font-medium">Button Modes (Structural)</div>
                        <p class="text-sm text-muted mb-3">Structural appearance - filled, outline, or ghost</p>
                        
                        <div class="mb-3">
                            <div class="text-sm font-medium mb-2">Outline Mode:</div>
                            <div class="flex items-center gap-2 flex-wrap">
                                <RButton Text="Primary" Variant="VariantType.Primary" Mode="ButtonMode.Outline" />
                                <RButton Text="Secondary" Variant="VariantType.Secondary" Mode="ButtonMode.Outline" />
                                <RButton Text="Success" Variant="VariantType.Success" Mode="ButtonMode.Outline" />
                                <RButton Text="Warning" Variant="VariantType.Warning" Mode="ButtonMode.Outline" />
                                <RButton Text="Error" Variant="VariantType.Error" Mode="ButtonMode.Outline" />
                                <RButton Text="Info" Variant="VariantType.Info" Mode="ButtonMode.Outline" />
                            </div>
                        </div>
                        
                        <div>
                            <div class="text-sm font-medium mb-2">Ghost Mode:</div>
                            <div class="flex items-center gap-2 flex-wrap">
                                <RButton Text="Primary" Variant="VariantType.Primary" Mode="ButtonMode.Ghost" />
                                <RButton Text="Secondary" Variant="VariantType.Secondary" Mode="ButtonMode.Ghost" />
                                <RButton Text="Success" Variant="VariantType.Success" Mode="ButtonMode.Ghost" />
                                <RButton Text="Warning" Variant="VariantType.Warning" Mode="ButtonMode.Ghost" />
                                <RButton Text="Error" Variant="VariantType.Error" Mode="ButtonMode.Ghost" />
                                <RButton Text="Info" Variant="VariantType.Info" Mode="ButtonMode.Ghost" />
                            </div>
                        </div>
                    </div>
                    
                    <!-- Aesthetic Styles Section -->
                    <div class="space-y-2">
                        <div class="text-h6 font-medium">Style Types (Aesthetic)</div>
                        <p class="text-sm text-muted mb-3">Design language styles - glass, neumorphism, neon, etc</p>
                        <div class="flex items-center gap-2 flex-wrap">
                            <RButton Text="Material" Variant="VariantType.Primary" StyleType="ButtonStyleType.Material" />
                            <RButton Text="Glass" Variant="VariantType.Primary" StyleType="ButtonStyleType.Glass" />
                            <RButton Text="Neumorphism" Variant="VariantType.Primary" StyleType="ButtonStyleType.Neumorphism" />
                            <RButton Text="Neon" Variant="VariantType.Primary" StyleType="ButtonStyleType.Neon" />
                            <RButton Text="Elevated" Variant="VariantType.Primary" StyleType="ButtonStyleType.Elevated" />
                            <RButton Text="Flat" Variant="VariantType.Primary" StyleType="ButtonStyleType.Flat" />
                        </div>
                    </div>
                    
                    <!-- Intensity Modifiers Section -->
                    <div class="space-y-2">
                        <div class="text-h6 font-medium">Intensity Types (Prominence)</div>
                        <p class="text-sm text-muted mb-3">Visual prominence - how attention-grabbing the button appears</p>
                        <div class="flex items-center gap-2 flex-wrap">
                            <RButton Text="Normal" Variant="VariantType.Primary" Intensity="IntensityType.Normal" />
                            <RButton Text="Muted" Variant="VariantType.Primary" Intensity="IntensityType.Muted" />
                            <RButton Text="Bold" Variant="VariantType.Primary" Intensity="IntensityType.Bold" />
                            <RButton Text="Subtle" Variant="VariantType.Primary" Intensity="IntensityType.Subtle" />
                        </div>
                    </div>

                    <!-- Sizes Section -->
                    <div class="space-y-2">
                        <div class="text-h6 font-medium">Sizes</div>
                        <div class="flex items-center gap-3">
                            <RButton Text="XS" Size="SizeType.ExtraSmall" />
                            <RButton Text="Small" Size="SizeType.Small" />
                            <RButton Text="Medium" Size="SizeType.Medium" />
                            <RButton Text="Large" Size="SizeType.Large" />
                            <RButton Text="XL" Size="SizeType.ExtraLarge" />
                        </div>
                    </div>

                    <!-- Icons Section -->
                    <div class="space-y-2">
                        <div class="text-h6 font-medium">Icons</div>
                        <div class="flex items-center gap-3 flex-wrap">
                            <RButton Text="Start" Icon="add" IconPosition="IconPosition.Start" />
                            <RButton Text="End" Icon="arrow_forward" IconPosition="IconPosition.End" />
                            <RButton Text="Top" Icon="cloud_upload" IconPosition="IconPosition.Top" />
                            <RButton Text="Bottom" Icon="cloud_download" IconPosition="IconPosition.Bottom" />
                            <RButton Icon="edit" Size="SizeType.Small" />
                            <RButton Icon="delete" Variant="VariantType.Error" />
                            <RButton Icon="settings" />
                        </div>
                    </div>

                    <!-- States Section -->
                    <div class="space-y-2">
                        <div class="text-h6 font-medium">States</div>
                        <div class="flex items-center gap-3 flex-wrap">
                            <RButton Text="Normal" />
                            <RButton Text="Loading" Loading="true" />
                            <RButton Text="Loading..." Loading="true" LoadingText="Processing..." />
                            <RButton Text="Disabled" Disabled="true" />
                        </div>
                    </div>

                    <!-- Interactive Examples -->
                    <div class="space-y-2">
                        <div class="text-h6 font-medium">Interactive</div>
                        <div class="flex items-center gap-3 flex-wrap">
                            <RButton Text="@($"Clicked {_clickCount} times")" 
                                    @onclick="IncrementCounter" 
                                    Variant="VariantType.Primary" />
                            <RButton Text="Reset" 
                                    @onclick="ResetCounter" 
                                    Variant="VariantType.Secondary" 
                                    Mode="ButtonMode.Outline" />
                            <RButton Text="@(_isToggled ? "ON" : "OFF")" 
                                    @onclick="ToggleState"
                                    Variant="@(_isToggled ? VariantType.Success : VariantType.Secondary)"
                                    Icon="@(_isToggled ? "toggle_on" : "toggle_off")" />
                        </div>
                    </div>
                </div>
            </RTabItem>

            <!-- Glass Design Tab -->
            <RTabItem Title="Glass" Icon="blur_on">
                <div class="space-y-4">
                    <p class="text-sm text-muted">Glassmorphism effect with blur and transparency</p>
                    @foreach (var variant in variants)
                    {
                        <div class="flex items-center gap-2 flex-wrap">
                            <span class="text-sm w-24">@variant:</span>
                            <RButton Text="Filled" Variant="@variant" StyleType="ButtonStyleType.Glass" Mode="ButtonMode.Filled" />
                            <RButton Text="Outline" Variant="@variant" StyleType="ButtonStyleType.Glass" Mode="ButtonMode.Outline" />
                            <RButton Text="Ghost" Variant="@variant" StyleType="ButtonStyleType.Glass" Mode="ButtonMode.Ghost" />
                            <RButton Icon="add" Variant="@variant" StyleType="ButtonStyleType.Glass" />
                            <RButton Text="Disabled" Variant="@variant" StyleType="ButtonStyleType.Glass" Disabled="true" />
                        </div>
                    }
                </div>
            </RTabItem>

            <!-- Neumorphism Design Tab -->
            <RTabItem Title="Neumorphism" Icon="layers">
                <div class="space-y-4">
                    <p class="text-sm text-muted">Soft UI design with subtle shadows and highlights</p>
                    @foreach (var variant in variants)
                    {
                        <div class="flex items-center gap-2 flex-wrap">
                            <span class="text-sm w-24">@variant:</span>
                            <RButton Text="Filled" Variant="@variant" StyleType="ButtonStyleType.Neumorphism" Mode="ButtonMode.Filled" />
                            <RButton Text="Outline" Variant="@variant" StyleType="ButtonStyleType.Neumorphism" Mode="ButtonMode.Outline" />
                            <RButton Text="Ghost" Variant="@variant" StyleType="ButtonStyleType.Neumorphism" Mode="ButtonMode.Ghost" />
                            <RButton Icon="add" Variant="@variant" StyleType="ButtonStyleType.Neumorphism" />
                            <RButton Text="Disabled" Variant="@variant" StyleType="ButtonStyleType.Neumorphism" Disabled="true" />
                        </div>
                    }
                </div>
            </RTabItem>

            <!-- 3-Layer Architecture Tab -->
            <RTabItem Title="3-Layer Architecture" Icon="layers">
                <div class="space-y-4">
                    <p class="text-sm text-muted">Complete 3-layer button architecture: Semantic + Mode + Style + Intensity</p>
                    
                    <div class="space-y-3">
                        <div class="text-sm font-medium">Primary + Different Modes + Glass Style:</div>
                        <div class="flex items-center gap-2 flex-wrap">
                            <RButton Text="Filled Glass" Variant="VariantType.Primary" Mode="ButtonMode.Filled" StyleType="ButtonStyleType.Glass" />
                            <RButton Text="Outline Glass" Variant="VariantType.Primary" Mode="ButtonMode.Outline" StyleType="ButtonStyleType.Glass" />
                            <RButton Text="Ghost Glass" Variant="VariantType.Primary" Mode="ButtonMode.Ghost" StyleType="ButtonStyleType.Glass" />
                        </div>
                    </div>
                    
                    <div class="space-y-3">
                        <div class="text-sm font-medium">Success + Outline Mode + Different Styles:</div>
                        <div class="flex items-center gap-2 flex-wrap">
                            <RButton Text="Material" Variant="VariantType.Success" Mode="ButtonMode.Outline" StyleType="ButtonStyleType.Material" />
                            <RButton Text="Neon" Variant="VariantType.Success" Mode="ButtonMode.Outline" StyleType="ButtonStyleType.Neon" />
                            <RButton Text="Elevated" Variant="VariantType.Success" Mode="ButtonMode.Outline" StyleType="ButtonStyleType.Elevated" />
                        </div>
                    </div>
                    
                    <div class="space-y-3">
                        <div class="text-sm font-medium">Secondary + Ghost Mode + Different Intensities:</div>
                        <div class="flex items-center gap-2 flex-wrap">
                            <RButton Text="Normal" Variant="VariantType.Secondary" Mode="ButtonMode.Ghost" Intensity="IntensityType.Normal" />
                            <RButton Text="Muted" Variant="VariantType.Secondary" Mode="ButtonMode.Ghost" Intensity="IntensityType.Muted" />
                            <RButton Text="Bold" Variant="VariantType.Secondary" Mode="ButtonMode.Ghost" Intensity="IntensityType.Bold" />
                            <RButton Text="Subtle" Variant="VariantType.Secondary" Mode="ButtonMode.Ghost" Intensity="IntensityType.Subtle" />
                        </div>
                    </div>
                    
                    <div class="space-y-3">
                        <div class="text-sm font-medium">Full Architecture (Semantic + Mode + Style + Intensity):</div>
                        <div class="flex items-center gap-2 flex-wrap">
                            <RButton Text="Complete" Variant="VariantType.Primary" Mode="ButtonMode.Outline" StyleType="ButtonStyleType.Neumorphism" Intensity="IntensityType.Bold" />
                            <RButton Text="Complex" Variant="VariantType.Success" Mode="ButtonMode.Ghost" StyleType="ButtonStyleType.Glass" Intensity="IntensityType.Muted" />
                            <RButton Icon="star" Variant="VariantType.Warning" Mode="ButtonMode.Filled" StyleType="ButtonStyleType.Neon" Intensity="IntensityType.Bold" />
                        </div>
                    </div>
                </div>
            </RTabItem>


            <!-- Neon Design Tab -->
            <RTabItem Title="Neon" Icon="highlight">
                <div class="space-y-4">
                    <p class="text-sm text-muted">Neon glow effect with bright borders</p>
                    @foreach (var variant in variants)
                    {
                        <div class="flex items-center gap-2 flex-wrap">
                            <span class="text-sm w-24">@variant:</span>
                            <RButton Text="Filled" Variant="@variant" StyleType="ButtonStyleType.Neon" Mode="ButtonMode.Filled" />
                            <RButton Text="Outline" Variant="@variant" StyleType="ButtonStyleType.Neon" Mode="ButtonMode.Outline" />
                            <RButton Text="Ghost" Variant="@variant" StyleType="ButtonStyleType.Neon" Mode="ButtonMode.Ghost" />
                            <RButton Icon="add" Variant="@variant" StyleType="ButtonStyleType.Neon" />
                            <RButton Text="Disabled" Variant="@variant" StyleType="ButtonStyleType.Neon" Disabled="true" />
                        </div>
                    }
                </div>
            </RTabItem>

            <!-- Elevated Design Tab -->
            <RTabItem Title="Elevated" Icon="layers_clear">
                <div class="space-y-4">
                    <p class="text-sm text-muted">Elevated design with prominent shadows</p>
                    @foreach (var variant in variants)
                    {
                        <div class="flex items-center gap-2 flex-wrap">
                            <span class="text-sm w-24">@variant:</span>
                            <RButton Text="Filled" Variant="@variant" StyleType="ButtonStyleType.Elevated" Mode="ButtonMode.Filled" />
                            <RButton Text="Outline" Variant="@variant" StyleType="ButtonStyleType.Elevated" Mode="ButtonMode.Outline" />
                            <RButton Text="Ghost" Variant="@variant" StyleType="ButtonStyleType.Elevated" Mode="ButtonMode.Ghost" />
                            <RButton Icon="add" Variant="@variant" StyleType="ButtonStyleType.Elevated" />
                            <RButton Text="Disabled" Variant="@variant" StyleType="ButtonStyleType.Elevated" Disabled="true" />
                        </div>
                    }
                </div>
            </RTabItem>

            <!-- Flat Design Tab -->
            <RTabItem Title="Flat" Icon="crop_square">
                <div class="space-y-4">
                    <p class="text-sm text-muted">Flat design with no depth or shadows</p>
                    @foreach (var variant in variants)
                    {
                        <div class="flex items-center gap-2 flex-wrap">
                            <span class="text-sm w-24">@variant:</span>
                            <RButton Text="Filled" Variant="@variant" StyleType="ButtonStyleType.Flat" Mode="ButtonMode.Filled" />
                            <RButton Text="Outline" Variant="@variant" StyleType="ButtonStyleType.Flat" Mode="ButtonMode.Outline" />
                            <RButton Text="Ghost" Variant="@variant" StyleType="ButtonStyleType.Flat" Mode="ButtonMode.Ghost" />
                            <RButton Icon="add" Variant="@variant" StyleType="ButtonStyleType.Flat" />
                            <RButton Text="Disabled" Variant="@variant" StyleType="ButtonStyleType.Flat" Disabled="true" />
                        </div>
                    }
                </div>
            </RTabItem>

            <!-- Frosted Design Tab -->
            <RTabItem Title="Frosted" Icon="ac_unit">
                <div class="space-y-4">
                    <p class="text-sm text-muted">Frosted glass effect with heavy blur</p>
                    @foreach (var variant in variants)
                    {
                        <div class="flex items-center gap-2 flex-wrap">
                            <span class="text-sm w-24">@variant:</span>
                            <RButton Text="Filled" Variant="@variant" StyleType="ButtonStyleType.Frosted" Mode="ButtonMode.Filled" />
                            <RButton Text="Outline" Variant="@variant" StyleType="ButtonStyleType.Frosted" Mode="ButtonMode.Outline" />
                            <RButton Text="Ghost" Variant="@variant" StyleType="ButtonStyleType.Frosted" Mode="ButtonMode.Ghost" />
                            <RButton Icon="add" Variant="@variant" StyleType="ButtonStyleType.Frosted" />
                            <RButton Text="Disabled" Variant="@variant" StyleType="ButtonStyleType.Frosted" Disabled="true" />
                        </div>
                    }
                </div>
            </RTabItem>
        </RTabs>
    </ChildContent>
</RCard>

@code {
    [Inject] private IModalService ModalService { get; set; }

    private int _clickCount = 0;
    private bool _isProcessing = false;
    private bool _isToggled = false;
    
    // Variants to showcase
    private VariantType[] variants = new[] 
    {
        VariantType.Primary,
        VariantType.Secondary,
        VariantType.Success,
        VariantType.Warning,
        VariantType.Error,
        VariantType.Info
    };

    private void IncrementCounter()
    {
        _clickCount++;
    }

    private void ResetCounter()
    {
        _clickCount = 0;
    }

    private async Task HandleAsyncOperation()
    {
        _isProcessing = true;
        StateHasChanged();
        
        await Task.Delay(2000);
        
        _isProcessing = false;
        StateHasChanged();
    }

    private void ToggleState()
    {
        _isToggled = !_isToggled;
    }
}