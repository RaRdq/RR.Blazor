@using RR.Blazor.Components.Core
@using RR.Blazor.Components.Feedback
@using RR.Blazor.Enums
@using RR.Blazor.Services

<RCard Variant="CardVariant.Outlined" Text="RButton">
    <ChildContent>
        <RDivider Text="Button Component" 
                         Subtitle="Professional button with enterprise variants and comprehensive features" 
                         Icon="touch_app" />
        
        <div class="space-y-6">
            <!-- Variants -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Variants</div>
                <div class="flex items-center gap-3 flex-wrap">
                    <RButton Text="Primary" Variant="ButtonVariant.Primary" />
                    <RButton Text="Secondary" Variant="ButtonVariant.Secondary" />
                    <RButton Text="Success" Variant="ButtonVariant.Success" />
                    <RButton Text="Warning" Variant="ButtonVariant.Warning" />
                    <RButton Text="Danger" Variant="ButtonVariant.Danger" />
                    <RButton Text="Info" Variant="ButtonVariant.Info" />
                    <RButton Text="Outline" Variant="ButtonVariant.Outline" />
                    <RButton Text="Ghost" Variant="ButtonVariant.Ghost" />
                    <RButton Text="Glass" Variant="ButtonVariant.Glass" />
                </div>
            </div>

            <!-- Sizes -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Sizes</div>
                <div class="flex items-center gap-3">
                    <RButton Text="XS" Size="SizeType.ExtraSmall" />
                    <RButton Text="Small" Size="SizeType.Small" />
                    <RButton Text="Medium" Size="SizeType.Medium" />
                    <RButton Text="Large" Size="SizeType.Large" />
                    <RButton Text="XL" Size="SizeType.ExtraLarge" />
                </div>
            </div>

            <!-- With Icons -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Icon Positions</div>
                <div class="flex items-center gap-3 flex-wrap">
                    <RButton Text="Start Icon" Icon="add" IconPosition="IconPosition.Start" />
                    <RButton Text="End Icon" Icon="arrow_forward" IconPosition="IconPosition.End" />
                    <RButton Text="Top Icon" Icon="cloud_upload" IconPosition="IconPosition.Top" />
                    <RButton Text="Bottom Icon" Icon="cloud_download" IconPosition="IconPosition.Bottom" />
                </div>
            </div>

            <!-- States -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">States</div>
                <div class="flex items-center gap-3 flex-wrap">
                    <RButton Text="Normal" />
                    <RButton Text="Loading" Loading="true" LoadingText="Processing..." />
                    <RButton Text="Disabled" Disabled="true" />
                </div>
            </div>

            <!-- Icon Only -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Icon Only Buttons</div>
                <div class="flex items-center gap-3">
                    <RButton Icon="edit" Size="SizeType.Small" />
                    <RButton Icon="delete" Variant="ButtonVariant.Danger" />
                    <RButton Icon="settings" Variant="ButtonVariant.Ghost" />
                    <RButton Icon="more_vert" Variant="ButtonVariant.Outline" />
                </div>
            </div>

            <!-- Special Effect Variants -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Special Effect Variants</div>
                <div class="flex items-center gap-3 flex-wrap">
                    <RButton Text="Gradient" Variant="ButtonVariant.Gradient" />
                    <RButton Text="Neon" Variant="ButtonVariant.Neon" />
                    <RButton Text="Neumorphism" Variant="ButtonVariant.Neumorphism" />
                    <RButton Text="Shimmer" Variant="ButtonVariant.Shimmer" />
                    <RButton Text="Enterprise" Variant="ButtonVariant.Enterprise" />
                </div>
            </div>

            <!-- Button Types -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Button Types</div>
                <div class="flex items-center gap-3 flex-wrap">
                    <RButton Text="Default Button" />
                    <RButton Text="Submit Form" Type="ButtonType.Submit" />
                    <RButton Text="Reset Form" Type="ButtonType.Reset" />
                </div>
            </div>

            <!-- Loading States -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Loading States</div>
                <div class="flex items-center gap-3 flex-wrap">
                    <RButton Text="Processing" Loading="true" />
                    <RButton Text="Saving Changes" Loading="true" LoadingText="Saving..." />
                    <RButton Text="Custom Loading" Loading="true" LoadingText="Please wait..." />
                </div>
            </div>

            <!-- Event Handling -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Event Handling Demonstrations</div>
                <div class="space-y-4">
                    <div>
                        <p class="text-sm text-muted mb-2">Click Counter Example</p>
                        <div class="flex items-center gap-3">
                            <RButton Text="@($"Clicked {_clickCount} times")" 
                                    @onclick="IncrementCounter" 
                                    Variant="ButtonVariant.Primary" />
                            <RButton Text="Reset Counter" 
                                    @onclick="ResetCounter" 
                                    Variant="ButtonVariant.Secondary" />
                        </div>
                    </div>
                    
                    <div>
                        <p class="text-sm text-muted mb-2">Async Operation with Loading State</p>
                        <RButton Text="@(_isProcessing ? "Processing..." : "Start Async Task")" 
                                @onclick="HandleAsyncOperation" 
                                Loading="@_isProcessing"
                                Disabled="@_isProcessing"
                                Variant="ButtonVariant.Success" />
                    </div>
                    
                    <div>
                        <p class="text-sm text-muted mb-2">Confirmation Dialog Example</p>
                        <RButton Text="Delete Item" 
                                @onclick="@HandleDeleteWithConfirmation" 
                                Variant="ButtonVariant.Danger"
                                Icon="delete" />
                    </div>
                    
                    <div>
                        <p class="text-sm text-muted mb-2">Form Submission (Prevent Default)</p>
                        <form @onsubmit="HandleFormSubmit" @onsubmit:preventDefault="true">
                            <div class="flex items-center gap-3">
                                <RButton Text="Submit Form" 
                                        Type="ButtonType.Submit"
                                        Variant="ButtonVariant.Primary" />
                                <span class="text-sm">@_formMessage</span>
                            </div>
                        </form>
                    </div>
                    
                    <div>
                        <p class="text-sm text-muted mb-2">Toggle State Example</p>
                        <div class="flex items-center gap-3">
                            <RButton Text="@(_isToggled ? "ON" : "OFF")" 
                                    @onclick="ToggleState"
                                    Variant="@(_isToggled ? ButtonVariant.Success : ButtonVariant.Secondary)"
                                    Icon="@(_isToggled ? "toggle_on" : "toggle_off")" />
                            <span class="text-sm">Status: @(_isToggled ? "Active" : "Inactive")</span>
                        </div>
                    </div>
                    
                    <div>
                        <p class="text-sm text-muted mb-2">Event with Parameters</p>
                        <div class="flex items-center gap-3">
                            <RButton Text="Option A" 
                                    @onclick="@(() => SelectOption("A"))" 
                                    Variant="@(_selectedOption == "A" ? ButtonVariant.Primary : ButtonVariant.Outline)" />
                            <RButton Text="Option B" 
                                    @onclick="@(() => SelectOption("B"))" 
                                    Variant="@(_selectedOption == "B" ? ButtonVariant.Primary : ButtonVariant.Outline)" />
                            <RButton Text="Option C" 
                                    @onclick="@(() => SelectOption("C"))" 
                                    Variant="@(_selectedOption == "C" ? ButtonVariant.Primary : ButtonVariant.Outline)" />
                            <span class="text-sm">Selected: @(_selectedOption ?? "None")</span>
                        </div>
                    </div>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(confirmationResult))
            {
                <div class="space-y-2">
                    <div class="text-h6 font-semibold">Action Result</div>
                    <RChip Text="@confirmationResult" 
                           Variant="@(confirmationResult.Contains("deleted") ? VariantType.Success : VariantType.Info)" 
                           Icon="@(confirmationResult.Contains("deleted") ? "check_circle" : "info")" />
                </div>
            }
        </div>
    </ChildContent>
</RCard>

@code {
    [Inject] private IModalService ModalService { get; set; }

    private int _clickCount = 0;
    private bool _isProcessing = false;
    private bool _isToggled = false;
    private string _selectedOption = null;
    private string _formMessage = "Form not submitted yet";
    private string confirmationResult = "";

    private void IncrementCounter()
    {
        _clickCount++;
    }

    private void ResetCounter()
    {
        _clickCount = 0;
    }

    private async Task HandleAsyncOperation()
    {
        _isProcessing = true;
        StateHasChanged();
        
        // Simulate async operation
        await Task.Delay(2000);
        
        _isProcessing = false;
        StateHasChanged();
    }

    private async Task HandleDeleteWithConfirmation()
    {
        var confirmed = await ModalService.ConfirmAsync(
            "Are you sure you want to delete this item? This action cannot be undone.",
            "Delete Item",
            true);
        
        if (confirmed)
        {
            confirmationResult = "Item deleted successfully";
            StateHasChanged();
            await Task.Delay(3000);
            confirmationResult = "";
            StateHasChanged();
        }
    }

    private void HandleFormSubmit()
    {
        _formMessage = $"Form submitted at {DateTime.Now:HH:mm:ss}";
    }

    private void ToggleState()
    {
        _isToggled = !_isToggled;
    }

    private void SelectOption(string option)
    {
        _selectedOption = option;
    }
}