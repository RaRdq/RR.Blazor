@using RR.Blazor.Components.Core
@using RR.Blazor.Components.Feedback
@using RR.Blazor.Services
@using RR.Blazor.Enums
@using RR.Blazor.Models
@using RR.Blazor.TestPages.Demos.Components

<div class="relative">
    <GitHubLinkButton FileName="RModalDemo.razor" />
    <RCard Variant="CardVariant.Outlined" Text="RModal">
    <ChildContent>
        <RDivider Text="Modal System Showcase - ALL 4 CASES" 
                  Subtitle="Unified modal system: Case 1 (Raw), Case 2 (Internal RModal), Case 3 (Direct bind-Visible), Case 4 (Service)" 
                  Icon="web_asset" />
        
        <div class="space-y-6">
            <!-- Case 4: Service-based modals -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Case 4: Service-based Modals (ShowConfirmationAsync)</div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <RButton Text="Delete Confirmation" 
                             Variant="VariantType.Error" 
                             Icon="delete_forever"
                             @onclick="@(() => ShowDestructiveConfirmation())"
                             data-testid="delete-confirmation-button" />
                    <RButton Text="Warning Confirmation" 
                             Variant="VariantType.Warning" 
                             Icon="warning"
                             @onclick="@(() => ShowWarningConfirmation())"
                             data-testid="warning-confirmation-button" />
                </div>
                
            </div>

            <div class="space-y-2">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <RButton Text="Show Info Modal" 
                             Variant="VariantType.Info" 
                             Icon="info"
                             @onclick="@(() => ShowInfoDialog())"
                             data-testid="generic-modal-button" />
                </div>
            </div>

            <!-- Case 2: Component with internal RModal -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Case 2: Component WITH Internal RModal (ShowAsync)</div>
                <div class="text-sm text-muted mb-3">
                    Component has RModal inside - Provider renders directly, no double-wrap
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <RButton Text="Settings Modal (Has RModal)" 
                             Variant="VariantType.Primary" 
                             Icon="settings"
                             @onclick="@(() => ShowSettingsModal())"
                             data-testid="settings-modal-button" />
                </div>
            </div>
            
            <!-- Case 3: Direct RModal Usage -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Case 3: Direct RModal in DOM (bind-Visible)</div>
                <div class="text-sm text-muted mb-3">
                    Direct RModal with bind-Visible - integrates with JS modal system for backdrops
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <RButton Text="Direct RModal Test" 
                             Variant="VariantType.Secondary" 
                             Icon="open_in_new"
                             @onclick="@(() => ShowDirectRModal())"
                             data-testid="direct-modal-button" />
                    <RButton Text="Advanced Modal Demo" 
                             Variant="VariantType.Primary" 
                             Icon="article"
                             @onclick="@(() => ShowRModalWithContent())"
                             data-testid="advanced-modal-button" />
                </div>
            </div>

            <!-- Case 1: Raw Content (wrapped automatically) -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Case 1: Components WITHOUT RModal (ShowRawAsync)</div>
                <div class="text-sm text-muted mb-3">
                    Components without RModal - Provider auto-wraps in RModal
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <RButton Text="User Form Modal" 
                             Variant="VariantType.Success" 
                             Icon="person_add"
                             @onclick="@(() => ShowTypedUserFormModal())"
                             data-testid="typed-user-form-button" />
                    <RButton Text="Product Selection Modal" 
                             Variant="VariantType.Info" 
                             Icon="shopping_cart"
                             @onclick="@(() => ShowTypedProductSelectionModal())"
                             data-testid="typed-product-selection-button" />
                </div>
            </div>

            <!-- Modal Status Display -->
            @if (!string.IsNullOrEmpty(modalTestStatus))
            {
                <div class="space-y-2">
                    <div class="text-h6 font-semibold">Test Status</div>
                    <RChip Text="@modalTestStatus" 
                           Variant="@(modalTestStatus.Contains("Success") ? VariantType.Success : modalTestStatus.Contains("Error") ? VariantType.Error : VariantType.Info)" 
                           Icon="@(modalTestStatus.Contains("Success") ? "check_circle" : modalTestStatus.Contains("Error") ? "error" : "info")"
                           data-testid="modal-test-status" />
                </div>
            }
        </div>
    </ChildContent>
</RCard>

<!-- Case 3: Direct RModal in DOM - integrated with unified modal system -->
<RModal @bind-Visible="showDirectModal" 
        Title="Direct RModal Test" 
        Subtitle="Testing direct RModal binding through unified system"
        Icon="science"
        Size="SizeType.Medium"
        CloseOnBackdrop="true"
        CloseOnEscape="true"
        data-testid="direct-rmodal">
    <ChildContent>
        <div class="pa-4">
            <p class="mb-4">This is a direct RModal component using @@bind-Visible that integrates with the unified modal system for backdrop/portal management.</p>
            <p class="mb-4">All modals go through ONE modal system - no exceptions!</p>
            
            <RDivider Text="Open Nested Modal (Level 2)" Icon="layers" />
            <p class="text-sm mb-3">Click below to open a second modal on top of this one via ModalService:</p>
            <RButton Text="Open Content Modal (Level 2)" 
                     Variant="VariantType.Primary" 
                     Icon="open_in_new"
                     @onclick="@(() => ShowLevel2Modal())"
                     data-testid="open-level-2-modal" />
        </div>
    </ChildContent>
    <FooterContent>
        <RActionGroup Alignment="ActionGroupAlignment.End">
            <RButton Text="Cancel" 
                     Variant="VariantType.Secondary" 
                     @onclick="@(() => CloseDirectModal())"
                     data-testid="direct-modal-cancel" />
            <RButton Text="Confirm" 
                     Variant="VariantType.Primary" 
                     @onclick="@(() => ConfirmDirectModal())"
                     data-testid="direct-modal-confirm" />
        </RActionGroup>
    </FooterContent>
</RModal>

<!-- Content RModal with rich content -->
<RModal @bind-Visible="showContentModal" 
        Title="RModal with Rich Content" 
        Subtitle="Advanced modal content demonstration"
        Icon="article"
        Size="SizeType.Large"
        Loading="@isModalLoading"
        LoadingMessage="@modalLoadingMessage"
        ShowLoadingOverlay="true"
        data-testid="content-rmodal">
    <ChildContent>
        <div class="space-y-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 pa-2">
                <RCard Text="Feature Test" 
                       Content="This modal demonstrates complex content rendering within RModal components"
                       Icon="check_circle"
                       Variant="CardVariant.Outlined" />
                <RCard Text="Portal System" 
                       Content="Modal content is rendered in a portal outside the main DOM tree"
                       Icon="launch"
                       Variant="CardVariant.Outlined" />
            </div>

            <div class="space-y-3">
                <RDivider Text="Interactive Elements" Icon="touch_app" />
                <div class="flex gap-3 flex-wrap">
                    <RChip Text="Modal Tag" Variant="VariantType.Primary" />
                    <RChip Text="Portal System" Variant="VariantType.Success" />
                    <RChip Text="RR.Blazor" Variant="VariantType.Info" />
                </div>
                
                <div class="p-4 bg-surface-elevated rounded">
                    <p class="text-sm">
                        This modal contains multiple RR.Blazor components to test the complete integration:
                        RCard, RChip, RDivider, RButton, and RActionGroup components all working together
                        within the unified modal system.
                    </p>
                </div>
            </div>

            <div class="space-y-2">
                <p class="text-h6 font-semibold">Test Counter: @modalContentCounter</p>
                <RActionGroup>
                    <RButton Text="Increment" 
                             Variant="VariantType.Primary" 
                             Icon="add"
                             @onclick="@(() => IncrementModalCounter())"
                             data-testid="modal-increment-button" />
                    <RButton Text="Reset" 
                             Variant="VariantType.Secondary" 
                             Icon="refresh"
                             @onclick="@(() => ResetModalCounter())"
                             data-testid="modal-reset-button" />
                </RActionGroup>
            </div>
            
            <div class="space-y-2">
                <RDivider Text="Test Loading States" Icon="hourglass_empty" />
                <p class="text-sm mb-3">Test the new enhanced loading system:</p>
                <div class="grid grid-cols-2 gap-2">
                    <RButton Text="Full Loading" 
                             Variant="VariantType.Primary" 
                             Icon="fullscreen"
                             @onclick="@(() => TestFullLoading())"
                             Disabled="@isModalLoading"
                             data-testid="test-full-loading" />
                    <RButton Text="Content Loading" 
                             Variant="VariantType.Secondary" 
                             Icon="center_focus_weak"
                             @onclick="@(() => TestContentLoading())"
                             Disabled="@isModalLoading"
                             data-testid="test-content-loading" />
                    <RButton Text="Progress Loading" 
                             Variant="VariantType.Success" 
                             Icon="upload_file"
                             @onclick="@(() => TestProgressLoading())"
                             Disabled="@isModalLoading"
                             data-testid="test-progress-loading" />
                    <RButton Text="Multi-Step" 
                             Variant="VariantType.Info" 
                             Icon="format_list_numbered"
                             @onclick="@(() => TestMultiStepLoading())"
                             Disabled="@isModalLoading"
                             data-testid="test-multistep-loading" />
                </div>
            </div>
            
            <div class="space-y-2">
                <RDivider Text="Test 3-Level Modal Stacking" Icon="layers" />
                <p class="text-sm mb-3">Click these buttons to test nested modal z-index stacking:</p>
                <RActionGroup>
                    <RButton Text="Open Info Modal (Level 3)" 
                             Variant="VariantType.Info" 
                             Icon="info"
                             @onclick="@(() => ShowNestedInfoModal())"
                             data-testid="nested-info-modal-button" />
                    <RButton Text="Open Warning Modal (Level 3)" 
                             Variant="VariantType.Warning" 
                             Icon="warning"
                             @onclick="@(() => ShowNestedWarningModal())"
                             data-testid="nested-warning-modal-button" />
                    <RButton Text="Open Delete Confirmation (Level 3)" 
                             Variant="VariantType.Error" 
                             Icon="delete"
                             @onclick="@(() => ShowNestedDeleteModal())"
                             data-testid="nested-delete-modal-button" />
                </RActionGroup>
            </div>
        </div>
    </ChildContent>
    <FooterContent>
        <RActionGroup Alignment="ActionGroupAlignment.End" Variant="ActionGroupVariant.Complex">
            <RButton Text="Advanced Action" 
                     Variant="VariantType.Info" 
                     Icon="settings"
                     @onclick="@(() => AdvancedModalAction())"
                     data-testid="modal-advanced-action" />
            <div class="flex gap-2">
                <RButton Text="Close" 
                         Variant="VariantType.Secondary" 
                         @onclick="@(() => CloseContentModal())"
                         data-testid="content-modal-close" />
                <RButton Text="Save & Close" 
                         Variant="VariantType.Success" 
                         Icon="save"
                         @onclick="@(() => SaveAndCloseContentModal())"
                         data-testid="content-modal-save" />
            </div>
        </RActionGroup>
    </FooterContent>
</RModal>

@code {
    [Inject] private IModalService ModalService { get; set; }
    [Inject] private IToastService ToastService { get; set; }

    private string modalTestStatus = "";
    private bool showDirectModal = false;
    private bool showContentModal = false;
    private int modalContentCounter = 0;
    
    // Modal processing state
    private bool isModalLoading = false;
    private string modalLoadingMessage = "Processing...";
    private async Task ShowDestructiveConfirmation()
    {
        try
        {
            modalTestStatus = "Opening destructive confirmation...";
            StateHasChanged();
            
            Console.WriteLine("[DEBUG] Calling ShowConfirmationAsync with ConfirmationOptions");
            var result = await ModalService.ShowConfirmationAsync(new ConfirmationOptions
            {
                Title = "Delete All Records",
                Message = "This will permanently delete ALL records. This action cannot be undone!",
                ConfirmText = "Delete",
                CancelText = "Cancel",
                Variant = VariantType.Error,
                IsDestructive = true
            });
            
            Console.WriteLine($"[DEBUG] Modal result: {result}");
            modalTestStatus = result 
                ? "✅ Destructive confirmed - OnConfirm callback returned TRUE" 
                : "✅ Destructive cancelled - OnCancel callback returned FALSE";
                
            if (result)
            {
                ToastService?.ShowError("Delete confirmed - callback executed");
            }
            else
            {
                ToastService?.ShowInfo("Delete cancelled - callback executed");
            }
            
            StateHasChanged();
            await Task.Delay(3000);
            modalTestStatus = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[DEBUG] Exception: {ex}");
            modalTestStatus = $"❌ Error: {ex.Message}";
            StateHasChanged();
            await Task.Delay(3000);
            modalTestStatus = "";
            StateHasChanged();
        }
    }

    private async Task ShowWarningConfirmation()
    {
        try
        {
            modalTestStatus = "Opening warning confirmation...";
            StateHasChanged();
            
            var result = await ModalService.ShowConfirmationAsync(new ConfirmationOptions
            {
                Title = "Reset Settings",
                Message = "This will reset all settings to default values. Continue?",
                ConfirmText = "Reset",
                CancelText = "Cancel",
                Variant = VariantType.Warning,
                IsDestructive = false
            });
                
            modalTestStatus = result ? "✅ Reset confirmed" : "❌ Reset cancelled";
            StateHasChanged();
            await Task.Delay(3000);
            modalTestStatus = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            modalTestStatus = $"❌ Error: {ex.Message}";
            StateHasChanged();
            await Task.Delay(3000);
            modalTestStatus = "";
            StateHasChanged();
        }
    }

    private async Task ShowInfoDialog()
    {
        try
        {
            modalTestStatus = "Opening info dialog...";
            StateHasChanged();
            
            await ModalService.ShowInfoAsync(
                "This is an informational message with helpful details for the user.",
                "Information");
                
            modalTestStatus = "✅ Info dialog acknowledged";
            StateHasChanged();
            await Task.Delay(3000);
            modalTestStatus = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            modalTestStatus = $"❌ Error: {ex.Message}";
            StateHasChanged();
            await Task.Delay(3000);
            modalTestStatus = "";
            StateHasChanged();
        }
    }

    private void ShowDirectRModal()
    {
        modalTestStatus = "Opening direct RModal...";
        showDirectModal = true;
        StateHasChanged();
    }

    private async Task ShowSettingsModal()
    {
        modalTestStatus = "Opening Settings Modal (Case 2: Internal RModal)...";
        StateHasChanged();
        
        Console.WriteLine($"[ShowSettingsModal] Calling ShowAsync with IsRawContent = default (should be false)");
        
        var result = await ModalService.ShowAsync(
            new ModalOptions
            {
                ComponentType = typeof(SettingsModalWithWrapper),
                Title = "Application Settings",
                Size = SizeType.Large,
                Parameters = new Dictionary<string, object> 
                { 
                    { "Title", "Application Settings" }
                }
            });
            
        modalTestStatus = result.ResultType == Enums.ModalResult.Ok 
            ? "✅ Settings saved" 
            : "❌ Settings cancelled";
        StateHasChanged();
        
        await Task.Delay(3000);
        modalTestStatus = "";
        StateHasChanged();
    }

    private void ShowRModalWithContent()
    {
        modalTestStatus = "Opening Advanced Modal with rich content...";
        showContentModal = true;
        StateHasChanged();
    }

    private async Task ShowLevel2Modal()
    {
        modalTestStatus = "Opening Level 2 modal via ModalService...";
        StateHasChanged();
        
        // Use ModalService for Level 2 to test proper nesting
        var result = await ModalService.ShowConfirmationAsync(new ConfirmationOptions
        {
            Title = "Level 2: Nested Modal",
            Message = "This Level 2 modal was opened from Case 3 Direct RModal. Click 'Open Level 3' to test 3-level nesting with proper backdrop management.",
            ConfirmText = "Open Level 3",
            CancelText = "Close",
            Variant = VariantType.Info,
            IsDestructive = false
        });
        
        if (result)
        {
            // User clicked "Open Level 3" - show the next modal
            await ShowNestedInfoModal();
            modalTestStatus = "✅ Level 2 modal opened Level 3";
        }
        else
        {
            modalTestStatus = "❌ Level 2 modal cancelled";
        }
        StateHasChanged();
    }
    
    private void CloseDirectModal()
    {
        showDirectModal = false;
        modalTestStatus = "Direct RModal closed successfully";
        StateHasChanged();
        
        Task.Delay(3000).ContinueWith(_ => {
            modalTestStatus = "";
            InvokeAsync(StateHasChanged);
        });
    }

    private void ConfirmDirectModal()
    {
        showDirectModal = false;
        modalTestStatus = "Direct RModal confirmed - portal system working correctly";
        StateHasChanged();
        
        Task.Delay(5000).ContinueWith(_ => {
            modalTestStatus = "";
            InvokeAsync(StateHasChanged);
        });
    }
    
    private void CloseContentModal()
    {
        showContentModal = false;
        modalTestStatus = "Content modal closed";
        StateHasChanged();
        
        Task.Delay(3000).ContinueWith(_ => {
            modalTestStatus = "";
            InvokeAsync(StateHasChanged);
        });
    }

    private void SaveAndCloseContentModal()
    {
        showContentModal = false;
        modalTestStatus = $"Content modal saved with counter value: {modalContentCounter}";
        StateHasChanged();
        
        Task.Delay(5000).ContinueWith(_ => {
            modalTestStatus = "";
            InvokeAsync(StateHasChanged);
        });
    }
    
    private void AdvancedModalAction()
    {
        modalContentCounter += 10;
        modalTestStatus = $"Advanced action executed - counter boosted by 10 to {modalContentCounter}";
        StateHasChanged();
        
        Task.Delay(5000).ContinueWith(_ => {
            modalTestStatus = "";
            InvokeAsync(StateHasChanged);
        });
    }

    private void IncrementModalCounter()
    {
        modalContentCounter++;
        StateHasChanged();
    }

    private void ResetModalCounter()
    {
        modalContentCounter = 0;
        StateHasChanged();
    }

    
    private async Task ShowNestedInfoModal()
    {
        if (ModalService != null)
        {
            var result = await ModalService.ShowConfirmationAsync(
                "This is a Level 3 modal opened from within Custom Modal 2 (Level 2). It should appear ABOVE the parent modal.",
                "Nested Information",
                "Got It",
                "Close",
                VariantType.Info);
            
            if (result)
            {
                ToastService.ShowInfo("Info modal confirmed from Level 3!");
            }
        }
    }
    
    private async Task ShowNestedWarningModal()
    {
        if (ModalService != null)
        {
            var result = await ModalService.ShowConfirmationAsync(
                "⚠️ This is a warning modal at Level 3! Testing z-index stacking with 3 levels of modals.",
                "Nested Warning",
                "Acknowledge",
                "Dismiss",
                VariantType.Warning);
            
            if (result)
            {
                ToastService.ShowWarning("Warning acknowledged from Level 3!");
            }
        }
    }
    
    private async Task ShowNestedDeleteModal()
    {
        if (ModalService != null)
        {
            var result = await ModalService.ShowConfirmationAsync(
                "Delete Confirmation at Level 3",
                "Are you sure you want to delete this item? This modal is at the 3rd nesting level and should be on top of all other modals.",
                "Delete",
                "Cancel",
                VariantType.Error);
            
            if (result)
            {
                ToastService.ShowSuccess("Item deleted from Level 3 modal!");
            }
        }
    }

    
    // Strongly-typed modal methods
    private async Task ShowTypedUserFormModal()
    {
        try
        {
            modalTestStatus = "Opening strongly-typed user form modal...";
            StateHasChanged();
            
            var userParams = new UserFormModal.UserFormParameters
            {
                Name = "John Doe",
                Email = "john@example.com",
                Bio = "Default biography",
                ModalId = $"user-form-{Guid.NewGuid():N}"
            };
            
            var result = await ModalService.ShowRawAsync<UserFormModal.UserFormParameters>(
                typeof(UserFormModal),
                new Dictionary<string, object> { { "Parameters", userParams } },
                new ModalOptions<UserFormModal.UserFormParameters>
                {
                    Title = "Edit User Information",
                    Subtitle = "Update user details with type-safe parameters",
                    Icon = "person",
                    Size = SizeType.Medium,
                    Variant = VariantType.Default
                });
            
            if (result.ResultType == Enums.ModalResult.Ok)
            {
                modalTestStatus = $"✅ User form completed: {result.Data.Name} ({result.Data.Email})";
            }
            else
            {
                modalTestStatus = "❌ User form cancelled";
            }
            
            StateHasChanged();
            await Task.Delay(5000);
            modalTestStatus = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            modalTestStatus = $"❌ Error: {ex.Message}";
            StateHasChanged();
            await Task.Delay(3000);
            modalTestStatus = "";
            StateHasChanged();
        }
    }
    
    private async Task ShowTypedProductSelectionModal()
    {
        try
        {
            modalTestStatus = "Opening strongly-typed product selection modal...";
            StateHasChanged();
            
            var productParams = new ProductSelectionModal.ProductSelectionParameters
            {
                CustomerName = "Sarah Johnson",
                AvailableProducts = new List<ProductSelectionModal.ProductInfo>
                {
                    new() { Id = 1, Name = "Premium Widget", Price = 29.99m },
                    new() { Id = 2, Name = "Standard Widget", Price = 19.99m },
                    new() { Id = 3, Name = "Basic Widget", Price = 9.99m },
                    new() { Id = 4, Name = "Deluxe Widget", Price = 39.99m }
                },
                SelectedProductIds = new List<int> { 2 }, // Pre-select Standard Widget
                ModalId = $"product-selection-{Guid.NewGuid():N}"
            };
            
            var result = await ModalService.ShowRawAsync<ProductSelectionModal.ProductSelectionParameters>(
                typeof(ProductSelectionModal),
                new Dictionary<string, object> { { "Parameters", productParams } },
                new ModalOptions<ProductSelectionModal.ProductSelectionParameters>
                {
                    Title = "Select Products",
                    Subtitle = "Choose products for your customer",
                    Icon = "shopping_cart",
                    Size = SizeType.Large,
                    Variant = VariantType.Default
                });
            
            if (result.ResultType == Enums.ModalResult.Ok)
            {
                var selectedProducts = result.Data.AvailableProducts
                    .Where(p => result.Data.SelectedProductIds.Contains(p.Id))
                    .Select(p => p.Name)
                    .ToList();
                    
                modalTestStatus = $"✅ Selected {result.Data.SelectedProductIds.Count} products: {string.Join(", ", selectedProducts)}";
            }
            else
            {
                modalTestStatus = "❌ Product selection cancelled";
            }
            
            StateHasChanged();
            await Task.Delay(5000);
            modalTestStatus = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            modalTestStatus = $"❌ Error: {ex.Message}";
            StateHasChanged();
            await Task.Delay(3000);
            modalTestStatus = "";
            StateHasChanged();
        }
    }
    
    // Loading system test methods
    private async Task TestFullLoading()
    {
        isModalLoading = true;
        modalLoadingMessage = "Testing full modal loading overlay...";
        StateHasChanged();
        
        await Task.Delay(3000);
        
        isModalLoading = false;
        modalLoadingMessage = "Processing...";
        ToastService?.ShowSuccess("Full loading test completed!");
        StateHasChanged();
    }
    
    private async Task TestContentLoading()
    {
        isModalLoading = true;
        modalLoadingMessage = "Testing content-only loading overlay...";
        StateHasChanged();
        
        await Task.Delay(3000);
        
        isModalLoading = false;
        modalLoadingMessage = "Processing...";
        ToastService?.ShowSuccess("Content loading test completed!");
        StateHasChanged();
    }
    
    private async Task TestProgressLoading()
    {
        isModalLoading = true;
        modalLoadingMessage = "Uploading file... 0%";
        StateHasChanged();
        
        for (int i = 0; i <= 100; i += 20)
        {
            modalLoadingMessage = $"Uploading file... {i}% complete";
            StateHasChanged();
            await Task.Delay(500);
        }
        
        isModalLoading = false;
        modalLoadingMessage = "Processing...";
        ToastService?.ShowSuccess("Progress loading test completed!");
        StateHasChanged();
    }
    
    private async Task TestMultiStepLoading()
    {
        var steps = new List<string> 
        { 
            "Validating Data",
            "Processing Request",
            "Updating Database",
            "Sending Notifications",
            "Finalizing"
        };
        
        isModalLoading = true;
        StateHasChanged();
        
        for (int i = 0; i < steps.Count; i++)
        {
            modalLoadingMessage = $"Step {i + 1} of {steps.Count}: {steps[i]}...";
            StateHasChanged();
            await Task.Delay(1000);
        }
        
        isModalLoading = false;
        modalLoadingMessage = "Processing...";
        ToastService?.ShowSuccess("Multi-step loading test completed!");
        StateHasChanged();
    }
}
</div>