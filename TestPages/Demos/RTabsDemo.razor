@using RR.Blazor.Components.Core
@using RR.Blazor.Components.Navigation
@using RR.Blazor.Components.Form
@using RR.Blazor.Enums
@using RR.Blazor.TestPages.Demos.Components

<div class="relative">
    <GitHubLinkButton FileName="RTabsDemo.razor" />
    <RCard Variant="CardVariant.Outlined" Text="RTabs">
    <ChildContent>
        <RDivider Text="Interactive Tab Navigation Showcase"
                  Subtitle="Dynamically test all RTabs features with real-time configuration"
                  Icon="tab" />
        
        <!-- Control Panel -->
        <RCard Variant="CardVariant.Glass" Class="mb-6 p-3">
            <ChildContent>
                <div class="text-h6 font-semibold mb-4 flex items-center gap-2">
                    <i class="material-symbols-rounded">tune</i>
                    Tab Configuration Panel
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <!-- Variant Selector -->
                    <div>
                        <label class="text-sm text-muted mb-1 block">Variant</label>
                        <select @bind="_currentVariant" class="w-full px-3 py-2 rounded border border-light bg-surface text-sm">
                            <option value="@TabsVariant.Default">Default</option>
                            <option value="@TabsVariant.Pills">Pills</option>
                            <option value="@TabsVariant.Card">Card</option>
                            <option value="@TabsVariant.Underline">Underline</option>
                            <option value="@TabsVariant.Segment">Segment</option>
                            <option value="@TabsVariant.Elevated">Elevated</option>
                        </select>
                    </div>
                    
                    <!-- Orientation Selector -->
                    <div>
                        <label class="text-sm text-muted mb-1 block">Orientation</label>
                        <select @bind="_currentOrientation" class="w-full px-3 py-2 rounded border border-light bg-surface text-sm rtabs-orientation-selector">
                            <option value="@Orientation.Horizontal">Horizontal</option>
                            <option value="@Orientation.Vertical">Vertical</option>
                        </select>
                    </div>
                    
                    <!-- Size Selector -->
                    <div>
                        <label class="text-sm text-muted mb-1 block">Size</label>
                        <select @bind="_currentSize" class="w-full px-3 py-2 rounded border border-light bg-surface text-sm rtabs-size-selector">
                            <option value="@SizeType.ExtraSmall" class="rtabs-size-xs-option">Extra Small</option>
                            <option value="@SizeType.Small" class="rtabs-size-sm-option">Small</option>
                            <option value="@SizeType.Medium" class="rtabs-size-md-option">Medium</option>
                            <option value="@SizeType.Large" class="rtabs-size-lg-option">Large</option>
                            <option value="@SizeType.ExtraLarge" class="rtabs-size-xl-option">Extra Large</option>
                        </select>
                    </div>
                    
                    <!-- Density Selector -->
                    <div>
                        <label class="text-sm text-muted mb-1 block">Density</label>
                        <select @bind="_currentDensity" class="w-full px-3 py-2 rounded border border-light bg-surface text-sm">
                            <option value="@DensityType.Compact">Compact</option>
                            <option value="@DensityType.Dense">Dense</option>
                            <option value="@DensityType.Normal">Normal</option>
                            <option value="@DensityType.Spacious">Spacious</option>
                        </select>
                    </div>
                </div>
                
                <div class="grid grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-2 mt-3">
                    <!-- Toggle Options -->
                    <RToggle @bind-Value="_showIcons" Text="Show Icons" Size="SizeType.Small" />
                    <RToggle @bind-Value="_showBadges" Text="Show Badges" Size="SizeType.Small" />
                    <RToggle @bind-Value="_closableTabs" Text="Closable" Size="SizeType.Small" />
                    <RToggle @bind-Value="_showAddButton" Text="Add Button" Size="SizeType.Small" />
                    <RToggle @bind-Value="_fadeAnimation" Text="Animation" Size="SizeType.Small" />
                    <RToggle @bind-Value="_keepAlive" Text="Keep Alive" Size="SizeType.Small" />
                </div>
                
                <div class="flex gap-2 mt-3">
                    <RButton Text="Add Tab" 
                             Icon="add"
                             Variant="VariantType.Primary"
                             Size="SizeType.Small"
                             Class="rtabs-config-add-button"
                             OnClick="AddConfigurableTab" />
                    <RButton Text="Remove Last" 
                             Icon="remove"
                             Variant="VariantType.Secondary"
                             Size="SizeType.Small"
                             Class="rtabs-config-remove-last-button"
                             OnClick="RemoveLastConfigurableTab"
                             Disabled="@(_configurableTabs.Count <= 2)" />
                    <RButton Text="Reset" 
                             Icon="refresh"
                             Variant="VariantType.Secondary"
                             Size="SizeType.Small"
                             Class="rtabs-config-reset-button"
                             OnClick="ResetConfiguration" />
                </div>
            </ChildContent>
        </RCard>
        
        <!-- Live Demo Area -->
        <RCard Variant="CardVariant.Elevated" Class="mb-6">
            <ChildContent>
                <div class="text-h6 font-semibold mb-4 flex items-center gap-2">
                    <i class="material-symbols-rounded">play_circle</i>
                    Live Demo - Interactive Configuration
                </div>
                
                <div class="@(_currentOrientation == Orientation.Vertical ? "h-96" : "")">
                    <RTabs @ref="_configurableTabsRef"
                           @bind-SelectedTab="_configurableSelectedTab"
                           Variant="_currentVariant"
                           Orientation="_currentOrientation"
                           Size="_currentSize"
                           Density="_currentDensity"
                           ShowAddButton="_showAddButton"
                           ShowBadges="_showBadges"
                           ShowAnimation="_fadeAnimation"
                           ShowTooltips="_showTooltips"
                           NoPadding="_noPadding"
                           FadeOnly="_fadeAnimation"
                           KeepPanelsAlive="_keepAlive"
                           OnAddTab="@(() => HandleAddTab())"
                           OnTabChanged="@((args) => HandleTabChanged(args))"
                           OnTabClosed="@((args) => HandleTabClosed(args))"
                           Class="">
                        @foreach (var tab in _configurableTabs)
                        {
                            <RTabItem Value="@tab.Value" 
                                      Text="@tab.Text" 
                                      Icon="@(_showIcons ? tab.Icon : null)"
                                      Badge="@(_showBadges && tab.Badge > 0 ? tab.Badge.ToString() : null)"
                                      Closable="@(_closableTabs && tab.Closable)"
                                      Disabled="@(tab.Value == "disabled")"
                                      Loading="@(tab.Value == "loading")"
                                      HasError="@(tab.Value == "error")"
                                      Tooltip="@(_showTooltips ? tab.Tooltip : null)">
                                <div class="p-4">
                                    <h4 class="text-lg font-semibold mb-2">@tab.Text Content</h4>
                                    <p class="text-body-2 text-muted mb-3">@tab.Description</p>
                                    
                                    @if (tab.ShowMetrics)
                                    {
                                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
                                            <div class="text-center p-3 bg-surface rounded">
                                                <div class="text-2xl font-bold text-primary">@tab.Metric1</div>
                                                <div class="text-sm text-muted">Metric 1</div>
                                            </div>
                                            <div class="text-center p-3 bg-surface rounded">
                                                <div class="text-2xl font-bold text-success">@tab.Metric2</div>
                                                <div class="text-sm text-muted">Metric 2</div>
                                            </div>
                                            <div class="text-center p-3 bg-surface rounded">
                                                <div class="text-2xl font-bold text-warning">@tab.Metric3</div>
                                                <div class="text-sm text-muted">Metric 3</div>
                                            </div>
                                        </div>
                                    }
                                    
                                    <div class="mt-4 text-xs text-muted">
                                        Tab ID: @tab.Value | Created: @tab.CreatedAt.ToString("HH:mm:ss")
                                        @if (tab.LastModified != null)
                                        {
                                            <span> | Modified: @tab.LastModified.Value.ToString("HH:mm:ss")</span>
                                        }
                                    </div>
                                </div>
                            </RTabItem>
                        }
                    </RTabs>
                </div>
                
                @if (!string.IsNullOrEmpty(_lastEvent))
                {
                    <div class="mt-4 p-3 bg-info-light rounded">
                        <span class="text-sm text-info">
                            <i class="material-symbols-rounded text-sm">info</i>
                            Last Event: @_lastEvent
                        </span>
                    </div>
                }
            </ChildContent>
        </RCard>
        
        <!-- Core Examples Section -->
        <div class="space-y-6 mt-6">
            <!-- 1. Basic Implementation -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Basic Implementation</div>
                <RTabs @bind-SelectedTab="_basicSelectedTab">
                    <RTabItem Value="overview" Text="Overview" Icon="dashboard">
                        <div class="p-4">
                            <h4 class="text-lg font-semibold mb-2">Overview</h4>
                            <p class="text-body-1 text-muted">Simple tab implementation with icons and content.</p>
                        </div>
                    </RTabItem>
                    <RTabItem Value="details" Text="Details" Icon="info">
                        <div class="p-4">
                            <h4 class="text-lg font-semibold mb-2">Details</h4>
                            <p class="text-body-1 text-muted">Additional information displayed in a separate tab.</p>
                        </div>
                    </RTabItem>
                    <RTabItem Value="settings" Text="Settings" Icon="settings">
                        <div class="p-4">
                            <h4 class="text-lg font-semibold mb-2">Settings</h4>
                            <p class="text-body-1 text-muted">Configuration options in the third tab.</p>
                        </div>
                    </RTabItem>
                </RTabs>
            </div>

            <!-- 2. Vertical Orientation -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Vertical Orientation</div>
                <RTabs @bind-SelectedTab="_verticalSelectedTab" Orientation="Orientation.Vertical" Class="h-48">
                    <RTabItem Value="dashboard" Text="Dashboard" Icon="dashboard">
                        <div class="p-4">
                            <h4 class="text-lg font-semibold mb-2">Dashboard</h4>
                            <p class="text-body-2">Vertical tabs are useful for sidebar navigation.</p>
                        </div>
                    </RTabItem>
                    <RTabItem Value="users" Text="Users" Icon="people">
                        <div class="p-4">
                            <h4 class="text-lg font-semibold mb-2">Users</h4>
                            <p class="text-body-2">Content flows to the right of vertical tabs.</p>
                        </div>
                    </RTabItem>
                    <RTabItem Value="reports" Text="Reports" Icon="assessment">
                        <div class="p-4">
                            <h4 class="text-lg font-semibold mb-2">Reports</h4>
                            <p class="text-body-2">Great for settings panels and documentation.</p>
                        </div>
                    </RTabItem>
                </RTabs>
            </div>

            <!-- 3. Dynamic Tabs -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Dynamic Tab Management</div>
                <RCard Variant="CardVariant.Glass" Class="p-4">
                    <ChildContent>
                        <div class="flex gap-2 mb-3">
                            <RButton Text="Add Tab" 
                                     Icon="add"
                                     Variant="VariantType.Primary"
                                     Size="SizeType.Small"
                                     OnClick="AddDynamicTab" />
                            <RButton Text="Remove Last" 
                                     Icon="remove"
                                     Variant="VariantType.Secondary"
                                     Size="SizeType.Small"
                                     OnClick="RemoveDynamicTab"
                                     Disabled="@(_dynamicTabs.Count <= 1)" />
                        </div>
                        
                        <RTabs @bind-SelectedTab="_dynamicSelectedTab">
                            @foreach (var tab in _dynamicTabs)
                            {
                                <RTabItem Value="@tab.Value" Text="@tab.Text" Icon="@tab.Icon" Closable="@tab.Closable">
                                    <div class="p-4">
                                        <p class="text-body-2">Dynamic content for @tab.Text</p>
                                    </div>
                                </RTabItem>
                            }
                        </RTabs>
                    </ChildContent>
                </RCard>
            </div>
        </div>
    </ChildContent>
</RCard>

@code {
    // Configuration Panel State
    private TabsVariant _currentVariant = TabsVariant.Default;
    private Orientation _currentOrientation = Orientation.Horizontal;
    private SizeType _currentSize = SizeType.Medium;
    private DensityType _currentDensity = DensityType.Normal;
    
    // Toggle Options
    private bool _showIcons = true;
    private bool _showBadges = true;
    private bool _closableTabs = false;
    private bool _showAddButton = false;
    private bool _fadeAnimation = false;
    private bool _keepAlive = false;
    private bool _noPadding = false;
    private bool _hasDisabledTab = false;
    private bool _hasLoadingTab = false;
    private bool _hasErrorTab = false;
    private bool _showTooltips = true;
    
    // Configurable Tabs
    private RTabs _configurableTabsRef;
    private string _configurableSelectedTab = "tab1";
    private List<ConfigurableTab> _configurableTabs = new();
    private int _configurableTabCounter = 10;
    private string _lastEvent = "";
    
    // Tab selections
    private string _basicSelectedTab = "overview";
    private string _verticalSelectedTab = "dashboard";
    private string _dynamicSelectedTab = "tab1";

    // Dynamic tabs
    private List<DynamicTab> _dynamicTabs = new();
    private int _nextTabId = 1;

    protected override Task OnInitializedAsync()
    {
        // Initialize configurable tabs
        _configurableTabs = new List<ConfigurableTab>
        {
            new() { 
                Value = "tab1", 
                Text = "Dashboard", 
                Icon = "dashboard",
                Description = "Main dashboard with key metrics and overview information",
                Tooltip = "View dashboard metrics",
                Badge = 5,
                ShowMetrics = true,
                Metric1 = "1,234",
                Metric2 = "98.5%",
                Metric3 = "42",
                CreatedAt = DateTime.Now 
            },
            new() { 
                Value = "tab2", 
                Text = "Analytics", 
                Icon = "analytics",
                Description = "Detailed analytics and reporting features",
                Tooltip = "View analytics",
                Badge = 12,
                ShowMetrics = true,
                Metric1 = "5,678",
                Metric2 = "87.3%",
                Metric3 = "156",
                CreatedAt = DateTime.Now 
            },
            new() { 
                Value = "tab3", 
                Text = "Settings", 
                Icon = "settings",
                Description = "Configuration and preferences",
                Tooltip = "Configure settings",
                Closable = true,
                CreatedAt = DateTime.Now 
            },
            new() { 
                Value = "disabled", 
                Text = "Disabled", 
                Icon = "block",
                Description = "This tab is disabled for demonstration",
                Tooltip = "This tab is disabled",
                CreatedAt = DateTime.Now 
            },
            new() { 
                Value = "loading", 
                Text = "Loading", 
                Icon = "hourglass_empty",
                Description = "This tab shows loading state",
                Tooltip = "Loading content...",
                CreatedAt = DateTime.Now 
            },
            new() { 
                Value = "error", 
                Text = "Error", 
                Icon = "error",
                Description = "This tab has an error state",
                Tooltip = "Error occurred",
                Badge = 1,
                CreatedAt = DateTime.Now 
            },
            new() { 
                Value = "reports", 
                Text = "Reports", 
                Icon = "assessment",
                Description = "Generate and view reports",
                Tooltip = "View reports",
                Badge = 3,
                CreatedAt = DateTime.Now 
            },
            new() { 
                Value = "users", 
                Text = "Users", 
                Icon = "people",
                Description = "Manage user accounts",
                Tooltip = "User management",
                Badge = 42,
                CreatedAt = DateTime.Now 
            },
            new() { 
                Value = "notifications", 
                Text = "Notifications", 
                Icon = "notifications",
                Description = "System notifications",
                Tooltip = "View notifications",
                Badge = 7,
                CreatedAt = DateTime.Now 
            },
            new() { 
                Value = "performance", 
                Text = "Performance", 
                Icon = "speed",
                Description = "System performance metrics",
                Tooltip = "Performance monitoring",
                CreatedAt = DateTime.Now 
            }
        };
        
        // Initialize dynamic tabs
        _dynamicTabs.Add(new DynamicTab
        {
            Value = "tab1",
            Text = "First Tab",
            Icon = "home",
            Closable = false,
            CreatedAt = DateTime.Now
        });
        
        return base.OnInitializedAsync();
    }
    
    // Configuration Panel Methods
    private void AddConfigurableTab()
    {
        _configurableTabCounter++;
        var newTab = new ConfigurableTab
        {
            Value = $"tab{_configurableTabCounter}",
            Text = $"Tab {_configurableTabCounter}",
            Icon = GetRandomIcon(),
            Description = $"Dynamically added tab #{_configurableTabCounter}",
            Tooltip = $"Tab {_configurableTabCounter} tooltip",
            Badge = Random.Shared.Next(0, 100),
            Closable = true,
            ShowMetrics = Random.Shared.Next(0, 2) == 1,
            Metric1 = Random.Shared.Next(100, 9999).ToString(),
            Metric2 = $"{Random.Shared.Next(70, 100)}.{Random.Shared.Next(0, 9)}%",
            Metric3 = Random.Shared.Next(10, 500).ToString(),
            CreatedAt = DateTime.Now
        };
        
        _configurableTabs.Add(newTab);
        _configurableSelectedTab = newTab.Value;
        _lastEvent = $"Added tab: {newTab.Text}";
    }
    
    private void RemoveLastConfigurableTab()
    {
        if (_configurableTabs.Count > 2)
        {
            var lastTab = _configurableTabs.Last();
            _configurableTabs.Remove(lastTab);
            
            if (_configurableSelectedTab == lastTab.Value)
            {
                _configurableSelectedTab = _configurableTabs.First().Value;
            }
            
            _lastEvent = $"Removed tab: {lastTab.Text}";
        }
    }
    
    private void ResetConfiguration()
    {
        _currentVariant = TabsVariant.Default;
        _currentOrientation = Orientation.Horizontal;
        _currentSize = SizeType.Medium;
        _currentDensity = DensityType.Normal;
        _showIcons = true;
        _showBadges = true;
        _closableTabs = false;
        _showAddButton = false;
        _fadeAnimation = false;
        _keepAlive = false;
        _noPadding = false;
        _hasDisabledTab = false;
        _hasLoadingTab = false;
        _hasErrorTab = false;
        _showTooltips = true;
        _lastEvent = "Configuration reset to defaults";
    }
    
    private void HandleAddTab()
    {
        AddConfigurableTab();
    }
    
    private void HandleTabChanged(RTabs.TabChangedEventArgs args)
    {
        _lastEvent = $"Tab changed: {args.OldTabId} → {args.NewTabId}";
    }
    
    private void HandleTabClosed(RTabs.TabClosedEventArgs args)
    {
        var tabToRemove = _configurableTabs.FirstOrDefault(t => t.Value == args.TabId);
        if (tabToRemove != null)
        {
            _configurableTabs.Remove(tabToRemove);
            _lastEvent = $"Tab closed: {tabToRemove.Text}";
            
            if (_configurableSelectedTab == args.TabId && _configurableTabs.Any())
            {
                _configurableSelectedTab = _configurableTabs.First().Value;
            }
        }
    }
    
    private string GetRandomIcon()
    {
        var icons = new[] { "folder", "star", "bookmark", "favorite", "info", "help", "article", "description", "assignment", "task" };
        return icons[Random.Shared.Next(icons.Length)];
    }

    private void AddDynamicTab()
    {
        _nextTabId++;
        var newTab = new DynamicTab
        {
            Value = $"tab{_nextTabId}",
            Text = $"Tab {_nextTabId}",
            Icon = "tab",
            Closable = true,
            CreatedAt = DateTime.Now
        };
        
        _dynamicTabs.Add(newTab);
        _dynamicSelectedTab = newTab.Value;
    }

    private void RemoveDynamicTab()
    {
        if (_dynamicTabs.Count > 1)
        {
            var lastTab = _dynamicTabs.Last();
            _dynamicTabs.Remove(lastTab);
            
            // If we removed the selected tab, select the first one
            if (_dynamicSelectedTab == lastTab.Value)
            {
                _dynamicSelectedTab = _dynamicTabs.First().Value;
            }
        }
    }

    public class DynamicTab
    {
        public string Value { get; set; } = string.Empty;
        public string Text { get; set; } = string.Empty;
        public string Icon { get; set; } = string.Empty;
        public bool Closable { get; set; }
        public DateTime CreatedAt { get; set; }
    }
    
    public class ConfigurableTab
    {
        public string Value { get; set; } = string.Empty;
        public string Text { get; set; } = string.Empty;
        public string Icon { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string Tooltip { get; set; } = string.Empty;
        public int Badge { get; set; }
        public bool Closable { get; set; }
        public bool ShowMetrics { get; set; }
        public string Metric1 { get; set; } = "0";
        public string Metric2 { get; set; } = "0%";
        public string Metric3 { get; set; } = "0";
        public DateTime CreatedAt { get; set; }
        public DateTime? LastModified { get; set; }
    }
    
}
</div>