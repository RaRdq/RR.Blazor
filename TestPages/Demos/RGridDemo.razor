@using RR.Blazor.Components.Core
@using RR.Blazor.Components.Display  
@using RR.Blazor.Components.Data
@using RR.Blazor.Enums
@using RR.Blazor.Models
@using RR.Blazor.TestPages.Demos.Components

<div class="relative">
    <GitHubLinkButton FileName="RGridDemo.razor" />
    <RCard Variant="CardVariant.Outlined" Text="RGrid">
    <ChildContent>
        <RDivider Text="Smart Data Grid Component"
                  Subtitle="Advanced grid with virtualization, filtering, sorting, grouping, and export capabilities"
                  Icon="grid_view" />
        
        <div class="space-y-6">
            <!-- Basic Grid Example -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Basic Grid</div>
                <div class="flex gap-2 mb-3">
                    <RButton Text="Auto Mode"
                             Variant="@(_currentMode == GridMode.Auto ? VariantType.Primary : VariantType.Secondary)"
                             Size="SizeType.Small"
                             @onclick="@(() => SetGridMode(GridMode.Auto))" />
                    <RButton Text="Cards Mode"
                             Variant="@(_currentMode == GridMode.Cards ? VariantType.Primary : VariantType.Secondary)"
                             Size="SizeType.Small"
                             @onclick="@(() => SetGridMode(GridMode.Cards))" />
                    <RButton Text="List Mode"
                             Variant="@(_currentMode == GridMode.List ? VariantType.Primary : VariantType.Secondary)"
                             Size="SizeType.Small"
                             @onclick="@(() => SetGridMode(GridMode.List))" />
                    <RButton Text="Gallery Mode"
                             Variant="@(_currentMode == GridMode.Gallery ? VariantType.Primary : VariantType.Secondary)"
                             Size="SizeType.Small"
                             @onclick="@(() => SetGridMode(GridMode.Gallery))" />
                    <RButton Text="Tiles Mode"
                             Variant="@(_currentMode == GridMode.Tiles ? VariantType.Primary : VariantType.Secondary)"
                             Size="SizeType.Small"
                             @onclick="@(() => SetGridMode(GridMode.Tiles))" />
                </div>
                <div class="mb-3 space-y-2">
                    <div class="text-sm text-muted">
                        Current mode: @_currentMode | Columns: XS(@_columnsXs) SM(@_columnsSm) MD(@_columnsMd) LG(@_columnsLg) XL(@_columnsXl)
                    </div>
                    <div class="flex gap-4 flex-wrap">
                        <div class="flex items-center gap-2">
                            <label class="text-sm font-medium">XS:</label>
                            <input type="range" min="1" max="8" value="@_columnsXs" 
                                   @onchange="@(e => { _columnsXs = int.Parse(e.Value.ToString()); StateHasChanged(); })"
                                   class="w-16" />
                            <span class="text-sm">@_columnsXs</span>
                        </div>
                        <div class="flex items-center gap-2">
                            <label class="text-sm font-medium">SM:</label>
                            <input type="range" min="1" max="8" value="@_columnsSm" 
                                   @onchange="@(e => { _columnsSm = int.Parse(e.Value.ToString()); StateHasChanged(); })"
                                   class="w-16" />
                            <span class="text-sm">@_columnsSm</span>
                        </div>
                        <div class="flex items-center gap-2">
                            <label class="text-sm font-medium">MD:</label>
                            <input type="range" min="1" max="8" value="@_columnsMd" 
                                   @onchange="@(e => { _columnsMd = int.Parse(e.Value.ToString()); StateHasChanged(); })"
                                   class="w-16" />
                            <span class="text-sm">@_columnsMd</span>
                        </div>
                        <div class="flex items-center gap-2">
                            <label class="text-sm font-medium">LG:</label>
                            <input type="range" min="1" max="8" value="@_columnsLg" 
                                   @onchange="@(e => { _columnsLg = int.Parse(e.Value.ToString()); StateHasChanged(); })"
                                   class="w-16" />
                            <span class="text-sm">@_columnsLg</span>
                        </div>
                        <div class="flex items-center gap-2">
                            <label class="text-sm font-medium">XL:</label>
                            <input type="range" min="1" max="8" value="@_columnsXl" 
                                   @onchange="@(e => { _columnsXl = int.Parse(e.Value.ToString()); StateHasChanged(); })"
                                   class="w-16" />
                            <span class="text-sm">@_columnsXl</span>
                        </div>
                    </div>
                </div>
                <RGrid Items="@_employees"
                       Mode="@_currentMode"
                       EnablePagination="true"
                       PageSize="5"
                       ColumnsXs="@_columnsXs"
                       ColumnsSm="@_columnsSm"
                       ColumnsMd="@_columnsMd"
                       ColumnsLg="@_columnsLg"
                       ColumnsXl="@_columnsXl"
                       Class="basic-grid">
                    <!-- Auto-generated columns -->
                </RGrid>
            </div>

            <!-- Advanced Grid with Features -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Advanced Grid with All Features</div>
                <div class="flex gap-2 mb-3">
                    <RButton Text="@(_enableVirtualization ? "Disable Virtualization" : "Enable Virtualization")"
                             Variant="VariantType.Secondary"
                             Size="SizeType.Small"
                             @onclick="ToggleVirtualization" />
                    <RButton Text="@(_enableFiltering ? "Disable Filtering" : "Enable Filtering")"
                             Variant="VariantType.Secondary"
                             Size="SizeType.Small"
                             @onclick="ToggleFiltering" />
                    <RButton Text="@(_enableExport ? "Disable Export" : "Enable Export")"
                             Variant="VariantType.Secondary"
                             Size="SizeType.Small"
                             @onclick="ToggleExport" />
                </div>
                
                <RGrid Items="@_employees"
                       EnablePagination="true"
                       PageSize="10"
                       EnableFilter="@_enableFiltering"
                       EnableVirtualization="@_enableVirtualization"
                       VirtualizationThreshold="100"
                       Class="advanced-grid">
                    <!-- Auto-generated columns with smart detection -->
                </RGrid>
                
                @if (_selectedEmployees?.Any() == true)
                {
                    <RAlert Type="AlertType.Info" Filled="true">
                        <ChildContent>
                            Selected @_selectedEmployees.Count() employees: @string.Join(", ", _selectedEmployees.Select(e => e.Name).Take(3))@(_selectedEmployees.Count() > 3 ? $" and {_selectedEmployees.Count() - 3} more..." : "")
                        </ChildContent>
                    </RAlert>
                }
            </div>

            <!-- Performance Grid -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Performance Grid (Large Dataset)</div>
                <div class="flex gap-2 mb-3">
                    <RButton Text="Load 1K Records"
                             Variant="@(_dataSize == 1000 ? VariantType.Primary : VariantType.Secondary)"
                             Size="SizeType.Small"
                             @onclick="@(() => LoadDataset(1000))" />
                    <RButton Text="Load 5K Records"
                             Variant="@(_dataSize == 5000 ? VariantType.Primary : VariantType.Secondary)"
                             Size="SizeType.Small"
                             @onclick="@(() => LoadDataset(5000))" />
                    <RButton Text="Load 10K Records"
                             Variant="@(_dataSize == 10000 ? VariantType.Primary : VariantType.Secondary)"
                             Size="SizeType.Small"
                             @onclick="@(() => LoadDataset(10000))" />
                </div>
                
                <div class="mb-3 text-sm text-muted">
                    Current dataset: @_dataSize.ToString("N0") records | Render time: @_renderTime.ToString("F1")ms
                </div>
                
                <RGrid Items="@_largeEmployees"
                       EnablePagination="true"
                       PageSize="25"
                       EnableVirtualization="true"
                       VirtualizationThreshold="100"
                       Class="performance-grid">
                    <!-- Auto-generated columns -->
                </RGrid>
            </div>

            <!-- Grid Density Options -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Grid Density</div>
                <div class="flex gap-2 mb-3">
                    <RButton Text="Compact"
                             Variant="@(_density == "compact" ? VariantType.Primary : VariantType.Secondary)"
                             Size="SizeType.Small"
                             @onclick="@(() => SetDensity("compact"))" />
                    <RButton Text="Normal"
                             Variant="@(_density == "normal" ? VariantType.Primary : VariantType.Secondary)"
                             Size="SizeType.Small"
                             @onclick="@(() => SetDensity("normal"))" />
                    <RButton Text="Spacious"
                             Variant="@(_density == "spacious" ? VariantType.Primary : VariantType.Secondary)"
                             Size="SizeType.Small"
                             @onclick="@(() => SetDensity("spacious"))" />
                </div>
                
                <RGrid Items="@_employees.Take(8).ToList()"
                       EnablePagination="false"
                       Density="@GetDensityType()"
                       Class="@($"density-grid density-{_density}")">
                    <!-- Auto-generated columns -->
                </RGrid>
            </div>
        </div>
    </ChildContent>
</RCard>

@code {
    // Sample data
    private List<Employee> _employees = new();
    private List<Employee> _largeEmployees = new();
    private IEnumerable<Employee> _selectedEmployees = Enumerable.Empty<Employee>();
    
    // Configuration
    private bool _enableVirtualization = true;
    private bool _enableFiltering = true;
    private bool _enableExport = true;
    private string _density = "normal";
    private int _dataSize = 1000;
    private double _renderTime = 0;
    
    // Grid mode and responsive columns
    private GridMode _currentMode = GridMode.Auto;
    private int _columnsXs = 1;
    private int _columnsSm = 2;
    private int _columnsMd = 3;
    private int _columnsLg = 4;
    private int _columnsXl = 6;

    protected override Task OnInitializedAsync()
    {
        _employees = GenerateEmployeeData(20);
        _largeEmployees = GenerateEmployeeData(_dataSize);
        return base.OnInitializedAsync();
    }

    private List<Employee> GenerateEmployeeData(int count)
    {
        var departments = new[] { "Engineering", "Sales", "Marketing", "HR", "Finance", "Operations" };
        var positions = new[] { "Manager", "Senior", "Junior", "Lead", "Specialist", "Coordinator" };
        var random = new Random(42);

        return Enumerable.Range(1, count).Select(i => new Employee
        {
            Id = i,
            Name = $"Employee {i:D3}",
            Department = departments[random.Next(departments.Length)],
            Position = $"{positions[random.Next(positions.Length)]}",
            Salary = random.Next(50000, 150000),
            HireDate = DateTime.Now.AddDays(-random.Next(1, 1000)),
            IsActive = random.NextDouble() > 0.1,
            Email = $"employee{i:D3}@company.com"
        }).ToList();
    }

    private void ToggleVirtualization() => _enableVirtualization = !_enableVirtualization;
    private void ToggleFiltering() => _enableFiltering = !_enableFiltering;
    private void ToggleExport() => _enableExport = !_enableExport;

    private void SetDensity(string density)
    {
        _density = density;
    }

    private async Task LoadDataset(int size)
    {
        var startTime = DateTime.UtcNow;
        _dataSize = size;
        _largeEmployees = GenerateEmployeeData(size);
        _renderTime = (DateTime.UtcNow - startTime).TotalMilliseconds;
        StateHasChanged();
    }

    private DensityType GetDensityType()
    {
        return _density switch
        {
            "compact" => DensityType.Compact,
            "spacious" => DensityType.Spacious,
            _ => DensityType.Normal
        };
    }

    private void SetGridMode(GridMode mode)
    {
        _currentMode = mode;
        
        // Adjust columns based on mode for better display
        switch (mode)
        {
            case GridMode.List:
                _columnsXs = _columnsSm = _columnsMd = _columnsLg = _columnsXl = 1;
                break;
            case GridMode.Cards:
                _columnsXs = 1;
                _columnsSm = 2;
                _columnsMd = 3;
                _columnsLg = 4;
                _columnsXl = 6;
                break;
            case GridMode.Gallery:
                _columnsXs = 2;
                _columnsSm = 3;
                _columnsMd = 4;
                _columnsLg = 5;
                _columnsXl = 7;
                break;
            case GridMode.Tiles:
                _columnsXs = 1;
                _columnsSm = 2;
                _columnsMd = 3;
                _columnsLg = 4;
                _columnsXl = 5;
                break;
            case GridMode.Auto:
            default:
                _columnsXs = 1;
                _columnsSm = 2;
                _columnsMd = 3;
                _columnsLg = 4;
                _columnsXl = 6;
                break;
        }
        
        StateHasChanged();
    }

    public class Employee
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Department { get; set; } = string.Empty;
        public string Position { get; set; } = string.Empty;
        public decimal Salary { get; set; }
        public DateTime HireDate { get; set; }
        public bool IsActive { get; set; }
        public string Email { get; set; } = string.Empty;
    }
}
</div>