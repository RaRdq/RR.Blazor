@using RR.Blazor.Components.Core
@using RR.Blazor.Components.Display
@using RR.Blazor.Components.Feedback
@using RR.Blazor.Enums
@using RR.Blazor.TestPages.Demos.Components

<div class="relative">
    <GitHubLinkButton FileName="RSkeletonDemo.razor" />
    <RCard Variant="CardVariant.Outlined" Text="RSkeleton">
    <ChildContent>
        <RDivider Text="Skeleton Loading Component" 
                         Subtitle="Smart loading placeholders that intelligently mirror your content structure" 
                         Icon="skeleton" />
        
        <div class="space-y-6">
            <!-- Smart Mode Examples -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Smart Mode (Auto-Detection)</div>
                <div class="space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <p class="text-sm text-muted mb-2">Profile Card Example</p>
                            <RSkeleton Loading="@_profileLoading" SmartMode="true" UseGlassEffect="true">
                                <div class="flex gap-4 pa-4 glass-light rounded-lg">
                                    <RAvatar Size="SizeType.Large" Text="JD" />
                                    <div class="flex-1">
                                        <div class="text-body-1 font-semibold text-primary">John Doe</div>
                                        <p class="text-body-2 text-muted">Senior Developer</p>
                                        <div class="flex gap-2 mt-2">
                                            <RChip StyleVariant="ChipStyle.Badge" Text="Active" Variant="VariantType.Success" Size="SizeType.Small"  />
                                            <RChip StyleVariant="ChipStyle.Badge" Text="Pro" Variant="VariantType.Primary" Size="SizeType.Small"  />
                                        </div>
                                    </div>
                                </div>
                            </RSkeleton>
                            
                            <div class="mt-2">
                                <RButton Text="@(_profileLoading ? "Loading..." : "Toggle Loading")" 
                                         OnClick="ToggleProfileLoading"
                                         Size="SizeType.Small"
                                         Variant="VariantType.Secondary" />
                            </div>
                        </div>
                        
                        <div>
                            <p class="text-sm text-muted mb-2">Activity Feed Example</p>
                            <RSkeleton Loading="@_activityLoading" SmartMode="true" UseGlassEffect="false">
                                <div class="space-y-3">
                                    @for (int i = 0; i < 3; i++)
                                    {
                                        <div class="flex gap-3 pa-3 glass-light rounded-lg">
                                            <div class="w-8 h-8 bg-primary text-inverse rounded-full flex items-center justify-center">
                                                <i class="icon icon-sm">notifications</i>
                                            </div>
                                            <div class="flex-1">
                                                <div class="text-body-2 font-semibold">System Update @(i + 1)</div>
                                                <div class="text-caption text-muted">2 minutes ago</div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </RSkeleton>
                            
                            <div class="mt-2">
                                <RButton Text="@(_activityLoading ? "Loading..." : "Toggle Loading")" 
                                         OnClick="ToggleActivityLoading"
                                         Size="SizeType.Small"
                                         Variant="VariantType.Secondary" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Skeleton Types -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Skeleton Types</div>
                <div class="space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <div>
                            <p class="text-sm text-muted mb-2">Text Skeleton</p>
                            <RSkeleton Type="SkeletonType.Text" Loading="true" SmartMode="false" Count="3" />
                        </div>
                        <div>
                            <p class="text-sm text-muted mb-2">Title Skeleton</p>
                            <RSkeleton Type="SkeletonType.Title" Loading="true" SmartMode="false" />
                        </div>
                        <div>
                            <p class="text-sm text-muted mb-2">Avatar Skeleton</p>
                            <RSkeleton Type="SkeletonType.Avatar" Loading="true" SmartMode="false" />
                        </div>
                        <div>
                            <p class="text-sm text-muted mb-2">Card Skeleton</p>
                            <RSkeleton Type="SkeletonType.Card" Loading="true" SmartMode="false" />
                        </div>
                        <div>
                            <p class="text-sm text-muted mb-2">Table Skeleton</p>
                            <RSkeleton Type="SkeletonType.Table" Loading="true" SmartMode="false" />
                        </div>
                        <div>
                            <p class="text-sm text-muted mb-2">Badge Skeleton</p>
                            <div class="flex gap-2">
                                <div class="skeleton skeleton-badge skeleton-pulse" aria-hidden="true" style="width: 4rem; height: 1.5rem; border-radius: 0.75rem;"></div>
                                <div class="skeleton skeleton-badge skeleton-pulse" aria-hidden="true" style="width: 3rem; height: 1.5rem; border-radius: 0.75rem;"></div>
                            </div>
                        </div>
                        <div>
                            <p class="text-sm text-muted mb-2">Custom Size</p>
                            <RSkeleton Type="SkeletonType.Custom" Loading="true" SmartMode="false" 
                                       Width="150px" Height="50px" Class="rounded-lg" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- Glass Effect Demonstration -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Glass Effect</div>
                <div class="space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <p class="text-sm text-muted mb-2">Without Glass Effect</p>
                            <RSkeleton Loading="@_glassLoading" SmartMode="true" UseGlassEffect="false">
                                <RCard Variant="CardVariant.Glass" class="pa-4">
                                    <ChildContent>
                                        <div class="text-h6 font-semibold mb-2">Dashboard Stats</div>
                                        <div class="grid grid-cols-2 gap-4">
                                            <div class="text-center">
                                                <div class="text-h4 font-bold text-primary">1,234</div>
                                                <div class="text-caption text-muted">Total Users</div>
                                            </div>
                                            <div class="text-center">
                                                <div class="text-h4 font-bold text-success">98.5%</div>
                                                <div class="text-caption text-muted">Uptime</div>
                                            </div>
                                        </div>
                                    </ChildContent>
                                </RCard>
                            </RSkeleton>
                        </div>
                        
                        <div>
                            <p class="text-sm text-muted mb-2">With Glass Effect</p>
                            <RSkeleton Loading="@_glassLoading" SmartMode="true" UseGlassEffect="true">
                                <RCard Variant="CardVariant.Glass" class="pa-4">
                                    <ChildContent>
                                        <div class="text-h6 font-semibold mb-2">Dashboard Stats</div>
                                        <div class="grid grid-cols-2 gap-4">
                                            <div class="text-center">
                                                <div class="text-h4 font-bold text-primary">1,234</div>
                                                <div class="text-caption text-muted">Total Users</div>
                                            </div>
                                            <div class="text-center">
                                                <div class="text-h4 font-bold text-success">98.5%</div>
                                                <div class="text-caption text-muted">Uptime</div>
                                            </div>
                                        </div>
                                    </ChildContent>
                                </RCard>
                            </RSkeleton>
                        </div>
                    </div>
                    
                    <RButton Text="@(_glassLoading ? "Stop Loading" : "Start Loading")" 
                             OnClick="ToggleGlassLoading"
                             Size="SizeType.Small"
                             Variant="VariantType.Primary" />
                </div>
            </div>

            <!-- Multiple Skeletons -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Multiple Skeletons</div>
                <div class="space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <p class="text-sm text-muted mb-2">List of Text Items</p>
                            <RSkeleton Type="SkeletonType.Text" Loading="true" SmartMode="false" Count="5" />
                        </div>
                        
                        <div>
                            <p class="text-sm text-muted mb-2">List of Cards</p>
                            <RSkeleton Type="SkeletonType.Card" Loading="true" SmartMode="false" Count="2" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- Animation Control -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Animation Control</div>
                <div class="space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <p class="text-sm text-muted mb-2">Animated (Default)</p>
                            <RSkeleton Type="SkeletonType.Card" Loading="true" SmartMode="false" Animated="true" />
                        </div>
                        
                        <div>
                            <p class="text-sm text-muted mb-2">Static (No Animation)</p>
                            <RSkeleton Type="SkeletonType.Card" Loading="true" SmartMode="false" Animated="false" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- Text Length Variation Examples -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Text Length Variation Examples</div>
                <div class="space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <p class="text-sm text-muted mb-2">Short Text Examples</p>
                            <RSkeleton Loading="@_textLengthLoading" SmartMode="true">
                                <div class="space-y-2 pa-3 glass-light rounded-lg">
                                    <div class="text-h6">Short</div>
                                    <div class="text-body-2">A bit longer text here</div>
                                    <div class="text-caption">Tiny</div>
                                </div>
                            </RSkeleton>
                        </div>
                        
                        <div>
                            <p class="text-sm text-muted mb-2">Long Text Examples</p>
                            <RSkeleton Loading="@_textLengthLoading" SmartMode="true">
                                <div class="space-y-2 pa-3 glass-light rounded-lg">
                                    <div class="text-h6">This is a much longer title that spans more width</div>
                                    <div class="text-body-2">Lorem ipsum dolor sit amet, consectetur adipiscing elit sed do eiusmod</div>
                                    <div class="text-caption">Small caption text with moderate length for demonstration</div>
                                </div>
                            </RSkeleton>
                        </div>
                    </div>
                    
                    <div>
                        <p class="text-sm text-muted mb-2">Mixed Content Lengths</p>
                        <RSkeleton Loading="@_textLengthLoading" SmartMode="true">
                            <div class="space-y-3">
                                @foreach (var item in new[] { 
                                    ("John Doe", "Admin", "2 min ago"),
                                    ("Alexandra Smith-Johnson", "Senior Developer", "Yesterday at 3:45 PM"),
                                    ("Bob", "QA", "Now"),
                                    ("Christopher Montgomery Williams III", "Chief Technology Officer", "Last Tuesday at 10:30 AM")
                                })
                                {
                                    <div class="flex gap-3 pa-3 glass-light rounded-lg">
                                        <RAvatar Text="@item.Item1.Substring(0, 2)" Size="SizeType.Small" />
                                        <div class="flex-1">
                                            <div class="text-body-2 font-semibold">@item.Item1</div>
                                            <div class="text-caption text-muted">@item.Item2</div>
                                        </div>
                                        <div class="text-caption text-muted">@item.Item3</div>
                                    </div>
                                }
                            </div>
                        </RSkeleton>
                    </div>
                    
                    <RButton Text="@(_textLengthLoading ? "Stop Loading" : "Toggle Loading")" 
                             OnClick="ToggleTextLengthLoading"
                             Size="SizeType.Small"
                             Variant="VariantType.Secondary" />
                </div>
            </div>

            <!-- Real-world Use Case -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Real-world Use Case: Data Dashboard</div>
                <div class="space-y-4">
                    <div class="flex items-center gap-4 flex-wrap">
                        <RButton Text="@(_dashboardLoading ? "Stop Loading" : "Simulate Data Load")" 
                                 OnClick="SimulateDashboardLoad"
                                 Variant="VariantType.Primary"
                                 Size="SizeType.Small"
                                 Disabled="@_dashboardLoading" />
                        <RButton Text="Reset" 
                                 OnClick="ResetDashboard"
                                 Variant="VariantType.Secondary"
                                 Size="SizeType.Small" />
                    </div>
                    
                    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                        <!-- KPI Cards -->
                        <div class="lg:col-span-3">
                            <p class="text-sm text-muted mb-3">Key Performance Indicators</p>
                            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                                @for (int i = 0; i < 4; i++)
                                {
                                    <RSkeleton Loading="@_dashboardLoading" SmartMode="true" UseGlassEffect="true">
                                        <RCard Variant="CardVariant.Glass" class="pa-4 text-center">
                                            <ChildContent>
                                                <div class="text-h4 font-bold text-primary mb-1">@(i < _kpiValues.Length ? _kpiValues[i] : "N/A")</div>
                                                <div class="text-caption text-muted">@(i < _kpiLabels.Length ? _kpiLabels[i] : "Label")</div>
                                                <div class="flex justify-center mt-2">
                                                    <RChip StyleVariant="ChipStyle.Badge" Text="@(i < _kpiChanges.Length ? _kpiChanges[i] : "0%")" 
                                                           Variant="@(i < _kpiChanges.Length && _kpiChanges[i].StartsWith("+") ? VariantType.Success : VariantType.Error)" 
                                                           Size="SizeType.Small"  />
                                                </div>
                                            </ChildContent>
                                        </RCard>
                                    </RSkeleton>
                                }
                            </div>
                        </div>
                        
                        <!-- Chart Area -->
                        <div class="lg:col-span-2">
                            <p class="text-sm text-muted mb-3">Performance Chart</p>
                            <RSkeleton Loading="@_dashboardLoading" SmartMode="true" UseGlassEffect="true">
                                <RCard Variant="CardVariant.Glass" class="pa-4" style="height: 300px;">
                                    <ChildContent>
                                        <div class="text-h6 font-semibold mb-4">Revenue Trend</div>
                                        <div class="flex items-end justify-between h-48 px-4">
                                            @for (int i = 0; i < 12; i++)
                                            {
                                                <div class="w-4 bg-primary rounded-t" 
                                                     style="height: @(_chartHeights[i])%"></div>
                                            }
                                        </div>
                                    </ChildContent>
                                </RCard>
                            </RSkeleton>
                        </div>
                        
                        <!-- Activity Feed -->
                        <div class="lg:col-span-1">
                            <p class="text-sm text-muted mb-3">Recent Activity</p>
                            <RSkeleton Loading="@_dashboardLoading" SmartMode="true" UseGlassEffect="true">
                                <RCard Variant="CardVariant.Glass" class="pa-4" style="height: 300px;">
                                    <ChildContent>
                                        <div class="text-h6 font-semibold mb-4">Activity Feed</div>
                                        <div class="space-y-3">
                                            @for (int i = 0; i < 5; i++)
                                            {
                                                <div class="flex gap-2 items-start">
                                                    <div class="w-6 h-6 bg-info rounded-full flex-shrink-0 flex items-center justify-center">
                                                        <i class="icon icon-xs text-white">circle</i>
                                                    </div>
                                                    <div class="flex-1">
                                                        <div class="text-body-2 font-medium">Activity @(i + 1)</div>
                                                        <div class="text-caption text-muted">@(i + 1) min ago</div>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </ChildContent>
                                </RCard>
                            </RSkeleton>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </ChildContent>
</RCard>

@code {
    private bool _profileLoading = false;
    private bool _activityLoading = false;
    private bool _glassLoading = false;
    private bool _dashboardLoading = false;
    private bool _textLengthLoading = false;
    private CancellationTokenSource _dashboardCts;
    
    // Dashboard data
    private string[] _kpiValues = { "1,234", "98.5%", "$45.2K", "2.3x" };
    private string[] _kpiLabels = { "Total Users", "Uptime", "Revenue", "Growth" };
    private string[] _kpiChanges = { "+12%", "+0.2%", "+8.5%", "-0.1x" };
    private int[] _chartHeights = { 45, 67, 23, 89, 34, 78, 56, 90, 45, 67, 89, 34 };

    private void ToggleProfileLoading()
    {
        _profileLoading = !_profileLoading;
        Console.WriteLine($"ToggleProfileLoading: _profileLoading = {_profileLoading}");
        StateHasChanged();
    }
    
    private void ToggleActivityLoading()
    {
        _activityLoading = !_activityLoading;
        StateHasChanged();
    }
    
    private void ToggleGlassLoading()
    {
        _glassLoading = !_glassLoading;
        StateHasChanged();
    }
    
    private void ToggleTextLengthLoading()
    {
        _textLengthLoading = !_textLengthLoading;
        StateHasChanged();
    }
    
    private async void SimulateDashboardLoad()
    {
        if (_dashboardLoading) return;
        
        _dashboardCts?.Cancel();
        _dashboardCts = new CancellationTokenSource();
        
        _dashboardLoading = true;
        StateHasChanged();
        
        try
        {
            await Task.Delay(2000, _dashboardCts.Token);
            _dashboardLoading = false;
            StateHasChanged();
        }
        catch (TaskCanceledException)
        {
            // Operation was cancelled
        }
    }
    
    private void ResetDashboard()
    {
        _dashboardCts?.Cancel();
        _dashboardLoading = false;
        
        // Randomize KPI values for demonstration
        var random = new Random();
        _kpiValues = new[] { 
            random.Next(1000, 9999).ToString("N0"),
            $"{random.Next(95, 100)}.{random.Next(0, 10)}%",
            $"${random.Next(30, 60)}.{random.Next(0, 10)}K",
            $"{random.Next(1, 5)}.{random.Next(0, 10)}x"
        };
        
        _kpiChanges = new[] {
            $"{(random.Next(0, 2) == 0 ? "+" : "-")}{random.Next(1, 20)}%",
            $"{(random.Next(0, 2) == 0 ? "+" : "-")}0.{random.Next(1, 9)}%",
            $"{(random.Next(0, 2) == 0 ? "+" : "-")}{random.Next(1, 15)}.{random.Next(1, 9)}%",
            $"{(random.Next(0, 2) == 0 ? "+" : "-")}0.{random.Next(1, 5)}x"
        };
        
        // Randomize chart heights
        for (int i = 0; i < _chartHeights.Length; i++)
        {
            _chartHeights[i] = random.Next(20, 100);
        }
    }
    
    public void Dispose()
    {
        _dashboardCts?.Cancel();
        _dashboardCts?.Dispose();
    }
}
</div>