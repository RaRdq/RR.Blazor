@using RR.Blazor.Components.Core
@using RR.Blazor.Components.Display
@using RR.Blazor.Components.Data
@using RR.Blazor.Enums
@using RR.Blazor.Models
@using RR.Blazor.Services
@using RR.Blazor.TestPages.Demos.Components
@inject IToastService ToastService

<div class="relative">
    <GitHubLinkButton FileName="RTableDemo.razor" />
    <RCard Variant="CardVariant.Outlined" Text="RTable">
    <ChildContent>
        <RDivider Text="Advanced Data Table Component"
                  Subtitle="High-performance table with search, pagination, export, column management, and virtualization"
                  Icon="table_view" />
        
        <div class="space-y-6">
            <!-- Basic Table -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Basic Table (Using RTableGeneric directly)</div>
                <RTableGeneric TItem="Employee"
                              Items="@_employees.Take(8)"
                              ShowPagination="false"
                              OnRowClicked="@(EventCallback.Factory.Create<Employee>(this, HandleBasicTableRowClick))"
                              Class="basic-table">
                    <RColumn Property="Id" Title="ID" Width="80px" Sortable="true" />
                    <RColumn Property="Name" Title="Employee Name" Sortable="true" />
                    <RColumn Property="Department" Title="Department" Sortable="true" />
                    <RColumn Property="Position" Title="Position" />
                    <RColumn Property="Salary" Title="Salary" Format="C" Alignment="ColumnAlignment.Right" />
                </RTableGeneric>
            </div>

            <!-- Test Table with Non-Generic RTable wrapper -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Test Table (Using RTable wrapper)</div>
                <RTable Items="@_employees.Take(5)"
                        ShowPagination="false"
                        Hover="true"
                        Class="test-table">
                    <ColumnsContent>
                        <RColumn Property="Name" Header="Name" Sortable="true" />
                        <RColumn Property="Department" Header="Dept" Sortable="true" />
                        <RColumn Property="Salary" Header="Salary" Format="C" />
                    </ColumnsContent>
                </RTable>
            </div>

            <!-- Advanced Table with All Features -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Advanced Table with Full Feature Set</div>
                <div class="flex gap-2 mb-3 flex-wrap">
                    <RButton Text="@(_showSearch ? "Hide Search" : "Show Search")"
                             Variant="VariantType.Secondary"
                             Size="SizeType.Small"
                             @onclick="ToggleSearch" />
                    <RButton Text="@(_showExport ? "Hide Export" : "Show Export")"
                             Variant="VariantType.Secondary"
                             Size="SizeType.Small"
                             @onclick="ToggleExport" />
                    <RButton Text="@(_showColumnManager ? "Hide Column Manager" : "Show Column Manager")"
                             Variant="VariantType.Secondary"
                             Size="SizeType.Small"
                             @onclick="ToggleColumnManager" />
                    <RButton Text="@(_enableVirtualization ? "Disable Virtualization" : "Enable Virtualization")"
                             Variant="VariantType.Secondary"
                             Size="SizeType.Small"
                             @onclick="ToggleVirtualization" />
                    <RButton Text="@(_enableHorizontalScroll ? "Disable H-Scroll" : "Enable H-Scroll")"
                             Variant="VariantType.Secondary"
                             Size="SizeType.Small"
                             @onclick="ToggleHorizontalScroll" />
                </div>
                
                <RTableGeneric TItem="Employee" 
                              Items="@_employees"
                              ShowSearch="@_showSearch"
                              ShowPagination="true"
                              @bind-PageSize="_pageSize"
                              ShowExportButton="@_showExport"
                              ShowColumnManager="@_showColumnManager"
                              Virtualize="@_enableVirtualization"
                              EnableHorizontalScroll="@_enableHorizontalScroll"
                              Selectable="true"
                              MultiSelect="true"
                              @bind-SelectedItems="_selectedEmployees"
                              OnRowClicked="@(EventCallback.Factory.Create<Employee>(this, HandleRowClick))"
                              OnEnhancedRowClick="@HandleEnhancedRowClick"
                              EnhancementsEnabled="true"
                              EnhancementsConfig="@GetEnhancementsConfig()"
                              Density="@GetDensityType()"
                              Striped="@_striped"
                              Hover="@_hoverable"
                              Class="@GetTableClasses()">
                    
                    <RColumn Property="Id" Title="ID" Width="80px" Sortable="true" />
                    <RColumn Property="Name" Title="Employee Name" Sortable="true" Searchable="true" Width="200px" />
                    <RColumn Property="Department" Title="Department" Sortable="true" Filterable="true" Width="150px" />
                    <RColumn Property="Position" Title="Position" Sortable="true" Width="180px" />
                    <RColumn Property="Salary" Title="Salary" Sortable="true" Format="C" Alignment="ColumnAlignment.Right" Width="120px" />
                    <RColumn Property="HireDate" Title="Hire Date" Sortable="true" Format="d" Width="120px" />
                    <RColumn Property="IsActive" Title="Status" Width="100px">
                        <CellTemplate Context="employee">
                            <RChip Variant="@(((Employee)employee).IsActive ? VariantType.Success : VariantType.Error)"
                                   Size="SizeType.Small">
                                <ChildContent>@(((Employee)employee).IsActive ? "Active" : "Inactive")</ChildContent>
                            </RChip>
                        </CellTemplate>
                    </RColumn>
                    <RColumn Title="Actions" Width="140px">
                        <CellTemplate Context="employee">
                            <div class="flex gap-1">
                                <RButton Icon="edit" 
                                        Variant="VariantType.Secondary" 
                                        Size="SizeType.ExtraSmall"
                                        OnClick="@(() => EditEmployee((Employee)employee))" />
                                <RButton Icon="visibility" 
                                        Variant="VariantType.Secondary" 
                                        Size="SizeType.ExtraSmall"
                                        OnClick="@(() => ViewEmployee((Employee)employee))" />
                                <RButton Icon="delete" 
                                        Variant="VariantType.Secondary" 
                                        Size="SizeType.ExtraSmall"
                                        OnClick="@(() => DeleteEmployee((Employee)employee))" />
                            </div>
                        </CellTemplate>
                    </RColumn>
                </RTableGeneric>
                
                @if (_selectedEmployees?.Any() == true)
                {
                    <RAlert Type="AlertType.Info" Filled="true">
                        <ChildContent>
                            Selected @_selectedEmployees.Count() employees for bulk operations.
                            <RButton Text="Clear Selection" 
                                     Variant="VariantType.Secondary"
                                     Size="SizeType.Small"
                                     @onclick="ClearSelection"
                                     class="ml-2" />
                        </ChildContent>
                    </RAlert>
                }
                
                <!-- Configuration Panel for Advanced Table -->
                <div class="mt-4">
                    <RCard Variant="CardVariant.Glass" Class="p-4">
                        <ChildContent>
                            <div class="text-subtitle-2 mb-3">Advanced Table Configuration</div>
                            <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                                <RChoice SelectedValue="@_pageSize.ToString()"
                                        SelectedValueChanged="@OnPageSizeChanged"
                                        Label="Page Size"
                                        Items="@(new[] { "5", "10", "25", "50" })" />
                                        
                                <RChoice SelectedValue="@_density"
                                        SelectedValueChanged="@OnDensityChanged"
                                        Label="Table Density"
                                        Items="@(new[] { "compact", "normal", "spacious" })" />
                                        
                                <RToggle @bind-Value="_striped" 
                                        Text="Striped Rows" />
                                        
                                <RToggle @bind-Value="_hoverable" 
                                        Text="Hoverable Rows" />
                            </div>
                        </ChildContent>
                    </RCard>
                </div>
            </div>


            <!-- Enhanced Table with RFilter Integration -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Enhanced Table with Integrated Filters (ShowEnhancedFilters)</div>
                <div class="flex gap-2 mb-3 flex-wrap">
                    <RButton Text="@(_showEnhancedFilters ? "Hide Enhanced Filters" : "Show Enhanced Filters")"
                             Variant="VariantType.Secondary"
                             Size="SizeType.Small"
                             @onclick="ToggleEnhancedFilters" />
                </div>
                
                <RTableGeneric TItem="Employee" 
                              Items="@_employees"
                              ShowPagination="true"
                              PageSize="15"
                              ShowEnhancedFilters="@_showEnhancedFilters"
                              EnhancementsEnabled="true"
                              Selectable="true"
                              MultiSelect="true"
                              Class="enhanced-filters-table">
                    
                    <RColumn Property="Id" Title="ID" Width="80px" Sortable="true" />
                    <RColumn Property="Name" Title="Employee Name" Sortable="true" Searchable="true" Width="200px" />
                    <RColumn Property="Department" Title="Department" Sortable="true" Filterable="true" Width="150px" />
                    <RColumn Property="Position" Title="Position" Sortable="true" Width="180px" />
                    <RColumn Property="Salary" Title="Salary" Sortable="true" Format="C" Alignment="ColumnAlignment.Right" Width="120px" />
                    <RColumn Property="HireDate" Title="Hire Date" Sortable="true" Format="d" Width="120px" />
                    <RColumn Property="IsActive" Title="Status" Width="100px">
                        <CellTemplate Context="employee">
                            <RChip Variant="@(((Employee)employee).IsActive ? VariantType.Success : VariantType.Error)"
                                   Size="SizeType.Small">
                                <ChildContent>@(((Employee)employee).IsActive ? "Active" : "Inactive")</ChildContent>
                            </RChip>
                        </CellTemplate>
                    </RColumn>
                </RTableGeneric>
                
                @if (_showEnhancedFilters)
                {
                    <RAlert Type="AlertType.Info" Filled="false" Class="mt-3">
                        <ChildContent>
                            <div class="text-sm">
                                <strong>Filter Features Demonstrated:</strong>
                                <ul class="ml-4 mt-2 space-y-1 text-xs">
                                    <li>• <strong>Search:</strong> Text search across searchable columns</li>
                                    <li>• <strong>Quick Filters:</strong> Status (Active/Inactive) toggle filters</li>
                                    <li>• <strong>Department Filters:</strong> Multi-select department filtering</li>
                                    <li>• <strong>Advanced Panel:</strong> Field-specific filter conditions</li>
                                    <li>• <strong>Filter Stacking:</strong> Multiple filters work together</li>
                                    <li>• <strong>Real-time Updates:</strong> Results update as you type/select</li>
                                </ul>
                            </div>
                        </ChildContent>
                    </RAlert>
                }
            </div>
            <!-- Custom Table with Templates -->
            <div class="space-y-2">
                <div class="text-h6 font-semibold">Custom Table with Rich Templates</div>
                <RTableGeneric TItem="Employee" 
                              Items="@_employees.Take(6)"
                              ShowPagination="false"
                              Class="custom-template-table">
                    
                    <RColumn Title="Employee" Width="300px">
                        <CellTemplate Context="employee">
                            <div class="flex items-center gap-3">
                                <RAvatar Text="@GetEmployeeInitials((Employee)employee)"
                                        Size="SizeType.Small" />
                                <div>
                                    <div class="font-medium">@(((Employee)employee).Name)</div>
                                    <div class="text-sm text-muted">@(((Employee)employee).Email)</div>
                                </div>
                            </div>
                        </CellTemplate>
                    </RColumn>
                    
                    <RColumn Title="Role & Department" Width="200px">
                        <CellTemplate Context="employee">
                            <div>
                                <div class="font-medium">@(((Employee)employee).Position)</div>
                                <RChip StyleVariant="ChipStyle.Badge" Text="@(((Employee)employee).Department)" 
                                        Variant="@GetDepartmentVariant((Employee)employee)"
                                        Size="SizeType.Small"  />
                            </div>
                        </CellTemplate>
                    </RColumn>
                    
                    <RColumn Title="Compensation" Width="150px" Alignment="ColumnAlignment.Right">
                        <CellTemplate Context="employee">
                            <div class="text-right">
                                <div class="font-medium">@(((Employee)employee).Salary.ToString("C0"))</div>
                                <div class="text-sm text-muted">Annual</div>
                            </div>
                        </CellTemplate>
                    </RColumn>
                    
                    <RColumn Title="Status & Actions" Width="200px">
                        <CellTemplate Context="employee">
                            <div class="flex items-center justify-between">
                                <RChip Variant="@(((Employee)employee).IsActive ? VariantType.Success : VariantType.Error)"
                                       Size="SizeType.Small">
                                    <ChildContent>@(((Employee)employee).IsActive ? "Active" : "Inactive")</ChildContent>
                                </RChip>
                                <RActionGroup>
                                    <RButton Icon="more_vert" 
                                            Variant="VariantType.Secondary" 
                                            Size="SizeType.Small" />
                                </RActionGroup>
                            </div>
                        </CellTemplate>
                    </RColumn>
                </RTableGeneric>
            </div>
        </div>
    </ChildContent>
</RCard>

@code {
    // Sample data
    private List<Employee> _employees = new();
    private IEnumerable<Employee> _selectedEmployees = Enumerable.Empty<Employee>();
    
    // Configuration
    private bool _showSearch = true;
    private bool _showExport = true;
    private bool _showColumnManager = true;
    private bool _enableVirtualization = false;
    private bool _enableHorizontalScroll = false;
    private int _pageSize = 10;
    private string _density = "normal";
    private bool _striped = true;
    private bool _hoverable = true;
    private bool _showEnhancedFilters = true;

    protected override Task OnInitializedAsync()
    {
        _employees = GenerateEmployeeData(50);
        return base.OnInitializedAsync();
    }

    private List<Employee> GenerateEmployeeData(int count)
    {
        var departments = new[] { "Engineering", "Sales", "Marketing", "HR", "Finance", "Operations", "Support", "Legal" };
        var positions = new[] { "Manager", "Senior Developer", "Junior Developer", "Lead", "Specialist", "Coordinator", "Analyst", "Director" };
        var random = new Random(42);

        return Enumerable.Range(1, count).Select(i => new Employee
        {
            Id = i,
            Name = $"Employee {i:D3}",
            Department = departments[random.Next(departments.Length)],
            Position = positions[random.Next(positions.Length)],
            Salary = random.Next(50000, 180000),
            HireDate = DateTime.Now.AddDays(-random.Next(1, 2000)),
            IsActive = random.NextDouble() > 0.15,
            Email = $"employee{i:D3}@company.com"
        }).ToList();
    }

    // Toggle methods
    private void ToggleSearch() => _showSearch = !_showSearch;
    private void ToggleExport() => _showExport = !_showExport;
    private void ToggleColumnManager() => _showColumnManager = !_showColumnManager;
    private void ToggleVirtualization() => _enableVirtualization = !_enableVirtualization;
    private void ToggleHorizontalScroll() => _enableHorizontalScroll = !_enableHorizontalScroll;
    private void ToggleEnhancedFilters() => _showEnhancedFilters = !_showEnhancedFilters;

    // Event handlers
    private void OnPageSizeChanged(object value)
    {
        if (int.TryParse(value?.ToString(), out var pageSize))
        {
            _pageSize = pageSize;
        }
    }

    private void OnDensityChanged(object value)
    {
        _density = value?.ToString() ?? "normal";
    }

    private async Task HandleRowClick(Employee employee)
    {
        ToastService.ShowInfo($"Row clicked: {employee.Name}", "Row Click Event");
        await Task.CompletedTask;
    }

    private async Task HandleEnhancedRowClick(RowClickEventArgs<Employee> args)
    {
        ToastService.ShowSuccess($"Enhanced row click: {args.Item.Name} (Index: {args.Index}, Selected: {args.IsSelected})", "Enhanced Row Click");
        await Task.CompletedTask;
    }

    private async Task HandleBasicTableRowClick(Employee employee)
    {
        ToastService.ShowInfo($"Basic table row clicked: {employee.Name} (ID: {employee.Id})", "RTableGeneric Direct");
        await Task.CompletedTask;
    }

    private void HandleRTableRowClick(Employee employee)
    {
        ToastService.ShowSuccess($"RTable wrapper row clicked: {employee.Name} - Dept: {employee.Department}", "RTable Wrapper Event");
    }

    private void ClearSelection()
    {
        _selectedEmployees = Enumerable.Empty<Employee>();
        ToastService.ShowInfo("Selection cleared", "Table Action");
        StateHasChanged();
    }

    private void EditEmployee(Employee employee)
    {
        ToastService.ShowInfo($"Editing employee: {employee.Name}", "Edit Action");
    }

    private void ViewEmployee(Employee employee)
    {
        ToastService.ShowInfo($"Viewing employee: {employee.Name}", "View Action");
    }

    private void DeleteEmployee(Employee employee)
    {
        ToastService.ShowWarning($"Delete requested for: {employee.Name}", "Delete Action");
    }

    // Helper methods for templates
    private string GetEmployeeInitials(Employee employee)
    {
        var parts = employee.Name.Split(' ');
        return string.Join("", parts.Take(2).Select(p => p.FirstOrDefault())).ToUpper();
    }


    private VariantType GetDepartmentVariant(Employee employee)
    {
        return employee.Department switch
        {
            "Engineering" => VariantType.Primary,
            "Sales" => VariantType.Success,
            "Marketing" => VariantType.Info,
            "HR" => VariantType.Warning,
            "Finance" => VariantType.Error,
            _ => VariantType.Secondary
        };
    }

    private string GetTableClasses()
    {
        var classes = new List<string> { "advanced-table" };
        
        classes.Add($"density-{_density}");
        
        if (_striped) classes.Add("table-striped");
        if (_hoverable) classes.Add("table-hoverable");
        if (_enableVirtualization) classes.Add("table-virtualized");
        
        return string.Join(" ", classes);
    }
    
    private DensityType GetDensityType()
    {
        return _density switch
        {
            "compact" => DensityType.Dense,
            "spacious" => DensityType.Spacious,
            _ => DensityType.Normal
        };
    }
    
    private RR.Blazor.Models.TableConfiguration GetEnhancementsConfig()
    {
        return new RR.Blazor.Models.TableConfiguration
        {
            SelectionConfig = new RR.Blazor.Models.SelectionConfig
            {
                Enabled = true,
                RowClickSelection = true,
                KeyboardNavigation = true,
                ShowCheckboxes = true,
                ShowSelectionCount = true
            },
            ResizeConfig = new RR.Blazor.Models.ColumnResizeConfig
            {
                Enabled = true,
                LiveResize = true,
                ShowHandlesOnHover = true
            }
        };
    }

    public class Employee
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Department { get; set; } = string.Empty;
        public string Position { get; set; } = string.Empty;
        public decimal Salary { get; set; }
        public DateTime HireDate { get; set; }
        public bool IsActive { get; set; }
        public string Email { get; set; } = string.Empty;
    }
}
</div>
