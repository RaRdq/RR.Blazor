@page "/test/rchart-isolated"
@using RR.Blazor.Models
@using RR.Blazor.Enums
@using RR.Blazor.Components.Display

<PageTitle>RChart Isolated Test</PageTitle>

<div class="container-px-4">
    <div class="text-h3 font-bold">RChart Isolated Test</div>
    
    <!-- Test 1: Basic RChart with title only -->
    <div class="text-h4 font-bold">Test 1: Basic RChart with title</div>
    <RChart Header="Basic Chart Test" Icon="analytics">
        <div class="pa-4 text-center">
            <p>This should be visible inside the RChart container</p>
        </div>
    </RChart>
    
    <br />
    
    <!-- Test 2: RChart in loading state -->
    <div class="text-h4 font-bold">Test 2: Loading state</div>
    <RChart Header="Loading Chart" Icon="hourglass_empty" Loading="true">
        <div class="pa-4 text-center">
            <p>This content should be hidden when loading</p>
        </div>
    </RChart>
    
    <br />
    
    <!-- Test 3: RChart with error state -->
    <div class="text-h4 font-bold">Test 3: Error state</div>
    <RChart Header="Error Chart" Icon="error" HasError="true" ErrorHeader="Test Error" ErrorMessage="This is a test error message">
        <div class="pa-4 text-center">
            <p>This content should be hidden when there's an error</p>
        </div>
    </RChart>
    
    <br />
    
    <!-- Test 4: RChart with empty state -->
    <div class="text-h4 font-bold">Test 4: Empty state</div>
    <RChart Header="Empty Chart" Icon="inbox" IsEmpty="true" EmptyHeader="No Data" EmptyMessage="No data to display">
        <div class="pa-4 text-center">
            <p>This content should be hidden when empty</p>
        </div>
    </RChart>
    
    <br />
    
    <!-- Test 5: RChart with different variants -->
    <div class="text-h4 font-bold">Test 5: Different variants</div>
    <div class="d-grid grid-cols-1 md:grid-cols-2 gap-4">
        <RChart Header="Default Variant" Icon="bar_chart" Variant="ChartVariant.Default">
            <div class="pa-4 text-center bg-primary-light rounded">
                <p>Default variant content</p>
            </div>
        </RChart>
        
        <RChart Header="Glass Variant" Icon="pie_chart" Variant="ChartVariant.Glass">
            <div class="pa-4 text-center bg-success-light rounded">
                <p>Glass variant content</p>
            </div>
        </RChart>
        
        <RChart Header="Elevated Variant" Icon="trending_up" Variant="ChartVariant.Elevated">
            <div class="pa-4 text-center bg-warning-light rounded">
                <p>Elevated variant content</p>
            </div>
        </RChart>
        
        <RChart Header="Minimal Variant" Icon="show_chart" Variant="ChartVariant.Minimal">
            <div class="pa-4 text-center bg-info-light rounded">
                <p>Minimal variant content</p>
            </div>
        </RChart>
    </div>
    
    <br />
    
    <!-- Test 6: RChart with different sizes -->
    <div class="text-h4 font-bold">Test 6: Different sizes</div>
    <div class="d-flex flex-column gap-4">
        <RChart Header="Small Chart" Icon="analytics" Size="ChartSize.Small">
            <div class="pa-4 text-center bg-surface rounded">
                <p>Small size chart</p>
            </div>
        </RChart>
        
        <RChart Header="Medium Chart" Icon="analytics" Size="ChartSize.Medium">
            <div class="pa-4 text-center bg-surface rounded">
                <p>Medium size chart</p>
            </div>
        </RChart>
        
        <RChart Header="Large Chart" Icon="analytics" Size="ChartSize.Large">
            <div class="pa-4 text-center bg-surface rounded">
                <p>Large size chart</p>
            </div>
        </RChart>
    </div>
    
    <br />
    
    <!-- Test 7: Column Chart Implementation -->
    <div class="text-h4 font-bold">Test 7: Column Chart</div>
    <RColumnChart Header="Sample Column Chart" 
                  Data="@columnChartData"
                  Size="ChartSize.Medium"
                  Icon="bar_chart"/>
    
    <br />
    
    <!-- Test 8: Line Chart Implementation -->
    <div class="text-h4 font-bold">Test 8: Line Chart</div>
    <RLineChart Header="Sample Line Chart" 
                Series="@lineChartSeries"
                Size="ChartSize.Medium"
                Icon="trending_up"
                ShowDataPoints="true"
                IsSmooth="true"/>
    
    <br />
    
    <!-- Test 9: Line Chart as Area -->
    <div class="text-h4 font-bold">Test 9: Area Chart</div>
    <RLineChart Header="Sample Area Chart" 
                Series="@areaChartSeries"
                Size="ChartSize.Medium"
                Icon="area_chart"
                IsArea="true"
                ShowDataPoints="false"/>
    
    <br />
    
    <!-- Test 10: Multi-Series Line Chart -->
    <div class="text-h4 font-bold">Test 10: Multi-Series Line Chart</div>
    <RLineChart Header="Multi-Series Comparison" 
                Series="@multiSeriesData"
                Size="ChartSize.Large"
                Icon="trending_up"
                ShowDataPoints="true"
                IsSmooth="true"
                ShowLegend="true"/>
    
    <br />
    
    <!-- Debug Information -->
    <div class="text-h4 font-bold">Debug Information</div>
    <div class="pa-4 bg-surface-variant rounded">
        <p><strong>Chart Enums Available:</strong></p>
        <ul>
            <li>ChartVariant: @string.Join(", ", Enum.GetNames<ChartVariant>())</li>
            <li>ChartSize: @string.Join(", ", Enum.GetNames<ChartSize>())</li>
            <li>ChartType: @string.Join(", ", Enum.GetNames<ChartType>())</li>
        </ul>
        
        <p class="mt-4"><strong>Test Data Summary:</strong></p>
        <ul>
            <li>Column Chart: @columnChartData.Count items</li>
            <li>Line Chart Series: @lineChartSeries.Count() series with @lineChartSeries.FirstOrDefault()?.Data?.Count data points each</li>
            <li>Multi-Series: @multiSeriesData.Count() series</li>
        </ul>
    </div>
</div>

@code {
    private List<ChartDataPoint> columnChartData = new()
    {
        new() { Label = "Jan", Value = 150, Color = "var(--color-primary)" },
        new() { Label = "Feb", Value = 230, Color = "var(--color-success)" },
        new() { Label = "Mar", Value = 180, Color = "var(--color-warning)" },
        new() { Label = "Apr", Value = 270, Color = "var(--color-error)" },
        new() { Label = "May", Value = 320, Color = "var(--color-info)" },
        new() { Label = "Jun", Value = 290, Color = "var(--color-primary)" }
    };

    private List<ChartSeries> lineChartSeries = new()
    {
        new ChartSeries 
        { 
            Name = "Revenue", 
            Color = "var(--color-primary)",
            Data = new List<ChartDataPoint>
            {
                new() { Label = "Q1", Value = 1200 },
                new() { Label = "Q2", Value = 1500 },
                new() { Label = "Q3", Value = 1800 },
                new() { Label = "Q4", Value = 2100 }
            }
        }
    };

    private List<ChartSeries> areaChartSeries = new()
    {
        new ChartSeries 
        { 
            Name = "Users", 
            Color = "var(--color-success)",
            Data = new List<ChartDataPoint>
            {
                new() { Label = "Week 1", Value = 100 },
                new() { Label = "Week 2", Value = 150 },
                new() { Label = "Week 3", Value = 120 },
                new() { Label = "Week 4", Value = 180 },
                new() { Label = "Week 5", Value = 220 }
            }
        }
    };

    private List<ChartSeries> multiSeriesData = new()
    {
        new ChartSeries 
        { 
            Name = "Sales", 
            Color = "var(--color-primary)",
            Data = new List<ChartDataPoint>
            {
                new() { Label = "Jan", Value = 1200 },
                new() { Label = "Feb", Value = 1500 },
                new() { Label = "Mar", Value = 1800 },
                new() { Label = "Apr", Value = 2100 },
                new() { Label = "May", Value = 1900 },
                new() { Label = "Jun", Value = 2300 }
            }
        },
        new ChartSeries 
        { 
            Name = "Expenses", 
            Color = "var(--color-error)",
            Data = new List<ChartDataPoint>
            {
                new() { Label = "Jan", Value = 800 },
                new() { Label = "Feb", Value = 900 },
                new() { Label = "Mar", Value = 1100 },
                new() { Label = "Apr", Value = 1300 },
                new() { Label = "May", Value = 1200 },
                new() { Label = "Jun", Value = 1400 }
            }
        },
        new ChartSeries 
        { 
            Name = "Profit", 
            Color = "var(--color-success)",
            Data = new List<ChartDataPoint>
            {
                new() { Label = "Jan", Value = 400 },
                new() { Label = "Feb", Value = 600 },
                new() { Label = "Mar", Value = 700 },
                new() { Label = "Apr", Value = 800 },
                new() { Label = "May", Value = 700 },
                new() { Label = "Jun", Value = 900 }
            }
        }
    };
}