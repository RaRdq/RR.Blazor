@page "/test/feedback-navigation"
@using RR.Blazor.Models
@using RR.Blazor.Enums

<PageTitle>Feedback & Navigation Components</PageTitle>

<div class="content-padded">
    <RHeaderCard Header="Feedback & Navigation Components" 
                 Icon="feedback" />

    <div class="d-grid grid-gap-6">
        
        <!-- FEEDBACK COMPONENTS SECTION -->
        <RSection Text="Feedback Components" Icon="notifications">
            
            <!-- Alerts -->
            <RCard Text="RAlert - Status Messages" Icon="info" Class="mb-6">
                <div class="d-grid grid-gap-4">
                    <RAlert Type="AlertType.Info" 
                            Header="Information" 
                            Text="This is an informational alert message"
                            Icon="info" />
                    
                    <RAlert Type="AlertType.Success" 
                            Header="Success" 
                            Text="Your action completed successfully"
                            Icon="check_circle" />
                    
                    <RAlert Type="AlertType.Warning" 
                            Header="Warning" 
                            Text="Please review this important notice"
                            Icon="warning" />
                    
                    <RAlert Type="AlertType.Error" 
                            Header="Error" 
                            Text="Something went wrong. Please try again"
                            Icon="error" />
                </div>
            </RCard>

            <!-- Toast Container -->
            <RCard Text="RToastContainer - Notifications" Icon="notifications" Class="mb-6">
                <div class="d-flex gap-2 mb-4">
                    <RButton Text="Show Info Toast" 
                             Variant="ButtonVariant.Secondary" 
                             Icon="info"
                             OnClick="@ShowInfoToast" />
                    <RButton Text="Show Success Toast" 
                             Variant="ButtonVariant.Success" 
                             Icon="check_circle"
                             OnClick="@ShowSuccessToast" />
                    <RButton Text="Show Warning Toast" 
                             Variant="ButtonVariant.Warning" 
                             Icon="warning"
                             OnClick="@ShowWarningToast" />
                    <RButton Text="Show Error Toast" 
                             Variant="ButtonVariant.Danger" 
                             Icon="error"
                             OnClick="@ShowErrorToast" />
                </div>
                <RToastContainer />
            </RCard>

            <!-- Modal Variants -->
            <RCard Text="Modal Components" Icon="web_asset" Class="mb-6">
                <div class="d-grid grid-cols-2 grid-cols-md-4 gap-4">
                    <RButton Text="Confirmation Modal" 
                             Icon="help"
                             OnClick="() => showConfirmationModal = true" />
                    <RButton Text="Message Modal" 
                             Icon="message"
                             OnClick="() => showMessageModal = true" />
                    <RButton Text="Detail Modal" 
                             Icon="info"
                             OnClick="() => showDetailModal = true" />
                    <RButton Text="Preview Modal" 
                             Icon="preview"
                             OnClick="() => showPreviewModal = true" />
                    <RButton Text="Form Modal" 
                             Icon="edit"
                             OnClick="() => showFormModal = true" />
                    <RButton Text="Select Modal" 
                             Icon="list"
                             OnClick="() => showSelectModal = true" />
                    <RButton Text="Basic Modal" 
                             Icon="web_asset"
                             OnClick="() => showBasicModal = true" />
                </div>
            </RCard>

        </RSection>

        <!-- NAVIGATION COMPONENTS SECTION -->
        <RSection Text="Navigation Components" Icon="menu">
            
            <!-- Breadcrumbs -->
            <RCard Text="RBreadcrumbs - Navigation Paths" Icon="arrow_forward_ios" Class="mb-6">
                <RBreadcrumbs Items="@breadcrumbItems" Size="BreadcrumbSize.Default" />
                <div class="mt-4">
                    <RBreadcrumbs Items="@breadcrumbItemsLong" Size="BreadcrumbSize.Large" />
                </div>
            </RCard>

            <!-- Tabs -->
            <RCard Text="RTabs - Content Organization" Icon="tab" Class="mb-6">
                <RTabs Variant="TabsVariant.Default" Size="ButtonSize.Medium">
                    <RTabItem Text="Dashboard" Icon="dashboard">
                        <div class="pa-4">
                            <div class="text-h5 font-semibold">Dashboard Content</div>
                            <p class="text-body-2">This is the dashboard tab content with analytics and overview information.</p>
                        </div>
                    </RTabItem>
                    <RTabItem Text="Users" Icon="people">
                        <div class="pa-4">
                            <div class="text-h5 font-semibold">User Management</div>
                            <p class="text-body-2">Manage users, roles, and permissions from this tab.</p>
                        </div>
                    </RTabItem>
                    <RTabItem Text="Settings" Icon="settings">
                        <div class="pa-4">
                            <div class="text-h5 font-semibold">Application Settings</div>
                            <p class="text-body-2">Configure application preferences and system settings.</p>
                        </div>
                    </RTabItem>
                    <RTabItem Text="Reports" Icon="assessment" Disabled="true">
                        <div class="pa-4">
                            <div class="text-h5 font-semibold">Reports</div>
                            <p class="text-body-2">This tab is currently disabled.</p>
                        </div>
                    </RTabItem>
                </RTabs>
            </RCard>

            <!-- Navigation Menu -->
            <RCard Text="RNavMenu - Sidebar Navigation" Icon="menu" Class="mb-6">
                <div class="d-grid grid-cols-1 grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <div class="text-h6 font-semibold">Primary Navigation</div>
                        <RNavMenu Items="@navMenuItems" />
                    </div>
                    <div>
                        <div class="text-h6 font-semibold">Hierarchical Navigation</div>
                        <RNavMenu Items="@hierarchicalNavItems" />
                    </div>
                </div>
            </RCard>

        </RSection>

    </div>
</div>

<!-- Modal Components - Each RModal auto-portals with UseBackdrop="true" (default) -->
    <!-- Confirmation Modal -->
    <RConfirmationModal @bind-Visible="showConfirmationModal"
                        Header="Confirm Action"
                        Icon="help"
                        Variant="ConfirmationVariant.Warning"
                        Size="ModalSize.Medium">
        Are you sure you want to delete this item? This action cannot be undone.
    </RConfirmationModal>

    <!-- Message Modal -->
    <RMessageModal @bind-Visible="showMessageModal"
                   Icon="info"
                   Variant="ModalVariant.Info">
        <div class="text-center pa-4">
            <div class="text-h5 font-semibold">Important Message</div>
            <p class="text-body-2">This is an important message that requires your attention.</p>
        </div>
    </RMessageModal>

    <!-- Detail Modal -->
    <RDetailModal T="object" @bind-Visible="showDetailModal">
        <div class="pa-4">
            <div class="text-h5 font-semibold">Item Details</div>
            <div class="d-grid grid-gap-3">
                <div class="d-flex justify-between">
                    <span class="font-medium">Name:</span>
                    <span>Sample Item</span>
                </div>
                <div class="d-flex justify-between">
                    <span class="font-medium">Status:</span>
                    <RChip Text="Active" Style="ChipStyle.Status" Variant="ChipVariant.Success" />
                </div>
                <div class="d-flex justify-between">
                    <span class="font-medium">Created:</span>
                    <span>@DateTime.Now.ToString("MMM dd, yyyy")</span>
                </div>
                <div class="d-flex justify-between">
                    <span class="font-medium">Category:</span>
                    <span>General</span>
                </div>
            </div>
        </div>
    </RDetailModal>

    <!-- Preview Modal -->
    <RPreviewModal @bind-Visible="showPreviewModal"
                   Content="@previewContent" />

    <!-- Form Modal -->
    <RFormModal @bind-Visible="showFormModal"
                InitialData="@sampleFormData">
        <div class="pa-4">
            <div class="text-h5 font-semibold">Edit Item</div>
            <div class="d-grid grid-gap-4">
                <RTextInput Value="@sampleFormData.Name" 
                           Label="Name" 
                           Required="true" />
                <RTextInput Value="@sampleFormData.Email" 
                           Label="Email" 
                           Type="FieldType.Email" 
                           Required="true" />
                <RTextInput IsMultiLine="true" Value="@sampleFormData.Description" 
                          Label="Description" />
                <RCheckbox Text="Active" 
                          Value="@sampleFormData.IsActive" />
            </div>
        </div>
    </RFormModal>

    <!-- Select Modal -->
    <RSelectModalGeneric @bind-Visible="showSelectModal"
                        Items="@selectOptions">
    </RSelectModalGeneric>

    <!-- Basic Modal -->
    <RModal @bind-Visible="showBasicModal"
            Header="Basic Modal"
            Icon="web_asset"
            Size="ModalSize.Large"
            UseBackdrop="true">
        <ChildContent>
            <div class="pa-6">
            <div class="text-h5 font-semibold">Modal Content</div>
            <p class="text-body-1 mb-4">
                This is a basic modal with custom content. You can put any content here including forms, 
                lists, images, and other components.
            </p>
            <div class="d-grid grid-cols-2 gap-4">
                <RCard Text="Feature 1" Icon="star" Elevation="2">
                    <div class="pa-3">
                        <p class="text-body-2">Description of feature 1</p>
                    </div>
                </RCard>
                <RCard Text="Feature 2" Icon="favorite" Elevation="2">
                    <div class="pa-3">
                        <p class="text-body-2">Description of feature 2</p>
                    </div>
                </RCard>
            </div>
        </div>
        </ChildContent>
        <FooterContent>
            <div class="d-flex justify-end gap-2 pa-4">
                <RButton Text="Cancel" 
                         Variant="ButtonVariant.Secondary"
                         OnClick="() => showBasicModal = false" />
                <RButton Text="Apply" 
                         Variant="ButtonVariant.Primary"
                         OnClick="() => showBasicModal = false" />
            </div>
        </FooterContent>
    </RModal>

@code {
    private bool showConfirmationModal = false;
    private bool showMessageModal = false;
    private bool showDetailModal = false;
    private bool showPreviewModal = false;
    private bool showFormModal = false;
    private bool showSelectModal = false;
    private bool showBasicModal = false;

    private List<BreadcrumbItem> breadcrumbItems = new()
    {
        new BreadcrumbItem { Text = "Home", Href = "/", Icon = "home" },
        new BreadcrumbItem { Text = "Components", Href = "/components", Icon = "widgets" },
        new BreadcrumbItem { Text = "Feedback & Navigation", Icon = "feedback" }
    };

    private List<BreadcrumbItem> breadcrumbItemsLong = new()
    {
        new BreadcrumbItem { Text = "Dashboard", Href = "/dashboard", Icon = "dashboard" },
        new BreadcrumbItem { Text = "User Management", Href = "/users", Icon = "people" },
        new BreadcrumbItem { Text = "Employee Records", Href = "/employees", Icon = "person" },
        new BreadcrumbItem { Text = "John Doe", Href = "/employees/john-doe", Icon = "account_circle" },
        new BreadcrumbItem { Text = "Profile Settings", Icon = "settings" }
    };

    private List<NavMenuItem> navMenuItems = new()
    {
        new NavMenuItem { Text = "Dashboard", Icon = "dashboard", Href = "/dashboard" },
        new NavMenuItem { Text = "Analytics", Icon = "analytics", Href = "/analytics", Badge = new NavMenuBadge { Text = "New", Type = "info" } },
        new NavMenuItem { Text = "Users", Icon = "people", Href = "/users", Badge = new NavMenuBadge { Text = "12", Type = "info" } },
        new NavMenuItem { Text = "Settings", Icon = "settings", Href = "/settings" },
        new NavMenuItem { Text = "Help", Icon = "help", Href = "/help", Visible = false }
    };

    private List<NavMenuItem> hierarchicalNavItems = new()
    {
        new NavMenuItem 
        { 
            Text = "Administration", 
            Icon = "admin_panel_settings",
            Children = new List<NavMenuItem>
            {
                new NavMenuItem { Text = "User Management", Icon = "people", Href = "/admin/users" },
                new NavMenuItem { Text = "Role Management", Icon = "security", Href = "/admin/roles" },
                new NavMenuItem { Text = "System Settings", Icon = "settings", Href = "/admin/settings" }
            }
        },
        new NavMenuItem 
        { 
            Text = "Reports", 
            Icon = "assessment",
            Children = new List<NavMenuItem>
            {
                new NavMenuItem { Text = "Financial", Icon = "account_balance", Href = "/reports/financial" },
                new NavMenuItem { Text = "Performance", Icon = "trending_up", Href = "/reports/performance" },
                new NavMenuItem { Text = "Usage", Icon = "bar_chart", Href = "/reports/usage" }
            }
        }
    };

    private string previewContent = @"
# Sample Markdown Content

This is a **preview modal** showing how you can display formatted content.

## Features
- Markdown rendering
- Code syntax highlighting
- Rich text formatting

```csharp
public class SampleClass
{
    public string Name { get; set; }
    public bool IsActive { get; set; }
}
```

> This is a blockquote example showing additional formatting capabilities.
";

    private SampleFormData sampleFormData = new()
    {
        Name = "John Doe",
        Email = "john.doe@example.com",
        Description = "Sample description text",
        IsActive = true
    };

    private List<string> selectOptions = new()
    {
        "Option 1",
        "Option 2", 
        "Option 3",
        "Option 4",
        "Option 5"
    };

    // Toast methods
    private void ShowInfoToast()
    {
        // In a real application, you would inject and use ToastService
        // ToastService.ShowInfo("This is an info toast message");
    }

    private void ShowSuccessToast()
    {
        // ToastService.ShowSuccess("Operation completed successfully!");
    }

    private void ShowWarningToast()
    {
        // ToastService.ShowWarning("Please review this warning message");
    }

    private void ShowErrorToast()
    {
        // ToastService.ShowError("An error occurred. Please try again.");
    }

    // Sample form data class
    public class SampleFormData
    {
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public bool IsActive { get; set; }
    }
}