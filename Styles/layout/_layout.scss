@use '../abstracts' as *;
@use 'sass:map';
@use 'sass:list';
@use 'sass:meta';

@mixin layout-container($max-width: 100%, $padding: var(--space-4)) {
  width: 100%;
  max-width: $max-width;
  margin: 0 auto;
  padding-left: $padding;
  padding-right: $padding;
}

@mixin layout-position($position, $inset: null) {
  position: $position;
  @if $inset {
    @if $inset == 'full' {
      inset: 0;
    } @else if $inset == 'top' {
      top: 0;
    } @else if $inset == 'bottom' {
      bottom: 0;
    } @else if $inset == 'left' {
      left: 0;
    } @else if $inset == 'right' {
      right: 0;
    } @else if $inset == 'center' {
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
  }
}

@mixin layout-flex($direction: row, $align: stretch, $justify: flex-start, $gap: 0) {
  display: flex;
  flex-direction: $direction;
  align-items: $align;
  justify-content: $justify;
  @if $gap != 0 {
    gap: $gap;
  }
}

@mixin layout-grid($columns: 1, $gap: var(--space-4), $align: stretch) {
  display: grid;
  @if $columns == 'auto-fit' {
    grid-template-columns: repeat(auto-fit, minmax(min(100%, var(--space-64)), 1fr));
  } @else if $columns == 'auto-fill' {
    grid-template-columns: repeat(auto-fill, minmax(min(100%, var(--space-64)), 1fr));
  } @else {
    grid-template-columns: repeat($columns, minmax(0, 1fr));
  }
  gap: $gap;
  align-items: $align;
}

@mixin layout-interactive($hover-transform: translateY(-1px), $active-transform: translateY(0) scale(0.98)) {
  cursor: pointer;
  transition: all var(--duration-fast) var(--ease-out);

  &:hover:not(:disabled) {
    transform: $hover-transform;
  }

  &:active:not(:disabled) {
    transform: $active-transform;
  }

  &:focus-visible {
    outline: none;
    outline-offset: 2px;
  }

  &:disabled {
    opacity: var(--opacity-disabled);
    cursor: not-allowed;
    pointer-events: none;
    transform: none !important;
  }
}

@mixin layout-surface($variant: 'elevated', $radius: var(--radius-md)) {
  border-radius: $radius;

  @if $variant == 'flat' {
    background: var(--color-canvas);
    border: var(--border-1) solid var(--color-border);
  } @else if $variant == 'elevated' {
    background: var(--color-surface-elevated);
    box-shadow: var(--shadow-md);
  } @else if $variant == 'raised' {
    background: var(--color-surface-elevated);
    box-shadow: var(--shadow-lg);
  } @else if $variant == 'floating' {
    background: var(--color-surface-elevated);
    box-shadow: var(--shadow-xl);
  } @else if $variant == 'glass' {
    background: color-mix(in srgb, var(--color-surface) 85%, transparent);
    backdrop-filter: blur(16px) saturate(120%);
    border: var(--border-1) solid color-mix(in srgb, var(--color-border) 30%, transparent);
  }
}

@mixin layout-backdrop($opacity: 0.6, $blur: false) {
  & {
    @include layout-position(fixed, 'full');
    background: var(--overlay-medium);
    opacity: 0;
    visibility: hidden;
    transition: all var(--duration-normal) var(--ease-out);
    @if $blur {
      backdrop-filter: blur(4px);
    }
  }

  &-active {
    opacity: $opacity;
    visibility: visible;
  }
}

$grid-columns: (
  1: 1,
  2: 2,
  3: 3,
  4: 4,
  12: 12,
  auto-fit: 'auto-fit',
  auto-fill: 'auto-fill'
);

$grid-patterns: (
  auto: repeat(auto-fill, minmax(var(--space-64), 1fr)),
  2: repeat(2, 1fr),
  3: repeat(3, 1fr),
  4: repeat(4, 1fr)
);

.layout-grid {
  @include layout-grid;

@each $name, $columns in $grid-columns {
    &-cols-#{$name} {
      @include layout-grid($columns);
    }
  }

@each $name, $pattern in $grid-patterns {
    &-#{$name} {
      display: grid;
      gap: var(--space-4);
      grid-template-columns: #{$pattern};
    }
  }

  @include responsive-max(lg) {
    &-4 { grid-template-columns: repeat(2, 1fr); }
    &-3 { grid-template-columns: repeat(2, 1fr); }
  }

  @include responsive-max(md) {
    &-4, &-3, &-2 { grid-template-columns: 1fr; }
  }
}

$gap-sizes: (
  0: 0,
  1: var(--space-1),
  2: var(--space-2),
  3: var(--space-3),
  4: var(--space-4),
  6: var(--space-6),
  8: var(--space-8)
);

.layout-gap {
  @each $name, $size in $gap-sizes {
    &-#{$name} {
      gap: #{$size};
    }
  }
}

$overflow-values: (
  hidden: hidden,
  auto: auto,
  scroll: scroll,
  x-auto: (overflow-x: auto),
  y-auto: (overflow-y: auto),
  x-hidden: (overflow-x: hidden),
  y-hidden: (overflow-y: hidden)
);

.layout-overflow {
  @each $name, $value in $overflow-values {
    &-#{$name} {
      @if meta.type-of($value) == map {
        @each $property, $val in $value {
          #{$property}: #{$val};
        }
      } @else {
        overflow: #{$value};
      }
    }
  }
}

$z-index-values: (
  0: 0,
  10: 10,
  20: 20,
  30: 30,
  40: 40,
  50: 50,
  popup: var(--z-popup),
  modal: var(--z-modal),
  modal-backdrop: var(--z-modal-backdrop),
  modal-container: var(--z-modal-container),
  modal-overlay: var(--z-modal-overlay),
  floating: var(--z-floating)
);

.layout-z {
  @each $name, $value in $z-index-values {
    &-#{$name} {
      z-index: #{$value};
    }
  }
}

.layout {

&-split {
    display: grid;
    grid-template-columns: 1fr 320px;
    gap: var(--space-6);

    &-reverse {
      grid-template-columns: 320px 1fr;
    }

    &-equal {
      grid-template-columns: 1fr 1fr;
    }

    @include responsive-max(lg) {
      grid-template-columns: 1fr;
      gap: var(--space-4);
    }
  }

&-masonry {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: var(--space-4);
    align-items: start;

    &-sm { grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); }
    &-lg { grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); }

    @include responsive-max(md) {
      grid-template-columns: 1fr;
      gap: var(--space-3);
    }
  }

&-focus {
    contain: layout;

    &:focus-within {
      contain: none;
    }
  }
}

$responsive-utilities: (
  flex-col: (layout-flex(column)),
  hidden: (display: none)
);

$responsive-grid-cols: (
  sm: 1,
  md: 2,
  lg: 3
);

$responsive-gaps: (
  sm: var(--space-2),
  md: var(--space-3),
  lg: var(--space-4)
);

@each $breakpoint, $value in $breakpoints {
  @if $breakpoint != xs {
    @include responsive-max($breakpoint) {
      .layout-#{$breakpoint}\:flex-col {
        @include layout-flex(column);
      }

      .layout-#{$breakpoint}\:hidden {
        display: none;
      }

      @if map.has-key($responsive-grid-cols, $breakpoint) {
        .layout-#{$breakpoint}\:grid-cols-#{map.get($responsive-grid-cols, $breakpoint)} {
          @include layout-grid(map.get($responsive-grid-cols, $breakpoint));
        }
      }

      @if map.has-key($responsive-gaps, $breakpoint) {
        .layout-#{$breakpoint}\:gap-#{$breakpoint} {
          gap: map.get($responsive-gaps, $breakpoint);
        }
      }
    }
  }
}

$interactive-variants: (
  default: (translateY(-1px), translateY(0) scale(0.98)),
  subtle: (translateY(-0.5px), scale(0.99)),
  strong: (translateY(-2px), scale(0.97)),
  none: (none, none)
);

.layout-interactive {
  @each $name, $transforms in $interactive-variants {
    @if $name == default {
      @include layout-interactive(list.nth($transforms, 1), list.nth($transforms, 2));
    } @else {
      &-#{$name} {
        @include layout-interactive(list.nth($transforms, 1), list.nth($transforms, 2));
      }
    }
  }
}

$backdrop-variants: (
  default: (0.6, false),
  blur: (0.6, true),
  light: (0.4, false),
  heavy: (0.8, false)
);

.layout-backdrop {
  @each $name, $config in $backdrop-variants {
    @if $name == default {
      @include layout-backdrop(list.nth($config, 1), list.nth($config, 2));
    } @else {
      &-#{$name} {
        @include layout-backdrop(list.nth($config, 1), list.nth($config, 2));
      }
    }
  }
}

$surface-variants: (
  default: 'elevated',
  flat: 'flat',
  raised: 'raised',
  floating: 'floating',
  glass: 'glass'
);

.layout-surface {
  @each $name, $variant in $surface-variants {
    @if $name == default {
      @include layout-surface($variant);
    } @else {
      &-#{$name} {
        @include layout-surface($variant);
      }
    }
  }
}
