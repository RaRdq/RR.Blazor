@use '../abstracts' as *;

// ============================================================================
// LAYOUT MIXINS - Theme-Aware Building Blocks
// ============================================================================

// Container pattern mixin
@mixin layout-container($max-width: 100%, $padding: var(--space-4)) {
  width: 100%;
  max-width: $max-width;
  margin: 0 auto;
  padding-left: $padding;
  padding-right: $padding;
}

// Positioning pattern mixin
@mixin layout-position($position, $inset: null) {
  position: $position;
  @if $inset {
    @if $inset == 'full' {
      inset: 0;
    } @else if $inset == 'top' {
      top: 0;
    } @else if $inset == 'bottom' {
      bottom: 0;
    } @else if $inset == 'left' {
      left: 0;
    } @else if $inset == 'right' {
      right: 0;
    } @else if $inset == 'center' {
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
  }
}

// Flex pattern mixin
@mixin layout-flex($direction: row, $align: stretch, $justify: flex-start, $gap: 0) {
  display: flex;
  flex-direction: $direction;
  align-items: $align;
  justify-content: $justify;
  @if $gap != 0 {
    gap: $gap;
  }
}

// Grid pattern mixin
@mixin layout-grid($columns: 1, $gap: var(--space-4), $align: stretch) {
  display: grid;
  @if $columns == 'auto-fit' {
    grid-template-columns: repeat(auto-fit, minmax(min(100%, 20rem), 1fr));
  } @else if $columns == 'auto-fill' {
    grid-template-columns: repeat(auto-fill, minmax(min(100%, 20rem), 1fr));
  } @else {
    grid-template-columns: repeat($columns, minmax(0, 1fr));
  }
  gap: $gap;
  align-items: $align;
}

// Interactive pattern mixin
@mixin layout-interactive($hover-transform: translateY(-1px), $active-transform: translateY(0) scale(0.98)) {
  cursor: pointer;
  transition: all var(--duration-fast) var(--ease-out);
  
  &:hover:not(:disabled) {
    transform: $hover-transform;
  }
  
  &:active:not(:disabled) {
    transform: $active-transform;
  }
  
  &:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }
  
  &:disabled {
    opacity: var(--opacity-disabled);
    cursor: not-allowed;
    pointer-events: none;
    transform: none !important;
  }
}

// Surface pattern mixin
@mixin layout-surface($variant: 'elevated', $radius: var(--radius-md)) {
  border-radius: $radius;
  
  @if $variant == 'flat' {
    background: var(--color-canvas);
    border: var(--border-1) solid var(--color-border);
  } @else if $variant == 'elevated' {
    background: var(--color-surface-elevated);
    box-shadow: var(--shadow-md);
  } @else if $variant == 'raised' {
    background: var(--color-surface-elevated);
    box-shadow: var(--shadow-lg);
  } @else if $variant == 'floating' {
    background: var(--color-surface-elevated);
    box-shadow: var(--shadow-xl);
  } @else if $variant == 'glass' {
    background: var(--color-background-glass);
    backdrop-filter: blur(16px) saturate(120%);
    border: var(--border-1) solid var(--color-border-subtle);
  }
}

// Backdrop pattern mixin
@mixin layout-backdrop($opacity: 0.6, $blur: false) {
  & {
    @include layout-position(fixed, 'full');
    background: var(--overlay-medium);
    opacity: 0;
    visibility: hidden;
    transition: all var(--duration-normal) var(--ease-out);
    @if $blur {
      backdrop-filter: blur(4px);
    }
  }
  
  &-active {
    opacity: $opacity;
    visibility: visible;
  }
}

// ============================================================================
// LAYOUT FOUNDATIONS - Semantic Variable Powered
// ============================================================================

// Container utilities using semantic variables
.layout-container {
  @include layout-container;
  
  @include modifier(sm) { @include layout-container(640px); }
  @include modifier(md) { @include layout-container(768px); }
  @include modifier(lg) { @include layout-container(1024px); }
  @include modifier(xl) { @include layout-container(1280px); }
  @include modifier(2xl) { @include layout-container(1536px); }
  @include modifier(fluid) { @include layout-container(none, 0); }
}

// Positioning utilities
.layout-fixed {
  @include layout-position(fixed);
  
  @include modifier(top) { @include layout-position(fixed, 'top'); }
  @include modifier(bottom) { @include layout-position(fixed, 'bottom'); }
  @include modifier(left) { @include layout-position(fixed, 'left'); }
  @include modifier(right) { @include layout-position(fixed, 'right'); }
  @include modifier(inset) { @include layout-position(fixed, 'full'); }
}

.layout-sticky {
  @include layout-position(sticky);
  
  @include modifier(top) { @include layout-position(sticky, 'top'); }
  @include modifier(bottom) { @include layout-position(sticky, 'bottom'); }
}

.layout-relative {
  @include layout-position(relative);
}

.layout-absolute {
  @include layout-position(absolute);
  
  @include modifier(top) { @include layout-position(absolute, 'top'); }
  @include modifier(bottom) { @include layout-position(absolute, 'bottom'); }
  @include modifier(left) { @include layout-position(absolute, 'left'); }
  @include modifier(right) { @include layout-position(absolute, 'right'); }
  @include modifier(inset) { @include layout-position(absolute, 'full'); }
  @include modifier(center) { @include layout-position(absolute, 'center'); }
}

// Flex utilities using semantic variables
.layout-flex {
  @include layout-flex;
  
  @include modifier(col) { @include layout-flex(column); }
  @include modifier(row) { @include layout-flex(row); }
  @include modifier(wrap) { flex-wrap: wrap; }
  @include modifier(nowrap) { flex-wrap: nowrap; }
  
  @include modifier(center) { @include layout-flex(row, center, center); }
  @include modifier(between) { @include layout-flex(row, center, space-between); }
  @include modifier(around) { @include layout-flex(row, center, space-around); }
  @include modifier(end) { @include layout-flex(row, center, flex-end); }
  @include modifier(start) { @include layout-flex(row, center, flex-start); }
}

// Grid utilities using semantic variables
.layout-grid {
  @include layout-grid;
  
  @include modifier(cols-1) { @include layout-grid(1); }
  @include modifier(cols-2) { @include layout-grid(2); }
  @include modifier(cols-3) { @include layout-grid(3); }
  @include modifier(cols-4) { @include layout-grid(4); }
  @include modifier(cols-12) { @include layout-grid(12); }
  
  @include modifier(auto-fit) { @include layout-grid('auto-fit'); }
  @include modifier(auto-fill) { @include layout-grid('auto-fill'); }
}

// Spacing utilities using semantic variables
.layout-gap {
  @include modifier(0) { gap: 0; }
  @include modifier(1) { gap: var(--space-1); }
  @include modifier(2) { gap: var(--space-2); }
  @include modifier(3) { gap: var(--space-3); }
  @include modifier(4) { gap: var(--space-4); }
  @include modifier(6) { gap: var(--space-6); }
  @include modifier(8) { gap: var(--space-8); }
}

// Overflow utilities
.layout-overflow {
  @include modifier(hidden) { overflow: hidden; }
  @include modifier(auto) { overflow: auto; }
  @include modifier(scroll) { overflow: scroll; }
  @include modifier(x-auto) { overflow-x: auto; }
  @include modifier(y-auto) { overflow-y: auto; }
  @include modifier(x-hidden) { overflow-x: hidden; }
  @include modifier(y-hidden) { overflow-y: hidden; }
}

// Z-index utilities using semantic variables
.layout-z {
  @include modifier(0) { z-index: 0; }
  @include modifier(10) { z-index: 10; }
  @include modifier(20) { z-index: 20; }
  @include modifier(30) { z-index: 30; }
  @include modifier(40) { z-index: 40; }
  @include modifier(50) { z-index: 50; }
  @include modifier(dropdown) { z-index: var(--z-dropdown); }
  @include modifier(modal) { z-index: var(--z-modal); }
  @include modifier(floating) { z-index: var(--z-floating); }
}

// ============================================================================
// RESPONSIVE LAYOUT HELPERS - Theme Aware
// ============================================================================

@include responsive-max(sm) {
  .layout-sm\:flex-col { @include layout-flex(column); }
  .layout-sm\:grid-cols-1 { @include layout-grid(1); }
  .layout-sm\:gap-2 { gap: var(--space-2); }
  .layout-sm\:hidden { display: none; }
}

@include responsive-max(md) {
  .layout-md\:flex-col { @include layout-flex(column); }
  .layout-md\:grid-cols-2 { @include layout-grid(2); }
  .layout-md\:gap-3 { gap: var(--space-3); }
  .layout-md\:hidden { display: none; }
}

@include responsive-max(lg) {
  .layout-lg\:flex-col { @include layout-flex(column); }
  .layout-lg\:grid-cols-3 { @include layout-grid(3); }
  .layout-lg\:gap-4 { gap: var(--space-4); }
  .layout-lg\:hidden { display: none; }
}

// ============================================================================
// SEMANTIC INTERACTION PATTERNS
// ============================================================================

.layout-interactive {
  @include layout-interactive;
  
  @include modifier(subtle) { @include layout-interactive(translateY(-0.5px), scale(0.99)); }
  @include modifier(strong) { @include layout-interactive(translateY(-2px), scale(0.97)); }
  @include modifier(none) { @include layout-interactive(none, none); }
}

.layout-backdrop {
  @include layout-backdrop;
  
  @include modifier(blur) { @include layout-backdrop(0.6, true); }
  @include modifier(light) { @include layout-backdrop(0.4); }
  @include modifier(heavy) { @include layout-backdrop(0.8); }
}

.layout-surface {
  @include layout-surface;
  
  @include modifier(flat) { @include layout-surface('flat'); }
  @include modifier(raised) { @include layout-surface('raised'); }
  @include modifier(floating) { @include layout-surface('floating'); }
  @include modifier(glass) { @include layout-surface('glass'); }
}

