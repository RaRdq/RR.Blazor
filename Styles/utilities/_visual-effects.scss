
@use '../abstracts' as *;
@use 'sass:map';
@use 'sass:list';

$ring-sizes: (
  0: 0,
  1: 1px,
  2: 2px,
  3: 3px,
  4: 4px
);

$ring-colors: (
  default: var(--color-interactive-focus),
  primary: color-mix(in srgb, var(--color-interactive-primary) 40%, transparent),
  success: color-mix(in srgb, var(--color-success) 40%, transparent),
  warning: color-mix(in srgb, var(--color-warning) 40%, transparent),
  error: color-mix(in srgb, var(--color-error) 40%, transparent)
);

@each $name, $size in $ring-sizes {
  .ring-#{$name} { 
    box-shadow: if($size == 0, none, 0 0 0 #{$size} var(--color-interactive-focus)) !important; 
  }
}

@each $name, $color in $ring-colors {
  @if $name != default {
    .ring-#{$name} { box-shadow: 0 0 0 2px #{$color} !important; }
  }
}

$opacity-scales: (0, 5, 10, 20, 25, 30, 40, 50, 60, 70, 75, 80, 90, 95, 100);

@each $scale in $opacity-scales {
  .opacity-#{$scale} { opacity: var(--opacity-#{$scale}) !important; }
}

$backdrop-filters: (
  blur: (
    none: none,
    sm: blur(4px),
    '': blur(8px),
    md: blur(12px),
    lg: blur(16px),
    xl: blur(24px),
    2xl: blur(40px),
    3xl: blur(64px)
  ),
  brightness: (
    0: brightness(0),
    50: brightness(0.5),
    75: brightness(0.75),
    90: brightness(0.9),
    95: brightness(0.95),
    100: brightness(1),
    105: brightness(1.05),
    110: brightness(1.1),
    125: brightness(1.25),
    150: brightness(1.5),
    200: brightness(2)
  ),
  contrast: (
    0: contrast(0),
    50: contrast(0.5),
    75: contrast(0.75),
    100: contrast(1),
    125: contrast(1.25),
    150: contrast(1.5),
    200: contrast(2)
  ),
  grayscale: (
    0: grayscale(0),
    '': grayscale(1)
  ),
  hue-rotate: (
    0: hue-rotate(0deg),
    15: hue-rotate(15deg),
    30: hue-rotate(30deg),
    60: hue-rotate(60deg),
    90: hue-rotate(90deg),
    180: hue-rotate(180deg)
  ),
  invert: (
    0: invert(0),
    '': invert(1)
  ),
  saturate: (
    0: saturate(0),
    50: saturate(0.5),
    100: saturate(1),
    150: saturate(1.5),
    200: saturate(2)
  ),
  sepia: (
    0: sepia(0),
    '': sepia(1)
  )
);

@each $filter-name, $variants in $backdrop-filters {
  @each $variant, $value in $variants {
    $class-name: if($variant == '', '.backdrop-#{$filter-name}', '.backdrop-#{$filter-name}-#{$variant}');
    #{$class-name} { backdrop-filter: #{$value} !important; }
  }
}

.drop-shadow-sm { filter: drop-shadow(0 1px 1px color-mix(in srgb, var(--color-text-primary) var(--opacity-5), transparent)) !important; }
.drop-shadow-md { filter: drop-shadow(0 2px 4px color-mix(in srgb, var(--color-text-primary) var(--opacity-10), transparent)) !important; }
.drop-shadow-lg { filter: drop-shadow(0 4px 8px color-mix(in srgb, var(--color-text-primary) var(--opacity-20), transparent)) !important; }
.drop-shadow-xl { filter: drop-shadow(0 8px 16px color-mix(in srgb, var(--color-text-primary) var(--opacity-25), transparent)) !important; }
.drop-shadow-2xl { filter: drop-shadow(0 16px 32px color-mix(in srgb, var(--color-text-primary) var(--opacity-30), transparent)) !important; }
.drop-shadow-none { filter: drop-shadow(0 0 transparent) !important; }

$shadow-sizes: (
  none: none,
  sm: var(--shadow-sm),
  md: var(--shadow-md),
  lg: var(--shadow-lg),
  xl: var(--shadow-xl),
  2xl: var(--shadow-2xl),
  inner: inset 0 2px 4px 0 color-mix(in srgb, var(--color-text-primary) var(--opacity-5), transparent)
);

$shadow-colors: (
  primary: var(--color-interactive-primary),
  secondary: var(--color-interactive-secondary),
  success: var(--color-success),
  warning: var(--color-warning),
  error: var(--color-error),
  info: var(--color-info)
);

@each $name, $shadow in $shadow-sizes {
  .shadow-#{$name} { box-shadow: #{$shadow} !important; }
}

@each $name, $color in $shadow-colors {
  .shadow-#{$name} { 
    box-shadow: 0 4px 16px color-mix(in srgb, #{$color} 25%, transparent) !important; 
  }
}


// Elevation System (0-24) - Unified utility approach
$elevation-levels: (0, 1, 2, 3, 4, 5, 6, 8, 12, 16, 20, 24);
$elevation-shadows: (
  0: none,
  1: var(--shadow-sm),
  2: var(--shadow-sm),
  3: var(--shadow-md),
  4: var(--shadow-md),
  5: var(--shadow-lg),
  6: var(--shadow-lg),
  8: var(--shadow-lg),
  12: var(--shadow-xl),
  16: var(--shadow-xl),
  20: var(--shadow-2xl),
  24: var(--shadow-2xl)
);

@each $level in $elevation-levels {
  .elevation-#{$level} {
    box-shadow: #{map.get($elevation-shadows, $level)} !important;
    transition: var(--transition-fast) !important;
  }
  
  .hover\:elevation-#{$level}:hover {
    box-shadow: #{map.get($elevation-shadows, $level)} !important;
    @if $level > 0 {
      transform: translateY(-1px) !important;
    }
  }
  
  // Shadow aliases for semantic naming (preferred)
  .shadow-#{$level} {
    box-shadow: #{map.get($elevation-shadows, $level)} !important;
    transition: var(--transition-fast) !important;
  }
  
  .hover\:shadow-#{$level}:hover {
    box-shadow: #{map.get($elevation-shadows, $level)} !important;
    @if $level > 0 {
      transform: translateY(-1px) !important;
    }
  }
}

// Interactive elevation utilities
.elevation-lift {
  transition: var(--transition-fast) !important;
  &:hover {
    transform: translateY(-2px) !important;
    box-shadow: var(--shadow-lg) !important;
  }
}

.elevation-lift-sm {
  transition: var(--transition-fast) !important;
  &:hover {
    transform: translateY(-1px) !important;
    box-shadow: var(--shadow-md) !important;
  }
}

.elevation-lift-lg {
  transition: var(--transition-fast) !important;
  &:hover {
    transform: translateY(-4px) !important;
    box-shadow: var(--shadow-xl) !important;
  }
}

$glass-variants: (
  light: (
    background: var(--glass-bg-light),
    backdrop-filter: var(--glass-blur-sm) var(--glass-saturate),
    border: var(--border-1) solid var(--glass-border-light),
    box-shadow: var(--shadow-sm)
  ),
  medium: (
    background: var(--glass-bg-medium),
    backdrop-filter: var(--glass-blur-md) var(--glass-saturate),
    border: var(--border-1) solid var(--glass-border-medium),
    box-shadow: var(--shadow-md)
  ),
  heavy: (
    background: var(--glass-bg-heavy),
    backdrop-filter: var(--glass-blur-lg) var(--glass-saturate),
    border: var(--border-1) solid var(--glass-border-heavy),
    box-shadow: var(--shadow-lg)
  ),
  frost: (
    background: var(--glass-bg-frost),
    backdrop-filter: var(--glass-blur-lg) var(--glass-saturate),
    border: var(--border-1) solid var(--glass-border-light),
    box-shadow: var(--shadow-xl)
  )
);

@each $name, $props in $glass-variants {
  .glass-#{$name} {
    @each $prop, $value in $props {
      #{$prop}: #{$value} !important;
    }
  }
}

// Interactive glass utility
.glass-interactive {
  background: var(--glass-bg-medium) !important;
  backdrop-filter: var(--glass-blur-md) var(--glass-saturate) !important;
  border: var(--border-1) solid var(--glass-border-medium) !important;
  box-shadow: var(--shadow-md) !important;
  transition: var(--transition-fast) !important;
  
  &:hover {
    background: var(--glass-hover-bg) !important;
    backdrop-filter: var(--glass-blur-sm) var(--glass-saturate) !important;
  }
}

// Hover glass utilities
.hover\:glass-light:hover {
  background: var(--glass-bg-light) !important;
  backdrop-filter: var(--glass-blur-sm) var(--glass-saturate) !important;
  border: var(--border-1) solid var(--glass-border-light) !important;
  box-shadow: var(--shadow-sm) !important;
}

.hover\:glass-medium:hover {
  background: var(--glass-bg-medium) !important;
  backdrop-filter: var(--glass-blur-md) var(--glass-saturate) !important;
  border: var(--border-1) solid var(--glass-border-medium) !important;
  box-shadow: var(--shadow-md) !important;
}

.hover\:glass-heavy:hover {
  background: var(--glass-bg-heavy) !important;
  backdrop-filter: var(--glass-blur-lg) var(--glass-saturate) !important;
  border: var(--border-1) solid var(--glass-border-heavy) !important;
  box-shadow: var(--shadow-lg) !important;
}

.hover\:glass-frost:hover {
  background: var(--glass-bg-frost) !important;
  backdrop-filter: var(--glass-blur-lg) var(--glass-saturate) !important;
  border: var(--border-1) solid var(--glass-border-light) !important;
  box-shadow: var(--shadow-xl) !important;
}

// ===== RESPONSIVE VISUAL EFFECTS UTILITIES =====
// Mobile-first responsive visual effects with consistent breakpoint prefixes

@each $breakpoint in (sm, md, lg, xl) {
  @include responsive-min($breakpoint) {
    
    // Responsive opacity utilities
    @each $scale in $opacity-scales {
      .#{$breakpoint}\:opacity-#{$scale} { 
        opacity: var(--opacity-#{$scale}) !important; 
      }
    }
    
    // Responsive shadow utilities
    @each $name, $shadow in $shadow-sizes {
      .#{$breakpoint}\:shadow-#{$name} { 
        box-shadow: #{$shadow} !important; 
      }
    }
    
    // Responsive colored shadows
    @each $name, $color in $shadow-colors {
      .#{$breakpoint}\:shadow-#{$name} { 
        box-shadow: 0 4px 16px color-mix(in srgb, #{$color} 25%, transparent) !important; 
      }
    }
    
    // Responsive elevation utilities
    @each $level in $elevation-levels {
      .#{$breakpoint}\:elevation-#{$level} {
        box-shadow: #{map.get($elevation-shadows, $level)} !important;
        transition: var(--transition-fast) !important;
      }
    }
    
    // Responsive glass utilities
    @each $name, $props in $glass-variants {
      .#{$breakpoint}\:glass-#{$name} {
        @each $prop, $value in $props {
          #{$prop}: #{$value} !important;
        }
      }
    }
    
    // Responsive backdrop filter utilities
    .#{$breakpoint}\:backdrop-blur-none { backdrop-filter: none !important; }
    .#{$breakpoint}\:backdrop-blur-sm { backdrop-filter: blur(4px) !important; }
    .#{$breakpoint}\:backdrop-blur { backdrop-filter: blur(8px) !important; }
    .#{$breakpoint}\:backdrop-blur-md { backdrop-filter: blur(12px) !important; }
    .#{$breakpoint}\:backdrop-blur-lg { backdrop-filter: blur(16px) !important; }
    .#{$breakpoint}\:backdrop-blur-xl { backdrop-filter: blur(24px) !important; }
    .#{$breakpoint}\:backdrop-blur-2xl { backdrop-filter: blur(40px) !important; }
    .#{$breakpoint}\:backdrop-blur-3xl { backdrop-filter: blur(64px) !important; }
    
    // Responsive focus ring utilities
    @each $name, $size in $ring-sizes {
      .#{$breakpoint}\:ring-#{$name} { 
        box-shadow: if($size == 0, none, 0 0 0 #{$size} var(--color-interactive-focus)) !important; 
      }
    }
    
    @each $name, $color in $ring-colors {
      @if $name != default {
        .#{$breakpoint}\:ring-#{$name} { 
          box-shadow: 0 0 0 2px #{$color} !important; 
        }
      }
    }
    
    // Responsive drop shadow utilities
    .#{$breakpoint}\:drop-shadow-none { filter: drop-shadow(0 0 transparent) !important; }
    .#{$breakpoint}\:drop-shadow-sm { filter: drop-shadow(0 1px 1px color-mix(in srgb, var(--color-text-primary) var(--opacity-5), transparent)) !important; }
    .#{$breakpoint}\:drop-shadow-md { filter: drop-shadow(0 2px 4px color-mix(in srgb, var(--color-text-primary) var(--opacity-10), transparent)) !important; }
    .#{$breakpoint}\:drop-shadow-lg { filter: drop-shadow(0 4px 8px color-mix(in srgb, var(--color-text-primary) var(--opacity-20), transparent)) !important; }
    .#{$breakpoint}\:drop-shadow-xl { filter: drop-shadow(0 8px 16px color-mix(in srgb, var(--color-text-primary) var(--opacity-25), transparent)) !important; }
    .#{$breakpoint}\:drop-shadow-2xl { filter: drop-shadow(0 16px 32px color-mix(in srgb, var(--color-text-primary) var(--opacity-30), transparent)) !important; }
  }
}

