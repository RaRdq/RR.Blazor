// Interaction State Utilities - Dense, generic, reusable
// NOTE: Complex loading components (.loading, .skeleton, .loading-dots) moved to components/_states.scss
// This file contains only simple interaction utilities (hover effects, transitions, animations)
@use '../abstracts' as *;

// Base interaction states
.interactive {
  cursor: pointer;
  transition: all var(--duration-normal) var(--ease-out);
  
  &:hover {
    transform: translateY(-1px);
    box-shadow: var(--shadow-lg);
  }
  
  &:active {
    transform: translateY(0);
    box-shadow: var(--shadow-sm);
  }
  
  &\! {
    cursor: pointer !important;
    transition: all var(--duration-normal) var(--ease-out) !important;
  }
}

// Clickable state
.clickable {
  cursor: pointer;
  
  &:hover {
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
  }
  
  &:active {
    transform: translateY(0);
  }
  
  &\! {
    cursor: pointer !important;
  }
}

// Disabled state
.disabled {
  opacity: var(--opacity-disabled);
  cursor: not-allowed;
  pointer-events: none;
  
  &\! {
    opacity: var(--opacity-disabled) !important;
    cursor: not-allowed !important;
    pointer-events: none !important;
  }
}

// Note: .loading class moved to components/_states.scss for complex component implementation
// Use .is-loading for simple utility state instead

// Hover lift effect
.hover-lift {
  transition: all var(--duration-normal) var(--ease-out);
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
  }
  
  &:active {
    transform: translateY(0);
    box-shadow: var(--shadow-sm);
  }
}

// Scale effect
.hover-scale {
  transition: transform var(--duration-normal) var(--ease-out);
  
  &:hover {
    transform: scale(1.05);
  }
  
  &:active {
    transform: scale(0.98);
  }
}

// Glow effect
.hover-glow {
  transition: box-shadow var(--duration-normal) var(--ease-out);
  
  &:hover {
    box-shadow: 0 0 20px var(--color-focus-primary);
  }
}

// Focus states
.focusable {
  outline: none;
  transition: box-shadow var(--duration-fast) var(--ease-out);
  
  &:focus-visible {
    box-shadow: 0 0 0 3px var(--color-focus-primary);
    outline-offset: 2px;
  }
  
  &\! {
    outline: none !important;
  }
}

// Selection states
.selectable {
  cursor: pointer;
  transition: all var(--duration-normal) var(--ease-out);
  
  &:hover {
    background: var(--color-background-hover);
  }
  
  &-selected {
    background: var(--color-background-selected);
    color: var(--color-text-selected);
    border-color: var(--color-border-selected);
  }
  
  &\! {
    cursor: pointer !important;
  }
}

// Active/pressed states
.pressable {
  &:active {
    transform: scale(0.96);
    transition: transform var(--duration-fast) var(--ease-out);
  }
}

// Drag states
.draggable {
  cursor: grab;
  
  &:active {
    cursor: grabbing;
  }
  
  &\! {
    cursor: grab !important;
  }
}

// Muted/faded state
.muted {
  opacity: var(--opacity-muted);
  transition: opacity var(--duration-normal) var(--ease-out);
  
  &:hover {
    opacity: 1;
  }
  
  &\! {
    opacity: var(--opacity-muted) !important;
  }
}

// Pulsing animations
.pulse {
  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

.pulse-soft {
  animation: pulseSoft 2s ease-in-out infinite;
}

.pulse-ring {
  animation: pulseRing 2s infinite;
}

// Bounce animation
.bounce {
  animation: bounce 1s infinite;
}

// Spin animation
.spin {
  animation: spin 1s linear infinite;
}

// Shake animation
.shake {
  animation: shake 0.5s ease-in-out;
}

// Fade animations
.fade-in {
  animation: fadeIn 0.3s ease-out;
}

.fade-out {
  animation: fadeOut 0.3s ease-out;
}

// Slide animations
.slide-up {
  animation: slideUp 0.3s ease-out;
}

.slide-down {
  animation: slideDown 0.3s ease-out;
}

// Notification states
.notification {
  &-enter {
    animation: slideInDown 0.3s ease-out;
  }
  
  &-exit {
    animation: slideOutUp 0.3s ease-out;
  }
}

// Note: .loading-dots class moved to components/_states.scss for complex component implementation

// Overlay states
.overlay {
  position: absolute;
  inset: 0;
  background: var(--color-overlay-light);
  backdrop-filter: blur(2px);
  border-radius: inherit;
  z-index: 10;
  
  &-dark {
    background: var(--color-overlay-dark);
  }
  
  &-light {
    background: var(--color-overlay-light);
  }
}

// Note: .skeleton class moved to components/_states.scss for complex component implementation
// Use .is-skeleton for simple utility state instead

// Interaction groups
.interaction-group {
  > * {
    transition: all var(--duration-normal) var(--ease-out);
  }
  
  &:hover > * {
    opacity: var(--opacity-hover);
  }
  
  &:hover > *:hover {
    opacity: 1;
    transform: scale(1.05);
  }
}