@use '../abstracts' as *;

// Sizing Utilities - Loop-based generation
// Width and height utilities with modern utility patterns

// Fixed sizing scale map
$sizing-scale: (
  0: 0,
  px: 1px,
  0-5: 0.125rem,
  1: 0.25rem,
  2: 0.5rem,
  3: 0.75rem,
  4: 1rem,
  5: 1.25rem,
  6: 1.5rem,
  8: 2rem,
  12: 3rem,
  20: 5rem,
  24: 6rem,
  32: 8rem,
  40: 10rem,
  48: 12rem,
  56: 14rem,
  64: 16rem
);

// Fractional sizing map
$fractional-sizes: (
  1\/2: 50%,
  1\/3: 33.333333%,
  2\/3: 66.666667%,
  1\/4: 25%,
  3\/4: 75%,
  1\/5: 20%,
  2\/5: 40%,
  3\/5: 60%,
  4\/5: 80%
);

// Percentage sizes
$percentage-sizes: (
  10: 10%,
  20: 20%,
  25: 25%,
  30: 30%,
  40: 40%,
  50: 50%,
  60: 60%,
  70: 70%,
  75: 75%,
  80: 80%,
  90: 90%,
  100: 100%
);

// Max width breakpoints
$max-widths: (
  xs: 20rem,
  sm: 24rem,
  md: 28rem,
  lg: 32rem,
  xl: 36rem,
  2xl: 42rem,
  3xl: 48rem,
  4xl: 56rem,
  5xl: 64rem,
  6xl: 72rem,
  7xl: 80rem,
  8xl: 90rem,
  9xl: 105rem,
  10xl: 120rem
);

// Min/Max value keywords
$sizing-keywords: (
  none: none,
  full: 100%,
  screen: 100vh,
  min: min-content,
  max: max-content,
  fit: fit-content,
  prose: 65ch
);

// Custom min sizing values
$min-sizes: (
  25: 25px,
  100: 6.25rem,
  150: 9.375rem,
  200: 12.5rem,
  250: 15.625rem,
  300: 18.75rem,
  400: 25rem
);

// Custom max sizing values
$max-sizes: (
  200: 12.5rem,
  300: 18.75rem,
  400: 25rem,
  500: 31.25rem,
  600: 37.5rem
);

// Square sizing values
$square-sizes: (
  4: 1rem,
  5: 1.25rem,
  6: 1.5rem,
  8: 2rem,
  10: 2.5rem,
  12: 3rem,
  16: 4rem
);

// Generate width utilities
@each $name, $value in $sizing-scale {
  .w-#{$name} { width: $value; }
}

@each $name, $value in $fractional-sizes {
  .w-#{$name} { width: $value; }
}

@each $name, $value in $percentage-sizes {
  .w-#{$name} { width: $value; }
}

// Generate height utilities
@each $name, $value in $sizing-scale {
  .h-#{$name} { height: $value; }
}

@each $name, $value in $percentage-sizes {
  .h-#{$name} { height: $value; }
}

// Generate height keyword utilities
@each $name, $value in $sizing-keywords {
  @if $name == 'screen' {
    .h-#{$name} { height: 100vh; }
  } @else if $name != 'none' and $name != 'prose' {
    .h-#{$name} { height: $value; }
  }
}

// ===== ESSENTIAL SIZING UTILITIES =====
// Common sizing utilities for width and height
.w-full { width: 100% !important; }
.w-auto { width: auto !important; }
.h-full { height: 100% !important; }
.h-auto { height: auto !important; }
.w-screen { width: 100vw !important; }
.h-screen { height: 100vh !important; }

// Generate min-width utilities
.min-w {
  @each $name, $value in $sizing-keywords {
    @if $name != 'screen' and $name != 'prose' {
      &-#{$name} { min-width: $value; }
    }
  }
  
  @each $name, $value in $min-sizes {
    &-#{$name} { min-width: $value; }
  }
  
  @each $name, $value in $sizing-scale {
    &-#{$name} { min-width: $value; }
  }
  
  &-0 { min-width: 0; }
}

// Generate max-width utilities
.max-w {
  @each $name, $value in $sizing-keywords {
    @if $name != 'screen' {
      &-#{$name} { max-width: $value; }
    }
  }
  
  @each $name, $value in $max-widths {
    &-#{$name} { max-width: $value; }
  }
  
  &-screen { max-width: 100vw; }
}

// Generate min-height utilities
.min-h {
  @each $name, $value in $sizing-keywords {
    @if $name == 'screen' {
      &-#{$name} { min-height: 100vh; }
    } @else if $name != 'none' and $name != 'prose' {
      &-#{$name} { min-height: $value; }
    }
  }
  
  @each $name, $value in $min-sizes {
    &-#{$name} { min-height: $value; }
  }
  
  &-0 { min-height: 0; }
}

// Generate max-height utilities
.max-h {
  @each $name, $value in $sizing-keywords {
    @if $name == 'screen' {
      &-#{$name} { max-height: 100vh; }
    } @else if $name != 'prose' {
      &-#{$name} { max-height: $value; }
    }
  }
  
  @each $name, $value in $max-sizes {
    &-#{$name} { max-height: $value; }
  }
}

// Generate square sizing utilities
@each $name, $value in $square-sizes {
  .square-#{$name} {
    width: $value;
    height: $value;
  }
}

// Responsive width utilities
@include responsive-max(md) {
  .md\:w-full { width: 100%; }
  .md\:w-auto { width: auto; }
  .md\:max-w-full { max-width: 100%; }
}

@include responsive-max(sm) {
  .sm\:w-full { width: 100%; }
  .sm\:min-w-full { min-width: 100%; }
}