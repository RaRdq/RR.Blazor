@use '../abstracts' as *;

// ===== DYNAMIC PROPERTY UTILITIES =====
// Utility classes for components that use CSS custom properties
// These classes support dynamic values from C# code
//
// IMPORTANT: These utilities are designed to work WITH inline CSS custom properties
// Example: <div class="progress-dynamic" style="--progress-width: @(value)%"></div>
// This pattern is acceptable because:
// 1. Static styling uses utility classes
// 2. Dynamic values use CSS custom properties via inline styles (as intended)
// 3. This follows the RR.Blazor hybrid approach for component libraries

// ===== PROGRESS UTILITIES =====
// For progress bars, loading states, and completion indicators

.progress-dynamic {
  width: var(--progress-width, 0%);
  transition: width var(--duration-normal) var(--ease-out);
}

.button-progress {
  position: absolute;
  bottom: 0;
  left: 0;
  height: var(--space-1);
  background: var(--color-primary-light);
  transition: all var(--duration-normal) var(--ease-out);
  width: var(--progress-width, 0%);
  border-radius: 0 0 var(--radius-md) var(--radius-md);
}

// ===== ICON UTILITIES =====
// For dynamic icon sizing and coloring

.icon-dynamic {
  font-size: var(--icon-font-size, var(--text-base));
  color: var(--icon-color, var(--color-text-primary));
  width: var(--icon-size, 1em);
  height: var(--icon-size, 1em);
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

.icon-container-dynamic {
  display: flex;
  align-items: center;
  justify-content: center;
  width: var(--icon-size, 2rem);
  height: var(--icon-size, 2rem);
  border-radius: var(--radius-md);
  background: var(--icon-background, transparent);
  
  .material-symbols-rounded {
    font-size: var(--icon-font-size, var(--text-xl));
    color: var(--icon-color, var(--color-text-primary));
  }
}

// ===== VALUE/TEXT UTILITIES =====
// For dynamic text colors and styling

.value-dynamic {
  color: var(--value-color, var(--color-text-primary));
  font-weight: var(--value-weight, var(--font-semibold));
  font-size: var(--value-size, var(--text-base));
}

// ===== CHART UTILITIES =====
// For dynamic chart styling

.chart-bar-dynamic {
  height: var(--bar-height, 100%);
  background: var(--bar-color, var(--color-primary));
  transition: all var(--duration-normal) var(--ease-out);
  border-radius: var(--radius-sm) var(--radius-sm) 0 0;
}

.chart-grid-line {
  position: absolute;
  background: var(--grid-color, var(--color-border-light));
  
  &.horizontal {
    width: 100%;
    height: 1px;
    top: var(--grid-position, 0);
  }
  
  &.vertical {
    height: 100%;
    width: 1px;
    left: var(--grid-position, 0);
  }
}

.chart-legend-item {
  background: var(--legend-color, var(--color-primary));
  width: var(--legend-size, 0.75rem);
  height: var(--legend-size, 0.75rem);
  border-radius: var(--radius-full);
  display: inline-block;
  margin-right: var(--space-2);
}

// ===== POSITION UTILITIES =====
// For dynamic positioning

.position-dynamic {
  top: var(--position-top, auto);
  right: var(--position-right, auto);
  bottom: var(--position-bottom, auto);
  left: var(--position-left, auto);
}

.context-menu {
  top: var(--context-menu-top, auto);
  left: var(--context-menu-left, auto);
}

// ===== DIMENSION UTILITIES =====
// For dynamic sizing

.size-dynamic {
  width: var(--dynamic-width, auto);
  height: var(--dynamic-height, auto);
}

.container-dynamic {
  max-height: var(--container-height, none);
  max-width: var(--container-width, none);
  overflow: var(--container-overflow, visible);
}

// ===== VIRTUAL LIST UTILITIES =====
// For virtualized components

.virtual-item {
  height: var(--item-height, auto);
  transform: translateY(var(--item-offset, 0));
  position: absolute;
  width: 100%;
  top: 0;
  left: 0;
}

.virtual-container {
  height: var(--container-height, 400px);
  overflow: auto;
  position: relative;
}

// ===== RESPONSIVE DYNAMIC UTILITIES =====
// Mobile-first responsive variants

@each $breakpoint in (sm, md, lg, xl) {
  @include responsive-min($breakpoint) {
    .#{$breakpoint}\\:progress-dynamic {
      width: var(--progress-width, 0%);
    }
    
    .#{$breakpoint}\\:icon-dynamic {
      font-size: var(--icon-font-size, var(--text-base));
      color: var(--icon-color, var(--color-text-primary));
    }
    
    .#{$breakpoint}\\:value-dynamic {
      color: var(--value-color, var(--color-text-primary));
    }
    
    .#{$breakpoint}\\:size-dynamic {
      width: var(--dynamic-width, auto);
      height: var(--dynamic-height, auto);
    }
  }
}