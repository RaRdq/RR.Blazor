@use '../abstracts' as *;
@use 'sass:map';

@for $i from 1 through 12 {
  .grid-cols-#{$i} {
    grid-template-columns: repeat(#{$i}, minmax(0, 1fr)) !important;
  }
}

.grid-cols-none {
  grid-template-columns: none !important;
}

@for $i from 1 through 6 {
  .grid-rows-#{$i} {
    grid-template-rows: repeat(#{$i}, minmax(0, 1fr)) !important;
  }
}

.grid-rows-none {
  grid-template-rows: none !important;
}

$auto-fit-sizes: (150, 200, 250, 300, 350);

@each $size in $auto-fit-sizes {
  .grid-auto-fit-#{$size} {
    grid-template-columns: repeat(auto-fit, minmax(#{$size}px, 1fr)) !important;
  }
}

.col-auto {
  grid-column: auto !important;
}

@for $i from 1 through 12 {
  .col-span-#{$i} {
    grid-column: span #{$i} / span #{$i} !important;
  }
}

.col-span-full {
  grid-column: 1 / -1 !important;
}

@for $i from 1 through 13 {
  .col-start-#{$i} {
    grid-column-start: #{$i} !important;
  }
  
  @if $i <= 13 {
    .col-end-#{$i} {
      grid-column-end: #{$i} !important;
    }
  }
}

.col-start-auto {
  grid-column-start: auto !important;
}

.col-end-auto {
  grid-column-end: auto !important;
}

.row-auto {
  grid-row: auto !important;
}

@for $i from 1 through 6 {
  .row-span-#{$i} {
    grid-row: span #{$i} / span #{$i} !important;
  }
}

.row-span-full {
  grid-row: 1 / -1 !important;
}

@for $i from 1 through 7 {
  .row-start-#{$i} {
    grid-row-start: #{$i} !important;
  }
  
  .row-end-#{$i} {
    grid-row-end: #{$i} !important;
  }
}

.row-start-auto {
  grid-row-start: auto !important;
}

.row-end-auto {
  grid-row-end: auto !important;
}

$grid-flow-values: (
  'row': row,
  'col': column,
  'dense': dense,
  'row-dense': row dense,
  'col-dense': column dense
);

@each $name, $value in $grid-flow-values {
  .grid-flow-#{$name} {
    grid-auto-flow: #{$value} !important;
  }
}

$auto-values: (
  'auto': auto,
  'min': min-content,
  'max': max-content,
  'fr': minmax(0, 1fr)
);

@each $name, $value in $auto-values {
  .auto-cols-#{$name} {
    grid-auto-columns: #{$value} !important;
  }
  
  .auto-rows-#{$name} {
    grid-auto-rows: #{$value} !important;
  }
}

// Grid alignment utilities (non-conflicting with flex)
$grid-justify-values: (
  'start': start,
  'end': end,
  'center': center,
  'stretch': stretch
);

@each $name, $value in $grid-justify-values {
  .justify-items-#{$name} {
    justify-items: #{$value} !important;
  }
  
  .justify-self-#{$name} {
    justify-self: #{$value} !important;
  }
}

.justify-self-auto {
  justify-self: auto !important;
}

$gap-sizes: (0, px, '0-5', 1, '1-5', 2, '2-5', 3, '3-5', 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 20, 24);
$common-gap-sizes: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 20, 24);

@each $size in $gap-sizes {
  .gap-#{$size} {
    gap: var(--space-#{$size}) !important;
  }
}

@each $size in $common-gap-sizes {
  .gap-x-#{$size} {
    column-gap: var(--space-#{$size}) !important;
  }
  
  .gap-y-#{$size} {
    row-gap: var(--space-#{$size}) !important;
  }
}

// Responsive gap utilities
@each $breakpoint in (sm, md, lg, xl) {
  @include responsive-min($breakpoint) {
    @each $size in $common-gap-sizes {
      .#{$breakpoint}\:gap-#{$size} { 
        gap: var(--space-#{$size}) !important; 
      }
      .#{$breakpoint}\:gap-x-#{$size} { 
        column-gap: var(--space-#{$size}) !important; 
      }
      .#{$breakpoint}\:gap-y-#{$size} { 
        row-gap: var(--space-#{$size}) !important; 
      }
    }
  }
}

// Responsive grid patterns (moved from _layout.scss)
.grid-auto-fit {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(var(--min-column-width, 200px), 1fr));
  gap: var(--gap, var(--space-4));
  
  @include responsive-max(md) {
    grid-template-columns: 1fr;
    gap: var(--space-3);
  }
}

.card-container {
  display: grid;
  gap: var(--space-4);
  width: 100%;
  
  @include responsive-min(md) {
    grid-template-columns: repeat(2, 1fr);
    gap: var(--space-6);
  }
  
  @include responsive-min(lg) {
    grid-template-columns: repeat(3, 1fr);
  }
  
  @include responsive-min(xl) {
    grid-template-columns: repeat(4, 1fr);
  }
}

// ===== UNIFIED RESPONSIVE GRID SYSTEM =====
// Consistent mobile-first grid utilities

@each $breakpoint in (sm, md, lg, xl) {
  @include responsive-min($breakpoint) {
    .#{$breakpoint}\:grid {
      display: grid !important;
    }
    
    @for $i from 1 through 12 {
      .#{$breakpoint}\:grid-cols-#{$i} {
        grid-template-columns: repeat(#{$i}, minmax(0, 1fr)) !important;
      }
    }
    
    @for $i from 1 through 6 {
      .#{$breakpoint}\:grid-rows-#{$i} {
        grid-template-rows: repeat(#{$i}, minmax(0, 1fr)) !important;
      }
    }
    
    @for $i from 1 through 12 {
      .#{$breakpoint}\:col-span-#{$i} {
        grid-column: span #{$i} / span #{$i} !important;
      }
    }
    
    .#{$breakpoint}\:col-span-full {
      grid-column: 1 / -1 !important;
    }
  }
}