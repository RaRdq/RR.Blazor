@use '../abstracts' as *;
@use 'sass:map';

$focus-ring-colors: (
  primary: var(--color-primary),
  secondary: var(--color-secondary),
  success: var(--color-success),
  warning: var(--color-warning),
  error: var(--color-error),
  info: var(--color-info)
);

@each $name, $color in $focus-ring-colors {
  .focus\:ring-#{$name}:focus {
    box-shadow: 0 0 0 2px #{$color};
  }
}

.pointer-events-none { pointer-events: none; }
.pointer-events-auto { pointer-events: auto; }
.pointer-events-all { pointer-events: all; }
$hover-bg-colors: (
  primary: var(--color-canvas),
  secondary: var(--color-surface),
  elevated: var(--color-surface-elevated),
  interactive: var(--color-primary),
  success: var(--color-success),
  warning: var(--color-warning),
  error: var(--color-error),
  light: var(--color-secondary),
  overlay: var(--color-surface-elevated)
);

.hover {
  @each $name, $color in $hover-bg-colors {
    &\:bg-#{$name}:hover {
      background-color: #{$color};
      transition: background-color var(--duration-fast) var(--ease-out);
    }
  }
}

$hover-text-colors: (
  primary: var(--color-text),
  secondary: var(--color-text-muted),
  interactive: var(--color-primary),
  success: var(--color-success),
  warning: var(--color-warning),
  error: var(--color-error),
  accent: var(--color-primary)
);

.hover {
  @each $name, $color in $hover-text-colors {
    &\:text-#{$name}:hover {
      color: #{$color};
      transition: color var(--duration-fast) var(--ease-out);
    }
  }
}

.hover {
  $hover-border-colors: (
    primary: var(--color-primary),
    secondary: var(--color-border),
    success: var(--color-success),
    warning: var(--color-warning),
    error: var(--color-error)
  );

  @each $name, $color in $hover-border-colors {
    &\:border-#{$name}:hover {
      border-color: #{$color};
      transition: border-color var(--duration-fast) var(--ease-out);
    }
  }

  $hover-opacities: (75: 0.75, 50: 0.5, 100: 1);
  @each $name, $value in $hover-opacities {
    &\:opacity-#{$name}:hover {
      opacity: #{$value};
      transition: opacity var(--duration-fast) var(--ease-out);
    }
  }

  $hover-scales: (105: 1.05, 110: 1.1, 95: 0.95);
  @each $name, $value in $hover-scales {
    &\:scale-#{$name}:hover {
      transform: scale(#{$value});
      transition: transform var(--duration-fast) var(--ease-out);
    }
  }

  &\:rotate-3:hover {
    transform: rotate(3deg);
    transition: transform var(--duration-fast) var(--ease-out);
  }

  &\:-rotate-3:hover {
    transform: rotate(-3deg);
    transition: transform var(--duration-fast) var(--ease-out);
  }

&\:translate-y-1:hover {
    transform: translateY(-0.25rem);
    transition: transform var(--duration-fast) var(--ease-out);
  }

  &\:translate-y-2:hover {
    transform: translateY(-0.5rem);
    transition: transform var(--duration-fast) var(--ease-out);
  }

$hover-shadows: (sm, md, lg, xl, none);
  @each $shadow in $hover-shadows {
    &\:shadow-#{$shadow}:hover {
      @if $shadow == none {
        box-shadow: none;
      } @else {
        box-shadow: var(--shadow-#{$shadow});
      }
      transition: box-shadow var(--duration-fast) var(--ease-out);
    }
  }

  $hover-brightness: (110: 1.1, 125: 1.25, 90: 0.9);
  @each $name, $value in $hover-brightness {
    &\:brightness-#{$name}:hover {
      filter: brightness(#{$value});
      transition: filter var(--duration-fast) var(--ease-out);
    }
  }

  $hover-decorations: (
    underline: underline,
    overline: overline,
    line-through: line-through,
    no-underline: none
  );

  @each $name, $decoration in $hover-decorations {
    &\:#{$name}:hover {
      text-decoration: #{$decoration};
      transition: text-decoration var(--duration-fast) var(--ease-out);
    }
  }
}

.active\:scale-95:active {
  transform: scale(0.95);
}

.active\:scale-98:active {
  transform: scale(0.98);
}

.active\:bg-primary:active {
  background-color: var(--color-primary-active);
}

.active\:bg-secondary:active {
  background-color: var(--color-surface-dark);
}

.active\:shadow-inner:active {
  box-shadow: var(--shadow-inset-button);
}

.active\:shadow-none:active {
  box-shadow: none;
}

.group:hover .group-hover\:visible {
  visibility: visible;
}

.group:hover .group-hover\:invisible {
  visibility: hidden;
}

.group:hover .group-hover\:opacity-100 {
  opacity: 1;
}

.group:hover .group-hover\:opacity-0 {
  opacity: 0;
}

.group:hover .group-hover\:scale-105 {
  transform: scale(1.05);
}

.group:hover .group-hover\:translate-y-1 {
  transform: translateY(-0.25rem);
}

.group:hover .group-hover\:text-primary {
  color: var(--color-primary);
}

.group:hover .group-hover\:bg-secondary {
  background-color: var(--color-surface);
}

.disabled\:opacity-50:disabled {
  opacity: 0.5;
}

.disabled\:cursor-not-allowed:disabled {
  cursor: not-allowed;
}

.action-zone {
  position: relative;
  cursor: pointer;
  transition: all var(--duration-fast) var(--ease-out);
  border-radius: var(--radius-md);

  &:hover {
    background: var(--color-surface-elevated);
    transform: translateY(calc(-1 * var(--space-0-5)));
  }

  &:active {
    transform: translateY(0);
  }

  &-clickable {
    &:hover .action-zone-overlay {
      opacity: 1;
    }
  }

  &-overlay {
    position: absolute;
    inset: 0;
    background: var(--color-focus);
    border-radius: inherit;
    opacity: 0;
    transition: opacity var(--duration-fast) var(--ease-out);
    pointer-events: none;
  }
}

@include responsive-max(md) {
  .quick-actions {
    opacity: 1;
  }

  .action-zone:hover {
    transform: none;
  }
}

.disabled\:bg-gray:disabled {
  background-color: var(--color-surface);
  opacity: var(--opacity-disabled);
}

.disabled\:text-gray:disabled {
  color: var(--color-text-subtle);
}

.pointer-events-none {
  pointer-events: none;
}

.pointer-events-auto {
  pointer-events: auto;
}

.pointer-events-all {
  pointer-events: all;
}

.resize {
  resize: both;

  &-none { resize: none; }
  &-y { resize: vertical; }
  &-x { resize: horizontal; }
}
