@use '../abstracts' as *;
@use 'sass:map';

// Focus Ring Utilities - Loop-based generation
$focus-ring-colors: (
  primary: var(--color-interactive-primary),
  secondary: var(--color-interactive-secondary),
  success: var(--color-success),
  warning: var(--color-warning),
  error: var(--color-error),
  info: var(--color-info)
);

@each $name, $color in $focus-ring-colors {
  .focus\:ring-#{$name}:focus {
    box-shadow: 0 0 0 2px #{$color};
  }
}

// Pointer events utilities
.pointer-events-none { pointer-events: none; }
.pointer-events-auto { pointer-events: auto; }
.pointer-events-all { pointer-events: all; }
$hover-bg-colors: (
  primary: var(--color-background-primary),
  secondary: var(--color-background-secondary),
  elevated: var(--color-background-elevated),
  interactive: var(--color-interactive-primary),
  success: var(--color-success),
  warning: var(--color-warning),
  error: var(--color-error),
  light: var(--color-background-light),
  overlay: var(--color-background-overlay)
);

@each $name, $color in $hover-bg-colors {
  .hover\:bg-#{$name}:hover {
    background-color: #{$color};
  }
}

$hover-text-colors: (
  primary: var(--color-text-primary),
  secondary: var(--color-text-secondary),
  interactive: var(--color-interactive-primary),
  success: var(--color-success),
  warning: var(--color-warning),
  error: var(--color-error),
  accent: var(--color-text-accent)
);

@each $name, $color in $hover-text-colors {
  .hover\:text-#{$name}:hover {
    color: #{$color};
  }
}

.hover\:border-primary:hover {
  border-color: var(--color-interactive-primary);
}

.hover\:border-secondary:hover {
  border-color: var(--color-border-medium);
}

.hover\:border-success:hover {
  border-color: var(--color-success);
}

.hover\:border-warning:hover {
  border-color: var(--color-warning);
}

.hover\:border-error:hover {
  border-color: var(--color-error);
}

.hover\:opacity-75:hover {
  opacity: 0.75;
}

.hover\:opacity-50:hover {
  opacity: 0.5;
}

.hover\:opacity-100:hover {
  opacity: 1;
}

.hover\:scale-105:hover {
  transform: scale(1.05);
}

.hover\:scale-110:hover {
  transform: scale(1.1);
}

.hover\:scale-95:hover {
  transform: scale(0.95);
}

.hover\:rotate-3:hover {
  transform: rotate(3deg);
}

.hover\:-rotate-3:hover {
  transform: rotate(-3deg);
}

.hover\:translate-y-1:hover {
  transform: translateY(-0.25rem);
}

.hover\:translate-y-2:hover {
  transform: translateY(-0.5rem);
}

.hover\:shadow-sm:hover {
  box-shadow: var(--shadow-sm);
}

.hover\:shadow-md:hover {
  box-shadow: var(--shadow-md);
}

.hover\:shadow-lg:hover {
  box-shadow: var(--shadow-lg);
}

.hover\:shadow-xl:hover {
  box-shadow: var(--shadow-xl);
}

.hover\:shadow-none:hover {
  box-shadow: none;
}

.hover\:brightness-110:hover {
  filter: brightness(1.1);
}

.hover\:brightness-125:hover {
  filter: brightness(1.25);
}

.hover\:brightness-90:hover {
  filter: brightness(0.9);
}

// Focus utilities moved to utilities/_accessibility.scss

.active\:scale-95:active {
  transform: scale(0.95);
}

.active\:scale-98:active {
  transform: scale(0.98);
}

.active\:bg-primary:active {
  background-color: var(--color-interactive-active);
}

.active\:bg-secondary:active {
  background-color: var(--color-background-pressed);
}

.active\:shadow-inner:active {
  box-shadow: var(--shadow-inner);
}

.active\:shadow-none:active {
  box-shadow: none;
}

.group:hover .group-hover\:visible {
  visibility: visible;
}

.group:hover .group-hover\:invisible {
  visibility: hidden;
}

.group:hover .group-hover\:opacity-100 {
  opacity: 1;
}

.group:hover .group-hover\:opacity-0 {
  opacity: 0;
}

.group:hover .group-hover\:scale-105 {
  transform: scale(1.05);
}

.group:hover .group-hover\:translate-y-1 {
  transform: translateY(-0.25rem);
}

.group:hover .group-hover\:text-primary {
  color: var(--color-interactive-primary);
}

.group:hover .group-hover\:bg-secondary {
  background-color: var(--color-background-secondary);
}

// Focus-within utilities moved to utilities/_accessibility.scss

.disabled\:opacity-50:disabled {
  opacity: 0.5;
}

.disabled\:cursor-not-allowed:disabled {
  cursor: not-allowed;
}

// Action zones for interactive areas
.action-zone {
  position: relative;
  cursor: pointer;
  transition: all var(--duration-fast) var(--ease-out);
  border-radius: var(--radius-md);
  
  &:hover {
    background: var(--color-background-hover);
    transform: translateY(calc(-1 * var(--space-0-25)));
  }
  
  &:active {
    transform: translateY(0);
  }
  
  &-clickable {
    &:hover .action-zone-overlay {
      opacity: 1;
    }
  }
  
  &-overlay {
    position: absolute;
    inset: 0;
    background: var(--color-focus-primary);
    border-radius: inherit;
    opacity: 0;
    transition: opacity var(--duration-fast) var(--ease-out);
    pointer-events: none;
  }
}

// Mobile responsive behavior
@include responsive-max(md) {
  .quick-actions {
    opacity: 1; // Always show on mobile
  }
  
  .action-zone:hover {
    transform: none; // Disable hover effects on mobile
  }
}

.disabled\:bg-gray:disabled {
  background-color: var(--color-background-disabled);
}

.disabled\:text-gray:disabled {
  color: var(--color-text-tertiary);
}

// Duplicated classes removed - handled in _interaction-states.scss
// .interactive, .clickable, .focusable, .selectable, .draggable, .muted, etc.

// Elevation lift utilities moved to _visual-effects.scss to eliminate duplication

// Glass hover utilities moved to _visual-effects.scss to eliminate duplication

// ===== POINTER EVENTS UTILITIES =====
.pointer-events-none {
  pointer-events: none;
}

.pointer-events-auto {
  pointer-events: auto;
}

.pointer-events-all {
  pointer-events: all;
}

// ===== RESIZE UTILITIES =====
.resize {
  resize: both;
  
  &-none { resize: none; }
  &-y { resize: vertical; }
  &-x { resize: horizontal; }
}

