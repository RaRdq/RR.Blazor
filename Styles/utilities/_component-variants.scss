// Component Variant Utilities - Conservative approach
// These utilities complement existing component patterns without disrupting them
@use '../abstracts' as *;
@use 'sass:map';

// Status color utilities - Loop-based generation
$status-colors: (
  primary: (bg: var(--color-interactive-primary), text: var(--color-text-on-primary), border: var(--color-interactive-primary)),
  secondary: (bg: var(--color-interactive-secondary), text: var(--color-text-on-secondary), border: var(--color-interactive-secondary)),
  success: (bg: var(--color-success), text: var(--color-text-on-success), border: var(--color-success)),
  warning: (bg: var(--color-warning), text: var(--color-text-on-warning), border: var(--color-warning)),
  error: (bg: var(--color-error), text: var(--color-text-on-error), border: var(--color-error)),
  info: (bg: var(--color-info), text: var(--color-text-on-info), border: var(--color-info))
);

$status-light-colors: (
  primary: (bg: var(--color-interactive-secondary), text: var(--color-text-primary), border: var(--color-interactive-primary)),
  secondary: (bg: var(--color-secondary-light), text: var(--color-secondary-dark), border: var(--color-secondary)),
  success: (bg: var(--color-success-light), text: var(--color-success-dark), border: var(--color-success)),
  warning: (bg: var(--color-warning-light), text: var(--color-warning-dark), border: var(--color-warning)),
  error: (bg: var(--color-error-light), text: var(--color-error-dark), border: var(--color-error)),
  info: (bg: var(--color-info-light), text: var(--color-info-dark), border: var(--color-info))
);

@each $name, $props in $status-colors {
  .status-#{$name} {
    background: map.get($props, bg);
    color: map.get($props, text);
    border-color: map.get($props, border);
  }
}

@each $name, $props in $status-light-colors {
  .status-#{$name}-light {
    background: map.get($props, bg);
    color: map.get($props, text);
    border-color: map.get($props, border);
  }
}

// Size utilities - Loop-based generation
$component-sizes: (
  xs: (padding: var(--space-1) var(--space-2), font-size: var(--text-xs), min-height: var(--space-6), gap: var(--space-1)),
  sm: (padding: var(--space-2) var(--space-3), font-size: var(--text-sm), min-height: var(--space-8), gap: var(--space-1)),
  md: (padding: var(--space-3) var(--space-4), font-size: var(--text-base), min-height: var(--space-10), gap: var(--space-2)),
  lg: (padding: var(--space-4) var(--space-6), font-size: var(--text-lg), min-height: var(--space-12), gap: var(--space-3)),
  xl: (padding: var(--space-6) var(--space-8), font-size: var(--text-xl), min-height: var(--space-16), gap: var(--space-4))
);

@each $name, $props in $component-sizes {
  .size-#{$name} {
    padding: map.get($props, padding);
    font-size: map.get($props, font-size);
    min-height: map.get($props, min-height);
    gap: map.get($props, gap);
  }
}

// Priority utilities - Loop-based generation
$priority-levels: (
  critical: (bg: var(--color-error-light), text: var(--color-error-dark), border: var(--color-error)),
  high: (bg: var(--color-warning-light), text: var(--color-warning-dark), border: var(--color-warning)),
  medium: (bg: var(--color-info-light), text: var(--color-info-dark), border: var(--color-info)),
  low: (bg: var(--color-background-secondary), text: var(--color-text-secondary), border: var(--color-border-medium))
);

@each $name, $props in $priority-levels {
  .priority-#{$name} {
    background: map.get($props, bg);
    color: map.get($props, text);
    border-color: map.get($props, border);
    font-weight: var(--font-bold);
    text-transform: uppercase;
    letter-spacing: var(--tracking-wide);
  }
}

// Important variants - Loop-based generation
$important-status-colors: (primary, success, warning, error);

@each $name in $important-status-colors {
  .status-#{$name}\! {
    background: map.get(map.get($status-colors, $name), bg) !important;
    color: map.get(map.get($status-colors, $name), text) !important;
    border-color: map.get(map.get($status-colors, $name), border) !important;
  }
}