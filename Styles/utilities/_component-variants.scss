@use '../abstracts' as *;
@use 'sass:map';

$status-types: (
  'success': (
    'color': var(--color-success),
    'bg-light': var(--color-success-bg),
    'bg-indicator': var(--color-success-bg),
    'border': var(--color-success)
  ),
  'warning': (
    'color': var(--color-warning),
    'bg-light': var(--color-warning-bg),
    'bg-indicator': var(--color-warning-bg),
    'border': var(--color-warning)
  ),
  'error': (
    'color': var(--color-error),
    'bg-light': var(--color-error-bg),
    'bg-indicator': var(--color-error-bg),
    'border': var(--color-error)
  ),
  'info': (
    'color': var(--color-info),
    'bg-light': var(--color-info-bg),
    'bg-indicator': var(--color-info-bg),
    'border': var(--color-info)
  ),
  'pending': (
    'color': var(--color-text-muted),
    'bg-light': var(--color-surface),
    'bg-indicator': var(--color-surface),
    'border': var(--color-border)
  ),
  'active': (
    'color': var(--color-success),
    'bg-light': var(--color-success-bg),
    'bg-indicator': var(--color-success-bg),
    'border': var(--color-success)
  ),
  'inactive': (
    'color': var(--color-text-muted),
    'bg-light': var(--color-surface),
    'bg-indicator': var(--color-surface),
    'border': var(--color-border)
  ),
  'primary': (
    'color': var(--color-primary),
    'bg-light': var(--color-primary-bg),
    'bg-indicator': var(--color-primary-bg),
    'border': var(--color-primary)
  )
);

@each $type-name, $type-props in $status-types {
  .status-#{$type-name} {
    background: map.get($type-props, 'bg-light');
    color: map.get($type-props, 'color');
    border-color: map.get($type-props, 'border');
  }
  
  .status-#{$type-name}-light {
    background: map.get($type-props, 'bg-light');
    color: map.get($type-props, 'color');
    border-color: map.get($type-props, 'border');
  }
}

.status-dot {
  width: var(--space-2);
  height: var(--space-2);
  background: currentColor;
  border-radius: 50%;
  display: inline-block;
  flex-shrink: 0;
  
  &-pulse {
    animation: pulseSoft var(--duration-slow) infinite;
  }
  
  @each $type-name, $type-props in $status-types {
    &-#{$type-name} {
      background: map.get($type-props, 'color');
    }
  }
}

.status-text {
  font-weight: var(--font-medium);
  font-size: var(--text-sm);
  
  @each $type-name, $type-props in $status-types {
    &-#{$type-name} {
      color: map.get($type-props, 'color');
    }
  }
}

$component-sizes: (
  xs: (padding: var(--space-1) var(--space-2), font-size: var(--text-xs), min-height: var(--space-6), gap: var(--space-1)),
  sm: (padding: var(--space-2) var(--space-3), font-size: var(--text-sm), min-height: var(--space-8), gap: var(--space-1)),
  md: (padding: var(--space-3) var(--space-4), font-size: var(--text-base), min-height: var(--space-10), gap: var(--space-2)),
  lg: (padding: var(--space-4) var(--space-6), font-size: var(--text-lg), min-height: var(--space-12), gap: var(--space-3)),
  xl: (padding: var(--space-6) var(--space-8), font-size: var(--text-xl), min-height: var(--space-16), gap: var(--space-4))
);

@each $name, $props in $component-sizes {
  .size-#{$name} {
    padding: map.get($props, padding);
    font-size: map.get($props, font-size);
    min-height: map.get($props, min-height);
    gap: map.get($props, gap);
  }
}

$priority-levels: (
  critical: (bg: color-mix(in srgb, var(--color-error) 10%, var(--color-surface)), text: var(--color-error-dark), border: var(--color-error)),
  high: (bg: color-mix(in srgb, var(--color-warning) 10%, var(--color-surface)), text: var(--color-warning-dark), border: var(--color-warning)),
  medium: (bg: color-mix(in srgb, var(--color-info) 10%, var(--color-surface)), text: var(--color-info-dark), border: var(--color-info)),
  low: (bg: var(--color-surface), text: var(--color-text-muted), border: var(--color-border))
);

@each $name, $props in $priority-levels {
  .priority-#{$name} {
    background: map.get($props, bg);
    color: map.get($props, text);
    border-color: map.get($props, border);
    font-weight: var(--font-bold);
    text-transform: uppercase;
    letter-spacing: var(--tracking-wide);
  }
}

$important-status-colors: ('primary', 'success', 'warning', 'error');

@each $name in $important-status-colors {
  .status-#{$name}\! {
    background: map.get(map.get($status-types, $name), 'bg-light') !important;
    color: map.get(map.get($status-types, $name), 'color') !important;
    border-color: map.get(map.get($status-types, $name), 'border') !important;
  }
}