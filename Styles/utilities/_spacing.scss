@use '../abstracts' as *;
@use 'sass:map';

// Spacing Utilities - Advanced SCSS patterns with loops and maps
// Comprehensive spacing system for margin, padding, gap, and space utilities

// ===== SPACING SCALE MAPS =====

// Primary spacing scale - matches CSS custom properties
$spacing-scale: (
  0: var(--space-0),
  px: var(--space-px),
  0-5: var(--space-0-5),
  1: var(--space-1),
  1-5: var(--space-1-5),
  2: var(--space-2),
  2-5: var(--space-2-5),
  3: var(--space-3),
  3-5: var(--space-3-5),
  4: var(--space-4),
  5: var(--space-5),
  6: var(--space-6),
  7: var(--space-7),
  8: var(--space-8),
  9: var(--space-9),
  10: var(--space-10),
  11: var(--space-11),
  12: var(--space-12),
  14: var(--space-14),
  16: var(--space-16),
  20: var(--space-20),
  24: var(--space-24)
);

// Common spacing sizes for directional utilities
$common-spaces: (0, 1, 2, 3, 4, 5, 6, 8, 10, 12);


// Space-between utility specific sizes  
$space-between-sizes: (0, 1, 2, 3, 4, 5, 6, 8);

// Negative margin sizes
$negative-margin-sizes: (1, 2, 3, 4, 5, 6);

// Custom margin values (legacy support)
$custom-margins: (
  60: 60px,
  100: -100px
);

// Direction maps for efficient generation
$margin-directions: (
  t: margin-top,
  r: margin-right,
  b: margin-bottom,
  l: margin-left
);

$padding-directions: (
  t: padding-top,
  r: padding-right,
  b: padding-bottom,
  l: padding-left
);

// Auto values for margins
$margin-auto-directions: (t, r, b, l);


// ===== SPACE-BETWEEN UTILITIES =====

// Generate space-x utilities (horizontal spacing between children)
@each $size in $space-between-sizes {
  .space-x-#{$size} > :not([hidden]) ~ :not([hidden]) { 
    margin-left: map.get($spacing-scale, $size); 
  }
}

// Generate space-y utilities (vertical spacing between children)  
@each $size in $space-between-sizes {
  .space-y-#{$size} > :not([hidden]) ~ :not([hidden]) { 
    margin-top: map.get($spacing-scale, $size); 
  }
}

// ===== RESPONSIVE UTILITIES =====

@include responsive-max(md) {
  .gap-responsive { gap: var(--space-3) !important; }
  .m-responsive { margin: var(--space-3) !important; }
}

@include responsive-max(sm) {
  .gap-responsive { gap: var(--space-2) !important; }
  .m-responsive { margin: var(--space-2) !important; }
}

// ===== SEMANTIC SPACING UTILITIES =====

.section-spacing {
  margin-bottom: var(--space-6);
  
  @include responsive-max(md) {
    margin-bottom: var(--space-4);
  }
  
  @include responsive-max(sm) {
    margin-bottom: var(--space-3);
  }
}

.card-spacing {
  padding: var(--space-4);
  
  @include responsive-max(md) {
    padding: var(--space-3);
  }
  
  @include responsive-max(sm) {
    padding: var(--space-2);
  }
}

.content-spacing {
  padding: var(--space-6);
  
  @include responsive-max(md) {
    padding: var(--space-4);
  }
  
  @include responsive-max(sm) {
    padding: var(--space-3);
  }
}

// ===== PADDING UTILITIES =====

// Generate all-directional padding utilities
@each $size in $common-spaces {
  .pa-#{$size} { padding: map.get($spacing-scale, $size) !important; }
}

// Generate directional padding utilities
@each $direction, $property in $padding-directions {
  @each $size in $common-spaces {
    .p#{$direction}-#{$size} { #{$property}: map.get($spacing-scale, $size) !important; }
  }
}

// Generate axis padding utilities
@each $size in $common-spaces {
  .px-#{$size} { 
    padding-left: map.get($spacing-scale, $size) !important;
    padding-right: map.get($spacing-scale, $size) !important;
  }
  .py-#{$size} { 
    padding-top: map.get($spacing-scale, $size) !important;
    padding-bottom: map.get($spacing-scale, $size) !important;
  }
}

// ===== MARGIN UTILITIES =====

// Generate all-directional margin utilities
@each $size in $common-spaces {
  .ma-#{$size} { margin: map.get($spacing-scale, $size) !important; }
}

// Generate directional margin utilities
@each $direction, $property in $margin-directions {
  @each $size in $common-spaces {
    .m#{$direction}-#{$size} { #{$property}: map.get($spacing-scale, $size) !important; }
  }
}

// Generate axis margin utilities
@each $size in $common-spaces {
  .mx-#{$size} { 
    margin-left: map.get($spacing-scale, $size) !important;
    margin-right: map.get($spacing-scale, $size) !important;
  }
  .my-#{$size} { 
    margin-top: map.get($spacing-scale, $size) !important;
    margin-bottom: map.get($spacing-scale, $size) !important;
  }
}

// Generate auto margin utilities
.ma-auto { margin: auto !important; }
@each $direction in $margin-auto-directions {
  .m#{$direction}-auto { margin-#{$direction}: auto !important; }
}
.mx-auto { 
  margin-left: auto !important;
  margin-right: auto !important;
}
.my-auto { 
  margin-top: auto !important;
  margin-bottom: auto !important;
}

// ===== CUSTOM MARGIN VALUES =====

// Legacy custom margin values
@each $name, $value in $custom-margins {
  .mt-#{$name} { margin-top: $value !important; }
}

// ===== NEGATIVE MARGINS =====

// Generate negative margin utilities
@each $direction, $property in $margin-directions {
  @each $size in $negative-margin-sizes {
    .m#{$direction}-n#{$size} { 
      #{$property}: calc(-1 * var(--space-#{$size})) !important; 
    }
  }
}