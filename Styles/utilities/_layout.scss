@use '../abstracts' as *;
@use 'sass:math';
@use 'sass:map';
@use 'sass:string';


.header {
  &-toggle {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--space-2);
    background: none;
    border: none;
    cursor: pointer;
    transition: all var(--duration-normal) var(--ease-out);
    
    &:hover {
      background: var(--color-surface-hover);
    }
  }
  
  &-title-group {
    display: flex;
    flex-direction: column;
    gap: var(--space-0-5);
  }
  
  &-title {
    font-size: var(--text-lg);
    font-weight: var(--font-semibold);
    color: var(--color-text);
    margin: 0;
  }
  
  &-subtitle {
    font-size: var(--text-sm);
    color: var(--color-text-muted);
    margin: 0;
  }
  
  &-action {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    margin-left: auto;
  }
}

.sidebar {
  &-logo {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    padding: var(--space-4);
    text-decoration: none;
    color: var(--color-text);
    
    &:hover {
      color: var(--color-primary);
    }
  }
  
  &-brand {
    display: flex;
    align-items: center;
    gap: var(--space-3);
    padding: var(--space-4) var(--space-4) var(--space-6);
    border-bottom: 1px solid var(--color-border);
  }
  
  &-nav {
    flex: 1;
    overflow-y: auto;
    padding: var(--space-2) 0;
  }
  
  &-footer {
    padding: var(--space-4);
    border-top: 1px solid var(--color-border);
    margin-top: auto;
  }
}

$aspect-ratios: (
  auto: auto,
  square: 1,
  video: math.div(16, 9),
  golden: 1.618,
  golden-vertical: math.div(1, 1.618)
);

@for $i from 1 through 16 {
  $aspect-ratios: map.merge($aspect-ratios, (#{$i}: $i));
}

$fractional-ratios: (
  '1-2': math.div(1, 2),
  '1-3': math.div(1, 3),
  '1-4': math.div(1, 4),
  '1-5': math.div(1, 5),
  '1-6': math.div(1, 6),
  '2-3': math.div(2, 3),
  '3-2': math.div(3, 2),
  '3-4': math.div(3, 4),
  '3-5': math.div(3, 5),
  '4-3': math.div(4, 3),
  '4-5': math.div(4, 5),
  '5-3': math.div(5, 3),
  '5-4': math.div(5, 4),
  '9-16': math.div(9, 16),
  '9-21': math.div(9, 21),
  '16-9': math.div(16, 9),
  '16-10': math.div(16, 10),
  '21-9': math.div(21, 9)
);

@each $name, $ratio in $aspect-ratios {
  .aspect-#{$name} { aspect-ratio: #{$ratio}; }
}

@each $name, $ratio in $fractional-ratios {
  .aspect-#{$name} { aspect-ratio: #{$ratio}; }
}

.aspect-container {
  position: relative;
  width: 100%;
  
  &::before {
    content: "";
    display: block;
    padding-bottom: 56.25%;
  }
  
  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
  
  &.aspect-container-square::before {
    padding-bottom: 100%;
  }
  
  &.aspect-container-4\/3::before {
    padding-bottom: 75%;
  }
  
  &.aspect-container-3\/2::before {
    padding-bottom: 66.666%;
  }
  
  &.aspect-container-16\/10::before {
    padding-bottom: 62.5%;
  }
  
  &.aspect-container-21\/9::before {
    padding-bottom: 42.857%;
  }
}

$column-counts: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, auto);

@each $count in $column-counts {
  .columns-#{$count} { columns: #{$count}; }
}

$column-gaps: (
  0: 0,
  1: var(--space-1),
  2: var(--space-2),
  3: var(--space-3),
  4: var(--space-4),
  5: var(--space-5),
  6: var(--space-6),
  8: var(--space-8),
  10: var(--space-10),
  12: var(--space-12),
  16: var(--space-16),
  20: var(--space-20),
  24: var(--space-24)
);

@each $name, $gap in $column-gaps {
  .column-gap-#{$name} { column-gap: #{$gap}; }
}

.masonry {
  column-count: 1;
  column-gap: var(--space-4);
  
  @include responsive-min(md) {
    column-count: 2;
  }
  
  @include responsive-min(lg) {
    column-count: 3;
  }
  
  > * {
    break-inside: avoid;
    margin-bottom: var(--space-4);
  }
}

.newspaper {
  columns: 1;
  column-gap: var(--space-4);
  column-rule: 1px solid var(--color-border);
  text-align: justify;
  
  @include responsive-min(md) {
    columns: 2;
    column-gap: var(--space-4);
  }
  
  @include responsive-min(lg) {
    columns: 3;
    column-gap: var(--space-6);
  }
  
  p:first-child::first-letter {
    font-size: var(--text-3xl);
    font-weight: 700;
    float: left;
    line-height: 1;
    margin-right: var(--space-2);
  }
}

.card-columns {
  column-count: 1;
  column-gap: var(--space-4);
  orphans: 1;
  widows: 1;
  
  @include responsive-min(md) {
    column-count: 2;
  }
  
  @include responsive-min(xl) {
    column-count: 3;
  }
  
  > .card {
    display: inline-block;
    width: 100%;
    margin-bottom: var(--space-4);
  }
}


.section {
  margin-bottom: var(--space-6);

  @include responsive-max(md) {
    margin-bottom: var(--space-4);
  }

  &-header {
    margin-bottom: var(--space-4);
    
    @include responsive-max(md) {
      margin-bottom: var(--space-3);
    }
  }
}

.info-header {
  display: flex;
  align-items: center;
  gap: var(--space-4);
  margin-bottom: var(--space-6);
  padding-bottom: var(--space-6);
  border-bottom: var(--border-1) solid var(--color-border);
}


.info-item {
  display: flex;
  align-items: center;
  gap: var(--space-3);
  margin-bottom: var(--space-4);
  
  &:last-child {
    margin-bottom: 0;
  }
}

.meta-info {
  display: flex;
  align-items: center;
  gap: var(--space-2);
  font-size: var(--text-xs);
  color: var(--color-text-subtle);
  flex-direction: column;
  
  @include responsive-min(md) {
    flex-direction: row;
  }
}

.action-bar {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: var(--space-3);
  padding-top: var(--space-4);
  border-top: var(--border-1) solid var(--color-border);
  margin-top: auto;
  flex-direction: column;
  
  @include responsive-min(md) {
    flex-direction: row;
    gap: var(--space-4);
  }
}

.header-actions {
  display: flex;
  align-items: center;
  gap: var(--space-2);
  flex-shrink: 0;
}


.container {
  @include container;
}

$container-sizes: (
  sm: var(--breakpoint-sm),
  md: var(--breakpoint-md),
  lg: var(--breakpoint-lg),
  xl: var(--breakpoint-xl),
  2xl: var(--breakpoint-2xl),
  full: 100%,
  prose: 65ch
);

@each $name, $size in $container-sizes {
  .container-#{$name} { max-width: #{$size}; }
}

$container-paddings: (
  0: 0,
  2: var(--space-2),
  4: var(--space-4),
  6: var(--space-6),
  8: var(--space-8),
  10: var(--space-10),
  12: var(--space-12)
);

@each $name, $padding in $container-paddings {
  .container-px-#{$name} {
    padding-left: #{$padding};
    padding-right: #{$padding};
  }
}

.container-fluid {
  @include container(100%);
}

.section-container {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  padding: var(--space-16) var(--space-4);
  
  @include responsive-min(md) {
    padding: var(--space-20) var(--space-6);
  }
  
  @include responsive-min(lg) {
    padding: var(--space-24) var(--space-8);
  }
}

.article-container {
  width: 100%;
  max-width: 65ch;
  margin-right: auto;
  margin-left: auto;
  padding-right: var(--space-4);
  padding-left: var(--space-4);
  line-height: var(--line-height-relaxed);
  
  @include responsive-min(md) {
    padding-right: var(--space-6);
    padding-left: var(--space-6);
  }
}

.app-container {
  width: 100%;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

.main-container {
  flex: 1;
  width: 100%;
  max-width: 100%;
  padding: var(--space-4);
  
  @include responsive-min(md) {
    padding: var(--space-6);
  }
  
  @include responsive-min(lg) {
    padding: var(--space-8);
  }
  
  &.with-sidebar {
    @include responsive-min(lg) {
      margin-left: var(--sidebar-width);
    }
  }
}

.modal-container {
  width: 100%;
  max-width: var(--modal-width-md);
  margin: var(--space-4);
  
  &.modal-sm {
    max-width: var(--modal-width-sm);
  }
  
  &.modal-lg {
    max-width: var(--modal-width-lg);
  }
  
  &.modal-xl {
    max-width: var(--modal-width-xl);
  }
  
  &.modal-full {
    max-width: calc(100vw - var(--space-8));
    max-height: calc(100vh - var(--space-8));
  }
}

.container-bleed {
  margin-left: calc(var(--space-4) * -1);
  margin-right: calc(var(--space-4) * -1);
  padding-left: var(--space-4);
  padding-right: var(--space-4);
  
  @include responsive-min(md) {
    margin-left: calc(var(--space-6) * -1);
    margin-right: calc(var(--space-6) * -1);
    padding-left: var(--space-6);
    padding-right: var(--space-6);
  }
}

.page-content {
  width: 100%;
  max-width: 100%;
  margin: 0 auto;
  padding: var(--space-6) var(--space-4);
  
  &-constrained {
    max-width: 1200px;
  }
  
  &-wide {
    max-width: 1400px;
  }
  
  &-full {
    max-width: 100%;
  }
  
  &-centered {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  @include responsive-min(md) {
    padding: var(--space-8) var(--space-6);
  }
}

.max-w-95vw { max-width: 95vw; }
.max-h-90vh { max-height: 90vh; }
.max-h-95vh { max-height: 95vh; }

@each $name, $size in $container-sizes {
  @if $name != full and $name != prose {
    .max-w-screen-#{$name} { max-width: #{$size}; }
  }
}

$auto-margins: (
  mx: (margin-left: auto, margin-right: auto),
  my: (margin-top: auto, margin-bottom: auto),
  ma: (margin: auto)
);

@each $name, $properties in $auto-margins {
  .#{$name}-auto {
    @each $property, $value in $properties {
      #{$property}: #{$value};
    }
  }
}


.form-group {
  @extend %form-group-base;
}

.form-row {
  @extend %form-row-base;
}

// Auto-fit grid utilities
.grid-auto-fit {
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
}

.grid-auto-fill {
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
}

// Grid with dropdown support - ensures dropdowns aren't clipped
.grid-dropdown-safe {
  // Allow child dropdowns to overflow the grid container
  overflow: visible;
  // Ensure stacking context for dropdowns
  position: relative;
  z-index: 1;
  
  // Child elements should maintain normal overflow
  > * {
    overflow: visible;
  }
  
  // Cards within dropdown-safe grids should allow overflow when dropdowns are open
  .card {
    &.has-open-dropdown {
      overflow: visible;
      z-index: 10;
    }
  }
}

// Universal grid overflow fixes for dropdown support
[class*="grid-cols"] {
  // Default: allow overflow for dropdowns
  &.overflow-safe {
    overflow: visible;
    position: relative;
    z-index: 1;
    
    > * {
      overflow: visible;
    }
  }
}

// Utility class to apply to grids containing dropdown components
.has-dropdowns {
  overflow: visible !important;
  position: relative;
  z-index: 1;
  
  // Ensure child cards can overflow when needed
  .card {
    &.has-open-dropdown,
    &:has(.choice-open) {
      overflow: visible;
      z-index: 10;
    }
  }
  
  // Ensure child elements don't clip dropdowns
  > * {
    overflow: visible;
  }
}

// Divider utility class
.divider {
  height: 1px;
  background-color: var(--color-border);
  border: none;
  margin: var(--space-2) 0;
  
  &.ma-1 {
    margin: var(--space-1);
  }
  
  &.ma-2 {
    margin: var(--space-2);
  }
  
  &.my-1 {
    margin-top: var(--space-1);
    margin-bottom: var(--space-1);
  }
  
  &.my-2 {
    margin-top: var(--space-2);
    margin-bottom: var(--space-2);
  }
}

