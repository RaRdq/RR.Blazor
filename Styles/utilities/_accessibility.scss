@use '../abstracts' as *;

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

.sr-only-focusable {
  &:focus,
  &:active {
    position: static;
    width: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    clip: auto;
    white-space: normal;
  }
}

.skip-link {
  @extend .sr-only-focusable !optional;
  position: absolute;
  top: var(--space-2);
  left: var(--space-2);
  z-index: var(--z-tooltip);
  padding: var(--space-2) var(--space-4);
  background: var(--color-surface-elevated);
  color: var(--color-primary);
  border-radius: var(--radius-md);
  box-shadow: var(--shadow-lg);
  text-decoration: none;
  font-weight: var(--font-semibold);
  
  &:focus {
    outline: var(--border-2) solid var(--color-primary);
    outline-offset: 2px;
  }
}

.focus-ring {
  &:focus {
    outline: var(--border-2) solid var(--color-primary);
    outline-offset: 2px;
  }
  
  &-inset:focus {
    outline-offset: -2px;
  }
  
  &-thick:focus {
    outline-width: 3px;
  }
  
  &-white:focus {
    outline-color: var(--color-surface);
  }
}

$button-focus-variants: (
  primary: var(--color-primary),
  danger: var(--color-error),
  success: var(--color-success),
  warning: var(--color-warning)
);

@each $variant, $color in $button-focus-variants {
  .focus\:ring-button-#{$variant}-focus:focus {
    outline: 2px solid #{$color};
    outline-offset: 2px;
  }
}

$focus-ring-sizes: (0: none, 1: 1px, 2: 2px, 3: 3px, 4: 4px);

.focus\:outline-none:focus { outline: none; }

@each $size, $value in $focus-ring-sizes {
  .focus\:ring-#{$size}:focus {
    @if $size == 0 {
      box-shadow: none;
    } @else {
      box-shadow: 0 0 0 #{$value} var(--color-primary);
    }
  }
}

.focus\:ring-offset-2:focus {
  box-shadow: 0 0 0 2px var(--color-surface-elevated), 0 0 0 4px var(--color-primary);
}

$focus-colors: (
  primary: var(--color-primary),
  success: var(--color-success),
  warning: var(--color-warning),
  error: var(--color-error)
);

@each $name, $color in $focus-colors {
  .focus\:ring-#{$name}:focus {
    box-shadow: 0 0 0 3px #{$color};
  }
}

$focus-backgrounds: (
  primary: var(--color-canvas),
  secondary: var(--color-surface),
  elevated: var(--color-surface-elevated),
  surface: var(--color-surface)
);

@each $name, $bg in $focus-backgrounds {
  .focus\:bg-#{$name}:focus { background-color: #{$bg}; }
}

$focus-borders: (
  primary: var(--color-primary),
  secondary: var(--color-border),
  error: var(--color-error),
  success: var(--color-success)
);

@each $name, $border in $focus-borders {
  .focus\:border-#{$name}:focus { border-color: #{$border}; }
}

.focus-within\:ring-2:focus-within {
  box-shadow: 0 0 0 2px var(--color-primary);
}

.focus-within\:border-primary:focus-within {
  border-color: var(--color-primary);
}

.focus-within\:shadow-lg:focus-within {
  box-shadow: var(--shadow-lg);
}

@media (prefers-contrast: high) {
  .high-contrast-border {
    border: var(--border-2) solid currentColor;
  }
  
  .high-contrast-outline {
    outline: var(--border-2) solid currentColor;
  }
  
  .high-contrast-text {
    color: CanvasText;
  }
  
  .high-contrast-bg {
    background-color: Canvas;
    color: CanvasText;
  }
}

@media (prefers-reduced-motion: reduce) {
  .motion-safe {
    animation: none;
    transition: none;
  }
  
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms;
    animation-iteration-count: 1;
    transition-duration: 0.01ms;
    scroll-behavior: auto;
  }
  
  .motion-safe\:animate-spin { animation: none; }
  .motion-safe\:animate-ping { animation: none; }
  .motion-safe\:animate-pulse { animation: none; }
  .motion-safe\:animate-bounce { animation: none; }
  
  .motion-reduce\:transition-none {
    transition-property: none;
  }
  
  .motion-reduce\:transform-none {
    transform: none;
  }
}

@media (prefers-reduced-motion: no-preference) {
  .motion-safe-transition {
    transition: var(--transition-normal);
  }
  
  .motion-safe-animate {
    animation-duration: var(--duration-slow);
  }
}

.aria-live-polite {
  position: absolute;
  left: -10000px;
  width: 1px;
  height: 1px;
  overflow: hidden;
}

.aria-live-assertive {
  @extend .aria-live-polite !optional;
}

.keyboard-only {
  &:focus {
    outline: var(--border-2) dashed var(--color-primary);
    outline-offset: 4px;
  }
}

.keyboard-navigation {
  .search-result-item:focus,
  .button:focus,
  .nav-item:focus {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }
}

button:focus-visible,
input:focus-visible,
select:focus-visible,
textarea:focus-visible,
a:focus-visible,
[tabindex]:focus-visible,
[role="button"]:focus-visible,
[role="link"]:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
  border-radius: var(--radius-sm, 4px);
}

.focus-visible-enhanced {
  &:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }
  
  button,
  [role="button"],
  a,
  input,
  select,
  textarea,
  [tabindex]:not([tabindex="-1"]),
  .btn,
  .nav-item,
  .dropdown-item,
  .card-clickable,
  .list-item,
  .tab-item {
    &:focus-visible {
      outline: 3px solid var(--color-primary) !important;
      outline-offset: 3px !important;
      border-radius: var(--radius-sm);
      box-shadow: 0 0 0 1px var(--color-surface-elevated), 0 0 0 5px var(--color-primary) !important;
    }
    
    &:focus:not(:focus-visible) {
      outline: none;
    }
  }
  
  [class*="r-button"],
  [class*="r-card"],
  [class*="r-chip"],
  [class*="r-badge"],
  [class*="r-nav"],
  [class*="r-dropdown"],
  [class*="r-checkbox"],
  [class*="r-radio"],
  [class*="r-toggle"],
  [class*="r-tabs"],
  [class*="r-modal"],
  [class*="r-action"] {
    &:focus-visible {
      outline: 3px solid var(--color-primary) !important;
      outline-offset: 3px !important;
      border-radius: var(--radius-sm);
      box-shadow: 0 0 0 1px var(--color-surface-elevated), 0 0 0 5px var(--color-primary) !important;
    }
  }
  
  input,
  select,
  textarea {
    &:focus-visible {
      outline: 3px solid var(--color-primary) !important;
      outline-offset: 2px !important;
      border-color: var(--color-primary) !important;
      box-shadow: 0 0 0 1px var(--color-surface-elevated), 0 0 0 4px var(--color-primary) !important;
    }
  }
  
  .btn-danger,
  .r-button-danger,
  [class*="danger"] {
    &:focus-visible {
      outline: 3px solid var(--color-error) !important;
      outline-offset: 3px !important;
      box-shadow: 0 0 0 1px var(--color-surface-elevated), 0 0 0 5px var(--color-error) !important;
    }
  }
  
  .btn-success,
  .r-button-success,
  [class*="success"] {
    &:focus-visible {
      outline: 3px solid var(--color-success) !important;
      outline-offset: 3px !important;
      box-shadow: 0 0 0 1px var(--color-surface-elevated), 0 0 0 5px var(--color-success) !important;
    }
  }
  
  .btn-warning,
  .r-button-warning,
  [class*="warning"] {
    &:focus-visible {
      outline: 3px solid var(--color-warning) !important;
      outline-offset: 3px !important;
      box-shadow: 0 0 0 1px var(--color-surface-elevated), 0 0 0 5px var(--color-warning) !important;
    }
  }
  
  .skip-link:focus-visible {
    outline: 4px solid var(--color-primary) !important;
    outline-offset: 4px !important;
    box-shadow: 0 0 0 2px var(--color-surface-elevated), 0 0 0 8px var(--color-primary) !important;
  }
  
  .modal,
  .dialog,
  [role="dialog"],
  [role="alertdialog"] {
    &:focus-visible {
      outline: 3px solid var(--color-primary) !important;
      outline-offset: 0 !important;
      box-shadow: inset 0 0 0 3px var(--color-primary) !important;
    }
  }
  
  .nav-item,
  .navigation-item,
  .menu-item {
    &:focus-visible {
      outline: 3px solid var(--color-primary) !important;
      outline-offset: 2px !important;
      background-color: var(--color-surface-elevated) !important;
      box-shadow: 0 0 0 1px var(--color-surface-elevated), 0 0 0 4px var(--color-primary) !important;
    }
  }
}

// Touch Target Sizing (WCAG 2.1 AA - 44x44px minimum)
button.touch-target,
a.touch-target,
[role="button"].touch-target,
.btn.touch-target,
input[type="button"].touch-target,
input[type="submit"].touch-target,
input[type="reset"].touch-target {
  position: relative !important;
  min-height: 44px !important;
  min-width: 44px !important;
  padding: var(--space-2) var(--space-3);
  cursor: pointer !important;
  
  &:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }
  
  &::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: max(100%, 44px);
    height: max(100%, 44px);
    pointer-events: none;
  }
  
  & > * {
    min-height: initial;
  }
  
  &-lg {
    min-height: 48px;
    min-width: 48px;
    padding: var(--space-3) var(--space-4);
    
    &:focus-visible {
      outline: 2px solid var(--color-primary);
      outline-offset: 2px;
    }
    
    &::before {
      width: max(100%, 48px);
      height: max(100%, 48px);
    }
    
      & > * {
      min-height: initial;
    }
  }
}

button.touch-friendly,
a.touch-friendly,
[role="button"].touch-friendly,
.btn.touch-friendly,
input[type="button"].touch-friendly,
input[type="submit"].touch-friendly,
input[type="reset"].touch-friendly {
  padding: var(--space-3) var(--space-4);
  cursor: pointer !important;
  
  min-height: 44px !important;
  min-width: 44px !important;
  display: flex !important;
  align-items: center;
  justify-content: center;
  
  &:focus-visible {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
  }
  
  & > * {
    min-height: initial;
  }
}

$touch-actions: (
  none: none,
  auto: auto,
  pan-x: pan-x,
  pan-y: pan-y,
  pan-left: pan-left,
  pan-right: pan-right,
  pan-up: pan-up,
  pan-down: pan-down,
  pinch-zoom: pinch-zoom,
  manipulation: manipulation
);

@each $name, $action in $touch-actions {
  .touch-#{$name} { touch-action: #{$action}; }
}

.contrast-high {
  color: var(--color-text);
  background-color: var(--color-surface-elevated);
}

.contrast-low {
  opacity: 0.9;
}

.readable {
  line-height: var(--leading-relaxed);
  letter-spacing: 0.015em;
  font-size: max(var(--text-base), 16px);
}

.focus-trap {
  position: relative;
  
  &:focus-within {
    box-shadow: 0 0 0 var(--space-1) var(--color-primary);
  }
}

[role="status"],
[role="alert"] {
  &:empty {
    display: none;
  }
}

.icon-button-label {
  @extend .sr-only !optional;
}

[data-high-contrast="true"] {
  --color-text: var(--theme-text);
  --color-text-muted: var(--theme-text-muted);
  --color-text-subtle: var(--theme-text-subtle);
  --color-canvas: var(--theme-canvas);
  --color-surface: var(--theme-surface);
  --color-surface-elevated: var(--theme-surface-elevated);
  --color-border: var(--theme-border);
  --color-primary: var(--theme-primary);
  --color-primary-hover: var(--theme-primary-hover);
  --color-error: var(--theme-error);
  --color-success: var(--theme-success);
  --color-warning: var(--theme-warning);
  
  --shadow-sm: 0 0 0 1px var(--theme-border);
  --shadow-md: 0 0 0 2px var(--theme-border);
  --shadow-lg: 0 0 0 3px var(--theme-border);
  
  * {
    border-color: currentColor;
  }
}

@media (prefers-color-scheme: dark) {
  [data-high-contrast="true"] {
    --color-text: var(--theme-text);
    --color-text-muted: var(--theme-text-muted);
    --color-text-subtle: var(--theme-text-subtle);
    --color-canvas: var(--theme-canvas);
    --color-surface: var(--theme-surface);
    --color-surface-elevated: var(--theme-surface-elevated);
    --color-border: var(--theme-text);
    --color-primary: var(--theme-primary);
    --color-primary-hover: var(--theme-primary-hover);
    --color-error: var(--theme-error);
    --color-success: var(--theme-success);
    --color-warning: var(--theme-warning);
  }
}