@use '../abstracts' as *;

// ============================================================================  
// CORE LAYOUT PATTERNS - Framework agnostic layout utilities
// ============================================================================
// Generic layout patterns that teams can use without app-shell dependency

// Split layout - two column responsive layout
.layout-split {
  display: grid;
  grid-template-columns: 1fr 320px;
  gap: var(--space-6);
  
  &-reverse {
    grid-template-columns: 320px 1fr;
  }
  
  &-equal {
    grid-template-columns: 1fr 1fr;
  }
  
  @include responsive-max(lg) {
    grid-template-columns: 1fr;
    gap: var(--space-4);
  }
}

// Masonry grid - auto-fit grid layout  
.layout-masonry {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: var(--space-4);
  align-items: start;
  
  &-sm { grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); }
  &-lg { grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); }
  
  @include responsive-max(md) {
    grid-template-columns: 1fr;
    gap: var(--space-3);
  }
}

// List grid - responsive card grids
.layout-grid {
  display: grid;
  gap: var(--space-4);
  
  &-auto { grid-template-columns: repeat(auto-fill, minmax(20rem, 1fr)); }
  &-2 { grid-template-columns: repeat(2, 1fr); }
  &-3 { grid-template-columns: repeat(3, 1fr); }
  &-4 { grid-template-columns: repeat(4, 1fr); }
  
  @include responsive-max(lg) {
    &-4 { grid-template-columns: repeat(2, 1fr); }
    &-3 { grid-template-columns: repeat(2, 1fr); }
  }
  
  @include responsive-max(md) {
    &-4, &-3, &-2 { grid-template-columns: 1fr; }
  }
}

// Focus container - layout containment for performance
.layout-focus {
  contain: layout;
  
  &:focus-within {
    contain: none; // Allow focus ring to show properly
  }
}