@use '../abstracts' as *;
@use 'sass:map';

// ===== UNIFIED LAYOUT SYSTEM =====
// Consolidated flex and grid utilities with consistent responsive patterns
// Mobile-first approach with standard breakpoints (sm, md, lg, xl)

// Core flex direction utilities
$flex-directions: (
  'row': row,
  'col': column,
  'row-reverse': row-reverse,
  'col-reverse': column-reverse
);

@each $name, $value in $flex-directions {
  .flex-#{$name} {
    flex-direction: #{$value} !important;
  }
}

// Flex wrap utilities
$flex-wrap-values: (
  'wrap': wrap,
  'nowrap': nowrap,
  'wrap-reverse': wrap-reverse
);

@each $name, $value in $flex-wrap-values {
  .flex-#{$name} {
    flex-wrap: #{$value} !important;
  }
}

// ===== UNIFIED ALIGNMENT SYSTEM =====
// Single source for all alignment utilities

$justify-values: (
  'start': flex-start,
  'center': center,
  'end': flex-end,
  'between': space-between,
  'around': space-around,
  'evenly': space-evenly
);

@each $name, $value in $justify-values {
  .justify-#{$name} {
    justify-content: #{$value} !important;
  }
}

$align-items-values: (
  'start': flex-start,
  'center': center,
  'end': flex-end,
  'baseline': baseline,
  'stretch': stretch
);

@each $name, $value in $align-items-values {
  .items-#{$name} {
    align-items: #{$value} !important;
  }
}

$align-content-values: (
  'normal': normal,
  'start': flex-start,
  'center': center,
  'end': flex-end,
  'between': space-between,
  'around': space-around,
  'evenly': space-evenly,
  'baseline': baseline,
  'stretch': stretch
);

@each $name, $value in $align-content-values {
  .content-#{$name} {
    align-content: #{$value} !important;
  }
}

$align-self-values: (
  'auto': auto,
  'start': flex-start,
  'center': center,
  'end': flex-end,
  'stretch': stretch,
  'baseline': baseline
);

@each $name, $value in $align-self-values {
  .self-#{$name} {
    align-self: #{$value} !important;
  }
}

// ===== FLEX SIZING UTILITIES =====

$flex-values: (
  '1': 1,
  'auto': 1 1 auto,
  'initial': 0 1 auto,
  'none': none
);

@each $name, $value in $flex-values {
  .flex-#{$name} {
    flex: #{$value} !important;
  }
}

.grow {
  flex-grow: 1 !important;
}

.grow-0 {
  flex-grow: 0 !important;
}

.shrink {
  flex-shrink: 1 !important;
}

.shrink-0 {
  flex-shrink: 0 !important;
}

$basis-values: (
  '0': 0,
  'auto': auto,
  'full': 100%,
  '200': 12.5rem
);

@each $name, $value in $basis-values {
  .basis-#{$name} {
    flex-basis: #{$value} !important;
  }
}

// ===== FLEX COMPOSITE PATTERNS =====

$flex-patterns: (
  'center': (items: center, justify: center),
  'between': (items: center, justify: space-between),
  'start': (items: center, justify: flex-start),
  'end': (items: center, justify: flex-end)
);

@each $name, $config in $flex-patterns {
  .flex-#{$name} {
    display: flex !important;
    align-items: #{map.get($config, items)} !important;
    justify-content: #{map.get($config, justify)} !important;
  }
}

.flex-between {
  @include responsive-max(md) {
    flex-direction: column;
    align-items: flex-start;
    gap: var(--space-2);
  }
}

// ===== UNIFIED RESPONSIVE SYSTEM =====
// Consistent mobile-first responsive utilities

@each $breakpoint in (sm, md, lg, xl) {
  @include responsive-min($breakpoint) {
    .#{$breakpoint}\:flex {
      display: flex !important;
    }
    
    @each $name, $value in $flex-directions {
      .#{$breakpoint}\:flex-#{$name} {
        flex-direction: #{$value} !important;
      }
    }
    
    @each $name, $value in $justify-values {
      .#{$breakpoint}\:justify-#{$name} {
        justify-content: #{$value} !important;
      }
    }
    
    @each $name, $value in $align-items-values {
      .#{$breakpoint}\:items-#{$name} {
        align-items: #{$value} !important;
      }
    }
    
    @each $name, $value in $align-content-values {
      .#{$breakpoint}\:content-#{$name} {
        align-content: #{$value} !important;
      }
    }
    
    @each $name, $value in $flex-values {
      .#{$breakpoint}\:flex-#{$name} {
        flex: #{$value} !important;
      }
    }
  }
}

