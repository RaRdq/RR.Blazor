// Choice Component - Clean CSS-only positioning
@use '../abstracts' as *;

// Mixin for compact choice styles (reusable across responsive contexts)
@mixin choice-compact-style() {
  width: auto;
  min-width: auto;
  
  .choice-trigger {
    padding: var(--space-2);
    min-width: var(--touch-target-min, 44px);
    min-height: var(--touch-target-min, 44px);
    border-radius: var(--radius-full);
    gap: 0;
    
    // Hide text content in compact mode
    .choice-text,
    .choice-label {
      display: none;
    }
    
    // Keep only avatar/icon visible
    .choice-avatar,
    .choice-icon,
    .material-symbols-rounded {
      display: flex;
      flex-shrink: 0;
    }
    
    // Remove chevron in compact mode
    &::after {
      display: none;
    }
  }
  
  // Dropdown content adjustments for compact mode
  .choice-viewport {
    min-width: 200px;
    width: auto;
    left: auto;
    right: 0;
    transform-origin: top right;
  }
  
  // Keep full content in dropdown items
  .choice-content .choice-item {
    .choice-text,
    .choice-label {
      display: block;
    }
  }
}

.choice {
  position: relative;
  width: 100%;
  
  // Header for grouped choices
  &-header {
    padding: var(--space-2) var(--space-3);
    font-size: var(--text-xs);
    font-weight: var(--font-semibold);
    color: var(--color-text-muted);
    text-transform: uppercase;
    letter-spacing: var(--tracking-wide);
    border-bottom: var(--border-1) solid var(--color-border);
    background: var(--color-surface);
    margin: 0 var(--space-1);
    margin-bottom: var(--space-1);
    border-radius: var(--radius-sm);
  }
  
  // Footer for choices
  &-footer {
    padding: var(--space-2) var(--space-3);
    font-size: var(--text-xs);
    color: var(--color-text-muted);
    border-top: var(--border-1) solid var(--color-border);
    background: var(--color-surface);
    margin: var(--space-1);
    margin-top: var(--space-1);
    border-radius: var(--radius-sm);
  }
  
  // Loading state
  &-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--space-4);
    color: var(--color-text-muted);
    font-size: var(--text-sm);
    
    &::before {
      content: '';
      width: 16px;
      height: 16px;
      margin-right: var(--space-2);
      border: 2px solid var(--color-border-light);
      border-top: 2px solid var(--color-primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }
  }
  
  // Auto width choice
  &-auto {
    width: auto;
    min-width: max-content;
  }
  
  // Inline choice layout
  &-inline {
    display: inline-flex;
    width: auto;
    
    .choice-item {
      flex: none;
      white-space: nowrap;
    }
  }
  
  // Compact variant for collapsed sidebar/mobile
  &-compact {
    @include choice-compact-style();
  }
  
  // Avatar-only variant (extreme compact)
  &-avatar-only {
    @extend .choice-compact;
    
    .choice-trigger {
      padding: var(--space-1);
      width: var(--touch-target-min, 44px);
      height: var(--touch-target-min, 44px);
      border-radius: var(--radius-full);
      
      // Only show avatar
      .choice-avatar {
        width: 100%;
        height: 100%;
        
        img {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
      }
    }
  }
  
  // Auto-responsive behavior in sidebar contexts
  .app-sidebar.collapsed &:not(.choice-force-full),
  .sidebar-collapsed &:not(.choice-force-full) {
    @include choice-compact-style();
  }
  
  // Container query based responsive behavior
  @container (max-width: 200px) {
    &:not(.choice-force-full) {
      @include choice-compact-style();
    }
  }
  
  @container (max-width: 100px) {
    &:not(.choice-force-full) {
      .choice-trigger {
        padding: var(--space-1);
        width: var(--touch-target-min, 44px);
        height: var(--touch-target-min, 44px);
        border-radius: var(--radius-full);
        
        .choice-avatar {
          width: 100%;
          height: 100%;
          
          img {
            width: 100%;
            height: 100%;
            object-fit: cover;
          }
        }
      }
    }
  }
  
  // Responsive behavior based on screen size
  @include responsive-max(md) {
    .app-sidebar &:not(.choice-force-full) {
      @include choice-compact-style();
    }
  }
  
  @include responsive-max(sm) {
    .app-sidebar &:not(.choice-force-full),
    .nav-menu &:not(.choice-force-full),
    .sidebar-footer &:not(.choice-force-full) {
      @include choice-compact-style();
    }
  }
  
  // Label for choices
  &-label {
    font-size: var(--text-sm);
    font-weight: var(--font-medium);
    color: var(--color-text);
    margin-bottom: var(--space-1);
    display: block;
  }
  
  // Checkmark indicator
  &-check {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 16px;
    height: 16px;
    border-radius: var(--radius-sm);
    background: var(--color-primary);
    color: var(--color-text-inverse);
    font-size: 12px;
    margin-left: auto;
    opacity: 0;
    transform: scale(0.8);
    transition: all var(--duration-fast);
    
    &::before {
      content: 'âœ“';
    }
    
    .choice-item-active & {
      opacity: 1;
      transform: scale(1);
    }
  }
  
  // Common item styling for all variants
  &-item {
    @include button-reset;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-2);
    padding: var(--space-2) var(--space-3);
    border-radius: var(--radius-md);
    background: var(--color-surface-elevated);
    border: var(--border-1) solid var(--color-border);
    color: var(--color-text-muted);
    font-size: var(--text-sm);
    font-weight: var(--font-medium);
    transition: var(--transition-normal);
    cursor: pointer;
    user-select: none;
    
    &:hover:not(&-disabled):not(&-loading) {
      background: var(--state-hover-bg);
      color: var(--color-text);
      border-color: var(--color-border);
      transform: translateY(-0.0625rem);
    }
    
    &:focus-visible {
      outline: none;
      outline-offset: var(--border-2);
    }
    
    &-active {
      background: var(--color-primary);
      color: var(--color-text-inverse);
      border-color: var(--color-primary);
      font-weight: var(--font-semibold);
      
      &:hover {
        background: var(--color-primary-hover);
        border-color: var(--color-primary-hover);
        transform: none;
      }
    }
    
    &-disabled {
      opacity: var(--opacity-disabled);
      cursor: not-allowed;
      pointer-events: none;
    }
    
    &-loading {
      cursor: wait;
      opacity: var(--opacity-loading);
    }
    
    // Semantic variants for choice items
    &-primary {
      background: var(--color-primary-light);
      color: var(--color-primary);
      border-color: var(--color-primary);
      
      &:hover {
        background: var(--color-primary);
        color: var(--color-text-inverse);
      }
      
      &-active {
        background: var(--color-primary);
        color: var(--color-text-inverse);
      }
    }
    
    &-success {
      background: var(--color-success-bg);
      color: var(--color-success);
      border-color: var(--color-success);
      
      &:hover {
        background: var(--color-success);
        color: var(--color-text-inverse);
      }
      
      &-active {
        background: var(--color-success);
        color: var(--color-text-inverse);
      }
    }
    
    &-warning {
      background: var(--color-warning-bg);
      color: var(--color-warning);
      border-color: var(--color-warning);
      
      &:hover {
        background: var(--color-warning);
        color: var(--color-text-inverse);
      }
      
      &-active {
        background: var(--color-warning);
        color: var(--color-text-inverse);
      }
    }
    
    &-error {
      background: var(--color-error-bg);
      color: var(--color-error);
      border-color: var(--color-error);
      
      &:hover {
        background: var(--color-error);
        color: var(--color-text-inverse);
      }
      
      &-active {
        background: var(--color-error);
        color: var(--color-text-inverse);
      }
    }
    
    &-info {
      background: var(--color-info-bg);
      color: var(--color-info);
      border-color: var(--color-info);
      
      &:hover {
        background: var(--color-info);
        color: var(--color-text-inverse);
      }
      
      &-active {
        background: var(--color-info);
        color: var(--color-text-inverse);
      }
    }
    
    &-ghost {
      background: transparent;
      color: var(--color-text-muted);
      border-color: var(--color-border);
      
      &:hover {
        background: var(--color-surface-elevated);
        color: var(--color-text);
        border-color: var(--color-primary);
      }
      
      &-active {
        background: var(--color-primary-light);
        color: var(--color-primary);
        border-color: var(--color-primary);
      }
    }
    
    &-neutral {
      background: var(--color-surface-elevated);
      color: var(--color-text);
      border-color: var(--color-border);
      
      &:hover {
        background: var(--color-surface);
        border-color: var(--color-primary);
      }
      
      &-active {
        background: var(--color-surface);
        border-color: var(--color-primary);
      }
    }
  }

  // Dropdown variant
  &-dropdown {
    position: relative;
    
    .choice-trigger {
      @include button-reset;
      display: flex;
      align-items: center;
      gap: var(--space-2);
      padding: var(--space-3);
      width: 100%;
      background: var(--color-surface-elevated);
      border: var(--border-1) solid var(--color-border);
      border-radius: var(--radius-lg);
      color: var(--color-text);
      font-size: var(--text-sm);
      font-weight: var(--font-medium);
      text-align: left;
      cursor: pointer;
      transition: all var(--duration-fast) var(--ease-out);
      
      // Chevron indicator - positioned as pseudo-element for smooth animation
      position: relative;
      padding-right: calc(var(--space-3) + var(--icon-base) + var(--space-2));
      
      &::after {
        content: '';
        position: absolute;
        right: var(--space-3);
        top: 50%;
        transform: translateY(-50%);
        width: var(--icon-base);
        height: var(--icon-base);
        background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%23666' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: center;
        background-size: contain;
        transition: transform var(--duration-fast) var(--ease-out);
      }
      
      &:hover:not(:disabled) {
        background: var(--color-surface-elevated);
        border-color: var(--color-primary);
        box-shadow: var(--shadow-md);
        transform: translateY(-1px);
      }
      
      &:focus-visible {
        outline: none;
        outline-offset: var(--border-1);
        border-color: var(--color-primary);
      }
      
      &:disabled {
        opacity: var(--opacity-disabled);
        cursor: not-allowed;
      }
      
      // Semantic variants for trigger
      &-primary {
        background: var(--color-primary-light);
        color: var(--color-primary);
        border-color: var(--color-primary);
        
        &:hover:not(:disabled) {
          background: var(--color-primary);
          color: var(--color-text-inverse);
        }
      }
      
      &-success {
        background: var(--color-success-bg);
        color: var(--color-success);
        border-color: var(--color-success);
        
        &:hover:not(:disabled) {
          background: var(--color-success);
          color: var(--color-text-inverse);
        }
      }
      
      &-warning {
        background: var(--color-warning-bg);
        color: var(--color-warning);
        border-color: var(--color-warning);
        
        &:hover:not(:disabled) {
          background: var(--color-warning);
          color: var(--color-text-inverse);
        }
      }
      
      &-error {
        background: var(--color-error-bg);
        color: var(--color-error);
        border-color: var(--color-error);
        
        &:hover:not(:disabled) {
          background: var(--color-error);
          color: var(--color-text-inverse);
        }
      }
      
      &-info {
        background: var(--color-info-bg);
        color: var(--color-info);
        border-color: var(--color-info);
        
        &:hover:not(:disabled) {
          background: var(--color-info);
          color: var(--color-text-inverse);
        }
      }
      
      &-ghost {
        background: transparent;
        color: var(--color-text-muted);
        border-color: var(--color-border);
        
        &:hover:not(:disabled) {
          background: var(--color-surface-elevated);
          color: var(--color-text);
          border-color: var(--color-primary);
        }
      }
      
      &-neutral {
        background: var(--color-surface-elevated);
        color: var(--color-text);
        border-color: var(--color-border);
        
        &:hover:not(:disabled) {
          background: var(--color-surface);
          border-color: var(--color-primary);
        }
      }
    }
    
    .choice-viewport {
      position: absolute;
      left: 0;
      right: 0;
      top: calc(100% + var(--space-1));
      z-index: var(--z-popup);
      visibility: hidden;
      opacity: 0;
      transform: translateY(-var(--space-2));
      transition: all var(--duration-fast) var(--ease-out);
      pointer-events: none;
      
      // Modal-aware layering - detect if inside modal context
      .modal &, 
      .modal-container &,
      .modal-content & {
        z-index: var(--z-modal-popup);
      }
      
      // Custom premium scrollbar
      &::-webkit-scrollbar {
        width: 6px;
      }
      
      &::-webkit-scrollbar-track {
        background: transparent;
      }
      
      &::-webkit-scrollbar-thumb {
        background: var(--color-border);
        border-radius: var(--radius-full);
        transition: background var(--duration-fast);
        
        &:hover {
          background: var(--color-primary-light);
        }
      }
      
      // Firefox scrollbar
      scrollbar-width: thin;
      scrollbar-color: var(--color-border) transparent;
    }
    
    // Standard choice-content styling (non-card positioning)
    .choice-content {
      background: var(--color-surface-elevated);
      border: var(--border-1) solid var(--color-border);
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-xl);
      backdrop-filter: blur(var(--blur-md));
      width: 100%;
      max-height: min(320px, 50vh);
      overflow-y: auto;
      padding: var(--space-1) 0;
      
      // Premium scrollbar
      &::-webkit-scrollbar {
        width: 6px;
      }
      
      &::-webkit-scrollbar-track {
        background: var(--color-surface);
        border-radius: var(--radius-sm);
        margin: var(--space-2) 0;
      }
      
      &::-webkit-scrollbar-thumb {
        background: var(--color-border);
        border-radius: var(--radius-full);
        transition: all var(--duration-fast);
        
        &:hover {
          background: var(--color-primary);
          transform: scaleY(1.1);
        }
      }
      
      // Firefox scrollbar
      scrollbar-width: thin;
      scrollbar-color: var(--color-border) var(--color-surface);
      
      .choice-item {
        border: none;
        background: transparent;
        margin: 0 var(--space-1);
        justify-content: flex-start;
        text-align: left;
        padding: var(--space-3) var(--space-3);
        font-size: var(--text-sm);
        font-weight: var(--font-medium);
        color: var(--color-text);
        transition: all var(--duration-fast) var(--ease-out);
        cursor: pointer;
        border-radius: var(--radius-sm);
        position: relative;
        
        // Add subtle border for better definition
        &::after {
          content: '';
          position: absolute;
          bottom: 0;
          left: var(--space-3);
          right: var(--space-3);
          height: 1px;
          background: var(--color-border);
          opacity: 0.3;
          transition: opacity var(--duration-fast);
        }
        
        &:last-child::after {
          display: none;
        }
        
        &:hover {
          background: var(--color-primary-light);
          transform: translateX(2px);
          color: var(--color-text);
          margin: 0 var(--space-half);
          border-radius: var(--radius-md);
          
          &::after {
            opacity: 0;
          }
        }
        
        &:active {
          background: var(--color-primary-light);
          color: var(--color-primary);
          transform: scale(0.98) translateX(2px);
        }
        
        // Icon spacing
        .material-symbols-rounded {
          margin-right: var(--space-2);
          font-size: var(--icon-sm);
          color: var(--color-primary);
        }
      }
    }
    
    // Legacy contextual positioning - now handled by standardized z-index system
    // Position above when in sidebar footer or bottom area (context-preserved)
    .app-sidebar & {
      .shrink-0 &,
      [data-position="bottom"] & {
        .choice-viewport {
          top: auto;
          bottom: calc(100% + var(--space-1));
          transform: translateY(var(--space-2));
        }
        
        &.choice-open .choice-viewport {
          transform: translateY(0);
        }
      }
    }
    
    // Modern CSS-only positioning using CSS Anchor Positioning + Container Queries
    // Generic one-size-fits-all solution that works in any container context
    .choice-viewport {
      // Use CSS Anchor Positioning for automatic alignment
      position: absolute;
      // Anchor to the trigger button
      position-anchor: --choice-trigger;
      // Position below trigger with smart overflow handling
      top: calc(anchor(bottom) + var(--space-1));
      left: anchor(left);
      // Match trigger width, with min/max constraints
      width: max(anchor-size(width), 200px);
      min-width: 200px;
      max-width: min(400px, 90vw);
      // Smart positioning fallbacks using position-try
      position-try: 
        flip-block,  // Try above if no room below
        flip-inline, // Try right if no room on left
        flip-both;   // Try opposite corner as last resort
      // Use standardized popup z-index
      z-index: var(--z-popup);
      
      // Fallback for browsers without CSS Anchor support
      @supports not (anchor-name: --test) {
        // Use modern fixed positioning with container queries
        position: fixed;
        // Will be positioned relative to viewport edge using CSS transforms
        top: 0;
        left: 0;
        // Use CSS container queries to detect overflow constraints
        @container (max-width: 100vw) {
          // Auto-adjust for viewport bounds
          max-width: calc(100vw - 2rem);
        }
        @container (max-height: 100vh) {
          // Auto-adjust for viewport height
          max-height: calc(100vh - 4rem);
        }
      }
    }
    
    // Anchor name for the trigger button
    .choice-trigger {
      anchor-name: --choice-trigger;
    }
    
    // Backdrop for closing dropdown
    .choice-backdrop {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      z-index: var(--z-popup-backdrop);
      background: transparent;
      visibility: hidden;
      pointer-events: none;
      
      // Modal-aware backdrop layering
      .modal &, 
      .modal-container &,
      .modal-content & {
        z-index: calc(var(--z-modal-popup) - 10);
      }
    }
    
    // Show backdrop only when dropdown is open
    &.choice-open .choice-backdrop {
      visibility: visible;
      pointer-events: auto;
    }
    
    // Dynamic positioning system - optimized with mixins
    @mixin dropdown-position($direction, $offset: var(--space-1)) {
      @if $direction == 'up' {
        top: auto;
        bottom: 100%;
        margin-top: 0;
        margin-bottom: $offset;
        transform: translateY($offset) scale(0.95);
      } @else {
        top: 100%;
        bottom: auto;
        margin-top: $offset;
        margin-bottom: 0;
        transform: translateY(-#{$offset}) scale(0.95);
      }
    }
    
    @mixin dropdown-horizontal($align) {
      @if $align == 'start' {
        left: 0;
        right: auto;
        transform-origin: left top;
      } @else if $align == 'end' {
        left: auto;
        right: 0;
        transform-origin: right top;
      } @else {
        left: 50%;
        transform-origin: center top;
      }
    }
    
    // Apply positioning mixins
    &[data-position="up"] .choice-viewport,
    &.choice-auto-up .choice-viewport,
    &.choice-up .choice-viewport,
    &.choice-upstart .choice-viewport,
    &.choice-upend .choice-viewport {
      @include dropdown-position('up');
    }
    
    &[data-position="down"] .choice-viewport,
    &.choice-auto-down .choice-viewport,
    &.choice-down .choice-viewport,
    &.choice-downstart .choice-viewport,
    &.choice-downend .choice-viewport {
      @include dropdown-position('down');
    }
    
    // Horizontal alignment
    &.choice-upstart .choice-viewport,
    &.choice-downstart .choice-viewport {
      @include dropdown-horizontal('start');
    }
    
    &.choice-upend .choice-viewport,
    &.choice-downend .choice-viewport {
      @include dropdown-horizontal('end');
    }
    
    // Center alignment with compound transforms
    &.choice-up .choice-viewport {
      @include dropdown-horizontal('center');
      transform: translateX(-50%) translateY(var(--space-1)) scale(0.95);
    }
    
    &.choice-down .choice-viewport {
      @include dropdown-horizontal('center');
      transform: translateX(-50%) translateY(-var(--space-1)) scale(0.95);
    }
    
    // CSS-only auto positioning using modern CSS features
    &.choice-auto {
      .choice-viewport {
        // Default positioning (open downward)
        top: calc(100% + var(--space-1));
        bottom: auto;
        left: 0;
        right: 0;
        
        // Auto positioning using CSS anchor positioning and container queries
        // Open upward when in bottom third of viewport
        @container (block-size < 300px) {
          top: auto;
          bottom: calc(100% + var(--space-1));
        }
        
        // Fallback for browsers without container query support
        @supports not (container-type: size) {
          // Use viewport intersection observer via CSS
          @media screen and (max-height: 600px) {
            // For small viewports, prefer upward opening
            top: auto;
            bottom: calc(100% + var(--space-1));
          }
        }
      }
    }
    
    // Auto horizontal positioning - prevent edge clipping
    &.choice-auto,
    & {
      .choice-viewport {
        // Ensure dropdown doesn't overflow viewport horizontally
        max-width: min(100vw - 2rem, 320px);
        
        // Auto-adjust for right edge
        @media screen and (max-width: 480px) {
          left: auto;
          right: 0;
          transform-origin: top right;
        }
      }
      
      // For dropdowns near right edge of viewport
      &:has(.choice-trigger:nth-last-child(-n+2)) {
        .choice-viewport {
          left: auto;
          right: 0;
          transform-origin: top right;
        }
      }
    }
    
    // Content styling
    .choice-content {
      background: var(--color-surface-elevated);
      border: var(--border-1) solid var(--color-border);
      border-radius: var(--radius-lg);
      box-shadow: var(--shadow-lg);
      backdrop-filter: blur(var(--blur-md));
      min-width: 100%;
      max-height: min(300px, 50vh);
      overflow-y: auto;
      padding: var(--space-1) 0;
      
      .choice-item {
        border: none;
        border-radius: 0;
        background: transparent;
        margin: 0;
        justify-content: flex-start;
        text-align: left;
        padding: var(--space-2) var(--space-3);
        
        &:hover {
          background: var(--state-hover-bg);
          transform: none;
        }
        
        &:first-child {
          border-top-left-radius: var(--radius-lg);
          border-top-right-radius: var(--radius-lg);
        }
        
        &:last-child {
          border-bottom-left-radius: var(--radius-lg);
          border-bottom-right-radius: var(--radius-lg);
        }
      }
    }
    
    // Open state
    &.choice-open {
      .choice-trigger {
        border-color: var(--color-primary);
        box-shadow: var(--shadow-sm);
        
        &::after {
          transform: translateY(-50%) rotate(180deg);
        }
      }
      
      .choice-backdrop {
        visibility: visible;
        pointer-events: auto;
      }
      
      .choice-viewport {
        visibility: visible;
        opacity: 1;
        pointer-events: auto;
        transform: translateY(0);
      }
      
      // Upward opening animation
      &[data-position="up"] .choice-viewport,
      &.choice-auto-up .choice-viewport {
        transform: translateY(0);
      }
    }
    
  }

  // Switcher variant
  &-switcher {
    display: flex;
    background: var(--color-surface);
    border: var(--border-1) solid var(--color-border);
    border-radius: var(--radius-lg);
    padding: var(--space-1);
    gap: var(--space-1);
    
    .choice-item {
      flex: 1;
      border: none;
      background: transparent;
      
      &-active {
        background: var(--color-surface-elevated);
        box-shadow: var(--shadow-sm);
      }
    }
  }
}

// Animation keyframes
@keyframes dropdownSlideIn {
  from {
    opacity: 0;
    transform: translateY(-var(--space-2));
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}