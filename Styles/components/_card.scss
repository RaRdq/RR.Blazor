
@use '../abstracts' as *;

%card-base {
  display: flex;
  flex-direction: column;
  height: 100%; // Take full height of container
  background: var(--color-surface-elevated);
  border: 1px solid var(--color-border);
  position: relative;
  overflow: hidden;
  transition: all var(--duration-normal) var(--ease-out);
  @include φ-sizes(padding, var(--space-3));
  @include φ-sizes(margin, var(--space-1));
  @include φ-radius(var(--radius-lg));
  @include φ-elevation(var(--shadow-md));
}

.card {
  @extend %card-base;
  
  &-outlined {
    background: transparent;
    border-style: solid;
    @include φ-elevation(none);
  }
  
  &-elevated { @include φ-elevation(var(--shadow-xl)); }
  &-floating { @include φ-elevation(var(--shadow-2xl)); }
  &-flat { 
    border: none;
    @include φ-elevation(none);
  }
  
  &-glass { @include semantic-glass(primary); }
  
  &-gradient {
    background: var(--gradient-primary);
    color: var(--color-text-inverse);
    border-color: transparent;
    
    .card-title {
      color: var(--color-text-inverse);
    }
    
    .card-body {
      color: var(--color-text-inverse);
    }
  }
  
  &-glass-gradient {
    @include glass-gradient(primary, medium);
  }
  
  // Generate glass-gradient variants for all semantic colors
  &-glass-gradient-success {
    @include glass-gradient(success, medium);
  }
  
  &-glass-gradient-warning {
    @include glass-gradient(warning, medium);
  }
  
  &-glass-gradient-error {
    @include glass-gradient(error, medium);
  }
  
  &-glass-gradient-info {
    @include glass-gradient(info, medium);
  }
  
  &-clickable,
  &-interactive {
    @include interactive-base(card);
    @include interactive-touch(card, true);
    @include interactive-a11y(card);
    
    button, input, select, textarea, a, [role="button"] {
      pointer-events: auto;
    }
  }
  
  &-background {
    pointer-events: none;
    
    * { pointer-events: auto; }
    
    &:hover {
      transform: none;
      box-shadow: var(--shadow-md);
      filter: none;
    }
  }
  
  &-urgent {
    animation: pulse var(--duration-slow) infinite alternate;
    border-color: var(--color-warning);
  }
  
  @include semantic-variants((primary, success, warning, error, info), (outlined, ghost));
  
  &-primary,
  &-success,
  &-warning,
  &-error,
  &-info {
    border-left-width: var(--space-1);
    
    &.card-outlined {
      border-left-width: 1px;
    }
  }
  
  &-ghost {
    background: transparent;
    border-style: dashed;
    border-width: calc(var(--border-1) * 1.618);
    @include φ-elevation(none);
    
    &:hover {
      background: var(--color-surface-elevated);
      border-style: solid;
    }
  }
  
  &-neutral {
    background: var(--color-surface);
    border-color: var(--color-border);
  }
  
  .notification-count {
    @include badge-position-top-right(-6px);
    @extend .badge !optional;
    @extend .badge-error !optional;
    @extend .badge-compact !optional;
    min-width: 16px;
    z-index: 1;
  }
  
  &-tag {
    font-size: var(--text-2xs);
    font-weight: 500;
    padding: var(--space-0-5) var(--space-1-5);
    background: var(--color-primary-light);
    color: var(--color-primary);
    border-radius: var(--radius-sm);
    white-space: nowrap;
    
    &-overflow {
      background: var(--color-primary-10);
      color: var(--color-primary);
    }
  }
  
  // Loading states - disable CSS spinner when component manages its own loading UI
  &-loading {
    // Position relative for custom loading overlay
    position: relative;
    
    // Hide CSS-based loading spinners to prevent double spinners
    // Component manages its own loading UI
    &::before,
    &::after {
      display: none;
    }
    
    // Ensure proper z-index stacking for custom overlay
    .loading-overlay {
      z-index: var(--z-loading, 10);
    }
  }
  
  &-loading-skeleton {
    @include loading-skeleton();
    
    & {
      height: 1.5em;
    }
    
    &-text { height: 1rem; }
    &-title { height: 2rem; width: 50%; }
    &-button { height: 2.5rem; width: 6rem; }
  }
  
  // Stats card icon and value styling
  .rounded-lg[style*="--icon-size"] {
    width: var(--icon-size);
    height: var(--icon-size);
    background: var(--icon-color);
    
    @include icon-context-display;
    
    .material-symbols-rounded,
    i {
      color: var(--color-text-inverse);
      font-size: var(--icon-font-size);
    }
  }
  
  span[style*="--value-color"] {
    color: var(--value-color);
  }
  
  // Notification card variants
  &-notification {
    display: flex;
    gap: var(--space-4);
    
    &-unread {
      border-left: 4px solid var(--color-primary);
    }
    
    &-icon {
      width: 2.5rem;
      height: 2.5rem;
      border-radius: var(--radius-full);
      display: flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
      background: var(--color-surface);
    }
    
    &-content {
      flex: 1;
      min-width: 0;
    }
    
    &-title {
      font-size: var(--text-sm);
      font-weight: var(--font-semibold);
      color: var(--color-text);
      margin-bottom: var(--space-1);
    }
    
    &-message {
      font-size: var(--text-sm);
      color: var(--color-text-muted);
      margin-bottom: var(--space-2);
    }
    
    &-time {
      font-size: var(--text-xs);
      color: var(--color-text-subtle);
    }
    
    &-actions {
      display: flex;
      gap: var(--space-2);
      margin-top: var(--space-3);
    }
  }
  
  // Card layout patterns (moved from utilities/_layout.scss)
  &-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: var(--space-4);
    
    @include responsive-max(md) {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--space-2);
    }
    
    // RHeaderCard specific styling
    .header-card-body {
      display: flex;
      flex-direction: column;
      gap: var(--space-3);
      width: 100%;
      
      // Alignment classes
      &.align-start {
        align-items: flex-start;
        text-align: left;
      }
      
      &.align-center {
        align-items: center;
        text-align: center;
      }
      
      &.align-end {
        align-items: flex-end;
        text-align: right;
      }
      
      // Icon position layouts
      &.icon-top,
      &.icon-bottom {
        align-items: inherit; // Inherit from alignment
      }
    }
    
    .header-content-wrapper {
      display: flex;
      align-items: center;
      width: 100%;
      
      &:not(.d-flex) {
        flex-direction: column;
        text-align: inherit;
      }
    }
    
    .header-text-container {
      flex: 1;
      min-width: 0; // Prevent text overflow
    }
    
    .header-title {
      margin: 0 0 var(--space-1) 0;
      font-size: var(--text-2xl);
      font-weight: var(--font-bold);
      line-height: var(--leading-tight);
      color: inherit;
    }
    
    .header-description {
      margin: 0;
      font-size: var(--text-base);
      line-height: var(--leading-normal);
      opacity: 0.8;
    }
    
    .header-card-icon {
      flex-shrink: 0;
      color: inherit;
      opacity: 0.9;
    }
    
    .header-child-content {
      width: 100%;
    }
  }
  
  &-title {
    font-size: var(--text-lg);
    font-weight: var(--font-semibold);
    color: var(--color-text);
    margin: 0;
    line-height: var(--leading-tight);
  }
  
  &-body {
    flex: 1;
    display: flex;
    flex-direction: column;
  }
  
  &-actions {
    display: flex;
    gap: var(--space-3);
    margin-top: auto;
    padding-top: var(--space-4);
    border-top: var(--border-1) solid var(--color-border);
    
    &-center {
      justify-content: center;
    }
    
    &-end {
      justify-content: flex-end;
    }
    
    &-between {
      justify-content: space-between;
    }
    
    &-vertical {
      flex-direction: column;
    }
    
    @include responsive-max(md) {
      flex-direction: column;
      
      &-center,
      &-end,
      &-between {
        justify-content: stretch;
      }
    }
  }
}
