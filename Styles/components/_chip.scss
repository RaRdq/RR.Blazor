@use '../abstracts' as *;

.chip {
  @extend %status-indicator-base;
  background: var(--color-surface-elevated);
  color: var(--color-text);
  border: var(--border-1) solid var(--color-border);

  display: inline-flex;
  align-items: center;
  justify-content: center;

  // Default Normal density
  font-size: var(--text-sm);
  padding: var(--space-2) var(--space-3);
  min-height: var(--space-6);
  gap: var(--space-1);
  @include φ-radius(var(--radius-full));

  // Density variations
  &-density {
    &-compact {
      @include chip-density('compact');
    }
    
    &-dense {
      @include chip-density('dense');
    }
    
    &-normal {
      @include chip-density('normal');
    }
    
    &-spacious {
      @include chip-density('spacious');
    }
  }

  &-small {
    padding: var(--space-1) var(--space-2);
    font-size: var(--text-xs);
    min-height: var(--space-5);

    .chip-icon {
      font-size: var(--icon-xs);
    }

    .chip-close {
      width: var(--space-3);
      height: var(--space-3);

      i {
        font-size: calc(var(--icon-xs) * 0.85);
      }
    }
  }

  &-large {
    padding: var(--space-2) var(--space-4);
    font-size: var(--text-base);
    min-height: var(--space-8);

    .chip-icon {
      font-size: var(--icon-base);
    }

    .chip-close {
      width: var(--space-5);
      height: var(--space-5);

      i {
        font-size: var(--icon-sm);
      }
    }
  }

&-badge {
    @extend %badge-base;
    text-transform: uppercase;
    letter-spacing: var(--tracking-wide);
    font-weight: var(--font-bold);
    @include φ-radius(var(--radius-full));
  }

  &-status {
    font-weight: var(--font-medium);
    text-transform: none;
    @include φ-radius(var(--radius-sm));
  }

  &-rounded {
    aspect-ratio: 1;
    padding: var(--space-1);
    min-width: var(--space-6);
    min-height: var(--space-6);
    @include φ-radius(var(--radius-full));
  }

  &-minimal {
    background: transparent;
    border: none;
    padding: 0;
    min-height: auto;
    gap: var(--space-0-5);
  }

  @include semantic-variants((primary, secondary, success, warning, error, info));

  &-active {
    background: var(--color-success);
    color: var(--color-text-inverse);
    border: none;

    &:hover {
      filter: brightness(0.9);
    }

    .chip-icon {
      color: var(--color-text-inverse);
    }
  }

  &-inactive {
    background: var(--color-error);
    color: var(--color-text-inverse);
    border: none;

    &:hover {
      filter: brightness(0.9);
    }

    .chip-icon {
      color: var(--color-text-inverse);
    }
  }

  &-leave, &-on-leave {
    background: var(--color-warning);
    color: var(--color-text-inverse);
    border: none;

    &:hover {
      filter: brightness(0.9);
    }

    .chip-icon {
      color: var(--color-text-inverse);
    }
  }

  &-pending {
    background: var(--color-surface-elevated);
    color: var(--color-text-muted);
    border: 1px solid var(--color-border);

    .chip-icon {
      color: var(--color-text-muted);
    }
  }

  &-processing {
    background: var(--color-info);
    color: var(--color-text-inverse);
    border: none;
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;

    .chip-icon {
      color: var(--color-text-inverse);
    }
  }

  &-success {
    background: var(--color-success);
    color: var(--color-text-inverse);
    border: none;

    &:hover {
      filter: brightness(0.9);
    }

    .chip-icon {
      color: var(--color-text-inverse);
    }
  }

&-compact {
    padding: var(--space-0-5) var(--space-1);
    font-size: var(--text-2xs);
    gap: var(--space-0-5);
  }

  &-dense {
    padding: var(--space-1) var(--space-1-5);
    font-size: var(--text-xs);
    gap: var(--space-0-5);
  }

  &-spacious {
    padding: var(--space-3) var(--space-6);
    font-size: var(--text-lg);
    gap: var(--space-3);
  }

&-clickable {
    cursor: pointer;
    @include interactive-base(chip);
  }

  &-selected {
    border-width: 2px;
    @include φ-elevation(var(--shadow-md));
  }

  &-disabled {
    opacity: var(--opacity-disabled);
    cursor: not-allowed;
    pointer-events: none;
  }

&-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    background: transparent !important;
    color: inherit;
    flex-shrink: 0;
    width: auto;
    height: auto;
    font-size: inherit;
    line-height: 1;

    margin-right: var(--space-0-5);

    &:last-child {
      margin-right: 0;
    }
  }

&-text {
    line-height: 1;
    flex-shrink: 0;
  }

&-close {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    margin-left: var(--space-0-5);
    background: transparent;
    cursor: pointer;
    flex-shrink: 0;
    border: none;
    padding: 0;
    @include φ-sizes(width, var(--space-4));
    @include φ-sizes(height, var(--space-4));
    @include φ-radius(var(--radius-full));

    &:hover {
      background: var(--color-surface);
    }

    i {
      font-size: var(--icon-xs);
      line-height: 1;
    }
  }

  &-closeable {
    position: relative;
  }

  // Intensity modifiers
  &-muted {
    opacity: 0.7;
    font-weight: var(--font-normal);
  }

  &-bold {
    font-weight: var(--font-bold);
    border-width: 2px;
  }

  &-subtle {
    background: color-mix(in srgb, var(--color-surface-elevated) 92%, transparent);
    color: color-mix(in srgb, currentColor 55%, var(--color-text));
    border-style: dashed;
    border-color: color-mix(in srgb, var(--color-border) 70%, transparent);
    box-shadow: none;
    filter: saturate(0.85);
  }

  $chip-semantic-map: (
    primary: '--color-primary',
    secondary: '--color-secondary',
    success: '--color-success',
    warning: '--color-warning',
    error: '--color-error',
    info: '--color-info'
  );

  @each $name, $token in $chip-semantic-map {
    &-#{$name}.chip-subtle {
      background: color-mix(in srgb, var(#{$token}) 18%, var(--color-surface));
      color: color-mix(in srgb, var(#{$token}) 65%, var(--color-text));
      border-color: color-mix(in srgb, var(#{$token}) 28%, var(--color-border));
      background-image: none;
    }
  }

  // Style effect modifiers
  &-glass {
    backdrop-filter: blur(8px);
    background: rgba(var(--color-surface-rgb), 0.7);
    border: 1px solid rgba(var(--color-border-rgb), 0.3);
  }

  &-neumorphism {
    background: var(--color-surface);
    box-shadow: 
      inset 2px 2px 5px rgba(0, 0, 0, 0.1),
      inset -2px -2px 5px rgba(255, 255, 255, 0.7);
  }

  &-elevated {
    @include φ-elevation(var(--shadow-lg));
  }

  &-flat {
    box-shadow: none;
    border: none;
  }

  &-neon {
    border: 2px solid currentColor;
    box-shadow: 
      0 0 5px currentColor,
      0 0 10px currentColor,
      inset 0 0 5px currentColor;
  }

  &-frosted {
    backdrop-filter: blur(12px) saturate(180%);
    background: rgba(var(--color-surface-rgb), 0.85);
    border: 1px solid rgba(var(--color-border-rgb), 0.5);
  }
}
