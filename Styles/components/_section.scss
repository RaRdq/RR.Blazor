// Unified section and divider components
@use '../abstracts' as *;
@use 'sass:map';
$section-sizes: (
  'small': (
    'gap': var(--space-2),
    'padding': var(--space-3),
    'header-padding': var(--space-2),
    'icon-size': 24px
  ),
  'medium': (
    'gap': var(--space-4),
    'padding': var(--space-6),
    'header-padding': var(--space-3),
    'icon-size': 32px
  ),
  'large': (
    'gap': var(--space-6),
    'padding': var(--space-8),
    'header-padding': var(--space-4),
    'icon-size': 40px
  )
);

$section-variants: (
  'primary': (
    'bg': var(--glass-primary-bg),
    'color': var(--color-text-on-primary),
    'border': var(--color-primary)
  ),
  'secondary': (
    'bg': var(--glass-secondary-bg),
    'color': var(--color-text-on-secondary),
    'border': var(--color-border)
  ),
  'success': (
    'bg': var(--glass-success-bg),
    'color': var(--color-text-on-success),
    'border': var(--color-success)
  ),
  'warning': (
    'bg': var(--glass-warning-bg),
    'color': var(--color-text-on-warning),
    'border': var(--color-warning)
  ),
  'error': (
    'bg': var(--glass-error-bg),
    'color': var(--color-text-on-error),
    'border': var(--color-error)
  ),
  'info': (
    'bg': var(--glass-info-bg),
    'color': var(--color-text-on-info),
    'border': var(--color-info)
  )
);

// Base Section Component
.section {
  display: flex;
  flex-direction: column;
  gap: map.get($section-sizes, 'medium', 'gap');
  
  // Mobile responsive
  @include responsive-max(md) {
    gap: map.get($section-sizes, 'small', 'gap');
  }
  
  
  // Size variants
  @each $size-name, $size-props in $section-sizes {
    &-#{$size-name} {
      gap: map.get($size-props, 'gap');
      
      .section-header {
        padding-bottom: map.get($size-props, 'header-padding');
      }
      
      // Divider icon sizing
      &.section-divider .section-icon-wrapper {
        width: map.get($size-props, 'icon-size');
        height: map.get($size-props, 'icon-size');
      }
    }
  }
  
  &-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding-bottom: map.get($section-sizes, 'medium', 'header-padding');
    border-bottom: var(--border-1) solid var(--color-border);
    
    // Mobile responsive
    @include responsive-max(md) {
      flex-direction: column;
      align-items: stretch;
      gap: var(--space-3);
    }
    
    &-no-border {
      border-bottom: none;
      padding-bottom: 0;
    }
  }
  
  &-title {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    font-size: var(--text-xl);
    font-weight: var(--font-semibold);
    color: var(--color-text);
    margin: 0;
    line-height: 1.2;
    
    // Mobile responsive
    @include responsive-max(md) {
      font-size: var(--text-lg);
    }
  }
  
  &-subtitle {
    font-size: var(--text-sm);
    color: var(--color-text-muted);
    margin: var(--space-1) 0 0 0;
    line-height: 1.4;
    
    @include responsive-max(md) {
      font-size: var(--text-xs);
    }
  }
  
  &-actions {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    
    // Mobile responsive
    @include responsive-max(md) {
      flex-direction: column;
      width: 100%;
      
      .button {
        width: 100%;
        justify-content: center;
      }
    }
  }
  
  &-content {
    flex: 1;
    min-height: 0; // Enable flex shrinking
    min-width: 0; // Enable text truncation
  }
  
  &-footer {
    padding-top: map.get($section-sizes, 'medium', 'header-padding');
    border-top: var(--border-1) solid var(--color-border);
    
    @include responsive-max(md) {
      padding-top: map.get($section-sizes, 'small', 'header-padding');
    }
    
    &-no-border {
      border-top: none;
      padding-top: 0;
    }
  }
  
  // Interactive states
  &-collapsible {
    .section-header {
      cursor: pointer;
      user-select: none;
      transition: all var(--duration-fast) var(--ease-out);
      
      // Hover states
      @media (hover: hover) and (pointer: fine) {
        &:hover {
          background-color: var(--color-surface);
          margin: 0 calc(-1 * var(--space-3));
          padding-left: var(--space-3);
          padding-right: var(--space-3);
          border-radius: var(--radius-md);
          transform: translateX(2px);
        }
      }
      
      // Touch states
      @media (hover: none) and (pointer: coarse) {
        &:active {
          background-color: var(--color-surface);
          transform: scale(0.98);
        }
      }
    }
    
    .section-content {
      transition: all var(--duration-slow) var(--ease-out);
      overflow: hidden;
      
      &-collapsed {
        max-height: 0;
        opacity: 0;
        margin: 0;
        padding: 0;
      }
    }
  }
  
  // State modifiers
  &-loading {
    .section-content {
      position: relative;
      min-height: var(--space-20);
      
      &::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(145deg, var(--color-surface-elevated) 0%, var(--color-surface) 100%);
        animation: pulseSoft 1.5s ease-in-out infinite;
        border-radius: inherit;
      }
    }
  }
  
  &-disabled {
    opacity: var(--opacity-disabled);
    pointer-events: none;
    filter: grayscale(20%);
  }
  
  &-elevated {
    background: var(--color-surface-elevated);
    border-radius: var(--radius-xl);
    box-shadow: var(--shadow-xl);
    padding: map.get($section-sizes, 'medium', 'padding');
    
    @include responsive-max(md) {
      padding: map.get($section-sizes, 'small', 'padding');
      border-radius: var(--radius-lg);
    }
  }
  
  // Section Divider
  &-divider {
    position: relative;
    display: flex;
    align-items: center;
    gap: var(--space-2);
    margin: map.get($section-sizes, 'medium', 'gap') 0;
    width: 100%;
    
    // Size variants
    &-small {
      margin: map.get($section-sizes, 'small', 'gap') 0;
      gap: map.get($section-sizes, 'small', 'header-padding');
    }
    
    &-large {
      margin: map.get($section-sizes, 'large', 'gap') 0;
      gap: map.get($section-sizes, 'large', 'header-padding');
    }
    
    // Variant colors
    @each $variant-name, $variant-props in $section-variants {
      &-#{$variant-name} {
        .section-icon-wrapper {
          background: map.get($variant-props, 'bg');
          color: map.get($variant-props, 'color');
        }
      }
    }
    
    // Alignment variants
    &-center {
      text-align: center;
      
      .section-content {
        display: flex;
        flex-direction: column;
        align-items: center;
      }
    }
    
    &-right {
      flex-direction: row-reverse;
      
      .section-line {
        margin-left: 0;
        margin-right: var(--space-2);
      }
    }
  }
  
  // Divider elements
  &-icon-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    width: map.get($section-sizes, 'medium', 'icon-size');
    height: map.get($section-sizes, 'medium', 'icon-size');
    background: var(--color-surface);
    border-radius: var(--radius-full);
    box-shadow: var(--shadow-sm);
    flex-shrink: 0;
    position: relative;
    overflow: hidden;
    
    &::before {
      content: '';
      position: absolute;
      inset: 0;
      background: linear-gradient(135deg, 
        color-mix(in srgb, var(--color-surface-elevated) 20%, transparent) 0%, 
        transparent 100%);
      pointer-events: none;
    }
  }
  
  &-icon {
    transition: transform var(--duration-normal) var(--ease-out);
  }
  
  &-line {
    flex: 1;
    height: 1px;
    background: linear-gradient(90deg, var(--color-border) 0%, var(--color-border) 100%);
    margin-left: var(--space-2);
    position: relative;
    overflow: hidden;
    
    &::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 100%;
      background: linear-gradient(90deg, var(--color-primary) 0%, transparent 100%);
      opacity: 0.3;
      transform: translateX(-100%);
      animation: shimmer 3s ease-in-out infinite;
    }
  }
  
  // Enhanced hover interactions for dividers only
  &-divider:hover &-icon {
    transform: scale(1.1) rotate(5deg);
  }
  
  // Variant colors using configuration maps for regular sections
  @each $variant-name, $variant-props in $section-variants {
    &-#{$variant-name} {
      // Apply to regular sections
      &.section-elevated {
        border: var(--border-1) solid map.get($variant-props, 'border');
      }
      
      // Apply to status indicators
      &.section-status .section-title {
        color: map.get($variant-props, 'color');
      }
    }
  }
  
}