// RR.Blazor State Components - Complex component implementations
// Contains complex visual components with multiple variants and detailed styling
// Simple state utilities are in utilities/_states.scss and utilities/_interaction-states.scss
@use '../abstracts' as *;

// ===== LOADING COMPONENTS =====

// Loading Spinner
.spinner {
  display: inline-block;
  width: 2.5rem;
  height: 2.5rem;
  position: relative;
  
  // Primary spinner circle
  &::before {
    content: '';
    position: absolute;
    inset: 0;
    border: 3px solid var(--color-border-light);
    border-radius: 50%;
    opacity: 0.3;
  }
  
  // Animated arc
  &::after {
    content: '';
    position: absolute;
    inset: 0;
    border: 3px solid transparent;
    border-top-color: var(--color-primary);
    border-radius: 50%;
    animation: spin 0.8s linear infinite;
  }
  
  // Size variants
  &-sm {
    width: 1.25rem;
    height: 1.25rem;
    
    &::before,
    &::after {
      border-width: 2px;
    }
  }
  &-lg {
    width: 3.5rem;
    height: 3.5rem;
    
    &::before,
    &::after {
      border-width: 4px;
    }
  }
  &-xl {
    width: 5rem;
    height: 5rem;
    
    &::before,
    &::after {
      border-width: 5px;
    }
  }
  
  // Color variants using systematic generation
  $spinner-colors: (
    "white": var(--color-text-inverse),
    "primary": var(--color-primary),
    "success": var(--color-success)
  );
  
  @each $name, $color in $spinner-colors {
    &-#{$name} {
      @if $name == "white" {
        &::before {
          border-color: var(--glass-border-light);
        }
      }
      &::after {
        border-top-color: #{$color};
      }
    }
  }
  
  // Inline variant
  &-inline {
    width: 1em;
    height: 1em;
    margin-right: var(--space-2);
    vertical-align: middle;
    
    &::before,
    &::after {
      border-width: 2px;
    }
  }
}

// Loading Dots - Alternative loading component
.loading-dots {
  display: inline-flex;
  gap: var(--space-1);
  
  span {
    width: var(--space-2);
    height: var(--space-2);
    background: var(--color-primary);
    border-radius: 50%;
    animation: pulseSoft 1.4s ease-in-out infinite both;
    
    &:nth-child(1) {
      animation-delay: -0.32s;
    }
    
    &:nth-child(2) {
      animation-delay: -0.16s;
    }
  }
  
  // Color variants using systematic generation
  $loading-dots-colors: (
    "white": var(--color-text-inverse)
  );
  
  @each $name, $color in $loading-dots-colors {
    &-#{$name} span {
      background: #{$color};
    }
  }
}

// Skeleton Loading Component - Complex layout placeholders
.skeleton {
  position: relative;
  overflow: hidden;
  background: var(--color-surface);
  border-radius: var(--radius-md);
  width: var(--skeleton-width, 100%);
  height: var(--skeleton-height, auto);
  
  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: -200%;
    width: 200%;
    height: 100%;
    background: linear-gradient(145deg, var(--color-surface-elevated) 0%, var(--color-surface) 100%);
    animation: shimmer 1.5s infinite;
  }
  
  // Common skeleton layout types
  &-text {
    height: 1rem;
    margin-bottom: var(--space-2);
    border-radius: var(--radius-sm);
    
    &:last-child {
      margin-bottom: 0;
      width: 60%;
    }
  }
  &-title {
    height: 2rem;
    margin-bottom: var(--space-3);
    width: 50%;
  }
  &-paragraph {
    .skeleton-text {
      &:nth-child(1) { width: 100%; }
      &:nth-child(2) { width: 95%; }
      &:nth-child(3) { width: 85%; }
      &:nth-child(4) { width: 60%; }
    }
  }
  &-avatar {
    width: 3rem;
    height: 3rem;
    border-radius: var(--radius-full);
    flex-shrink: 0;
  }
  &-button {
    height: 2.5rem;
    width: 7rem;
    border-radius: var(--radius-md);
  }
  &-card {
    height: 10rem;
    border-radius: var(--radius-xl);
  }
  &-image {
    height: 12rem;
    border-radius: var(--radius-lg);
  }
  
  // Animated pulse variant
  &-pulse {
    animation: pulseSoft 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
}

// Loading Container Component
.loading {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: var(--space-4);
  padding: var(--space-8);
  min-height: 20rem;
  
  &-text {
    font-size: var(--text-sm);
    color: var(--color-text-muted);
    text-align: center;
  }
  
  // Full page loader
  &-fullscreen {
    position: fixed;
    inset: 0;
    background: rgba(var(--color-canvas-rgb), 0.9);
    backdrop-filter: blur(var(--blur-sm));
    z-index: var(--z-loading);
  }
  
  // Overlay loader
  &-overlay {
    position: absolute;
    inset: 0;
    background: var(--color-overlay-light);
    backdrop-filter: blur(2px);
    border-radius: inherit;
    z-index: 10;
  }
}

// Loading Bar Component - Progress indicator
.loading-bar {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  height: 3px;
  background: var(--color-surface);
  z-index: var(--z-loading);
  
  &-progress {
    height: 100%;
    background: var(--color-primary);
    transition: width var(--duration-slow) var(--ease-out);
    box-shadow: 0 0 10px var(--color-focus);
  }
  
  &-indeterminate &-progress {
    width: 30%;
    animation: progress 1.5s infinite ease-in-out;
  }
}

// ===== EMPTY STATE COMPONENTS =====

// Empty State Component
.empty-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
  padding: var(--space-12) var(--space-6);
  min-height: 20rem;
  background: var(--color-surface-elevated);
  border-radius: var(--radius-xl);
  border: var(--border-2) dashed var(--color-border);
  
  @include responsive-max(md) {
    padding: var(--space-8) var(--space-4);
    min-height: 16rem;
  }
  
  // Icon container
  &-icon {
    width: 5rem;
    height: 5rem;
    border-radius: var(--radius-full);
    background: linear-gradient(135deg, var(--color-surface) 0%, var(--color-surface) 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: var(--space-6);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.05);
    
    @include responsive-max(md) {
      width: 4rem;
      height: 4rem;
      margin-bottom: var(--space-4);
    }
    
    // Colored variants
  &-primary {
      background: var(--color-primary);
    }
  &-success {
      background: color-mix(in srgb, var(--color-success) 10%, var(--color-surface));
    }
  &-warning {
      background: color-mix(in srgb, var(--color-warning) 10%, var(--color-surface));
    }
  &-error {
      background: color-mix(in srgb, var(--color-error) 10%, var(--color-surface));
    }
  &-info {
      background: color-mix(in srgb, var(--color-info) 10%, var(--color-surface));
    }
  }
  
  // Title
  &-title {
    font-size: var(--text-xl);
    font-weight: var(--font-semibold);
    color: var(--color-text);
    margin: 0 0 var(--space-3) 0;
    
    @include responsive-max(md) {
      font-size: var(--text-lg);
      margin-bottom: var(--space-2);
    }
  }
  
  // Description
  &-description {
    font-size: var(--text-sm);
    color: var(--color-text-muted);
    line-height: var(--leading-relaxed);
    max-width: 24rem;
    margin: 0 0 var(--space-6) 0;
    
    @include responsive-max(md) {
      font-size: var(--text-xs);
      margin-bottom: var(--space-4);
      max-width: 20rem;
    }
  }
  
  // Actions
  &-actions {
    display: flex;
    gap: var(--space-3);
    flex-wrap: wrap;
    justify-content: center;
    
    @include responsive-max(md) {
      flex-direction: column;
      width: 100%;
      max-width: 16rem;
      gap: var(--space-2);
      
      > .button {
        width: 100%;
      }
    }
  }
  
  // Variants
  &-compact {
    padding: var(--space-8) var(--space-4);
    min-height: 12rem;
    
    .empty-state-icon {
      width: 3.5rem;
      height: 3.5rem;
      margin-bottom: var(--space-4);
    }
    
    .empty-state-title {
      font-size: var(--text-lg);
      margin-bottom: var(--space-2);
    }
    
    .empty-state-description {
      font-size: var(--text-xs);
      margin-bottom: var(--space-4);
    }
  }
  &-large {
    padding: var(--space-16) var(--space-8);
    min-height: 28rem;
    
    .empty-state-icon {
      width: 6rem;
      height: 6rem;
      margin-bottom: var(--space-8);
    }
    
    .empty-state-title {
      font-size: var(--text-2xl);
      margin-bottom: var(--space-4);
    }
    
    .empty-state-description {
      font-size: var(--text-base);
      margin-bottom: var(--space-8);
      max-width: 28rem;
    }
  }
  
  // Loading variant
  &-loading {
    .empty-state-icon {
      position: relative;
      
      &::after {
        content: '';
        position: absolute;
        inset: 0;
        border: 3px solid var(--color-border);
        border-top-color: var(--color-primary);
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }
    }
  }
  
  // Card variant
  &-card {
    background: var(--color-surface-elevated);
    border: var(--border-1) solid var(--color-border);
    border-style: solid;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
  }
  
  // Glass variant
  &-glass {
    background: var(--glass-bg-medium);
    backdrop-filter: blur(var(--blur-lg));
    border: var(--border-1) solid var(--glass-border-light);
  }
  
  // Subtle variant
  &-subtle {
    background: transparent;
    border: none;
    padding: var(--space-8) var(--space-4);
    
    .empty-state-icon {
      background: transparent;
      box-shadow: none;
    }
  }
  
  // Image variant
  &-image {
    width: 8rem;
    height: 8rem;
    border-radius: var(--radius-lg);
    background: var(--color-surface);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: var(--space-6);
    box-shadow: var(--shadow-sm);
    
    img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      border-radius: inherit;
    }
    
    @include responsive-max(md) {
      width: 6rem;
      height: 6rem;
      margin-bottom: var(--space-4);
    }
  }
  
  // Custom content variant
  &-custom {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: var(--space-4);
    
    // Allow custom content to override default styles
    * {
      margin: 0;
    }
  }
  
  // Row variant for table empty states
  &-row {
    display: table-row;
    width: 100%;
    
    td {
      padding: var(--space-8) var(--space-4);
      text-align: center;
      vertical-align: middle;
      border: none;
      color: var(--color-text-muted);
      font-size: var(--text-sm);
    }
  }
}

// ===== ERROR STATE COMPONENTS =====

// Error State Component
.error-state {
  @extend .empty-state !optional;
  border-color: color-mix(in srgb, var(--color-error) 10%, var(--color-surface));
  
  .empty-state-icon {
    background: color-mix(in srgb, var(--color-error) 10%, var(--color-surface));
  }
  
  .empty-state-title {
    color: var(--color-error);
  }
}

// ===== SUCCESS STATE COMPONENTS =====

// Success State Component
.success-state {
  @extend .empty-state !optional;
  border-color: color-mix(in srgb, var(--color-success) 10%, var(--color-surface));
  
  .empty-state-icon {
    background: color-mix(in srgb, var(--color-success) 10%, var(--color-surface));
  }
  
  .empty-state-title {
    color: var(--color-success);
  }
}

// ===== SEARCH STATE COMPONENTS =====

// Search Empty State Component
.search-state {
  @extend .empty-state !optional;
  
  .empty-state-icon {
    background: color-mix(in srgb, var(--color-info) 10%, var(--color-surface));
  }
  
  &-query {
    display: inline-block;
    padding: var(--space-1) var(--space-2);
    background: var(--color-surface);
    border-radius: var(--radius-md);
    font-family: var(--font-mono);
    font-size: var(--text-sm);
    color: var(--color-text);
    margin: 0 var(--space-1);
  }
}

// ===== ANIMATIONS =====
// Using generic animations from _animations.scss
// No component-specific animations needed

