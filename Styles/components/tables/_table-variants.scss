@use '../../abstracts' as *;
@use 'sass:map';

// =============================================================================
// TABLE VARIANTS - Professional variant system following RR.Blazor principles
// =============================================================================

$table-variants: (
  'standard': (
    'container-bg': var(--surface),
    'container-border': 1px solid var(--border),
    'container-shadow': var(--shadow-md),
    'container-radius': var(--radius-lg),
    'header-bg': var(--surface-elevated),
    'header-border': 1px solid var(--surface-outline),
    'row-hover': var(--surface-elevated),
    'row-selected': var(--primary-light)
  ),
  'elevated': (
    'container-bg': var(--surface),
    'container-border': none,
    'container-shadow': var(--shadow-lg),
    'container-radius': var(--radius-lg),
    'header-bg': var(--surface-elevated),
    'header-border': none,
    'row-hover': var(--surface-elevated),
    'row-selected': var(--primary-light),
    'transform-hover': translateY(-1px)
  ),
  'glass': (
    'container-bg': var(--glass-bg-light),
    'container-border': 1px solid var(--glass-border-light),
    'container-shadow': var(--shadow-md),
    'container-radius': var(--radius-lg),
    'header-bg': var(--glass-bg-medium),
    'header-border': 1px solid var(--glass-border-medium),
    'row-hover': var(--glass-hover-bg),
    'row-selected': var(--primary-light),
    'backdrop-filter': var(--glass-blur-md) var(--glass-saturate) var(--glass-brightness),
    'transform-hover': translateY(-1px)
  ),
  'minimal': (
    'container-bg': transparent,
    'container-border': none,
    'container-shadow': none,
    'container-radius': var(--radius-md),
    'header-bg': var(--surface-elevated-20),
    'header-border': 1px solid var(--surface-outline),
    'row-hover': var(--surface-elevated-30),
    'row-selected': var(--primary-light)
  ),
  'outlined': (
    'container-bg': var(--surface),
    'container-border': 2px solid var(--border),
    'container-shadow': var(--shadow-sm),
    'container-radius': var(--radius-lg),
    'header-bg': var(--surface-elevated),
    'header-border': 2px solid var(--surface-outline),
    'row-hover': var(--surface-elevated),
    'row-selected': var(--primary-light)
  ),
  'striped': (
    'container-bg': var(--surface),
    'container-border': 1px solid var(--border),
    'container-shadow': var(--shadow-sm),
    'container-radius': var(--radius-lg),
    'header-bg': var(--surface-elevated),
    'header-border': 1px solid var(--surface-outline),
    'row-hover': var(--surface-elevated),
    'row-selected': var(--primary-light),
    'row-striped': var(--surface-elevated-30)
  ),
  'bordered': (
    'container-bg': var(--surface),
    'container-border': 1px solid var(--border),
    'container-shadow': var(--shadow-md),
    'container-radius': var(--radius-lg),
    'header-bg': var(--surface-elevated),
    'header-border': 1px solid var(--surface-outline),
    'row-hover': var(--surface-elevated),
    'row-selected': var(--primary-light),
    'cell-border': 1px solid var(--surface-outline-5)
  ),
  'professional': (
    'container-bg': var(--surface),
    'container-border': 1px solid var(--primary-10),
    'container-shadow': var(--shadow-xl),
    'container-radius': var(--radius-xl),
    'header-bg': linear-gradient(135deg, var(--surface-elevated), var(--primary-5)),
    'header-border': 1px solid var(--primary-20),
    'row-hover': var(--surface-elevated),
    'row-selected': var(--primary-light),
    'transform-hover': translateY(-1px)
  )
);

// Generate variant classes - extend container, don't redefine
@each $variant, $props in $table-variants {
  .r-table-container.variant-#{$variant} {
    background: map.get($props, 'container-bg');
    border: map.get($props, 'container-border');
    box-shadow: map.get($props, 'container-shadow');
    border-radius: map.get($props, 'container-radius');
    
    @if map.has-key($props, 'backdrop-filter') {
      backdrop-filter: map.get($props, 'backdrop-filter');
    }
    
    .r-table-header-cell {
      background: map.get($props, 'header-bg');
      border-bottom: map.get($props, 'header-border');
    }
    
    tbody tr {
      &:hover {
        background: map.get($props, 'row-hover');
        
        @if map.has-key($props, 'transform-hover') {
          transform: map.get($props, 'transform-hover');
          box-shadow: var(--shadow-md);
        }
      }
      
      &.r-table-row-selected-enhanced {
        background: map.get($props, 'row-selected');
        border-left: 3px solid var(--primary);
      }
      
      @if map.has-key($props, 'row-striped') {
        &:nth-child(even) {
          background: map.get($props, 'row-striped');
        }
      }
    }
    
    @if map.has-key($props, 'cell-border') {
      .r-table-cell {
        border-right: map.get($props, 'cell-border');
        
        &:last-child {
          border-right: none;
        }
      }
    }
  }
}