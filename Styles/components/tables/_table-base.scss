@use '../../abstracts' as *;
@use 'table-mixins' as mixins;

// =============================================================================
// TABLE BASE - Core table structure following RR.Blazor principles
// =============================================================================

// Base table structure
.table-table {
  width: 100%;
  border-collapse: collapse;
  font-feature-settings: "tnum";
  background: transparent;
}

// Header styling
.table-header-cell {
  @include mixins.table-header-base;
  
  &.table-header-sortable {
    cursor: pointer;
    user-select: none;
    transition: var(--transition-colors);
    
    &:hover {
      background: var(--surface-hover);
      color: var(--primary);
    }
  }
}

// Cell styling
.table-cell {
  @include mixins.table-cell-base;
}

// Row styling
.table-row {
  transition: var(--transition-colors);
  
  @include mixins.table-hover-state(var(--surface-hover), false);
  
  &.table-row-selected {
    @include mixins.table-selection-state;
  }
}

// Container base
.enhanced-table-container {
  position: relative;
  overflow: hidden;
  transition: var(--transition-colors);
}

// Enhanced table base
.enhanced-table {
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-sm);
  border: var(--border-1) solid var(--surface-outline-10);
  background: var(--surface);
}

// CSS Custom Properties for dynamic sizing
.overflow-x-auto[style*="--table-height"] {
  height: var(--table-height);
}

th[style*="--column-width"], td[style*="--column-width"] {
  width: var(--column-width);
}

th[style*="--column-min-width"], td[style*="--column-min-width"] {
  min-width: var(--column-min-width);
}

th[style*="--column-max-width"], td[style*="--column-max-width"] {
  max-width: var(--column-max-width);
}

th[style*="--sticky-left"], td[style*="--sticky-left"] {
  left: var(--sticky-left);
  z-index: var(--sticky-z-index);
}