@use '../../abstracts' as *;
@use 'table-mixins' as mixins;

// =============================================================================
// TABLE BASE - Core table structure following RR.Blazor principles
// =============================================================================

// Base table structure
.r-table {
  width: 100%;
  border-collapse: collapse;
  font-feature-settings: "tnum";
  background: transparent;
  position: relative;
  table-layout: fixed;
  
  // Table modifiers using correct syntax
  &.has-hover tbody tr:hover {
    background: var(--state-hover-bg);
    cursor: pointer;
  }
  
  &.is-striped tbody tr:nth-child(odd) {
    background: var(--color-surface-elevated);
  }
  
  &.is-bordered {
    border: var(--border-1) solid var(--color-border);
    
    th, td {
      border: var(--border-1) solid var(--color-border-light);
    }
  }
}

// Table element styling using &- syntax
.r-table {
  &-header-cell {
    @include mixins.table-header-base;
    
    &.is-sortable {
      cursor: pointer;
      user-select: none;
      transition: var(--transition-colors);
      
      &:hover {
        background: var(--state-hover-bg);
        color: var(--color-primary);
      }
    }
  }

  &-cell {
    @include mixins.table-cell-base;
  }

  &-row {
    transition: var(--transition-colors);
    
    @include mixins.table-hover-state(var(--state-hover-bg), false);
    
    &.is-selected {
      @include mixins.table-selection-state;
    }
  }
}

// Table container - single source of truth
.r-table-container {
  position: relative;
  display: block;
  width: 100%;
  overflow: hidden;
  background: var(--color-surface);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-sm);
  border: var(--border-1) solid var(--color-border-light);
  transition: var(--transition-colors);
}

// CSS Custom Properties for dynamic sizing
.overflow-x-auto[style*="--table-height"] {
  height: var(--table-height);
}

th[style*="--column-width"], td[style*="--column-width"] {
  width: var(--column-width);
}

th[style*="--column-min-width"], td[style*="--column-min-width"] {
  min-width: var(--column-min-width);
}

th[style*="--column-max-width"], td[style*="--column-max-width"] {
  max-width: var(--column-max-width);
}

th[style*="--sticky-left"], td[style*="--sticky-left"] {
  left: var(--sticky-left);
  z-index: var(--sticky-z-index);
}