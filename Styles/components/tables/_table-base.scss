@use '../../abstracts' as *;
@use 'table-mixins' as mixins;

.table {
  width: 100%;
  border-collapse: collapse;
  font-feature-settings: "tnum";
  background: transparent;
  position: relative;
  table-layout: auto;

transform: translateZ(0);
  backface-visibility: hidden;
  contain: layout style paint;

&-has-hover tbody tr:hover {
    background: var(--state-hover-bg);
    cursor: pointer;
  }

  &-striped tbody tr:nth-child(odd) {
    background: var(--color-surface-elevated);
  }

  &-bordered {
    border: var(--border-1) solid var(--color-border);

    th, td {
      border: var(--border-1) solid var(--color-border-light);
    }
  }
}

.table {
  &-header-cell {
    @include mixins.table-header-base;

    &-sortable {
      cursor: pointer;
      user-select: none;
      transition: var(--transition-colors);

      &:hover {
        background: var(--state-hover-bg);
        color: var(--color-primary);
      }
    }
  }

  &-cell {
    @include mixins.table-cell-base;
    position: relative;
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
    contain: layout style paint;
  }

  &-row {
    transition: var(--transition-colors);

will-change: transform, box-shadow;
    contain: layout style paint;
    transform: translateZ(0);

    @include mixins.table-hover-state(var(--state-hover-bg), false);

    &-selected {
      @include mixins.table-selection-state;
    }
  }
}

.table-container {
  position: relative;
  display: block;
  width: 100%;
  overflow-x: auto;
  overflow-y: hidden;
  background: var(--color-surface);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-sm);
  border: var(--border-1) solid var(--color-border-light);
  transition: var(--transition-colors);

-webkit-overflow-scrolling: touch;
  will-change: scroll-position;

.table {
    th, td {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;

&[style*="width"] {
        width: var(--column-width);
        min-width: var(--column-min-width, auto);
        max-width: var(--column-max-width, none);
      }
    }
  }

&.overflow-x-auto {
    .table {
      width: max-content;
      min-width: 100%;

      th, td {

        &[width] {
          min-width: attr(width);
        }
      }
    }
  }
}

.overflow-x-auto[style*="--table-height"] {
  height: var(--table-height);
}

th[style*="--column-width"], td[style*="--column-width"] {
  width: var(--column-width);
}

th[style*="--column-min-width"], td[style*="--column-min-width"] {
  min-width: var(--column-min-width);
}

th[style*="--column-max-width"], td[style*="--column-max-width"] {
  max-width: var(--column-max-width);
}

th[style*="--sticky-left"], td[style*="--sticky-left"] {
  left: var(--sticky-left);
  z-index: var(--z-sticky);
}

