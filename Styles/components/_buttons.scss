@use '../abstracts' as *;

.button {
  @extend %button-base;
  
  // Default Normal density styles
  padding: var(--space-2) var(--space-3);
  font-size: var(--text-sm);
  gap: var(--space-2);
  min-height: var(--space-8);
  border-radius: var(--radius-md);
  
  @include interactive-base(button);
  @include interactive-a11y(button);
  
  @include semantic-variants((primary, secondary, success, warning, error, info, ghost, outline), (filled, outlined, ghost, glass));
  
  &-secondary {
    @include semantic-base(secondary);
  }
  
  // Intensity modifiers (visual prominence)
  &-muted {
    opacity: 0.7;
    filter: saturate(0.8);
  }
  
  &-bold {
    font-weight: 600;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.12);
    
    &:hover {
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }
  }
  
  &-subtle {
    opacity: 0.6;
    filter: saturate(0.6) brightness(0.95);
    box-shadow: none;
    
    &:hover {
      opacity: 0.8;
      filter: saturate(0.8) brightness(1);
    }
  }
  
  &-density {
    &-compact {
      @include button-density('compact');
    }
    
    &-dense {
      @include button-density('dense');
    }
    
    &-normal {
      @include button-density('normal');
    }
    
    &-spacious {
      @include button-density('spacious');
    }
  }
  
  &-glass {
    @extend %glass-light;
    color: var(--color-text);
    transition: all var(--duration-normal) var(--ease-out);
    
    &:hover {
      backdrop-filter: blur(12px) saturate(120%);
      -webkit-backdrop-filter: blur(12px) saturate(120%);
      box-shadow: var(--shadow-md);
    }
    
    &:active {
      transform: scale(0.969);
    }
    
    &:focus-visible {
      outline: var(--offset-2) solid var(--color-focus);
      outline-offset: var(--outline-offset-focus);
    }
  }
  
  &-gradient {
    background: var(--gradient-primary);
    color: var(--color-text-inverse);
    border: none;
    position: relative;
    overflow: hidden;
    box-shadow: var(--shadow-button-primary);
    transition: all var(--duration-normal) var(--ease-out);
    
    &::before {
      content: '';
      position: absolute;
      inset: 0;
      background: linear-gradient(
        105deg, 
        transparent 40%, 
        rgba(255, 255, 255, 0.3) 50%, 
        transparent 60%
      );
      transform: translateX(-100%);
      transition: transform var(--duration-slow) var(--ease-out);
      z-index: var(--z-base);
      pointer-events: none;
    }
    
    &:hover {
      transform: translateY(var(--transform-offset-hover-y));
      box-shadow: var(--shadow-button-primary-hover);
      
      &::before { 
        transform: translateX(100%);
      }
    }
    
    &:active {
      transform: scale(0.969);
    }
  }

  &-neon {
    background: transparent;
    color: var(--color-primary);
    border: var(--border-width-regular) solid var(--color-primary);
    position: relative;
    box-shadow: 
      var(--shadow-inset-neon-sm),
      var(--shadow-neon-sm);
    transition: all var(--duration-normal) var(--ease-out);
    text-shadow: var(--shadow-neon-text);
    
    &:hover {
      background: color-mix(in srgb, var(--color-primary) 10%, transparent);
      color: var(--color-primary);
      border-color: var(--color-primary);
      box-shadow: 
        var(--shadow-inset-neon-md),
        var(--shadow-neon-md);
      text-shadow: var(--shadow-neon-text-hover);
      transform: translateY(var(--transform-offset-hover-y));
    }
    
    &:active {
      transform: scale(0.969);
    }
  }

  &-neumorphism {
    background: var(--color-surface-elevated);
    color: var(--color-text);
    border: none;
    box-shadow: var(--shadow-neumorphism);
    transition: all var(--duration-normal) var(--ease-out);
    
    &:hover {
      background: color-mix(in srgb, var(--color-surface-elevated) 98%, var(--color-primary));
      box-shadow: var(--shadow-neumorphism-hover);
      transform: translateY(-1px);
    }
    
    &:active {
      box-shadow: var(--shadow-inset-neumorphism);
      transform: translateY(0);
    }
    
    &:focus-visible {
      outline: var(--offset-2) solid var(--color-primary);
      outline-offset: var(--outline-offset-focus);
    }
  }
  
  &-shimmer {
    background: linear-gradient(
      90deg,
      var(--color-primary),
      color-mix(in srgb, var(--color-primary) 80%, var(--color-info)),
      var(--color-primary)
    );
    background-size: 200% 100%;
    color: var(--color-text-inverse);
    border: none;
    box-shadow: var(--shadow-button-primary);
    animation: shimmer 3s linear infinite;
    transition: all var(--duration-normal) var(--ease-out);
    
    &:hover {
      transform: translateY(var(--transform-offset-hover-y));
      box-shadow: 
        0 var(--offset-6) 20px color-mix(in srgb, var(--color-primary) 30%, transparent),
        var(--shadow-button-info);
      animation-duration: 1.5s;
    }
    
    &:active {
      transform: scale(0.969);
    }
  }
  
  &-enterprise {
    background: var(--color-surface-elevated);
    color: var(--color-text);
    border: var(--border-width-thin) solid var(--color-border);
    box-shadow: var(--shadow-sm);
    transition: all var(--duration-normal) var(--ease-out);
    
    &:hover {
      background: color-mix(in srgb, var(--color-surface-elevated) 95%, var(--color-primary));
      border-color: var(--color-primary);
      box-shadow: var(--shadow-md);
      transform: translateY(var(--transform-offset-hover-y));
    }
    
    &:active {
      transform: scale(0.969);
      box-shadow: var(--shadow-sm);
    }
    
    &:focus-visible {
      outline: var(--offset-2) solid var(--color-primary);
      outline-offset: var(--outline-offset-focus);
    }
  }


  // Design mode styles - Elevated
  @each $variant in (primary, secondary, success, warning, error, info) {
    &.design-elevated-#{$variant} {
      @include design-elevated($variant, medium);
    }
    
    &.design-elevated-light-#{$variant} {
      @include design-elevated($variant, light);
    }
    
    &.design-elevated-heavy-#{$variant} {
      @include design-elevated($variant, heavy);
    }
  }

  // Design mode styles - Flat
  @each $variant in (primary, secondary, success, warning, error, info) {
    &.design-flat-#{$variant} {
      @include design-flat($variant, medium);
    }
    
    &.design-flat-light-#{$variant} {
      @include design-flat($variant, light);
    }
    
    &.design-flat-heavy-#{$variant} {
      @include design-flat($variant, heavy);
    }
  }

  // Semantic outline variants
  &-outline {
    // Base outline style (neutral)
    background: transparent;
    color: var(--color-text);
    border: 1px solid var(--color-border);
    transition: all var(--duration-fast) var(--ease-out);
    
    &:hover {
      background: color-mix(in srgb, var(--color-surface) 10%, transparent);
      border-color: var(--color-primary);
    }
    
    &:active {
      background: color-mix(in srgb, var(--color-surface) 15%, transparent);
      transform: scale(0.969);
    }

    // Semantic color variants for outline
    &.button-primary {
      color: var(--color-primary);
      border-color: var(--color-primary);
      
      &:hover {
        background: color-mix(in srgb, var(--color-primary) 10%, transparent);
        border-color: var(--color-primary-hover);
      }
    }
    
    &.button-secondary {
      color: var(--color-secondary);
      border-color: var(--color-secondary);
      
      &:hover {
        background: color-mix(in srgb, var(--color-secondary) 10%, transparent);
        border-color: var(--color-secondary-hover);
      }
    }
    
    &.button-success {
      color: var(--color-success);
      border-color: var(--color-success);
      
      &:hover {
        background: color-mix(in srgb, var(--color-success) 10%, transparent);
        border-color: var(--color-success-hover);
      }
    }
    
    &.button-warning {
      color: var(--color-warning);
      border-color: var(--color-warning);
      
      &:hover {
        background: color-mix(in srgb, var(--color-warning) 10%, transparent);
        border-color: var(--color-warning-hover);
      }
    }
    
    &.button-error {
      color: var(--color-error);
      border-color: var(--color-error);
      
      &:hover {
        background: color-mix(in srgb, var(--color-error) 10%, transparent);
        border-color: var(--color-error-hover);
      }
    }
    
    &.button-info {
      color: var(--color-info);
      border-color: var(--color-info);
      
      &:hover {
        background: color-mix(in srgb, var(--color-info) 10%, transparent);
        border-color: var(--color-info-hover);
      }
    }
  }
  
  // Semantic ghost variants  
  &-ghost {
    // Base ghost style (neutral)
    background: color-mix(in srgb, var(--color-surface) 8%, transparent);
    color: var(--color-text);
    border: 1px solid color-mix(in srgb, var(--color-border) 20%, transparent);
    transition: all var(--duration-fast) var(--ease-out);
    
    &:hover {
      background: color-mix(in srgb, var(--color-surface) 15%, transparent);
      border-color: color-mix(in srgb, var(--color-border) 30%, transparent);
    }
    
    &:active {
      background: color-mix(in srgb, var(--color-surface) 20%, transparent);
      transform: scale(0.969);
    }

    // Semantic color variants for ghost  
    &.button-primary {
      color: var(--color-primary);
      background: color-mix(in srgb, var(--color-primary) 5%, transparent);
      border-color: color-mix(in srgb, var(--color-primary) 20%, transparent);
      
      &:hover {
        background: color-mix(in srgb, var(--color-primary) 10%, transparent);
        border-color: color-mix(in srgb, var(--color-primary) 30%, transparent);
      }
    }
    
    &.button-secondary {
      color: var(--color-secondary);
      background: color-mix(in srgb, var(--color-secondary) 5%, transparent);
      border-color: color-mix(in srgb, var(--color-secondary) 20%, transparent);
      
      &:hover {
        background: color-mix(in srgb, var(--color-secondary) 10%, transparent);
        border-color: color-mix(in srgb, var(--color-secondary) 30%, transparent);
      }
    }
    
    &.button-success {
      color: var(--color-success);
      background: color-mix(in srgb, var(--color-success) 5%, transparent);
      border-color: color-mix(in srgb, var(--color-success) 20%, transparent);
      
      &:hover {
        background: color-mix(in srgb, var(--color-success) 10%, transparent);
        border-color: color-mix(in srgb, var(--color-success) 30%, transparent);
      }
    }
    
    &.button-warning {
      color: var(--color-warning);
      background: color-mix(in srgb, var(--color-warning) 5%, transparent);
      border-color: color-mix(in srgb, var(--color-warning) 20%, transparent);
      
      &:hover {
        background: color-mix(in srgb, var(--color-warning) 10%, transparent);
        border-color: color-mix(in srgb, var(--color-warning) 30%, transparent);
      }
    }
    
    &.button-error {
      color: var(--color-error);
      background: color-mix(in srgb, var(--color-error) 5%, transparent);
      border-color: color-mix(in srgb, var(--color-error) 20%, transparent);
      
      &:hover {
        background: color-mix(in srgb, var(--color-error) 10%, transparent);
        border-color: color-mix(in srgb, var(--color-error) 30%, transparent);
      }
    }
    
    &.button-info {
      color: var(--color-info);
      background: color-mix(in srgb, var(--color-info) 5%, transparent);
      border-color: color-mix(in srgb, var(--color-info) 20%, transparent);
      
      &:hover {
        background: color-mix(in srgb, var(--color-info) 10%, transparent);
        border-color: color-mix(in srgb, var(--color-info) 30%, transparent);
      }
    }
  }

  &-xs {
    padding: var(--space-0-5) var(--space-1);
    font-size: var(--text-xs);
    gap: var(--space-0-5);
    min-height: var(--space-2);
    border-radius: var(--radius-sm);
  }
  
  &-sm {
    padding: var(--space-1-5) var(--space-3);
    font-size: var(--text-sm);
    gap: var(--space-1);
    min-height: var(--space-6);
    border-radius: var(--radius-md);
  }
  
  &-lg {
    padding: var(--space-4) var(--space-8);
    font-size: var(--text-base);
    gap: var(--space-3);
    min-height: var(--space-10);
    border-radius: var(--radius-lg);
  }
  
  &-xl {
    padding: var(--space-5) var(--space-10);
    font-size: var(--text-lg);
    gap: var(--space-4);
    min-height: var(--space-12);
    border-radius: var(--radius-lg);
  }

  &-icon {
    aspect-ratio: 1;
    gap: 0;
    min-height: unset;
    
    width: var(--touch-target-min);
    height: var(--touch-target-min);
    padding: var(--space-2);
    
    &.button-xs {
      width: var(--space-6);
      height: var(--space-6);
      padding: var(--space-1);
      font-size: var(--text-xs);
    }
    
    &.button-sm {
      width: var(--space-8);
      height: var(--space-8);
      padding: var(--space-1-5);
      font-size: var(--text-sm);
    }
    
    &.button-lg {
      width: var(--space-12);
      height: var(--space-12);
      padding: var(--space-3);
      font-size: var(--text-lg);
    }
    
    &.button-xl {
      width: var(--space-16);
      height: var(--space-16);
      padding: var(--space-4);
      font-size: var(--text-xl);
    }
  }

  &-full { width: 100%; }
  &-vertical { 
    flex-direction: column;
  }

  &-compact {
    padding: var(--space-0-5) var(--space-2);
    gap: var(--space-0-5);
    
    &.button-xs { 
      padding: var(--space-0-5) var(--space-1);
      gap: var(--space-0-5);
    }
    &.button-sm { 
      padding: var(--space-0-5) var(--space-2);
      gap: var(--space-0-5);
    }
    &.button-lg { 
      padding: var(--space-2) var(--space-4);
      gap: var(--space-2);
    }
    &.button-xl { 
      padding: var(--space-3) var(--space-6);
      gap: var(--space-3);
    }
    
    &.button-icon {
      width: var(--space-5); 
      height: var(--space-5);
      padding: var(--space-0-5);
      
      &.button-xs {
        width: var(--space-3);
        height: var(--space-3);
        padding: var(--space-0-5);
      }
      &.button-sm {
        width: var(--space-4);
        height: var(--space-4);
        padding: var(--space-0-5);
      }
      &.button-lg {
        width: var(--space-6);
        height: var(--space-6);
        padding: var(--space-1);
      }
      &.button-xl {
        width: var(--space-8);
        height: var(--space-8);
        padding: var(--space-1);
      }
    }
  }

  &-dense {
    padding: var(--space-1) var(--space-2);
    gap: var(--space-1);
    
    &.button-xs { 
      padding: var(--space-0-5) var(--space-1-5);
      gap: var(--space-0-5);
    }
    &.button-sm { 
      padding: var(--space-1) var(--space-2);
      gap: var(--space-1);
    }
    &.button-lg { 
      padding: var(--space-2-5) var(--space-5);
      gap: var(--space-2-5);
    }
    &.button-xl { 
      padding: var(--space-4) var(--space-8);
      gap: var(--space-4);
    }
    
    &.button-icon {
      width: var(--space-5);
      height: var(--space-5);
      padding: var(--space-1);
      
      &.button-xs {
        width: var(--space-3);
        height: var(--space-3);
        padding: var(--space-0-5);
      }
      &.button-sm {
        width: var(--space-4);
        height: var(--space-4);
        padding: var(--space-0-5);
      }
      &.button-lg {
        width: var(--space-6);
        height: var(--space-6);
        padding: var(--space-1);
      }
      &.button-xl {
        width: var(--space-8);
        height: var(--space-8);
        padding: var(--space-1-5);
      }
    }
  }

  &-spacious {
    padding: var(--space-2) var(--space-3);
    gap: var(--space-2);
    
    &.button-xs { 
      padding: var(--space-1) var(--space-2-5);
      gap: var(--space-1);
    }
    &.button-sm { 
      padding: var(--space-2) var(--space-3);
      gap: var(--space-2);
    }
    &.button-lg { 
      padding: var(--space-5) var(--space-8);
      gap: var(--space-5);
    }
    &.button-xl { 
      padding: var(--space-8) var(--space-10);
      gap: var(--space-8);
    }
    
    &.button-icon {
      width: var(--space-8);
      height: var(--space-8);
      padding: var(--space-2);
      
      &.button-xs {
        width: var(--space-5);
        height: var(--space-5);
        padding: var(--space-1);
      }
      &.button-sm {
        width: var(--space-6);
        height: var(--space-6);
        padding: var(--space-1-5);
      }
      &.button-lg {
        width: var(--space-10);
        height: var(--space-10);
        padding: var(--space-2);
      }
      &.button-xl {
        width: var(--space-10);
        height: var(--space-10);
        padding: var(--space-2-5);
      }
    }
  }
  
  // Professional button loading states - consistent BEM pattern
  &-loading {
    @include button-loading();
    
    // Height is now preserved automatically by component-aware loading system
    height: auto;
    
    // Ensure proper flex alignment for loading content
    display: inline-flex;
    align-items: center;
    justify-content: center;
    
    // Size-responsive loading for all button variants
    &.button-xs { 
      @include button-loading('xs');
    }
    &.button-sm { 
      @include button-loading('sm');
    }
    &.button-lg { 
      @include button-loading('lg');
    }
    &.button-xl { 
      @include button-loading('xl');
    }
    
    // Ensure loading text is properly aligned
    .loading-text {
      display: inline-flex;
      align-items: center;
      line-height: 1;
      margin: 0;
    }
  }
  
  &-loading-inline {
    @include loading-inline('start', 'sm', 'current');
    
    &-end { @include loading-inline('end', 'sm', 'current'); }
    &-start { @include loading-inline('start', 'sm', 'current'); }
  }
  
  &-loading-skeleton {
    @include loading-skeleton();
  }
  
  &:disabled,
  &[disabled] {
    opacity: 0.6;
    pointer-events: none;
    cursor: not-allowed;
  }
  
  &:has(.button-badge),
  &[data-has-badge="true"],
  &.button-with-badge {
    position: relative;
  }
}

.button-icon-start { 
  margin-right: 0;
  margin-left: calc(var(--space-2) * -0.5); 
}
.button-icon-end { 
  margin-left: 0;
  margin-right: calc(var(--space-2) * -0.5);
}
.button-icon-top { 
  margin-bottom: 0;
  margin-top: calc(var(--space-1) * -0.5);
}
.button-icon-bottom { 
  margin-top: 0;
  margin-bottom: calc(var(--space-1) * -0.5);
}