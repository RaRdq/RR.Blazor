@use '../abstracts' as *;
@use '../abstracts/mixins/loading' as loading;

.button {
  @extend %button-base;
  
  padding: var(--space-2-5) var(--space-4);
  font-size: var(--text-sm);
  gap: var(--space-2);
  min-height: var(--space-8);
  border-radius: var(--radius-md);
  
  @include interactive-base(button);
  @include interactive-a11y(button);
  
  @include semantic-variants((primary, success, warning, error, info), (filled, outlined, ghost, glass));
  
  &-secondary {
    background: var(--color-surface-elevated);
    color: var(--color-text);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);
    @include interactive-base(button);
    
    &:hover {
      background: color-mix(in srgb, var(--color-surface-elevated) 90%, var(--color-text));
      transform: translateY(-0.618px);
    }
    
    &:active {
      transform: scale(0.938);
    }
    
    &:focus-visible {
      outline: 2px solid var(--color-border-focus);
      outline-offset: 2px;
    }
  }
  
  &-outline {
    background: transparent;
    color: var(--color-text);
    border: 1.618px solid var(--color-border);
    transition: all var(--duration-fast) var(--ease-out);
    
    &:hover {
      background: color-mix(in srgb, var(--color-surface) 10%, transparent);
      border-color: var(--color-border-hover);
    }
    
    &:active {
      background: color-mix(in srgb, var(--color-surface) 15%, transparent);
      transform: scale(0.969);
    }
    
    &:focus-visible {
      outline: 2px solid var(--color-border-focus);
      outline-offset: 2px;
    }
  }
  
  &-ghost {
    background: color-mix(in srgb, var(--color-surface) 8%, transparent);
    color: var(--color-text);
    border: 1px solid color-mix(in srgb, var(--color-border) 20%, transparent);
    transition: all var(--duration-fast) var(--ease-out);
    
    &:hover {
      background: color-mix(in srgb, var(--color-surface) 15%, transparent);
      border-color: color-mix(in srgb, var(--color-border) 30%, transparent);
    }
    
    &:active {
      background: color-mix(in srgb, var(--color-surface) 20%, transparent);
      transform: scale(0.969);
    }
    
    &:focus-visible {
      outline: 2px solid var(--color-border-focus);
      outline-offset: 2px;
    }
  }
  
  &-glass {
    @extend %glass-light;
    color: var(--color-text);
    transition: all var(--duration-normal) var(--ease-out);
    
    &:hover {
      backdrop-filter: blur(12px) saturate(120%);
      -webkit-backdrop-filter: blur(12px) saturate(120%);
      box-shadow: var(--shadow-md);
    }
    
    &:active {
      transform: scale(0.969);
    }
    
    &:focus-visible {
      outline: 2px solid var(--color-border-focus);
      outline-offset: 2px;
    }
  }
  
  &-gradient {
    background: var(--gradient-primary);
    color: var(--color-text-inverse);
    border: none;
    position: relative;
    overflow: hidden;
    box-shadow: 0 4px 15px color-mix(in srgb, var(--color-primary) 25%, transparent);
    transition: all var(--duration-normal) var(--ease-out);
    
    &::before {
      content: '';
      position: absolute;
      inset: 0;
      background: linear-gradient(
        105deg, 
        transparent 40%, 
        rgba(255, 255, 255, 0.3) 50%, 
        transparent 60%
      );
      transform: translateX(-100%);
      transition: transform var(--duration-slow) var(--ease-out);
    }
    
    &:hover {
      transform: translateY(-1px);
      box-shadow: 
        0 6px 20px color-mix(in srgb, var(--color-primary) 35%, transparent),
        0 2px 8px color-mix(in srgb, var(--color-primary) 25%, transparent);
      
      &::before { 
        transform: translateX(100%);
      }
    }
    
    &:active {
      transform: scale(0.969);
    }
  }

  &-neon {
    background: transparent;
    color: var(--color-primary);
    border: 2px solid var(--color-primary);
    position: relative;
    box-shadow: 
      inset 0 0 10px color-mix(in srgb, var(--color-primary) 15%, transparent),
      0 0 10px color-mix(in srgb, var(--color-primary) 20%, transparent);
    transition: all var(--duration-normal) var(--ease-out);
    text-shadow: 0 0 3px color-mix(in srgb, var(--color-primary) 30%, transparent);
    
    &:hover {
      background: color-mix(in srgb, var(--color-primary) 10%, transparent);
      color: var(--color-primary);
      border-color: var(--color-primary);
      box-shadow: 
        inset 0 0 20px color-mix(in srgb, var(--color-primary) 25%, transparent),
        0 0 20px color-mix(in srgb, var(--color-primary) 40%, transparent),
        0 0 40px color-mix(in srgb, var(--color-primary) 20%, transparent);
      text-shadow: 
        0 0 8px color-mix(in srgb, var(--color-primary) 60%, transparent),
        0 0 3px rgba(255, 255, 255, 0.4);
      transform: translateY(-1px);
    }
    
    &:active {
      transform: scale(0.969);
    }
  }

  &-neumorphism {
    background: var(--color-surface-elevated);
    color: var(--color-text);
    border: none;
    box-shadow: 
      6px 6px 12px color-mix(in srgb, var(--color-text) 15%, transparent),
      -6px -6px 12px color-mix(in srgb, var(--color-surface) 100%, rgba(255, 255, 255, 0.8));
    transition: all var(--duration-normal) var(--ease-out);
    
    &:hover {
      box-shadow: 
        8px 8px 16px color-mix(in srgb, var(--color-text) 18%, transparent),
        -8px -8px 16px color-mix(in srgb, var(--color-surface) 100%, rgba(255, 255, 255, 0.9));
    }
    
    &:active {
      box-shadow: 
        inset 3px 3px 6px color-mix(in srgb, var(--color-text) 12%, transparent),
        inset -3px -3px 6px color-mix(in srgb, var(--color-surface) 100%, rgba(255, 255, 255, 0.7));
    }
  }
  
  &-shimmer {
    background: linear-gradient(
      90deg,
      var(--color-primary),
      color-mix(in srgb, var(--color-primary) 80%, var(--color-info)),
      var(--color-primary)
    );
    background-size: 200% 100%;
    color: var(--color-text-inverse);
    border: none;
    box-shadow: 0 4px 15px color-mix(in srgb, var(--color-primary) 20%, transparent);
    animation: shimmer 3s linear infinite;
    transition: all var(--duration-normal) var(--ease-out);
    
    &:hover {
      transform: translateY(-1px);
      box-shadow: 
        0 6px 20px color-mix(in srgb, var(--color-primary) 30%, transparent),
        0 2px 8px color-mix(in srgb, var(--color-info) 20%, transparent);
      animation-duration: 1.5s;
    }
    
    &:active {
      transform: scale(0.969);
    }
  }
  
  &-enterprise {
    background: linear-gradient(
      135deg,
      var(--color-surface-elevated),
      color-mix(in srgb, var(--color-primary) 8%, var(--color-surface))
    );
    color: var(--color-primary);
    border: 1px solid color-mix(in srgb, var(--color-primary) 20%, var(--color-border));
    box-shadow: 
      0 2px 8px color-mix(in srgb, var(--color-text) 8%, transparent),
      inset 0 1px 0 color-mix(in srgb, var(--color-surface) 100%, rgba(255, 255, 255, 0.5));
    position: relative;
    overflow: hidden;
    transition: all var(--duration-normal) var(--ease-out);
    
    &::before {
      content: '';
      position: absolute;
      inset: 0;
      background: linear-gradient(
        to bottom,
        rgba(255, 255, 255, 0.1),
        transparent 50%,
        rgba(0, 0, 0, 0.05)
      );
      pointer-events: none;
    }
    
    &:hover {
      background: linear-gradient(
        135deg,
        color-mix(in srgb, var(--color-primary) 15%, var(--color-surface-elevated)),
        color-mix(in srgb, var(--color-primary) 25%, var(--color-surface))
      );
      color: var(--color-primary); // Keep primary color on hover
      border-color: var(--color-primary);
      transform: translateY(-1px);
      box-shadow: 
        0 4px 12px color-mix(in srgb, var(--color-primary) 25%, transparent),
        inset 0 1px 0 color-mix(in srgb, rgba(255, 255, 255, 0.2) 100%, transparent);
    }
    
    &:active {
      transform: scale(0.969);
      box-shadow: 
        0 2px 6px color-mix(in srgb, var(--color-primary) 20%, transparent),
        inset 0 2px 4px color-mix(in srgb, var(--color-text) 10%, transparent);
    }
  }

  &-xs {
    padding: var(--space-0-5) var(--space-1);
    font-size: var(--text-xs);
    gap: var(--space-0-5);
    min-height: var(--space-2) !important; // Force override of touch-target-min
    border-radius: var(--radius-sm);
  }
  
  &-sm {
    padding: var(--space-1-5) var(--space-3);
    font-size: var(--text-sm);
    gap: var(--space-1);
    min-height: var(--space-6); // Ensure clear difference from XS
    border-radius: var(--radius-md);
  }
  
  &-lg {
    padding: var(--space-4) var(--space-8);
    font-size: var(--text-base);
    gap: var(--space-3);
    min-height: var(--space-10);
    border-radius: var(--radius-lg);
  }
  
  &-xl {
    padding: var(--space-5) var(--space-10);
    font-size: var(--text-lg);
    gap: var(--space-4);
    min-height: var(--space-12);
    border-radius: var(--radius-lg);
  }

  &-icon {
    aspect-ratio: 1;
    gap: 0;
    min-height: unset;
    
    width: var(--touch-target-min);
    height: var(--touch-target-min);
    padding: var(--space-2);
    
    &.button-xs {
      width: var(--space-6);
      height: var(--space-6);
      padding: var(--space-1);
      font-size: var(--text-xs);
    }
    
    &.button-sm {
      width: var(--space-8);
      height: var(--space-8);
      padding: var(--space-1-5);
      font-size: var(--text-sm);
    }
    
    &.button-lg {
      width: var(--space-12);
      height: var(--space-12);
      padding: var(--space-3);
      font-size: var(--text-lg);
    }
    
    &.button-xl {
      width: var(--space-16);
      height: var(--space-16);
      padding: var(--space-4);
      font-size: var(--text-xl);
    }
  }

  &-full { width: 100%; }
  &-vertical { 
    flex-direction: column;
  }

  &-compact {
    padding: var(--space-0-5) var(--space-2);
    gap: var(--space-0-5);
    
    &.button-xs { 
      padding: var(--space-0-5) var(--space-1);
      gap: var(--space-0-5);
    }
    &.button-sm { 
      padding: var(--space-0-5) var(--space-2);
      gap: var(--space-0-5);
    }
    &.button-lg { 
      padding: var(--space-2) var(--space-4);
      gap: var(--space-2);
    }
    &.button-xl { 
      padding: var(--space-3) var(--space-6);
      gap: var(--space-3);
    }
    
    &.button-icon {
      width: var(--space-5); 
      height: var(--space-5);
      padding: var(--space-0-5);
      
      &.button-xs {
        width: var(--space-3);
        height: var(--space-3);
        padding: var(--space-0-5);
      }
      &.button-sm {
        width: var(--space-4);
        height: var(--space-4);
        padding: var(--space-0-5);
      }
      &.button-lg {
        width: var(--space-6);
        height: var(--space-6);
        padding: var(--space-1);
      }
      &.button-xl {
        width: var(--space-8);
        height: var(--space-8);
        padding: var(--space-1);
      }
    }
  }

  &-dense {
    padding: var(--space-1) var(--space-2);
    gap: var(--space-1);
    
    &.button-xs { 
      padding: var(--space-0-5) var(--space-1-5);
      gap: var(--space-0-5);
    }
    &.button-sm { 
      padding: var(--space-1) var(--space-2);
      gap: var(--space-1);
    }
    &.button-lg { 
      padding: var(--space-2-5) var(--space-5);
      gap: var(--space-2-5);
    }
    &.button-xl { 
      padding: var(--space-4) var(--space-8);
      gap: var(--space-4);
    }
    
    &.button-icon {
      width: var(--space-5);
      height: var(--space-5);
      padding: var(--space-1);
      
      &.button-xs {
        width: var(--space-3);
        height: var(--space-3);
        padding: var(--space-0-5);
      }
      &.button-sm {
        width: var(--space-4);
        height: var(--space-4);
        padding: var(--space-0-5);
      }
      &.button-lg {
        width: var(--space-6);
        height: var(--space-6);
        padding: var(--space-1);
      }
      &.button-xl {
        width: var(--space-8); // ~3.5rem * 0.5 for dense
        height: var(--space-8);
        padding: var(--space-1-5);
      }
    }
  }

  &-spacious {
    padding: var(--space-2) var(--space-3);
    gap: var(--space-2);
    
    &.button-xs { 
      padding: var(--space-1) var(--space-2-5);
      gap: var(--space-1);
    }
    &.button-sm { 
      padding: var(--space-2) var(--space-3);
      gap: var(--space-2);
    }
    &.button-lg { 
      padding: var(--space-5) var(--space-8);
      gap: var(--space-5);
    }
    &.button-xl { 
      padding: var(--space-8) var(--space-10);
      gap: var(--space-8);
    }
    
    // Icon button spacious adjustments
    &.button-icon {
      width: var(--space-8);
      height: var(--space-8);
      padding: var(--space-2);
      
      &.button-xs {
        width: var(--space-5);
        height: var(--space-5);
        padding: var(--space-1);
      }
      &.button-sm {
        width: var(--space-6);
        height: var(--space-6);
        padding: var(--space-1-5);
      }
      &.button-lg {
        width: var(--space-10);
        height: var(--space-10);
        padding: var(--space-2);
      }
      &.button-xl {
        width: var(--space-10);
        height: var(--space-10);
        padding: var(--space-2-5);
      }
    }
  }
  
  &.loading,
  &[aria-busy="true"],
  &[data-loading="true"],
  &[data-state="loading"] {
    @include loading.loading-foundation(
      $pointer-events: none,
      $cursor: wait,
      $opacity: 1,
      $user-select: none
    );
    
    --button-loading-size: var(--icon-base);
    --button-loading-border: var(--border-2);
    
    // Override generic .loading - clean onion approach
    &.loading::after,
    &.loading::before {
      display: none;
    }
    
    position: relative;
    
    // Only hide non-loading content during loading
    > span:not(.loading-text),
    > i:not(.loading-icon) {
      display: none;
    }
    
    // Preserve original button text color during loading
    &.button-primary,
    &.button-success,
    &.button-warning,
    &.button-error,
    &.button-info {
      color: var(--color-text-inverse);
    }
    
    &.button-secondary {
      color: var(--color-text);
    }
    
    &.button-outline,
    &.button-ghost {
      color: var(--color-primary);
    }
    
    &.button-glass {
      color: var(--color-text);
    }
    
    &.button-gradient,
    &.button-neon,
    &.button-shimmer {
      color: var(--color-text-inverse);
    }
    
    &.button-neumorphism,
    &.button-enterprise {
      color: var(--color-primary);
    }
    
    &::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      @include loading.spinner-core(
        $size: var(--button-loading-size, var(--icon-base)),
        $border-width: var(--button-loading-border, 2px),
        $speed: var(--button-loading-speed, 0.8s)
      );
      z-index: 1;
    }
    
    // Loading with text: use data attribute instead of :has()
    &[data-loading-text="true"] {
      // Hide centered spinner when loading text is present
      &::after {
        display: none !important;
      }
      
      // Show loading text with inline spinner
      > .loading-text {
        display: inline-flex !important;
        align-items: center;
        gap: var(--space-2);
        color: currentColor !important;
        opacity: 1 !important;
        visibility: visible !important;
        
        &::before {
          content: '';
          @include loading.spinner-core(
            $size: var(--button-loading-size, 1em),
            $border-width: var(--button-loading-border, 2px),
            $speed: var(--button-loading-speed, 0.8s)
          );
          flex-shrink: 0;
          display: inline-block;
        }
      }
    }
    
    &.button-primary,
    &.button-success,
    &.button-warning,
    &.button-error,
    &.button-info {
      @include loading.loading-theme-colors(inverse);
    }
    
    &.button-secondary,
    &.button-outline,
    &.button-ghost,
    &.button-glass {
      @include loading.loading-theme-colors(primary);
    }
    
    &.button-gradient,
    &.button-neon,
    &.button-shimmer {
      @include loading.loading-theme-colors(inverse);
    }
    
    &.button-neumorphism,
    &.button-enterprise {
      @include loading.loading-theme-colors(default);
    }
    
    &.button-xs {
      --button-loading-size: var(--icon-xs);
      --button-loading-border: var(--border-1);
    }
    
    &.button-sm {
      --button-loading-size: var(--icon-sm);
      --button-loading-border: var(--border-2);
    }
    
    &.button-lg {
      --button-loading-size: var(--icon-lg);
      --button-loading-border: var(--border-3);
    }
    
    &.button-xl {
      --button-loading-size: var(--icon-xl);
      --button-loading-border: var(--border-4);
    }
    
    &.button-icon {
      &::after {
        --button-loading-size: 1em;
      }
      
      &.button-xs::after {
        --button-loading-size: 0.75em;
      }
      
      &.button-sm::after {
        --button-loading-size: 0.875em;
      }
      
      &.button-lg::after {
        --button-loading-size: 1.25em;
      }
      
      &.button-xl::after {
        --button-loading-size: 1.5em;
      }
    }
    
    &.button-compact {
      --button-loading-size: 1em;
      --button-loading-border: 1.5px;
      
      &.button-xs {
        --button-loading-size: 0.75em;
      }
      &.button-sm {
        --button-loading-size: 0.875em;
      }
      &.button-lg {
        --button-loading-size: 1.25em;
      }
      &.button-xl {
        --button-loading-size: 1.5em;
      }
    }
    
    &.button-dense {
      --button-loading-size: 1.1em;
      
      &.button-xs {
        --button-loading-size: 0.8em;
      }
      &.button-sm {
        --button-loading-size: 0.95em;
      }
      &.button-lg {
        --button-loading-size: 1.3em;
      }
      &.button-xl {
        --button-loading-size: 1.5em;
      }
    }
    
    &.button-spacious {
      --button-loading-size: 1.4em;
      --button-loading-border: 3px;
      
      &.button-xs {
        --button-loading-size: 1em;
      }
      &.button-sm {
        --button-loading-size: 1.2em;
      }
      &.button-lg {
        --button-loading-size: 1.6em;
      }
      &.button-xl {
        --button-loading-size: 1.8em;
      }
    }
    
    @include loading.loading-performance-optimize();
    @include loading.loading-dark-mode-support();
  }
  
  &.loading-dots {
    @include loading.loading-inline($side: left, $gap: var(--space-1));
    
    &::before {
      content: '';
      display: inline-flex;
      width: auto;
      height: auto;
      border: none;
      animation: none;
      gap: 0.3em;
      
      &,
      &::before,
      &::after {
        content: '';
        display: inline-block;
        width: 0.4em;
        height: 0.4em;
        background: var(--loading-spinner-color, var(--color-primary));
        border-radius: 50%;
        animation: pulse 1.4s ease-in-out infinite both;
      }
      
      &::before {
        animation-delay: -0.32s;
      }
      
      &::after {
        animation-delay: -0.16s;
      }
    }
  }
  
  &.loading-pulse {
    @include loading.loading-foundation();
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    
    color: transparent;
    > * {
      opacity: 0;
    }
  }
  
  &.loading-inline {
    @include loading.loading-inline($side: left, $gap: var(--space-2));
    
    color: inherit;
    > * {
      opacity: 1;
    }
  }
  
  &.loading-inline-right {
    @include loading.loading-inline($side: right, $gap: var(--space-2));
    
    color: inherit;
    > * {
      opacity: 1;
    }
  }
  
  &:disabled,
  &[disabled] {
    opacity: 0.6;
    pointer-events: none;
    cursor: not-allowed;
  }
  
  &:has(.button-badge),
  &[data-has-badge="true"],
  &.button-with-badge {
    position: relative;
  }
}

.button-icon-start { margin-right: var(--space-2); }
.button-icon-end { margin-left: var(--space-2); }
.button-icon-top { margin-bottom: var(--space-1); }
.button-icon-bottom { margin-top: var(--space-1); }