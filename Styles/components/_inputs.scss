@use '../abstracts' as *;

@mixin input-semantic-state($color, $focus-opacity: 15%) {
  border-color: var(--color-#{$color});
  background: color-mix(in srgb, var(--color-#{$color}) 3%, var(--color-surface-elevated));

  @include interactive-hover(input);
  @include interactive-focus-ring(input, var(--color-#{$color}));

  &:focus {
    background: var(--color-surface-elevated);
    box-shadow: 0 0 0 3px color-mix(in srgb, var(--color-#{$color}) #{$focus-opacity}, transparent);
  }
}

.select-field {
  @extend %input-base-style;
  position: relative;
  appearance: none;
  padding-right: var(--space-12);

  &::after {
    content: "";
    position: absolute;
    right: var(--space-3);
    top: 50%;
    transform: translateY(-50%);
    width: 0;
    height: 0;
    border: var(--space-1) solid transparent;
    border-top-color: currentColor;
    pointer-events: none;
    opacity: 0.7;
    transition: all var(--duration-fast) var(--ease-out);
  }

  @include modifier(compact) { padding-right: var(--space-8); }
  @include modifier(dense) { padding-right: var(--space-9); }
  @include modifier(spacious) { padding-right: var(--space-12); }

  &:hover:not(:disabled)::after {
    opacity: 1;
    transform: translateY(-50%) scale(1.1);
  }

  &:focus::after {
    opacity: 1;
    color: var(--color-primary);
  }
}

.input {
  @extend %input-base-style;
  @include interactive-base(input);

  &:hover:not(:focus):not(:disabled) {
    transform: translateY(-1px);
    filter: brightness(1.02) saturate(1.05);
  }

  &:focus {
    border-color: var(--color-primary);
    background: var(--color-surface-elevated);
  }

  @include modifier(clean) {
    @include semantic-ghost(surface, 0);
  }

  @include modifier(filled) {
    @include semantic-ghost(surface, 5);
  }

  @include modifier(outlined) {
    @include semantic-outlined(border);
  }

  @include modifier(ghost) {
    @include semantic-ghost(surface, 8);
  }

  @include modifier(sm) {
    @extend %spacing-compact;
    min-height: var(--space-10);
  }

  @include modifier(lg) {
    @extend %spacing-default;
    min-height: var(--space-16);
    font-size: var(--text-lg);
  }

  @include modifier(loading) {
    @include loading-inline('start', 'sm', 'default');
  }

  // Input-specific semantic states
  &-error {
    @include input-semantic-state(error);
  }
  
  &-success {
    @include input-semantic-state(success);
  }
  
  &-warning {
    @include input-semantic-state(warning);
  }
  
  &-info {
    @include input-semantic-state(info);  
  }
  
  &-disabled {
    background: color-mix(in srgb, var(--color-text) 3%, var(--color-surface-elevated));
    color: var(--color-text-muted);
    border-color: var(--color-border-light);
    cursor: not-allowed;
    opacity: var(--opacity-disabled);
    
    &::placeholder {
      color: var(--color-text-subtle);
    }
  }

  // Unified density system integration
  &-density-compact {
    @include apply-density(compact, md);
    min-height: density-calc(10, compact);
  }
  
  &-density-dense {
    @include apply-density(dense, md);
    min-height: density-calc(12, dense);
  }
  
  &-density-spacious {
    @include apply-density(spacious, md);
    min-height: density-calc(16, spacious);
  }

  @include modifier(glass) {
    @extend %glass-medium;

    &:hover:not(:focus) {
      @extend %glass-heavy;
    }
  }

  @include modifier(modern) {
    @include interactive-enhanced(input, ('glow-on-hover': true));
  }
}

.input-group {
  @extend %form-group-base;
  position: relative;

  @include element(label) {
    @extend %section-title;
    font-size: var(--text-sm);
    text-transform: uppercase;
    letter-spacing: var(--tracking-wide);
  }

  @include element(icon) {
    @extend %icon-base;
    position: absolute;
    top: 50%;
    left: var(--space-4);
    transform: translateY(-50%);
    pointer-events: none;
    z-index: calc(var(--z-base) + 10);
    transition: all var(--duration-normal) var(--ease-out);
    color: var(--color-text-muted);
    opacity: 0.8;

    .input:focus + & {
      color: var(--color-primary);
      transform: translateY(-50%) scale(1.05);
      opacity: 1;
    }
    
    // State-specific icon colors
    .input-error:focus + &,
    .input-error + & {
      color: var(--color-error);
      opacity: 1;
    }
    
    .input-success:focus + &,
    .input-success + & {
      color: var(--color-success);
      opacity: 1;
    }
    
    .input-warning:focus + &,
    .input-warning + & {
      color: var(--color-warning);
      opacity: 1;
    }
    
    .input-disabled + & {
      color: var(--color-text-subtle);
      opacity: var(--opacity-disabled);
    }
  }

  @include element(icon-end) {
    @extend %icon-base;
    position: absolute;
    top: 50%;
    right: var(--space-4);
    transform: translateY(-50%);
    z-index: calc(var(--z-base) + 10);
    pointer-events: auto;

    button {
      @extend %interactive-base;
      @include interactive-base(button);
      padding: 0;
      border: none;
      background: transparent;
      width: 100%;
      height: 100%;
    }
  }

  @include element(error) {
    color: var(--color-error);
    font-size: var(--text-sm);
    margin-top: var(--space-2);
    padding: var(--space-2) var(--space-3);
    @include semantic-ghost(error, 8);
    border-left: calc(var(--space-1) * 0.75) solid var(--color-error);
    animation: slideUpSmooth 0.3s ease-out;
  }

  @include element(help) {
    color: var(--color-text-subtle);
    font-size: var(--text-sm);
    margin-top: var(--space-1);
  }

  @include modifier(loading) {
    @include loading-inline('start', 'sm', 'default');
  }
}

.textarea {
  @extend %input-base-style;
  @include interactive-base(input);
  min-height: calc(var(--space-10) * 3);
  resize: vertical;
  line-height: 1.6;

  @extend %scrollable-area-base;

  @include modifier(auto) {
    resize: none;
    overflow: hidden;
    field-sizing: content;
  }

  @include modifier(fixed) {
    resize: none;
    overflow-y: auto;
  }

  @include modifier(sm) {
    min-height: calc(var(--space-10) * 2);
    font-size: var(--text-sm);
  }

  @include modifier(lg) {
    min-height: calc(var(--space-10) * 4);
    font-size: var(--text-lg);
  }
}

.select {
  @extend %input-base-style;
  @include interactive-base(input);
  cursor: pointer;
  appearance: none;
}

// Checkbox styles moved to _checkbox.scss

.validation-message {
  @extend %icon-text-base;
  color: var(--color-error);
  font-size: var(--text-sm);
  margin-top: var(--space-2);
}
// Radio styles moved to _radio.scss

.input, .textarea, .select {
  @include modifier(with-start-icon) {
    padding-left: calc(var(--space-6) + var(--space-4) + var(--space-3));

    @include modifier(sm) {
      padding-left: calc(var(--space-5) + var(--space-3) + var(--space-2));
    }

    @include modifier(lg) {
      padding-left: calc(var(--space-7) + var(--space-5) + var(--space-4));
    }
  }

  @include modifier(with-end-icon) {
    padding-right: calc(var(--space-6) + var(--space-4) + var(--space-3));

    @include modifier(sm) {
      padding-right: calc(var(--space-5) + var(--space-3) + var(--space-2));
    }

    @include modifier(lg) {
      padding-right: calc(var(--space-7) + var(--space-5) + var(--space-4));
    }
  }
}

.input-group-icon ~ .input,
.input-group-icon ~ .textarea {
  padding-left: calc(var(--space-6) + var(--space-4) + var(--space-3));
}

.input {
  @include modifier(touch) {
    @extend %touch-target;
  }

  @include modifier(interactive) {
    @include interactive-enhanced(input, ('glow-on-hover': true, 'magnetic-hover': true));
  }
}
.input-floating {
  position: relative;
  width: 100%;

  > .input,
  > .textarea {
    width: 100%;

    &::placeholder {
      opacity: 0;
      color: transparent;
    }

    &:focus ~ .floating-label,
    &:not(:placeholder-shown) ~ .floating-label,
    &[data-has-value="true"] ~ .floating-label {
      top: 0;
      transform: translateY(-50%) scale(0.75);
      color: var(--color-primary);
      font-weight: 500;
      background: var(--color-surface-elevated);
      padding: 0 var(--space-2);
      border-radius: var(--radius-sm);
    }

    &:-webkit-autofill ~ .floating-label {
      top: 0;
      transform: translateY(-50%) scale(0.8);
      color: var(--color-primary);
      background: var(--color-surface-elevated);
      padding: 0 var(--space-2);
    }
  }

  .floating-label {
    position: absolute;
    top: 50%;
    left: var(--space-4);
    transform: translateY(-50%);
    color: var(--color-text-subtle);
    font-size: 16px;
    transition: all var(--duration-normal) var(--ease-out);
    pointer-events: none;
    z-index: calc(var(--z-base) + 11);
    white-space: nowrap;
    transform-origin: left center;
  }

  .input-with-start-icon {
    padding-left: calc(var(--space-6) + var(--space-4) + var(--space-3)) !important;

    ~ .floating-label {
      left: calc(var(--space-6) + var(--space-4) + var(--space-3));
    }

    @include modifier(sm) {
      padding-left: calc(var(--space-5) + var(--space-3) + var(--space-2)) !important;

      ~ .floating-label {
        left: calc(var(--space-5) + var(--space-3) + var(--space-2));
      }
    }

    @include modifier(lg) {
      padding-left: calc(var(--space-7) + var(--space-5) + var(--space-4)) !important;

      ~ .floating-label {
        left: calc(var(--space-7) + var(--space-5) + var(--space-4));
      }
    }
  }
}
