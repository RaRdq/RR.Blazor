@use '../abstracts' as *;

.input {
  all: unset;
  box-sizing: border-box;
  display: block;
  width: 100%;
  max-width: none;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", sans-serif;
  
  &.input {
    display: block;
    width: 100%;
  }
  
  font-size: max(16px, 1rem);
  font-weight: 400;
  line-height: 1.5;
  letter-spacing: 0.01em;
  
  color: var(--color-text);
  background: var(--color-surface-elevated);
  
  border: 2px solid var(--color-border);
  border-radius: var(--radius-xl); // Modern rounded corners
  
  // Perfect spacing - Mathematical golden ratio inspired
  padding: var(--space-5) var(--space-7);
  min-height: var(--space-15); // Optimal touch target
  
  // Advanced transitions with hardware acceleration
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1),
              transform 0.15s cubic-bezier(0.4, 0, 0.2, 1),
              box-shadow 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  will-change: border-color, box-shadow, transform;
  
  // Remove ALL browser defaults
  outline: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  -webkit-tap-highlight-color: transparent;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  
  // ULTRA MODERN HOVER - Subtle lift effect with filter
  &:hover:not(:focus):not(:disabled) {
    transform: translateY(-1px);
    box-shadow: 0 8px 25px -8px var(--overlay-light);
    border-color: var(--color-border);
    filter: brightness(1.02) saturate(1.05);
  }
  
  // MODERN PRO FOCUS - Subtle and professional
  &:focus {
    border-color: var(--color-primary);
    background: var(--color-surface-elevated);
    @include focus-shadow(var(--color-primary), 15%);
    transition: all 0.15s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  // PERFECT DISABLED STATE
  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    background: var(--color-surface);
    transform: none;
    box-shadow: none;
  }
  
  // Variant modifiers - explicit styling
  &-clean {
    background: var(--color-surface);
    border: 1px solid transparent;
    
    &:hover:not(:focus):not(:disabled) {
      background: var(--color-surface-elevated);
      border-color: var(--color-border);
      filter: brightness(1.02);
    }
    
    &:focus {
      background: var(--color-surface-elevated);
      border-color: var(--color-primary);
    }
  }
  
  &-filled {
    background: var(--color-surface);
    border: 1px solid transparent;
    
    &:hover:not(:focus):not(:disabled) {
      background: var(--color-surface-elevated);
      filter: brightness(1.02);
    }
    
    &:focus {
      background: var(--color-surface-elevated);
      border-color: var(--color-primary);
    }
  }
  
  &-outlined {
    background: transparent;
    border: 2px solid var(--color-border);
    
    &:hover:not(:focus):not(:disabled) {
      border-color: var(--color-border);
      background: color-mix(in srgb, var(--color-surface-elevated) 50%, transparent);
      filter: brightness(1.02) saturate(1.05);
    }
    
    &:focus {
      border-color: var(--color-primary);
      background: var(--color-surface-elevated);
    }
  }
  
  &-ghost {
    background: transparent;
    border: 1px solid transparent;
    
    &:hover:not(:focus):not(:disabled) {
      background: color-mix(in srgb, var(--color-surface-elevated) 30%, transparent);
      border-color: var(--color-border);
      filter: brightness(1.02);
    }
    
    &:focus {
      background: var(--color-surface-elevated);
      border-color: var(--color-primary);
    }
  }
  
  // Size variants with consistent icon spacing
  &-sm {
    padding: var(--space-2) var(--space-3);
    min-height: 2.5rem;
    font-size: var(--text-sm);
    border-radius: var(--radius-md);
    
    &.input-with-start-icon {
      padding-left: 50px; // Icon(16px) + Position(12px) + Gap(16px) + Padding(6px)
    }
    
    &.input-with-end-icon {
      padding-right: 44px; // Icon(20px) + Position(12px) + Gap(12px)
    }
  }
  
  &-lg {
    padding: var(--space-5) var(--space-5);
    min-height: 4rem;
    font-size: var(--text-lg);
    border-radius: var(--radius-xl);
    
    &.input-with-start-icon {
      padding-left: 60px;
    }
    
    &.input-with-end-icon {
      padding-right: 60px;
    }
  }
  
  // Default size icon spacing
  &.input-with-start-icon {
    padding-left: 64px; // Icon(24px) + Position(20px) + Gap(16px) + Padding(4px)
  }
  
  &.input-with-end-icon {
    padding-right: 52px; // Icon(24px) + Position(12px) + Gap(16px)
  }
  
  // State modifiers using &- pattern
  &-loading {
    @extend %loading-skeleton-base;
    pointer-events: none;
  }
  
  &-error {
    border-color: var(--color-error);
    background: var(--color-surface-elevated);
    
    &:focus {
      border-color: var(--color-error);
      @include focus-shadow(var(--color-error), 15%);
    }
    
    &:hover:not(:focus) {
      border-color: var(--color-error);
      box-shadow: 0 2px 8px rgba(220, 38, 38, 0.1);
    }
  }
  
  &-success {
    border-color: var(--color-success);
    background: var(--color-surface-elevated);
    
    &:focus {
      border-color: var(--color-success);
      @include focus-shadow(var(--color-success), 15%);
    }
    
    &:hover:not(:focus) {
      border-color: var(--color-success);
      box-shadow: 0 2px 8px rgba(34, 197, 94, 0.1);
    }
  }
  
  // Density variants - PROPER HEIGHT AND PROFESSIONAL
  &-compact {
    padding: var(--space-2) var(--space-3);
    min-height: 2.5rem;
    font-size: var(--text-sm);
  }
  
  &-dense {
    padding: var(--space-3) var(--space-3);
    min-height: 3rem;
    font-size: var(--text-base);
  }
  
  &-normal {
    padding: var(--space-3) var(--space-4);
    min-height: 3.5rem;
    font-size: var(--text-base);
  }
  
  &-spacious {
    padding: var(--space-4) var(--space-4);
    min-height: 4rem;
    font-size: var(--text-base);
  }
  
  // Interactive variants using &- pattern
  &-floating {
    padding-top: var(--space-5);
    padding-bottom: var(--space-3);
    
    &.input-sm {
      padding-top: var(--space-4);
      padding-bottom: var(--space-2);
    }
    
    &.input-lg {
      padding-top: var(--space-6);
      padding-bottom: var(--space-4);
    }
  }
  
  &-glass {
    @include glass-effect(medium);
    
    &:hover:not(:focus) {
      @include glass-effect(heavy);
    }
  }
  
  &-modern {
    @include interactive-card(var(--shadow-lg), var(--shadow-md), translateY(-1px));
    
    &:focus {
      box-shadow: 
        0 0 0 3px var(--color-primary), 
        var(--shadow-lg),
        0 8px 25px -5px rgba(0, 0, 0, 0.1);
    }
  }
}

// Input Group System - Utility-first composition  
.input-group {
  @extend %form-group-base;
  margin-bottom: 0;
  width: 100%;
  max-width: none;
  
  &-label {
    @extend %section-title;
    font-size: var(--text-sm);
    margin-bottom: var(--space-0-5);
    text-transform: uppercase;
    letter-spacing: var(--tracking-wide);
  }
  
  &-icon {
    @extend %icon-base;
    position: absolute;
    top: 50%;
    left: 20px; // Default positioning
    transform: translateY(-50%);
    pointer-events: none;
    z-index: calc(var(--z-base) + 2);
    width: var(--space-6);
    height: var(--space-6);
    color: var(--color-text-muted);
    font-size: var(--space-6);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    
    // Size-specific positioning
    .input-sm ~ & {
      left: 12px;
      width: var(--space-5);
      height: var(--space-5);
      font-size: var(--space-5);
    }
    
    .input-lg ~ & {
      left: 16px; // Consistent positioning for better alignment
      width: 24px;
      height: 24px;
      font-size: 20px; // Slightly smaller for better proportion
    }
    
    // Clean focus state
    .input:focus ~ & {
      color: var(--color-primary);
    }
  }
  
  &-icon-end {
    @extend %icon-base;
    position: absolute;
    top: 50%;
    right: var(--space-3);
    transform: translateY(-50%);
    z-index: calc(var(--z-base) + 1);
    width: var(--space-6);
    height: var(--space-6);
    pointer-events: auto;
    color: var(--color-text-muted);
    font-size: var(--text-base);
    display: flex;
    align-items: center;
    justify-content: center;
    
    & button {
      @extend %interactive-base;
      padding: var(--space-2);
      border-radius: var(--radius-md);
      transition: all var(--duration-normal) var(--ease-out);
      border: none;
      background: transparent;
      color: inherit;
      width: 100%;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      
      &:hover {
        background: var(--color-surface-elevated);
        color: var(--color-text);
      }
      
      &:focus {
        outline: 2px solid var(--color-primary);
        outline-offset: 1px;
      }
    }
  }
  
  &-error {
    color: var(--color-error);
    font-size: var(--text-sm);
    font-weight: 500;
    margin-top: var(--space-1-5);
    padding-left: var(--space-1);
    line-height: 1.4;
    display: flex;
    align-items: flex-start;
    gap: var(--space-1);
    animation: slideInUp 0.2s ease-out;
    
    // Error icon for better UX
    &::before {
      content: "âš ";
      color: var(--color-error);
      font-size: var(--text-xs);
      margin-top: 1px;
      flex-shrink: 0;
    }
  }
  
  &-help {
    color: var(--color-text-subtle);
    font-size: var(--text-sm);
    margin-top: var(--space-1);
    padding-left: var(--space-1);
    line-height: 1.4;
  }
  
  // Error animation
  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(4px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  &-loading {
    @extend %loading-skeleton-base;
    position: absolute;
    inset: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: var(--radius-md);
  }
}

// REVOLUTIONARY TEXTAREA SYSTEM - UNIFIED WITH INPUT
.textarea {
  @extend .input;
  min-height: 120px; // PERFECT HEIGHT for comfort
  resize: vertical;
  line-height: 1.6; // OPTIMAL readability
  
  // Auto-resize capability
  &-auto {
    resize: none;
    overflow: hidden;
    field-sizing: content; // Modern CSS auto-resize
  }
  
  &-fixed {
    resize: none;
    overflow-y: auto;
  }
  
  // Size variants for textarea
  &-sm {
    min-height: 80px;
    font-size: 14px;
    line-height: 1.5;
  }
  
  &-lg {
    min-height: 160px;
    font-size: 18px;
    line-height: 1.7;
  }
  
  // Perfect scrollbar styling
  &::-webkit-scrollbar {
    width: 8px;
  }
  
  &::-webkit-scrollbar-track {
    background: var(--color-surface);
    border-radius: var(--radius-sm);
  }
  
  &::-webkit-scrollbar-thumb {
    background: var(--color-border);
    border-radius: var(--radius-sm);
    
    &:hover {
      background: var(--color-border);
    }
  }
}

// Select System - Extending input base with dropdown styling
.select {
  @extend .input;
  cursor: pointer;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath fill='%23666' d='M7 10l5 5 5-5z'/%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: right var(--space-3) center;
  background-size: 20px;
  padding-right: var(--space-10);
  
  &:disabled {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath fill='%23999' d='M7 10l5 5 5-5z'/%3E%3C/svg%3E");
  }
}

// Checkbox System - Matches RCheckbox component structure
.checkbox {
  @extend %touch-target;
  @extend %interactive-base;
  display: flex;
  align-items: center;
  gap: var(--space-3);
  padding: var(--space-3);
  border-radius: var(--radius-lg);
  cursor: pointer;
  
  &:hover {
    background: var(--color-surface-elevated);
  }
  
  &--disabled {
    opacity: 0.6;
    cursor: not-allowed;
    pointer-events: none;
  }
  
  // Hidden checkbox input (positioned absolutely behind the mark)
  input[type="checkbox"] {
    @extend %sr-only;
    
    // When checked, style the checkbox mark
    &:checked + .checkbox-mark {
      background: var(--color-primary);
      border-color: var(--color-primary);
      
      .checkbox-icon {
        opacity: 1;
        transform: scale(1);
      }
    }
    
    // Focus styles
    &:focus + .checkbox-mark {
      outline: 0.125rem solid var(--color-primary);
      outline-offset: 0.125rem;
    }
  }
  
  &-mark {
    @extend %icon-base;
    width: var(--space-5);
    height: var(--space-5);
    border: 2px solid var(--color-border);
    border-radius: var(--radius-sm);
    background: var(--color-surface-elevated);
    flex-shrink: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all var(--duration-normal) var(--ease-out);
    position: relative;
    
    &:hover {
      border-color: var(--color-primary);
    }
    
    &--primary {
      border: 2px solid var(--color-primary);
    }
    
    &--success {
      border: 2px solid var(--color-success);
    }
    
    &--warning {
      border: 2px solid var(--color-warning);
    }
    
    &--danger {
      border: 2px solid var(--color-error);
    }
    
    &--small {
      width: var(--space-4);
      height: var(--space-4);
    }
    
    &--large {
      width: var(--space-6);
      height: var(--space-6);
    }
  }
  
  &-icon {
    color: var(--color-text-inverse);
    font-size: var(--text-sm);
    opacity: 0;
    transform: scale(0.8);
    transition: all var(--duration-normal) var(--ease-out);
  }
  
  &-label {
    color: var(--color-text);
    font-weight: var(--font-medium);
    font-size: var(--text-sm);
    cursor: pointer;
    flex: 1;
    
    &--disabled {
      color: var(--color-text-subtle);
      cursor: not-allowed;
    }
  }
  
  &-content {
    display: flex;
    align-items: center;
    gap: var(--space-2);
  }
  
  &-text {
    color: var(--color-text);
    font-weight: var(--font-medium);
    font-size: var(--text-sm);
  }
  
  &-text-icon {
    color: var(--color-primary);
    font-size: var(--text-base);
    margin-right: var(--space-1);
  }
  
  &-description {
    color: var(--color-text-muted);
    font-size: var(--text-xs);
    margin-top: var(--space-1);
    line-height: var(--leading-relaxed);
  }
}

// Validation message styling
.validation-message {
  color: var(--color-error);
  font-size: var(--text-sm);
  margin-top: var(--space-2);
  display: flex;
  align-items: center;
  gap: var(--space-1);
}


// Radio System - Utility-first with extends
.radio {
  @extend %touch-target;
  @extend %interactive-base;
  
  &-group {
    @extend %form-group-base;
    gap: var(--space-3);
  }
  
  &-option {
    @extend %card-base-enhanced;
    @include interactive-card(var(--shadow-md), var(--shadow-sm), translateY(-0.5px));
    display: flex;
    align-items: flex-start;
    gap: var(--space-3);
    padding: var(--space-4);
    cursor: pointer;
    
    input[type="radio"] {
      @extend %sr-only;
    }
    
    input[type="radio"]:checked ~ .radio-mark {
      border-color: var(--color-primary);
      
      &::after {
        content: '';
        position: absolute;
        width: 10px;
        height: 10px;
        background: var(--color-primary);
        border-radius: var(--radius-full);
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
      }
    }
  }
  
  &-mark {
    @extend %icon-base;
    width: var(--space-5);
    height: var(--space-5);
    border: 2px solid var(--color-border);
    border-radius: var(--radius-full);
    flex-shrink: 0;
    margin-top: 2px;
  }
  
  &-content {
    display: flex;
    flex-direction: column;
    gap: var(--space-1);
    
    strong {
      font-size: var(--text-base);
      font-weight: var(--font-semibold);
      color: var(--color-text);
    }
    
    span {
      font-size: var(--text-sm);
      color: var(--color-text-muted);
    }
  }
  
  // Card variant for radio options
  &-card {
    @extend %card-base-enhanced;
    @include interactive-card(var(--shadow-lg), var(--shadow-md), translateY(-1px));
    position: relative;
    cursor: pointer;
    text-align: center;
    
    input[type="radio"] {
      @extend %sr-only;
      
      &:checked + .radio-card-content {
        border-color: var(--color-primary);
        background: var(--color-primary);
        color: var(--color-text-inverse);
        
        i, strong, span {
          color: var(--color-text-inverse);
        }
      }
    }
    
    &-content {
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: var(--space-6);
      
      i {
        font-size: var(--space-12);
        color: var(--color-primary);
        margin-bottom: var(--space-3);
      }
    }
  }
}

// REVOLUTIONARY ICON SYSTEM - PERFECT POSITIONING
.input {
  &-with-start-icon {
    padding-left: 60px; // MASSIVE SPACE for perfect icon clearance
    
    &.input-sm {
      padding-left: 48px;
    }
    
    &.input-lg {
      padding-left: 72px;
    }
  }
  
  &-with-end-icon {
    padding-right: 48px;
    
    &.input-sm {
      padding-right: 40px;
    }
    
    &.input-lg {
      padding-right: 56px;
    }
  }
  
  // Animation utilities using &- pattern
  &-animate {
    &:focus {
      animation: none;
    }
    
    &.animate-focus:focus {
      animation: scaleIn 0.2s ease-out;
    }
    
    &.animate-error {
      animation: shake 0.4s ease-in-out;
    }
    
    &.animate-success {
      animation: successFadeIn 0.5s ease-out;
    }
  }
  
  // Touch utilities using &- pattern
  &-touch {
    @extend %touch-target;
  }
  
  // Interactive utilities using &- pattern
  &-interactive {
    @extend %interactive-base;
    
    &:hover {
      transform: translateY(-1px);
      box-shadow: var(--shadow-lg);
    }
  }
}

// Legacy compatibility - Use utility classes instead
.checkbox-box {
  @extend .checkbox;
}

.form-select {
  @extend .select;
  
  &-sm {
    @extend .select;
    @extend %spacing-compact;
  }
  
  &-lg {
    @extend .select;
    @extend %spacing-default;
    font-size: var(--text-lg);
  }
}

// REVOLUTIONARY FLOATING LABEL SYSTEM - PERFECTION ACHIEVED!
.input-floating {
  position: relative;
  
  .floating-label {
    position: absolute;
    left: 24px; // PERFECT POSITIONING
    top: 50%;
    transform: translateY(-50%);
    color: var(--color-text-subtle);
    font-size: 16px;
    font-weight: 400;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    pointer-events: none;
    z-index: calc(var(--z-base) + 3);
    white-space: nowrap;
    transform-origin: left center;
    // Clean transparent background
    background: transparent;
    padding: 0;
    line-height: 1.2;
    opacity: 1;
    user-select: none;
    // CRISP text always
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  
  input, textarea {
    // COMPLETELY HIDE placeholder - label is the visual indicator
    &::placeholder {
      opacity: 0;
      color: transparent;
    }
    
    // MODERN floating animation - Completely transparent background
    &:focus ~ .floating-label,
    &:not(:placeholder-shown) ~ .floating-label,
    &[data-has-value="true"] ~ .floating-label {
      top: 0;
      left: 20px;
      transform: translateY(-50%) scale(0.8);
      color: var(--color-primary);
      font-weight: 500;
      z-index: calc(var(--z-base) + 4);
      // Clean transparent background
      background: transparent;
      padding: 0 4px;
      border-radius: 0;
      // Clean shadow without background clash
      box-shadow: none;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }
    
    // Error state - Clean and professional
    &.input-error ~ .floating-label {
      color: var(--color-error);
      background: transparent;
    }
    
    // Success state - Clean and professional  
    &.input-success ~ .floating-label {
      color: var(--color-success);
      background: transparent;
    }
    
    // Active state - Clean and professional
    &:focus ~ .floating-label {
      color: var(--color-primary);
      background: transparent;
    }
    
    // Filled but not focused - SUBTLE GRAY
    &:not(:focus):not(:placeholder-shown) ~ .floating-label,
    &:not(:focus)[data-has-value="true"] ~ .floating-label {
      color: var(--color-text-muted);
      background: transparent;
      box-shadow: none;
    }
  }
  
  // Icon spacing adjustments - Calculated clearance
  &.input-with-start-icon .floating-label {
    left: 52px; // Icon(24px) + Position(20px) + Gap(8px)
  }
  
  &.input-with-start-icon.input-sm .floating-label {
    left: 40px; // Icon(20px) + Position(12px) + Gap(8px)
  }
  
  &.input-with-start-icon.input-lg .floating-label {
    left: 60px; // Icon(28px) + Position(24px) + Gap(8px)
  }
  
  // When floating, maintain same positioning
  &.input-with-start-icon input:focus ~ .floating-label,
  &.input-with-start-icon input:not(:placeholder-shown) ~ .floating-label,
  &.input-with-start-icon input[data-has-value="true"] ~ .floating-label {
    left: 52px; // Consistent with static position
  }
  
  // Size-specific floating positions  
  &.input-with-start-icon.input-sm input:focus ~ .floating-label,
  &.input-with-start-icon.input-sm input:not(:placeholder-shown) ~ .floating-label,
  &.input-with-start-icon.input-sm input[data-has-value="true"] ~ .floating-label {
    left: 40px;
  }
  
  &.input-with-start-icon.input-lg input:focus ~ .floating-label,
  &.input-with-start-icon.input-lg input:not(:placeholder-shown) ~ .floating-label,
  &.input-with-start-icon.input-lg input[data-has-value="true"] ~ .floating-label {
    left: 60px;
  }
  
  // Size variants with proper scaling
  &.input-sm {
    .floating-label {
      font-size: var(--text-sm);
      left: var(--space-2);
    }
    
    input {
      &:focus ~ .floating-label,
      &:not(:placeholder-shown) ~ .floating-label,
      &[data-has-value="true"] ~ .floating-label {
        transform: translateY(-50%) scale(0.7);
      }
    }
  }
  
  &.input-lg {
    .floating-label {
      font-size: var(--text-lg);
      left: var(--space-4);
    }
    
    input {
      &:focus ~ .floating-label,
      &:not(:placeholder-shown) ~ .floating-label,
      &[data-has-value="true"] ~ .floating-label {
        transform: translateY(-50%) scale(0.8);
      }
    }
  }
}
