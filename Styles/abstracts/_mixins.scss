@use 'sass:map';
@use 'sass:color';
@use 'variables' as *;


@mixin element($element) {
  &-#{$element} {
    @content;
  }
}

@mixin modifier($modifier) {
  &-#{$modifier} {
    @content;
  }
}

@mixin responsive($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    $value: map.get($breakpoints, $breakpoint);
    @if $value == 0 {
      @content;
    } @else {
      @media (min-width: $value) {
        @content;
      }
    }
  } @else {
    @warn "Unknown breakpoint: #{$breakpoint}";
  }
}


@mixin responsive-max($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    $value: map.get($breakpoints, $breakpoint);
    $max-value: $value - 1px;
    @media (max-width: $max-value) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: #{$breakpoint}";
  }
}

@mixin responsive-min($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    $value: map.get($breakpoints, $breakpoint);
    @if $value == 0 {
      @content;
    } @else {
      @media (min-width: $value) {
        @content;
      }
    }
  } @else {
    @warn "Unknown breakpoint: #{$breakpoint}";
  }
}

@mixin responsive-between($min-breakpoint, $max-breakpoint) {
  @if map.has-key($breakpoints, $min-breakpoint) and map.has-key($breakpoints, $max-breakpoint) {
    $min-value: map.get($breakpoints, $min-breakpoint);
    $max-value: map.get($breakpoints, $max-breakpoint) - 0.062rem;
    @media (min-width: $min-value) and (max-width: $max-value) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: #{$min-breakpoint} or #{$max-breakpoint}";
  }
}

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  @extend .flex !optional;
  @extend .items-center !optional;
  @extend .justify-between !optional;
}

@mixin flex-end {
  display: flex;
  align-items: center;
  justify-content: flex-end;
}

@mixin flex-column {
  @extend .flex !optional;
  @extend .flex-col !optional;
}

@mixin inline-flex-center {
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

@mixin fixed-full {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

@mixin grid-auto-fit($min-width: 24rem) {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
  gap: var(--space-6);
}

@mixin grid-auto-fill($min-width: 24rem) {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax($min-width, 1fr));
  gap: var(--space-6);
}

@mixin component-base {
  position: relative;
  width: 100%;
}


@mixin container($max-width: 80rem) {
  width: 100%;
  max-width: $max-width;
  margin: 0 auto;
  padding: 0 var(--space-4);
  
  @include responsive-min(md) {
    padding: 0 var(--space-6);
  }
  
  @include responsive-min(lg) {
    padding: 0 var(--space-8);
  }
}

@mixin heading-base {
  font-family: var(--font-family-primary);
  font-weight: var(--font-semibold);
  line-height: var(--leading-tight);
  color: var(--color-text-primary);
  letter-spacing: var(--tracking-tight);
}

@mixin text-caption {
  font-size: var(--text-xs);
  font-weight: var(--font-normal);
  line-height: var(--leading-normal);
}

@mixin text-sm {
  font-size: var(--text-sm);
  font-weight: var(--font-normal);
  line-height: var(--leading-normal);
}

@mixin text-body {
  font-size: var(--text-base);
  font-weight: var(--font-normal);
  line-height: var(--leading-normal);
}

@mixin text-body-lg {
  font-size: var(--text-lg);
  font-weight: var(--font-medium);
  line-height: var(--leading-normal);
}

@mixin text-heading-sm {
  font-size: var(--text-lg);
  font-weight: var(--font-semibold);
  line-height: var(--leading-tight);
}

@mixin text-heading-md {
  font-size: var(--text-xl);
  font-weight: var(--font-semibold);
  line-height: var(--leading-tight);
}

@mixin text-heading-lg {
  font-size: var(--text-2xl);
  font-weight: var(--font-semibold);
  line-height: var(--leading-tight);
}

@mixin text-heading-xl {
  font-size: var(--text-3xl);
  font-weight: var(--font-bold);
  line-height: var(--leading-tight);
}

@mixin text-heading-2xl {
  font-size: var(--text-4xl);
  font-weight: var(--font-bold);
  line-height: var(--leading-tight);
}

@mixin flex-start {
  display: flex;
  align-items: center;
  justify-content: flex-start;
}


@mixin text-clamp($lines: 3) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

@mixin button-reset {
  background: none;
  border: none;
  padding: 0;
  margin: 0;
  font: inherit;
  color: inherit;
  text-decoration: none;
  cursor: pointer;
  outline: none;
}

@mixin hover-lift($distance: 0.25rem) {
  transition: transform 0.2s ease-in-out;
  
  &:hover {
    transform: translateY(-#{$distance});
  }
}

@mixin card-hover {
  box-shadow: var(--shadow-lg);
  transform: translateY(-0.125rem);
}

@mixin button-hover($distance: 0.125rem) {
  transition: var(--transition-transform);
  
  &:hover {
    transform: translateY(-#{$distance});
  }
}

@mixin hover-animation($property: transform, $value: translateY(-0.125rem)) {
  transition: $property 0.2s ease-in-out;
  
  &:hover {
    #{$property}: $value;
  }
}

@mixin focus-ring($color: var(--color-interactive-primary)) {
  &:focus {
    outline: 2px solid $color;
    outline-offset: 2px;
  }
}

@mixin loading-skeleton {
  background: linear-gradient(90deg, var(--color-background-elevated), var(--color-background-pressed), var(--color-background-elevated));
  background-size: 200% 100%;
  animation: loadingShimmer 1.5s ease-in-out infinite;
}

@mixin loading-spinner($size: 1.25rem, $color: var(--color-interactive-primary)) {
  width: $size;
  height: $size;
  border: var(--border-2) solid transparent;
  border-top: var(--space-0-5) solid $color;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@mixin close-button {
  @include button-reset;
  @include flex-center;
  padding: var(--space-2);
  border-radius: var(--radius-sm);
  color: var(--color-text-secondary);
  cursor: pointer;
  flex-shrink: 0;
  min-height: 44px;
  min-width: 44px;
  transition: var(--transition-normal);

  &:hover {
    background: var(--color-background-secondary);
    color: var(--color-text-primary);
  }

  &:focus {
    outline: 2px solid var(--color-interactive-primary);
    outline-offset: 2px;
  }

  i {
    font-size: var(--text-base);
  }
}


@mixin grid-cards {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(18.75rem, 1fr));
  gap: var(--space-6);
  
  @include responsive-max(sm) {
    grid-template-columns: 1fr;
    gap: var(--space-3);
  }
}

@mixin empty-container-styles {
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: var(--space-8);
  padding: var(--space-8) var(--space-6);
  text-align: center;
  color: var(--color-text-tertiary);
}

@mixin form-control {
  width: 100%;
  padding: var(--space-3) var(--space-4);
  border: var(--border-1) solid var(--color-border-light);
  border-radius: var(--radius-md);
  background: var(--color-background-primary);
  color: var(--color-text-primary);
  font-size: var(--text-sm);
  transition: var(--transition-normal);
  appearance: none;
  
  &:focus {
    outline: 2px solid var(--color-interactive-primary);
    outline-offset: 2px;
    border-color: var(--color-interactive-primary);
  }
  
  &:disabled {
    background: var(--color-background-disabled);
    color: var(--color-text-disabled);
    cursor: not-allowed;
    opacity: 0.6;
  }
  
  @include responsive-max(md) {
    min-height: 44px;
    font-size: var(--text-base);
  }
}

@mixin status-variant($color-base) {
  background: var(--color-#{$color-base}-light);
  color: var(--color-#{$color-base}-dark);
  border-color: var(--color-#{$color-base});
  
  & i {
    color: var(--color-#{$color-base});
  }
}

@mixin hover-lift-enhanced($distance: -0.125rem, $shadow: var(--shadow-md)) {
  transition: var(--transition-normal);
  
  &:hover {
    transform: translateY($distance);
    box-shadow: var(--shadow-base);
  }
}

@mixin responsive-grid($columns, $gap: var(--space-4)) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
  
  @include responsive-max(lg) { 
    grid-template-columns: repeat(2, 1fr); 
  }
  
  @include responsive-max(md) { 
    grid-template-columns: 1fr;
    gap: calc($gap * 0.75);
  }
}

@mixin touch-friendly {
  @include responsive-max(md) {
    min-height: var(--touch-target-min, 2.75rem);
    min-width: var(--touch-target-min, 2.75rem);
    padding: var(--space-3) var(--space-4);
  }
}

@mixin absolute-fill {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
}

// Glass effects moved to utility classes - use .glass-{light,medium,heavy,frost} instead

// Elevation utilities moved to utility classes - use .elevation-{0-24} and .hover:elevation-{0-24} instead

// Focus ring generation
@mixin focus-ring($color: var(--color-interactive-focus), $width: 2px, $offset: 2px) {
  &:focus-visible {
    outline: #{$width} solid color-mix(in srgb, #{$color} 40%, transparent);
    outline-offset: #{$offset};
  }
}

// Hover lift effect
@mixin hover-lift($distance: -2px) {
  transition: var(--transition-fast);
  
  &:hover {
    transform: translateY(#{$distance});
  }
}

// Text truncation
@mixin text-truncate($lines: 1) {
  @if $lines == 1 {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: #{$lines};
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

// Visually hidden utility
@mixin visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}