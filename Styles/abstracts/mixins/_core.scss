@use 'sass:map';
@use '../variables' as *;

// ============================================================================
// CORE MIXINS - Fundamental Building Blocks
// ============================================================================

// BEM-style element and modifier mixins
@mixin element($element) {
  &-#{$element} {
    @content;
  }
}

@mixin modifier($modifier) {
  &-#{$modifier} {
    @content;
  }
}

// Responsive breakpoint mixins
@mixin responsive($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    $value: map.get($breakpoints, $breakpoint);
    @if $value == 0 {
      @content;
    } @else {
      @media (min-width: $value) {
        @content;
      }
    }
  } @else {
    @warn "Unknown breakpoint: #{$breakpoint}";
  }
}

@mixin responsive-max($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    $value: map.get($breakpoints, $breakpoint);
    $max-value: $value - 1px;
    @media (max-width: $max-value) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: #{$breakpoint}";
  }
}

@mixin responsive-min($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    $value: map.get($breakpoints, $breakpoint);
    @if $value == 0 {
      @content;
    } @else {
      @media (min-width: $value) {
        @content;
      }
    }
  } @else {
    @warn "Unknown breakpoint: #{$breakpoint}";
  }
}

@mixin responsive-between($min-breakpoint, $max-breakpoint) {
  @if map.has-key($breakpoints, $min-breakpoint) and map.has-key($breakpoints, $max-breakpoint) {
    $min-value: map.get($breakpoints, $min-breakpoint);
    $max-value: map.get($breakpoints, $max-breakpoint) - 0.062rem;
    @media (min-width: $min-value) and (max-width: $max-value) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: #{$min-breakpoint} or #{$max-breakpoint}";
  }
}

// Component base
@mixin component-base {
  position: relative;
  width: 100%;
}

// Touch-friendly sizing for mobile
@mixin touch-friendly {
  @include responsive-max(md) {
    min-height: var(--touch-target-min, 2.75rem);
    min-width: var(--touch-target-min, 2.75rem);
    padding: var(--space-3) var(--space-4);
  }
}