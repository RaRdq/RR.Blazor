@use '../variables' as *;
@use 'core' as *;
@use 'layout' as *;
@use 'interactions' as *;

@mixin input-base-styles {
  margin: 0;
  text-align: left;
  text-decoration: none;
  text-transform: none;
  box-shadow: none;
  box-sizing: border-box;
  display: block;
  width: 100%;
  max-width: none;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", sans-serif;
  font-size: max(16px, 1rem);
  font-weight: 400;
  line-height: 1.5;
  letter-spacing: calc(var(--base-unit) * 0.01);
  
  color: var(--color-text);
  background: var(--color-surface-elevated);
  
  border: 2px solid var(--color-border);
  border-radius: var(--radius-xl);
  
  padding: var(--space-4) var(--space-4);
  min-height: var(--space-12);
  
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1),
              transform 0.15s cubic-bezier(0.4, 0, 0.2, 1),
              box-shadow 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  will-change: border-color, box-shadow, transform;
  
  outline: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  -webkit-tap-highlight-color: transparent;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin badge-position-top-right($offset: -2px) {
  position: absolute;
  top: $offset;
  right: $offset;
  z-index: var(--z-badge);
}

@mixin surface-tint($color, $opacity: 10) {
  background: color-mix(in srgb, #{$color} #{$opacity}%, transparent);
}

@mixin surface-blend($base, $tint, $opacity: 90) {
  background: color-mix(in srgb, #{$base} #{$opacity}%, #{$tint});
}

@mixin semantic-tint($semantic-color, $opacity: 6, $base: var(--color-surface)) {
  background: color-mix(in srgb, var(--color-#{$semantic-color}) #{$opacity}%, #{$base});
}

@mixin color-shade($color, $darkness: 20) {
  background: color-mix(in srgb, #{$color} #{100 - $darkness}%, black #{$darkness}%);
}

@mixin color-tint($color, $lightness: 20) {
  background: color-mix(in srgb, #{$color} #{100 - $lightness}%, white #{$lightness}%);
}

@mixin icon-container($size: md, $background: transparent, $color: currentColor) {
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: var(--radius-lg);
  flex-shrink: 0;
  background: $background;
  color: $color;
  transition: var(--transition-normal);
  
  @if $size == xs {
    width: var(--space-6);
    height: var(--space-6);
  } @else if $size == sm {
    width: var(--space-8);
    height: var(--space-8);
  } @else if $size == md {
    width: var(--space-10);
    height: var(--space-10);
  } @else if $size == lg {
    width: var(--space-12);
    height: var(--space-12);
  }
}

@mixin semantic-gradient($color, $type: linear, $direction: 135deg) {
  @if $type == linear {
    background: linear-gradient(#{$direction}, 
      var(--color-#{$color}) 0%, 
      color-mix(in srgb, var(--color-#{$color}) 80%, black 20%) 100%);
  } @else if $type == radial {
    background: radial-gradient(ellipse at top left, 
      color-mix(in srgb, var(--color-#{$color}) 12%, transparent) 0%, 
      transparent 50%);
  }
}

@mixin badge-position-top-left($offset: -2px) {
  position: absolute;
  top: $offset;
  left: $offset;
  z-index: var(--z-badge);
}

@mixin badge-position-bottom-right($offset: -2px) {
  position: absolute;
  bottom: $offset;
  right: $offset;
  z-index: var(--z-badge);
}

@mixin badge-position-bottom-left($offset: -2px) {
  position: absolute;
  bottom: $offset;
  left: $offset;
  z-index: var(--z-badge);
}

@mixin badge-responsive-sizing {
  min-width: calc(var(--base-unit) * 1.125);
  height: calc(var(--base-unit) * 1.125);
  font-size: var(--text-2xs);
  padding: calc(var(--base-unit) * 0.125) calc(var(--base-unit) * 0.375);
  
  @include responsive-max(md) {
    min-width: calc(var(--base-unit) * 1.25);
    height: calc(var(--base-unit) * 1.25);
    font-size: var(--text-xs);
    
    &[class*="top"] {
      top: -4px;
    }
    &[class*="right"] {
      right: -4px;
    }
    &[class*="bottom"] {
      bottom: -4px;
    }
    &[class*="left"] {
      left: -4px;
    }
  }
  
  @include responsive-max(sm) {
    transform: scale(0.9);
    transform-origin: center;
  }
}

@mixin button-reset {
  background: none;
  border: none;
  padding: 0;
  margin: 0;
  font: inherit;
  color: inherit;
  text-decoration: none;
  cursor: pointer;
  outline: none;
}

@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--space-2);
  font-weight: var(--font-medium);
  text-align: center;
  border-radius: var(--radius-md);
  border: none;
  cursor: pointer;
  transition: all var(--duration-normal) var(--ease-out);
  position: relative;
  outline: none;
  user-select: none;
  font-size: var(--text-sm);
  line-height: 1.4;
  text-decoration: none;
  min-height: calc(var(--base-unit) * var(--φ) * var(--φ));
  min-width: calc(var(--base-unit) * var(--φ) * var(--φ));
  padding: var(--space-2) var(--space-4);
  
  @include responsive-min(md) {
    min-height: calc(var(--base-unit) * var(--φ) * 1.5);
    font-size: var(--text-sm);
    padding: var(--space-2) var(--space-3);
  }
  
  *, i, span {
    color: inherit;
  }
  
  [class*="icon"],
  [class*="material"],
  [class*="fa"],
  [class*="feather"],
  .material-symbols-rounded {
    color: inherit;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    vertical-align: middle;
    line-height: 1;
  }
  
  span {
    display: inline-flex;
    align-items: center;
    vertical-align: middle;
    line-height: 1.5;
  }
  
  @media (hover: none) and (pointer: coarse) {
    min-height: var(--touch-target-lg);
    min-width: var(--touch-target-lg);
    font-size: var(--text-base);
    padding: var(--space-3) var(--space-4);
    
    &:hover {
      transform: none;
    }
  }
  
  &:disabled,
  &[disabled] {
    opacity: var(--opacity-disabled);
    cursor: not-allowed;
    pointer-events: none;
  }
  
  &:focus-visible {
    outline: none;
    box-shadow: 0 0 0 3px var(--color-focus);
    outline-offset: 2px;
  }
}

@mixin button-variant($bg-color, $text-color, $border-color: transparent, $hover-bg: null, $active-bg: null) {
  background: $bg-color;
  color: $text-color;
  border-color: $border-color;
  
  @if $hover-bg {
    &:hover {
      background: $hover-bg;
    }
  } @else {
    &:hover {
      @if $bg-color == transparent {
        background: var(--color-surface-elevated);
      } @else {
        background: color-mix(in srgb, $bg-color 96%, var(--color-text));
      }
      @if $border-color == transparent {
        border-color: transparent;
      } @else {
        border-color: color-mix(in srgb, $border-color 85%, var(--color-text));
      }
    }
  }
  
  @if $active-bg {
    &:active {
      background: $active-bg;
    }
  } @else {
    &:active {
      @if $bg-color == transparent {
        background: var(--color-surface);
      } @else {
        background: color-mix(in srgb, $bg-color 92%, var(--color-text));
      }
      transform: scale(0.98);
    }
  }
}

@mixin button-size($padding-y, $padding-x, $font-size, $min-height, $min-width, $gap: var(--space-2)) {
  padding: $padding-y $padding-x;
  font-size: $font-size;
  min-height: $min-height;
  min-width: $min-width;
  gap: $gap;
  
  @include responsive-min(md) {
    padding: calc($padding-y * 0.75) calc($padding-x * 0.75);
    font-size: calc($font-size * 0.875);
    min-height: calc($min-height * 0.9);
    min-width: calc($min-width * 0.9);
  }
}


@mixin button-progress($progress-color: var(--color-primary-light)) {
  &::before {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    height: calc(var(--base-unit) * 0.125);
    background: $progress-color;
    transition: all var(--duration-normal) var(--ease-out);
    border-radius: 0 0 var(--radius-lg) var(--radius-lg);
    width: var(--progress-width, 0%);
  }
}

@mixin button-solid($gradient) {
  background: $gradient;
  color: var(--color-text-inverse);
  border: transparent;
  box-shadow: var(--shadow-md);
  transition: filter var(--duration-fast) var(--ease-out);
  
  &:hover {
    filter: brightness(0.9) saturate(1.1) contrast(1.05);
  }
  
  @include interactive-button(scale(1.01), scale(0.99), var(--shadow-lg), var(--shadow-sm));
  
  .material-symbols-rounded {
    color: var(--color-text-inverse);
  }
}


@mixin spacing-density($density: normal, $type: padding) {
  @if $type == padding {
    & {
      @if $density == compact {
        padding: var(--space-2) var(--space-3);
      } @else if $density == dense {
        padding: var(--space-3) var(--space-4);
      } @else if $density == normal {
        padding: var(--space-4) var(--space-6);
      } @else if $density == comfortable {
        padding: var(--space-6) var(--space-8);
      } @else if $density == spacious {
        padding: var(--space-8) var(--space-12);
      }
    }
  } @else if $type == margin {
    & {
      @if $density == compact {
        margin: var(--space-1) var(--space-2);
      } @else if $density == dense {
        margin: var(--space-2) var(--space-3);
      } @else if $density == normal {
        margin: var(--space-3) var(--space-4);
      } @else if $density == comfortable {
        margin: var(--space-4) var(--space-6);
      } @else if $density == spacious {
        margin: var(--space-6) var(--space-8);
      }
    }
  } @else if $type == gap {
    & {
      @if $density == compact {
        gap: var(--space-2);
      } @else if $density == dense {
        gap: var(--space-3);
      } @else if $density == normal {
        gap: var(--space-4);
      } @else if $density == comfortable {
        gap: var(--space-6);
      } @else if $density == spacious {
        gap: var(--space-8);
      }
    }
  }
}

@mixin form-density($density: normal) {
  @if $density == compact {
    @include spacing-density(compact, padding);
    .form-section { @include spacing-density(compact, margin); }
    .form-group { @include spacing-density(compact, gap); }
  } @else if $density == dense {
    @include spacing-density(dense, padding);
    .form-section { @include spacing-density(dense, margin); }
    .form-group { @include spacing-density(dense, gap); }
  } @else if $density == normal {
    @include spacing-density(normal, padding);
    .form-section { @include spacing-density(normal, margin); }
    .form-group { @include spacing-density(normal, gap); }
  } @else if $density == comfortable {
    @include spacing-density(comfortable, padding);
    .form-section { @include spacing-density(comfortable, margin); }
    .form-group { @include spacing-density(comfortable, gap); }
  } @else if $density == spacious {
    @include spacing-density(spacious, padding);
    .form-section { @include spacing-density(spacious, margin); }
    .form-group { @include spacing-density(spacious, gap); }
  }
}

@mixin touch-interaction($variant: default, $feedback: visual) {
  min-height: var(--touch-target-min);
  min-width: var(--touch-target-min);
  transition: var(--transition-fast);
  position: relative;
  outline: none;
  
  @if $variant == glass {
    @extend %glass-light;
    transition: var(--transition-fast);
    
    &:hover {
      backdrop-filter: blur(12px) saturate(120%);
      -webkit-backdrop-filter: blur(12px) saturate(120%);
      border-color: color-mix(in srgb, var(--color-border) 80%, var(--color-primary));
      box-shadow: var(--shadow-lg);
      transform: translateY(-1px);
    }
    
    &:active {
      transform: translateY(0);
      backdrop-filter: blur(8px) saturate(100%);
      -webkit-backdrop-filter: blur(8px) saturate(100%);
    }
  } @else if $variant == elevated {
    box-shadow: var(--shadow-sm);
    
    &:hover {
      box-shadow: var(--shadow-md);
      transform: translateY(-1px);
    }
    
    &:active {
      transform: translateY(0);
      box-shadow: var(--shadow-sm);
    }
  } @else {
    &:hover {
      background: color-mix(in srgb, var(--color-surface-elevated) 80%, transparent);
    }
    
    &:active {
      background: color-mix(in srgb, var(--color-surface-elevated) 60%, transparent);
    }
  }
  
  @if $feedback == visual {
    &:focus-visible {
      outline: 3px solid var(--color-focus);
      outline-offset: 2px;
    }
  } @else if $feedback == glass {
    &:focus-visible {
      @extend %glass-light;
      transition: var(--transition-fast);
      outline: 2px solid var(--color-focus);
      outline-offset: 2px;
    }
  } @else if $feedback == accessibility {
    &:focus-visible {
      outline: 3px solid var(--color-focus);
      outline-offset: 3px;
      box-shadow: 0 0 0 6px color-mix(in srgb, var(--color-focus) 20%, transparent);
    }
  }
  
  @media (hover: none) and (pointer: coarse) {
    min-height: var(--touch-target-lg);
    min-width: var(--touch-target-lg);
    
    &:hover {
      transform: none;
    }
  }
}

@mixin form-control {
  width: 100%;
  padding: var(--space-3) var(--space-4);
  border: var(--border-1) solid var(--color-border);
  border-radius: var(--radius-md);
  background: var(--color-canvas);
  color: var(--color-text);
  font-size: var(--text-sm);
  transition: var(--transition-normal);
  appearance: none;
  
  &:focus {
    outline: none;
    outline-offset: 2px;
    border-color: var(--color-primary);
  }
  
  &:disabled {
    background: var(--color-surface);
    color: var(--color-text-subtle);
    cursor: not-allowed;
    opacity: 0.6;
  }
  
  @include responsive-max(md) {
    min-height: var(--touch-target-min);
    font-size: var(--text-base);
  }
}

@mixin close-button {
  & {
    @include button-reset;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--space-2);
    border-radius: var(--radius-sm);
    color: var(--color-text-muted);
    cursor: pointer;
    flex-shrink: 0;
    min-height: var(--touch-target-min);
    min-width: var(--touch-target-min);
    transition: var(--transition-normal);
  }

  &:hover {
    background: var(--color-surface);
    color: var(--color-text);
  }

  &:focus {
    outline: none;
    outline-offset: 2px;
  }

  i {
    font-size: var(--text-base);
  }
}

@mixin interactive-button($hover-transform: none, $active-transform: none, $hover-shadow: none, $active-shadow: none) {
  & {
    transition: all var(--duration-fast) var(--ease-out);
  }
  
  &:hover {
    @if $hover-transform != none { transform: #{$hover-transform}; }
    @if $hover-shadow != none { box-shadow: #{$hover-shadow}; }
  }
  
  &:active {
    @if $active-transform != none { transform: #{$active-transform}; }
    @if $active-shadow != none { box-shadow: #{$active-shadow}; }
  }
}

@mixin interactive-card($hover-shadow: var(--shadow-md), $active-shadow: var(--shadow-sm), $hover-transform: none) {
  & {
    transition: all var(--duration-fast) var(--ease-out);
  }
  
  &:hover {
    @if $hover-shadow != none { box-shadow: #{$hover-shadow}; }
    @if $hover-transform != none { transform: #{$hover-transform}; }
  }
  
  &:active {
    @if $active-shadow != none { box-shadow: #{$active-shadow}; }
    transform: scale(0.98);
  }
}

@mixin interactive-badge($hover-transform: none, $hover-shadow: none) {
  & {
    transition: all var(--duration-fast) var(--ease-out);
  }
  
  &:hover {
    @if $hover-transform != none { transform: #{$hover-transform}; }
    @if $hover-shadow != none { box-shadow: #{$hover-shadow}; }
  }
  
  &:active {
    transform: scale(0.95);
  }
}

@mixin interactive-avatar($hover-transform: none, $hover-shadow: none) {
  & {
    transition: all var(--duration-fast) var(--ease-out);
  }
  
  &:hover {
    @if $hover-transform != none { transform: #{$hover-transform}; }
    @if $hover-shadow != none { box-shadow: #{$hover-shadow}; }
  }
}

@mixin colored-shadow($color, $opacity, $shadow-spec) {
  box-shadow: #{$shadow-spec} rgba(#{$color}, calc(#{$opacity} / 100));
}

@mixin focus-shadow($color, $opacity) {
  box-shadow: 0 0 0 3px rgba(#{$color}, calc(#{$opacity} / 100));
}

@mixin focus-ring($color: var(--color-primary)) {
  outline: 2px solid $color;
  outline-offset: 2px;
}

@mixin hover-lift($transform: translateY(-1px), $shadow: var(--shadow-md)) {
  & {
    transition: all var(--duration-fast) var(--ease-out);
  }
  
  &:hover {
    transform: #{$transform};
    box-shadow: #{$shadow};
  }
}

@mixin status-variant($variant) {
  @if $variant == error {
    background: var(--color-error);
    color: var(--color-text-inverse);
  } @else if $variant == success {
    background: var(--color-success);
    color: var(--color-text-inverse);
  } @else if $variant == warning {
    background: var(--color-warning);
    color: var(--color-text-inverse);
  }
}

@mixin hover-animation($property, $value) {
  transition: #{$property} var(--duration-fast) var(--ease-out);
  
  &:hover {
    #{$property}: #{$value};
  }
}

@mixin icon-context-label {
  .material-symbols-rounded,
  i {
    color: currentColor;
    flex-shrink: 0;
    margin-right: var(--space-2);
    font-size: var(--icon-sm);
  }
}

@mixin icon-context-action {
  .material-symbols-rounded,
  i {
    color: currentColor;
    flex-shrink: 0;
    font-size: var(--icon-base);
    transition: var(--transition-colors);
  }
}

@mixin icon-context-button {
  .material-symbols-rounded,
  i {
    font-size: calc(1em * var(--φ));
    width: calc(1em * var(--φ));
    height: calc(1em * var(--φ));
    line-height: 1;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    margin: 0;
    flex-shrink: 0;
    position: relative;
    z-index: 1;
  }
}

@mixin icon-context-table {
  .material-symbols-rounded,
  i {
    color: currentColor;
    flex-shrink: 0;
    font-size: var(--icon-sm);
    opacity: 0.8;
    transition: var(--transition-colors);
  }
}

@mixin icon-context-display {
  .material-symbols-rounded,
  i {
    color: var(--color-primary);
    flex-shrink: 0;
    font-size: var(--icon-base);
    margin-right: var(--space-2);
  }
}