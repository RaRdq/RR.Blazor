
@use '../variables' as *;
@use '../animations' as *;
@use 'core' as *;
@use 'sass:map';

$component-loading-config: (
  'button': (preserve-height: true, min-height: null),
  'input': (preserve-height: true, min-height: null),
  'select': (preserve-height: true, min-height: null),
  'textarea': (preserve-height: true, min-height: null),
  'badge': (preserve-height: true, min-height: null),
  'chip': (preserve-height: true, min-height: null),
  'card': (preserve-height: false, min-height: 8rem),
  'section': (preserve-height: false, min-height: 20rem),
  'container': (preserve-height: false, min-height: 20rem),
  'table': (preserve-height: false, min-height: 10rem),
  'form': (preserve-height: false, min-height: 10rem),
  'modal': (preserve-height: false, min-height: 15rem),
  'inline': (preserve-height: true, min-height: null),
  'default': (preserve-height: false, min-height: 3rem)
);

$loading-types: (
  'replace': 'Content is hidden and replaced with spinner',
  'overlay': 'Content remains visible with loading overlay',
  'inline': 'Spinner appears alongside content',
  'skeleton': 'Placeholder content with shimmer effect',
  'container': 'Centered loading with optional text',
  'fullscreen': 'Full page loading overlay',
  'bar': 'Top progress bar indicator',
  'dots': 'Animated dots loading indicator'
);

$loading-sizes: (
  'xs': (size: 0.75em, border: 1.5px, speed: var(--duration-fast)),
  'sm': (size: 0.875em, border: 2px, speed: var(--duration-normal)),
  'md': (size: 1em, border: 2px, speed: var(--duration-normal)),
  'lg': (size: 1.125em, border: 2.5px, speed: var(--duration-slow)),
  'xl': (size: 1.25em, border: 3px, speed: var(--duration-very-slow))
);

$loading-themes: (
  'default': (spinner: var(--color-text), track: var(--color-border)),
  'current': (spinner: currentColor, track: color-mix(in srgb, currentColor 20%, transparent)),
  'primary': (spinner: var(--color-primary), track: color-mix(in srgb, var(--color-primary) 20%, transparent)),
  'secondary': (spinner: var(--color-secondary), track: color-mix(in srgb, var(--color-secondary) 20%, transparent)),
  'success': (spinner: var(--color-success), track: color-mix(in srgb, var(--color-success) 20%, transparent)),
  'warning': (spinner: var(--color-warning), track: color-mix(in srgb, var(--color-warning) 20%, transparent)),
  'error': (spinner: var(--color-error), track: color-mix(in srgb, var(--color-error) 20%, transparent)),
  'inverse': (spinner: var(--color-text-inverse), track: color-mix(in srgb, var(--color-text-inverse) 20%, transparent)),
  'muted': (spinner: var(--color-text-muted), track: var(--color-border-light)),
  'white': (spinner: white, track: color-mix(in srgb, white 30%, transparent))
);

@mixin loading-foundation($component-type: 'default', $custom-min-height: null) {

  $config: map.get($component-loading-config, $component-type);

@if not $config {
    $config: map.get($component-loading-config, 'default');
  }

  $preserve: map.get($config, 'preserve-height');
  $min-h: if($custom-min-height, $custom-min-height, map.get($config, 'min-height'));

  position: relative;

@if $min-h and not $preserve {
    min-height: $min-h;
  }

  contain: layout style;
  isolation: isolate;
  will-change: contents;
  z-index: var(--z-base);
  transition: opacity var(--duration-normal) var(--ease-out);
  transform: translateZ(0);
  backface-visibility: hidden;
}

@mixin spinner-core($size: 'md', $theme: 'default', $use-variables: false) {
  $size-config: map.get($loading-sizes, $size);
  $theme-config: map.get($loading-themes, $theme);

  $spinner-size: map.get($size-config, 'size');
  $border-width: map.get($size-config, 'border');
  $speed: map.get($size-config, 'speed');

  $spinner-color: map.get($theme-config, 'spinner');
  $track-color: map.get($theme-config, 'track');

  @if $use-variables {
    width: var(--spinner-size, #{$spinner-size});
    height: var(--spinner-size, #{$spinner-size});
    border-width: var(--spinner-border, #{$border-width});
  } @else {
    width: $spinner-size;
    height: $spinner-size;
    border: $border-width solid $track-color;
  }
  
  border-radius: 50%;
  @if not $use-variables {
    border: $border-width solid $track-color;
  } @else {
    border: var(--spinner-border, #{$border-width}) solid $track-color;
  }
  border-top-color: $spinner-color;

  animation: spin $speed linear infinite;
  will-change: transform;
  transform-origin: center;
  display: block;
  flex-shrink: 0;
}

@mixin loading-replace($size: 'md', $theme: 'default', $component-type: 'default', $supports-loading-text: false) {
  @include loading-foundation($component-type);

> *:not(.loading-text):not(.loading-spinner) {
    visibility: hidden;
    opacity: 0;
    pointer-events: none;
  }

.loading-text {
    visibility: visible;
    opacity: 1;
    color: inherit;
    font-size: inherit;
    pointer-events: none;
  }

  @if $supports-loading-text {

    &:has(.loading-text) {

      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5em;

      &::after {
        content: '';
        position: static;
        display: inline-flex;
        align-self: center;
        transform: none;
        @include spinner-core($size, $theme);
        order: -1;
        flex-shrink: 0;
        margin-right: 0.5em;
      }

      .loading-text {
        display: inline-flex;
        align-self: center;
        line-height: 1;
      }
    }

    &:not(:has(.loading-text)) {

      &::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        @include spinner-core($size, $theme);
        z-index: var(--z-base);
      }
    }
  } @else {

    &::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      @include spinner-core($size, $theme);
      z-index: var(--z-base);
    }
  }
}

@mixin loading-overlay($size: 'md', $theme: 'default', $blur: 4px, $component-type: 'default') {
  @include loading-foundation($component-type);

  &::before {
    content: '';
    position: absolute;
    inset: 0;
    background: color-mix(in srgb, var(--color-surface) 80%, transparent);
    backdrop-filter: blur($blur);
    -webkit-backdrop-filter: blur($blur);
    z-index: var(--z-loading);
    border-radius: inherit;

    animation: fadeIn var(--duration-fast) var(--ease-out);
  }

  &::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    @include spinner-core($size, $theme);
    z-index: var(--z-loading-spinner);
  }
}

@mixin loading-inline($position: 'start', $size: 'sm', $theme: 'default') {
  display: inline-flex;
  align-items: center;
  gap: var(--space-2);

  @if $position == 'end' {
    flex-direction: row-reverse;
  }

  &::before {
    content: '';
    display: inline-block;
    @include spinner-core($size, $theme);
  }
}

@mixin loading-skeleton($theme: 'default') {
  background: linear-gradient(
    90deg,
    var(--color-border-light) 25%,
    var(--color-surface-elevated) 50%,
    var(--color-border-light) 75%
  );
  background-size: 200% 100%;
  animation: shimmer var(--duration-extended) ease-in-out infinite;
  border-radius: var(--radius-sm);
  color: transparent;
  user-select: none;

  &::before,
  &::after {
    display: none;
  }

  * {
    visibility: hidden;
  }
}

@mixin loading-dots($size: 'sm', $color: 'primary') {
  $size-config: map.get($loading-sizes, $size);
  $dot-size: map.get($size-config, 'size');
  $gap-size: calc($dot-size * 0.3);

  display: inline-flex;
  gap: $gap-size;

  span {
    display: inline-block;
    width: $dot-size;
    height: $dot-size;
    background: var(--color-#{$color});
    border-radius: 50%;

    animation: pulse calc(var(--duration-very-slow) * 1.4) ease-in-out infinite;

    &:nth-child(1) { animation-delay: 0s; }
    &:nth-child(2) { animation-delay: 0.2s; }
    &:nth-child(3) { animation-delay: 0.4s; }
  }
}

@mixin button-loading($size: 'md', $use-variables: false) {
  pointer-events: none;
  cursor: wait;
  
  // Hide original content except loading text
  > *:not(.loading-text) {
    visibility: hidden;
    opacity: 0;
    pointer-events: none;
  }

  .loading-text {
    visibility: visible;
    opacity: 1;
    color: inherit;
    font-size: inherit;
    font-weight: inherit;
    letter-spacing: inherit;
    pointer-events: none;
  }

  // Display as flex when loading
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5em;

  // Single spinner on the left
  &::before {
    content: '';
    display: inline-block;
    @if $use-variables {
      @include spinner-core($size, 'current', true);
    } @else {
      @include spinner-core($size, 'current', false);
    }
    order: -1;
    flex-shrink: 0;
  }
}

@mixin loading-card() {
  @include loading-overlay('md', 'default', 4px, 'card');
}

@mixin loading-table() {
  tbody {
    tr {
      @include loading-skeleton();
      height: 3rem;
      margin-bottom: var(--space-1);
    }
  }
}

.loading {
  @include loading-replace('md', 'default', 'default');

  &-xs { @include loading-replace('xs', 'default', 'default'); }
  &-sm { @include loading-replace('sm', 'default', 'default'); }
  &-md { @include loading-replace('md', 'default', 'default'); }
  &-lg { @include loading-replace('lg', 'default', 'default'); }
  &-xl { @include loading-replace('xl', 'default', 'default'); }

  &-overlay {
    @include loading-overlay('md', 'default', 4px, 'default');

    &-xs { @include loading-overlay('xs', 'default', 4px, 'default'); }
    &-sm { @include loading-overlay('sm', 'default', 4px, 'default'); }
    &-md { @include loading-overlay('md', 'default', 4px, 'default'); }
    &-lg { @include loading-overlay('lg', 'default', 4px, 'default'); }
    &-xl { @include loading-overlay('xl', 'default', 4px, 'default'); }
  }

  &-inline {
    @include loading-inline('start');

    &-start { @include loading-inline('start'); }
    &-end { @include loading-inline('end'); }
    &-xs { @include loading-inline('start', 'xs'); }
    &-sm { @include loading-inline('start', 'sm'); }
    &-md { @include loading-inline('start', 'md'); }
    &-lg { @include loading-inline('start', 'lg'); }
  }

  &-skeleton {
    @include loading-skeleton();

    &-text {
      height: 1rem;
      margin-bottom: var(--space-2);

      &:last-child {
        width: 60%;
        margin-bottom: 0;
      }
    }

    &-title {
      height: 2rem;
      margin-bottom: var(--space-3);
      width: 50%;
    }

    &-avatar {
      width: 3rem;
      height: 3rem;
      border-radius: 50%;
    }

    &-button {
      height: 2.5rem;
      width: 6rem;
    }

    &-card {
      height: 10rem;
      border-radius: var(--radius-lg);
    }
  }

  &-dots {
    @include loading-dots();

    &-primary { @include loading-dots('sm', 'primary'); }
    &-secondary { @include loading-dots('sm', 'secondary'); }
    &-white { @include loading-dots('sm', 'white'); }
  }

  &-container {
    @include loading-replace('lg', 'default', 'container');
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: var(--space-4);
    padding: var(--space-8);
    min-height: 20rem;

    &-text {
      font-size: var(--text-sm);
      color: var(--color-text-muted);
      text-align: center;
      visibility: visible;
      opacity: 1;
    }
  }

  &-text {
    display: inline-block;
    margin-top: var(--space-2);
    color: var(--color-text-muted);
    font-size: var(--text-sm);

    animation: pulse calc(var(--duration-very-slow) * 2) ease-in-out infinite;
  }
}

.loading-spinner {
  display: inline-block;
  width: 2.5rem;
  height: 2.5rem;
  position: relative;

  &::before {
    content: '';
    position: absolute;
    inset: 0;
    border: 3px solid var(--color-border-light);
    border-top-color: var(--color-primary);
    border-radius: 50%;
    animation: spin var(--duration-very-slow) linear infinite;
  }

  &::after {
    content: '';
    position: absolute;
    inset: -4px;
    border: 2px solid transparent;
    border-top-color: color-mix(in srgb, var(--color-primary) 30%, transparent);
    border-radius: 50%;
    animation: spin calc(var(--duration-very-slow) * 1.5) linear infinite reverse;
  }

  &-xs {
    width: 1rem;
    height: 1rem;

    &::before { border-width: 2px; }
    &::after { display: none; }
  }

  &-sm {
    width: 1.5rem;
    height: 1.5rem;

    &::before { border-width: 2px; }
    &::after { border-width: 1px; inset: -2px; }
  }

  &-lg {
    width: 3rem;
    height: 3rem;
  }

  &-xl {
    width: 4rem;
    height: 4rem;

    &::before { border-width: 4px; }
    &::after { border-width: 3px; inset: -6px; }
  }

  &-primary {
    &::before { border-top-color: var(--color-primary); }
    &::after { border-top-color: color-mix(in srgb, var(--color-primary) 30%, transparent); }
  }

  &-secondary {
    &::before { border-top-color: var(--color-secondary); }
    &::after { border-top-color: color-mix(in srgb, var(--color-secondary) 30%, transparent); }
  }

  &-success {
    &::before { border-top-color: var(--color-success); }
    &::after { border-top-color: color-mix(in srgb, var(--color-success) 30%, transparent); }
  }

  &-warning {
    &::before { border-top-color: var(--color-warning); }
    &::after { border-top-color: color-mix(in srgb, var(--color-warning) 30%, transparent); }
  }

  &-error {
    &::before { border-top-color: var(--color-error); }
    &::after { border-top-color: color-mix(in srgb, var(--color-error) 30%, transparent); }
  }

  &-white {
    &::before {
      border-color: color-mix(in srgb, white 30%, transparent);
      border-top-color: var(--theme-text);
    }
    &::after { border-top-color: color-mix(in srgb, white 30%, transparent); }
  }

  &-inline {
    width: 1em;
    height: 1em;
    margin-right: var(--space-2);
    vertical-align: middle;

    &::before,
    &::after {
      border-width: 2px;
    }
  }
}

.skeleton {
  @include loading-skeleton();

  &-pulse {

    animation: shimmer calc(var(--duration-very-slow) * 1.5) ease-in-out infinite;
  }

  &-text {
    height: 1rem;
    margin-bottom: var(--space-2);

    &:last-child {
      width: 60%;
      margin-bottom: 0;
    }
  }

  &-title {
    height: 2rem;
    margin-bottom: var(--space-3);
    width: 50%;
  }

  &-avatar {
    width: 3rem;
    height: 3rem;
    border-radius: 50%;
  }

  &-button {
    height: 2.5rem;
    width: 6rem;
  }

  &-card {
    height: 10rem;
    border-radius: var(--radius-lg);
  }

  &-badge {
    height: 1.5rem;
    width: 4rem;
    border-radius: var(--radius-full);
  }
}
