@use '../variables' as *;

@mixin layout-interactive($hover-transform: translateY(-1px), $active-transform: translateY(0) scale(0.98), $hover-filter: brightness(1.02)) {
  cursor: pointer;
  transition: all var(--duration-fast) var(--ease-out);
  
  &:hover:not(:disabled) {
    transform: $hover-transform;
    @if $hover-filter {
      filter: $hover-filter;
    }
  }
  
  &:active:not(:disabled) {
    transform: $active-transform;
  }
  
  &:focus-visible {
    outline: none;
    outline-offset: 2px;
  }
  
  &:disabled {
    opacity: var(--opacity-disabled);
    cursor: not-allowed;
    pointer-events: none;
    transform: none !important;
  }
}

@mixin focus-ring($color: var(--color-focus), $width: 2px, $offset: 2px) {
  &:focus-visible {
    outline: #{$width} solid color-mix(in srgb, #{$color} 40%, transparent);
    outline-offset: #{$offset};
  }
}

@mixin hover-lift($distance: -2px, $filter: brightness(1.02)) {
  transition: var(--transition-fast);
  
  &:hover {
    transform: translateY(#{$distance});
    filter: $filter;
  }
}

@mixin card-hover($filter: brightness(1.02) saturate(1.05)) {
  box-shadow: var(--shadow-lg);
  transform: translateY(calc(var(--space-0-5) * -1)); // φ-based micro lift
  filter: $filter;
}

@mixin button-hover($distance: var(--space-0-5), $filter: brightness(0.95) saturate(1.05)) {
  transition: var(--transition-transform);
  
  &:hover {
    transform: translateY(-#{$distance});
    filter: $filter;
  }
}

@mixin hover-animation($property: transform, $value: translateY(calc(var(--space-0-5) * -1))) {
  transition: $property 0.2s ease-in-out;
  
  &:hover {
    #{$property}: $value;
  }
}

@mixin loading-skeleton {
  background: linear-gradient(90deg, var(--color-surface-elevated), var(--color-surface-pressed), var(--color-surface-elevated));
  background-size: 200% 100%;
  animation: shimmer 1.5s ease-in-out infinite;
}

@mixin loading-spinner($size: var(--icon-base), $color: var(--color-primary)) {
  width: $size;
  height: $size;
  border: var(--border-2) solid transparent;
  border-top: calc(var(--base-unit) * 0.125) solid $color; // φ-based border width
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

// Legacy transform-interaction mixin for backward compatibility
@mixin transform-interaction($hover-transform: scale(1.01), $active-transform: scale(0.99), $hover-shadow: var(--theme-shadow-lg), $active-shadow: var(--theme-shadow-sm), $hover-bg: null, $active-bg: null) {
  transition: all var(--duration-normal) var(--ease-out);
  
  &:hover {
    transform: $hover-transform;
    box-shadow: $hover-shadow;
    @if $hover-bg {
      background: $hover-bg !important;
      color: var(--color-text-inverse) !important;
    }
  }
  
  &:active {
    transform: $active-transform;
    box-shadow: $active-shadow;
    @if $active-bg {
      background: $active-bg !important;
      color: var(--color-text-inverse) !important;
    }
  }
}

@mixin interactive-states($primary-color: var(--color-primary), $hover-color: var(--color-primary-hover), $active-color: var(--color-primary-active), $hover-filter: brightness(1.05) saturate(1.1)) {
  transition: all var(--duration-normal) var(--ease-out);
  
  &:hover {
    background: $hover-color;
    transform: translateY(-1px);
    box-shadow: var(--theme-shadow-lg);
    filter: $hover-filter;
  }
  
  &:active {
    background: $active-color;
    transform: translateY(0);
    box-shadow: var(--theme-shadow-sm);
  }
  
  &:focus-visible {
    outline: 2px solid $primary-color;
    outline-offset: 2px;
  }
}

@mixin button-variant-with-states($base-color, $text-color: var(--color-text-inverse), $hover-color: null, $active-color: null) {
  background: var(--color-#{$base-color});
  color: $text-color;
  box-shadow: var(--theme-shadow-md);
  
  $hover: if($hover-color, $hover-color, var(--color-#{$base-color}-dark));
  $active: if($active-color, $active-color, var(--color-#{$base-color}-darker));
  
  @include transform-interaction(
    scale(1.01),
    scale(0.99),
    var(--theme-shadow-lg),
    var(--theme-shadow-sm),
    $hover,
    $active
  );
}

@mixin status-variant($color-base) {
  background: var(--color-#{$color-base}-light);
  color: var(--color-#{$color-base}-dark);
  border-color: var(--color-#{$color-base});
  
  & i {
    color: var(--color-#{$color-base});
  }
}

@mixin interactive-card($hover-shadow: var(--shadow-lg), $active-shadow: var(--shadow-md), $lift: translateY(-1px)) {
  & {
    transition: all var(--duration-fast) var(--ease-out);
  }
  
  &:hover {
    transform: $lift;
    box-shadow: $hover-shadow;
    filter: brightness(1.02);
  }
  
  &:active {
    transform: translateY(0);
    box-shadow: $active-shadow;
  }
}

@mixin interactive-button($hover-scale: scale(1.01), $active-scale: scale(0.99), $hover-shadow: var(--shadow-md), $active-shadow: var(--shadow-sm)) {
  transition: all var(--duration-fast) var(--ease-out);
  
  &:hover {
    transform: $hover-scale;
    box-shadow: $hover-shadow;
    filter: brightness(0.95) saturate(1.05);
  }
  
  &:active {
    transform: $active-scale;
    box-shadow: $active-shadow;
  }
}

@mixin interactive-list-item($lift: translateY(-1px), $hover-shadow: var(--shadow-lg)) {
  transition: all var(--duration-fast) var(--ease-out);
  
  &:hover {
    transform: $lift;
    box-shadow: $hover-shadow;
    border-color: var(--color-border);
    filter: brightness(1.02) saturate(1.05);
  }
  
  &:active {
    transform: translateY(0);
  }
}

@mixin interactive-nav($hover-bg: var(--color-primary-hover), $active-bg: var(--color-primary)) {
  transition: all var(--duration-fast) var(--ease-out);
  
  &:hover {
    background: $hover-bg;
    color: var(--color-text);
    filter: brightness(1.02) saturate(1.05);
  }
  
  &:active {
    background: $active-bg;
    color: var(--color-text-inverse);
  }
}

@mixin interactive-avatar($scale: scale(1.05), $shadow: var(--shadow-md)) {
  transition: all var(--duration-fast) var(--ease-out);
  
  &:hover {
    transform: $scale;
    box-shadow: $shadow;
    filter: brightness(1.05) saturate(1.1);
  }
  
  &:active {
    transform: scale(1.02);
  }
}

@mixin interactive-table-row($hover-bg: var(--state-hover-bg)) {
  transition: all var(--duration-fast) var(--ease-out);
  
  &:hover {
    background: $hover-bg;
    transform: translateY(calc(var(--space-0-5) * -0.5)); // φ-based subtle lift
    filter: brightness(1.01);
  }
}

@mixin interactive-badge($scale: scale(1.1), $shadow: var(--shadow-sm)) {
  transition: all var(--duration-fast) var(--ease-out);
  
  &:hover {
    transform: $scale;
    box-shadow: $shadow;
    filter: brightness(1.05) saturate(1.1);
  }
  
  &:active {
    transform: scale(1.05);
  }
}

@mixin colored-shadow($color, $opacity: var(--shadow-color-opacity), $size: "0 8px 25px", $fallback: var(--shadow-sm)) {
  box-shadow: #{$size} color-mix(in srgb, #{$color} #{$opacity}, transparent), #{$fallback};
}

@mixin focus-shadow($color: var(--color-primary), $opacity: 15%, $spread: 3px) {
  box-shadow: 0 0 0 #{$spread} color-mix(in srgb, #{$color} #{$opacity}, transparent);
}

@mixin interactive-colored-shadow($color, $base-opacity: var(--shadow-color-opacity), $hover-opacity: 25%) {
  @include colored-shadow($color, $base-opacity);
  
  &:hover {
    @include colored-shadow($color, $hover-opacity, "0 8px 25px", var(--shadow-md));
  }
}

@mixin status-shadow($status: primary) {
  @include colored-shadow(var(--color-#{$status}));
  
  &:hover {
    @include colored-shadow(var(--color-#{$status}), 25%, "0 8px 25px", var(--shadow-md));
  }
}