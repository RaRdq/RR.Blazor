@use '../variables' as *;

@mixin semantic-base($color, $hover: filter) {
  background-color: var(--color-#{$color});
  background-image: var(--gradient-#{$color});
  color: var(--color-text-inverse);
  border: 0;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);
  transition: all var(--duration-fast) var(--ease-out);

  @if $hover == filter {
    &:hover {
      filter: brightness(0.9) saturate(1.1);
      transform: translateY(-0.618px);
    }
  } @else if $hover == color-mix {
    &:hover {
      background: color-mix(in srgb, var(--color-#{$color}) 90%, var(--color-text-inverse));
    }
  }

  &:active {
    transform: scale(0.938);
  }

  &:focus-visible {
    outline: 2px solid var(--color-#{$color});
    outline-offset: 2px;
  }
}

@mixin semantic-outlined($color) {
  background: transparent;
  color: var(--color-#{$color});
  border: 1.618px solid var(--color-#{$color});
  transition: all var(--duration-fast) var(--ease-out);

  &:hover {
    background: color-mix(in srgb, var(--color-#{$color}) 10%, transparent);
  }

  &:active {
    background: color-mix(in srgb, var(--color-#{$color}) 15%, transparent);
    transform: scale(0.969);
  }
}

@mixin semantic-ghost($color, $opacity: 8) {
  background: color-mix(in srgb, var(--color-#{$color}) #{$opacity}%, transparent);
  color: var(--color-#{$color});
  border: 1px solid color-mix(in srgb, var(--color-#{$color}) 20%, transparent);
  transition: all var(--duration-fast) var(--ease-out);

  &:hover {
    background: color-mix(in srgb, var(--color-#{$color}) #{$opacity + 7}%, transparent);
  }

  &:active {
    background: color-mix(in srgb, var(--color-#{$color}) #{$opacity + 12}%, transparent);
  }
}

@mixin semantic-glass($color: null) {
  @extend %glass-base;
  transition: all var(--duration-normal) var(--ease-out);

  &:hover {
    backdrop-filter: blur(12px) saturate(120%);
    -webkit-backdrop-filter: blur(12px) saturate(120%);
    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.2);
  }
}

@mixin glass-gradient($color: primary, $intensity: medium) {
  @extend %glass-base;

  @if $intensity == light {
    background: linear-gradient(135deg,
      color-mix(in srgb, var(--color-#{$color}) 8%, transparent) 0%,
      color-mix(in srgb, var(--color-#{$color}) 3%, transparent) 100%
    );
    backdrop-filter: blur(12px) saturate(120%) brightness(1.05);
    -webkit-backdrop-filter: blur(12px) saturate(120%) brightness(1.05);
  } @else if $intensity == medium {
    background: linear-gradient(135deg,
      color-mix(in srgb, var(--color-#{$color}) 12%, transparent) 0%,
      color-mix(in srgb, var(--color-#{$color}) 5%, transparent) 100%
    );
    backdrop-filter: blur(16px) saturate(130%) brightness(1.1);
    -webkit-backdrop-filter: blur(16px) saturate(130%) brightness(1.1);
  } @else if $intensity == heavy {
    background: linear-gradient(135deg,
      color-mix(in srgb, var(--color-#{$color}) 15%, transparent) 0%,
      color-mix(in srgb, var(--color-#{$color}) 8%, transparent) 100%
    );
    backdrop-filter: blur(20px) saturate(140%) brightness(1.15);
    -webkit-backdrop-filter: blur(20px) saturate(140%) brightness(1.15);
  }

  border: 1px solid var(--glass-border-light);
  color: var(--color-text);
  transition: all var(--duration-normal) var(--ease-out);

  .card-title, h1, h2, h3, h4, h5, h6 {
    color: var(--color-text);
    text-shadow: var(--text-shadow-sm);
  }

  .card-body, .modal-body, .dropdown-content {
    color: var(--color-text-muted);
  }

  &:hover {
    @if $intensity == light {
      backdrop-filter: blur(16px) saturate(130%) brightness(1.1);
      -webkit-backdrop-filter: blur(16px) saturate(130%) brightness(1.1);
    } @else if $intensity == medium {
      backdrop-filter: blur(20px) saturate(140%) brightness(1.15);
      -webkit-backdrop-filter: blur(20px) saturate(140%) brightness(1.15);
    } @else if $intensity == heavy {
      backdrop-filter: blur(24px) saturate(150%) brightness(1.2);
      -webkit-backdrop-filter: blur(24px) saturate(150%) brightness(1.2);
    }
    transform: translateY(-2px);
    box-shadow: 0 12px 40px 0 rgba(31, 38, 135, 0.3);
  }
}

@mixin solid-gradient($color: primary) {
  background: var(--gradient-#{$color}, var(--color-#{$color}));
  color: var(--color-text-inverse);
  border: 1px solid rgba(255, 255, 255, 0.3);
  transition: all var(--duration-normal) var(--ease-out);

  .card-title, h1, h2, h3, h4, h5, h6 {
    color: var(--color-text-inverse);
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
  }

  &:hover {
    filter: brightness(1.1) saturate(1.1);
    transform: translateY(-1px);
    box-shadow: 0 8px 25px 0 rgba(31, 38, 135, 0.25);
  }
}

@mixin semantic-variants($colors: (primary, success, warning, error, info), $styles: (filled)) {
  @each $color in $colors {
    @each $style in $styles {
      @if $style == filled or $style == solid {
        &-#{$color} {
          @include semantic-base($color);
        }
      } @else {
        &-#{$style}-#{$color} {
          @if $style == outlined {
            @include semantic-outlined($color);
          } @else if $style == ghost {
            @include semantic-ghost($color);
          } @else if $style == glass {
            @include semantic-glass($color);
          }
        }
      }
    }
  }
}

@mixin semantic-status($color, $status) {
  @if $status == loading {
    @include semantic-base($color, none);
    position: relative;
    pointer-events: none;

> * {
      opacity: 0 !important;
    }

    &::after {
      content: '';
      @include absolute-center;
      width: 1em;
      height: 1em;
      margin: -0.5em 0 0 -0.5em;
      border: 2px solid var(--color-text-inverse);
      border-color: var(--color-text-inverse) transparent var(--color-text-inverse) transparent;
      border-radius: 50%;
      opacity: 0.9;
      animation: spin 0.8s linear infinite;
      z-index: var(--z-base);
    }
  } @else if $status == disabled {
    @include semantic-base($color, none);
    opacity: 0.6;
    pointer-events: none;
    cursor: not-allowed;
  }
}
